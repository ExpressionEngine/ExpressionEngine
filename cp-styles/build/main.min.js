(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    var val = aliases[name];
    return (val && name !== val) ? expandAlias(val) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
require.register("cp-styles/app/ee-lang.js", function(exports, require, module) {
"use strict";

/*!
 * This source file is part of the open source project
 * ExpressionEngine User Guide (https://github.com/ExpressionEngine/ExpressionEngine-User-Guide)
 *
 * @link      https://expressionengine.com/
 * @copyright Copyright (c) 2003-2023, Packet Tide, LLC (https://www.packettide.com)
 * @license   https://expressionengine.com/license Licensed under Apache License, Version 2.0
 */
module.exports = function (hljs) {
  var ATTR_ASSIGNMENT = {
    illegal: /\}/,
    begin: /[a-zA-Z0-9_]+=/,
    returnBegin: true,
    relevance: 0,
    contains: [{
      className: 'attr',
      begin: /[a-zA-Z0-9_]+/
    }]
  };
  return {
    aliases: ['expressionengine', 'eecms'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [hljs.COMMENT('{!--', '--}'), {
      className: 'template-tag',
      begin: /{\/?/,
      end: /}/,
      contains: [hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, ATTR_ASSIGNMENT, hljs.NUMBER_MODE, {
        className: 'name',
        begin: /[a-zA-Z][a-zA-Z:\.\-_0-9]+/,
        lexemes: '[a-zA-Z][a-zA-Z0-9_:]*',
        relevance: 0,
        keywords: {
          keyword: 'if if:else if:elseif'
        },
        starts: {
          endsWithParent: true,
          relevance: 0,
          keywords: {
            keyword: 'and or xor',
            literal: 'false true null'
          },
          contains: [hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, ATTR_ASSIGNMENT, hljs.NUMBER_MODE]
        }
      }]
    }]
  };
};

});

require.register("cp-styles/app/main.js", function(exports, require, module) {
"use strict";

$('body').on('click', 'a.toggle-btn', function (e) {
  if ($(this).hasClass('disabled')) {
    //||
    // $(this).parents('.toggle-tools').size() > 0 ||
    // $(this).parents('[data-reactroot]').size() > 0) {
    return;
  }

  var input = $(this).find('input[type="hidden"]'),
      yes_no = $(this).hasClass('yes_no'),
      onOff = $(this).hasClass('off') ? 'on' : 'off',
      trueFalse = $(this).hasClass('off') ? 'true' : 'false';

  if ($(this).hasClass('off')) {
    $(this).removeClass('off');
    $(this).addClass('on');
    $(input).val(yes_no ? 'y' : 1);
  } else {
    $(this).removeClass('on');
    $(this).addClass('off');
    $(input).val(yes_no ? 'n' : 0);
  }

  $(this).attr('alt', onOff);
  $(this).attr('data-state', onOff);
  $(this).attr('aria-checked', trueFalse);
  if ($(input).data('groupToggle')) EE.cp.form_group_toggle(input);
  e.preventDefault();
});

});

require.register("cp-styles/app/main.ts", function(exports, require, module) {
"use strict";
console.log('INIT');
$('body').on('click', '.main-nav__account-icon, .account-menu__icon', function () {
    $('.account-menu').toggle();
    console.log('fafa');
});
$('.js-dark-theme-toggle').on('click', function (e) {
    e.preventDefault();
    toggleDarkTheme(e);
});
var isChangingTheme = false;
function toggleDarkTheme(event) {
    if (event === void 0) { event = null; }
    if (isChangingTheme) {
        return;
    }
    isChangingTheme = true;
    setTimeout(function () {
        isChangingTheme = false;
    }, 1000);
    document.documentElement.classList.add('color-theme-in-transition');
    window.setTimeout(function () {
        document.documentElement.classList.remove('color-theme-in-transition');
    }, 1000);
    var newTheme = document.body.dataset.theme == 'dark' ? 'light' : 'dark';
    document.body.dataset.theme = newTheme;
    localStorage.setItem('theme', newTheme);
    if (event) {
        $('.theme-switch-circle').addClass('animate');
        $('.theme-switch-circle').css({ top: event.pageY, left: event.pageX });
        setTimeout(function () {
            $('.theme-switch-circle').removeClass('animate');
        }, 1000);
    }
}
var $$ = function (selector, context) {
    if (context === void 0) { context = document; }
    return context.querySelectorAll(selector);
};
function updateMainSidebar() {
    if (window.innerWidth < 900) {
        $('.ee-wrapper').addClass('sidebar-hidden-no-anim is-mobile');
        $('.main-nav__mobile-menu').removeClass('hidden');
    }
    else {
        $('.ee-wrapper').removeClass('sidebar-hidden-no-anim sidebar-hidden is-mobile');
        $('.main-nav__mobile-menu').addClass('hidden');
    }
    if ($('.ee-sidebar').hasClass('ee-sidebar__collapsed')) {
        $('.ee-wrapper').addClass('sidebar-hidden__collapsed');
    }
}
window.addEventListener('resize', function () { updateMainSidebar(); });
updateMainSidebar();
$('.js-toggle-main-sidebar').on('click', function () {
    var isHidden = $('.ee-wrapper').hasClass('sidebar-hidden-no-anim');
    $('.ee-wrapper').removeClass('sidebar-hidden-no-anim');
    if (isHidden) {
        $('.ee-wrapper').removeClass('sidebar-hidden');
    }
    else {
        $('.ee-wrapper').toggleClass('sidebar-hidden');
    }
});
document.addEventListener('keydown', function (event) {
    if (event.keyCode == 68) {
        toggleDarkTheme();
    }
});
$('body').on('click', 'a.toggle-btn', function (e) {
    if ($(this).hasClass('disabled')) {
        return;
    }
    var input = $(this).find('input[type="hidden"]'), yes_no = $(this).hasClass('yes_no'), onOff = $(this).hasClass('off') ? 'on' : 'off', trueFalse = $(this).hasClass('off') ? 'true' : 'false';
    if ($(this).hasClass('off')) {
        $(this).removeClass('off');
        $(this).addClass('on');
        $(input).val(yes_no ? 'y' : 1);
    }
    else {
        $(this).removeClass('on');
        $(this).addClass('off');
        $(input).val(yes_no ? 'n' : 0);
    }
    $(this).attr('alt', onOff);
    $(this).attr('data-state', onOff);
    $(this).attr('aria-checked', trueFalse);
    if ($(input).data('groupToggle'))
        EE.cp.form_group_toggle(input);
    e.preventDefault();
});


});

require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');

