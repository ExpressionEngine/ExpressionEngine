{"version":3,"sources":["redactor.js","alignment/alignment.js","counter/counter.js","filebrowser/filebrowser.js","fontcolor/fontcolor.js","fullscreen/fullscreen.js","inlinestyle/inlinestyle.js","limiter/limiter.js","pages/pages.js","properties/properties.js","readmore/readmore.js","rte_definedlinks/rte_definedlinks.js","specialchars/specialchars.js","table/table.js","textdirection/textdirection.js","textexpander/textexpander.js","video/video.js","widget/widget.js","redactor.min.js"],"names":["CodeMirror","undefined","jQuery","Ajax","settings","post","options","AjaxRequest","get","request","method","defaults","url","before","success","error","data","async","headers","this","p","extend","toUpperCase","prepareData","xhr","XMLHttpRequest","open","setHeaders","send","prototype","obj1","obj2","name","indexOf","isFormData","toParams","setRequestHeader","window","FormData","isComplete","status","onload","loaded","bind","call","response","parseResponse","json","parseJson","str","o","JSON","parse","e","obj","Object","keys","map","k","encodeURIComponent","join","DomCache","DomExpando","Date","getTime","DomHClass","DomHMClass","Dom","selector","context","ready","fn","document","readyState","addEventListener","sdom","length","nodes","reHtmlTest","nodeType","childNodes","test","create","_query","_slice","html","createElement","RegExp","$1","elements","container","children","innerHTML","i","l","push","add","concat","_toArray","index","getAll","eq","first","last","contents","each","callback","len","is","filter","node","Node","matches","msMatchesSelector","webkitMatchesSelector","not","find","ns","parent","parentNode","parents","_getContext","closest","isNode","next","_getSibling","nextElement","prev","prevElement","css","value","_getHeightOrWidth","getComputedStyle","key","style","attr","checked","_getBooleanFromStr","getAttribute","setAttribute","reDataAttr","attrs","attributes","replacer","g","nodeName","dataName","match","val","replace","_isObjectString","_toObject","_isNumber","parseFloat","el","type","removeAttr","rmAttr","removeAttribute","split","forEach","removeData","rmData","dataset","dataindex","dataget","cacheIndex","nextCacheIndex","addClass","_eachClass","removeClass","toggleClass","hasClass","some","classList","contains","empty","append","text","textContent","after","_inject","frag","insertAdjacentHTML","reverse","s","insertBefore","nextSibling","elms","appendChild","prepend","firstChild","wrap","wrapper","unwrap","$node","replaceWith","docFrag","createDocumentFragment","result","replaceChild","remove","removeChild","clone","events","copy","_clone","_cloneEvents","show","_hasDisplayNone","target","isHidden","isHiddenMobile","display","hide","scrollTop","isWindow","isDocument","scrollingElement","body","documentElement","scrollTo","pageYOffset","offset","_getDim","position","width","adjust","_getSize","height","outerWidth","_getInnerOrOuter","outerHeight","innerWidth","innerHeight","click","_triggerEvent","focus","trigger","names","ev","opts","bubbles","cancelable","CustomEvent","createEvent","initCustomEvent","dispatchEvent","on","handler","one","event","_getEventName","namespace","_getEventNamespace","_getOneHandler","_e","off","testEvent","testNamespace","testEventNamespace","testPositive","_offEvent","serialize","asObject","disabled","z","opt","selected","_toParams","ajax","_queryContext","querySelectorAll","element","getElementById","slice","getElementsByClassName","getElementsByTagName","querySelector","res","_events","cloneNode","setClass","self","apply","arguments","arr","condition","handlers","toString","removeEventListener","splice","_getDocSize","Math","max","captype","round","_adjustResultHeightOrWidth","charAt","$el","$targets","fixStyle","tmp","thisStyle","fix","isBorderBox","boxSizing","borderTopWidth","borderBottomWidth","marginTop","marginBottom","borderLeftWidth","borderRightWidth","marginLeft","marginRight","top","left","_getPosition","offsetTop","offsetLeft","_getOffset","rect","getBoundingClientRect","doc","ownerDocument","docElem","win","defaultView","clientTop","pageXOffset","clientLeft","sibling","NodeList","params","_encodeUri","Function","isNaN","search","currentStyle","uuid","$R","RedactorApp","app","version","modules","services","classes","plugins","mixins","modals","lang","dom","keycodes","BACKSPACE","DELETE","UP","DOWN","ENTER","SPACE","ESC","TAB","CTRL","META","SHIFT","ALT","RIGHT","LEFT","env","plugin","module","service","class","mixin","$","redactor","toArray","args","instance","Array","isArray","isApi","App","isDestroy","methodValue","unshift","api","translations","F","inherit","addLang","init","current","f","prop","__lookupGetter__","__defineGetter__","exception","extended","deep","merge","hasOwnProperty","animation","direction","spellcheck","structure","scrollTarget","styles","stylesClass","placeholder","source","showSource","inline","breakline","markup","enterKey","clickToEdit","clickToSave","clickToCancel","focusEnd","minHeight","maxHeight","maxWidth","callbacks","preClass","preSpaces","tabindex","tabAsSpaces","tabKey","autosave","autosaveName","autosaveData","autosaveMethod","toolbar","toolbarFixed","toolbarFixedTarget","toolbarFixedTopOffset","toolbarExternal","toolbarContext","air","formatting","formattingAdd","formattingHide","buttons","buttonsTextLabeled","buttonsAdd","buttonsAddFirst","buttonsAddAfter","buttonsAddBefore","buttonsHide","buttonsHideOnMobile","imageUpload","imageUploadParam","imageData","imageEditable","imageCaption","imageLink","imagePosition","imageResizable","imageFloatMargin","imageFigure","imageObserve","imageSrcData","fileUpload","fileUploadParam","fileData","fileAttachment","uploadData","dragUpload","multipleUpload","clipboardUpload","uploadBase64","linkTarget","linkTitle","linkNewTab","linkNofollow","linkSize","linkValidation","cleanOnEnter","cleanInlineOnEnter","paragraphize","removeScript","removeNewLines","removeComments","replaceTags","b","strike","pastePlainText","pasteLinkTarget","pasteImages","pasteLinks","pasteClean","pasteKeepStyle","pasteKeepClass","pasteKeepAttrs","pasteBlockTags","pasteInlineTags","activeButtons","strong","em","del","u","activeButtonsAdd","activeButtonsObservers","autoparse","autoparseStart","autoparsePaste","autoparseLinks","autoparseImages","autoparseVideo","autoparseHttps","shortcodes","p.","format","quote.","pre.","h1.","h2.","h3.","h4.","h5.","h6.","*.","shortcodesAdd","shortcuts","ctrl+shift+m, meta+shift+m","ctrl+b, meta+b","ctrl+i, meta+i","ctrl+u, meta+u","ctrl+h, meta+h","ctrl+l, meta+l","ctrl+k, meta+k","ctrl+alt+0, meta+alt+0","ctrl+alt+1, meta+alt+1","ctrl+alt+2, meta+alt+2","ctrl+alt+3, meta+alt+3","ctrl+alt+4, meta+alt+4","ctrl+alt+5, meta+alt+5","ctrl+alt+6, meta+alt+6","ctrl+shift+7, meta+shift+7","ctrl+shift+8, meta+shift+8","shortcutsAdd","grammarly","notranslate","bufferLimit","emptyHtml","markerChar","imageTypes","imageAttrs","inlineTags","blockTags","regex","youtube","vimeo","imageurl","aurl1","aurl2","input","zindex","modes","original","image","file","link","bold","italic","deleted","underline","superscript","subscript","bold-abbr","italic-abbr","deleted-abbr","underline-abbr","superscript-abbr","subscript-abbr","lists","link-insert","link-edit","link-in-new-tab","unlink","cancel","close","insert","save","delete","edit","title","paragraph","quote","code","heading1","heading2","heading3","heading4","heading5","heading6","filename","optional","unorderedlist","orderedlist","outdent","indent","horizontalrule","upload","upload-label","accessibility-help-label","caption","bulletslist","numberslist","image-position","none","right","center","undo","redo","icon","dropdown","tag","blockquote","pre","h1","h2","h3","h4","h5","h6","tooltip","sup","sub","observe","ul","ol","line","instances","started","stopped","rootElement","rootOpts","dragInside","dragComponentInside","$win","$doc","$body","editorReadOnly","buildServices","buildModules","buildPlugins","start","broadcast","stop","isStarted","isStopped","core","bindable","inj","isDragInside","setDragInside","isDragComponentInside","setDragComponentInside","getDragComponentInside","isReadOnly","enableReadOnly","component","clearActive","disableButtons","disableReadOnly","enableButtons","callMessageHandler","func","utils","checkProperty","returned","moduleName","cval","isApp","isCallback","isService","isPlugin","isModule","callInstanceMethod","isInstanceExists","Error","buildArgs","applyArgs","selection","_clearAll","clearClass","tags","$elements","getElements","_unwrapSpanWithoutAttr","restore","clearStyle","clearAttr","_removeAllAttr","set","toggle","className","newVal","oldVal","isRgb","rgb2hex","hex2long","compareNew","toLowerCase","compareOld","_convertStyleQuotes","removeEmptyAttr","nodeAttr","removeAttributeNode","finalNodes","tagName","cmnt","vars","_build","rebuild","_set","_loop","path","animationOpt","duration","iterate","delay","timing","prefix","AnimatePlay","effect","hidableEffects","prefixes","buildAnimationOff","isInanimate","inanimate","animate","isHidable","buildHideClass","isAnimated","setTimeout","complete","clean","setStart","_setCaret","setEnd","setBefore","setAfter","isStart","_isStartOrEnd","isEnd","setAtEnd","inspector","getTag","range","createRange","_isInPage","textNode","createInvisibleChar","selectNodeContents","collapse","setRange","setAtStart","isInline","insertNode","setAtBefore","setStartBefore","setAtAfter","setStartAfter","setAtPrev","previousSibling","_isEmptyTextNode","previousElementSibling","setAtNext","nextElementSibling","getNode","_setStart","isText","editor","findFirstNode","item","getFirstElement","dataItem","isComponent","getComponent","isComponentType","isFigcaption","findLastNode","table","getTable","tableData","setActive","_setInline","_setEnd","getLastElement","isEmpty","_setBefore","isFirstTableCell","isFirstListItem","getList","isBlock","_setAfter","isLastTableCell","_hasInlineChild","_getStartEndNode","trimSpaces","isComponentEditable","end","size","pos","getFirstNode","getLastNode","isInlineTag","trim","removeInvisibleChars","getFigcaption","isTable","isList","containsNode","getSelection","containsNodePolyfill","anchorNode","finalnode","focusNode","rectSelection","getRangeAt","rectBlock","Selection","sel","getElement","isCollapsed","getRange","isBackwards","backwards","anchorOffset","focusOffset","collapsed","detach","isIn","getCurrent","block","getBlock","blocks","getBlocks","isTableCellTag","isAll","isEditor","isNonEditable","isActive","$editor","output","htmlLen","getHtml","outputLen","getText","hasNonEditable","$wrapper","removeAllRanges","addRange","setAll","saveScroll","disableNonEditables","marker","build","restoreMarkers","getComponentCodeElement","enableNonEditables","restoreScroll","rangeCount","getTextBeforeCaret","num","cloneRange","getTextAfterCaret","clonedRange","endContainer","endOffset","getPosition","startOffset","startContainer","bottom","getActive","getParent","isElement","isInEditor","getInline","_isInlineNode","getInlineFirst","getInlineAll","inlines","isBlockTag","getInlinesAllSelected","getInlines","all","inside","_isTextSelected","_filterNodesByTags","getNodes","filteredNodes","_isInNodesArray","_filterInlinesInside","_filterBlocksFirst","textnodes","activeComponent","_getNodesComponent","_getRangeSelectedNodes","_filterServicesNodes","_filterEditor","_filterNodesTexts","_filterNodesElements","cloneContents","cleaner","clear","collapseToStart","collapseToEnd","saveActiveComponent","savedComponent","restoreActiveComponent","_clearSaved","saved","savedElement","caret","saveMarkers","_getNextNode","hasChildNodes","startNode","endNode","getChildNodes","commonAncestorContainer","skip","keepbr","passtexts","nodeTag","isFirst","isCellParent","escapeRegExp","$element","_buildType","isType","getType","scrolltop","pasting","isFocus","_isContenteditableFocus","startFocus","endFocus","isPasting","enablePasting","disablePasting","_getScrollTarget","scrolltopin","$noneditables","isSourceMode","$source","keeplists","isEmptyHtml","$active","activeElement","isComponentSelected","setEmpty","editableElement","$target","$blockParent","$container","content","_buildName","_buildStartedContent","getCode","getName","getStartedContent","setCode","insertion","isNameGenerated","rebuildStartedContent","isTextarea","sourceElement","$statusbar","items","update","$item","getItems","removeItems","dropdownOpened","buttonsObservers","_extendActiveButtons","stopObservers","$toolbar","setButtonsInactive","button","observer","getButton","currents","_inlinesToTags","detector","isMobile","isAir","isFixed","isContextBar","$bar","isTarget","getWrapper","getDropdown","getTargetElement","$btn","_findButton","getButtons","_findButtons","getButtonsKeys","addButton","btnObj","$button","$btns","addButtonFirst","addButtonAfter","addButtonBefore","addButtonObserver","setButtons","setDropdown","$buttons","setInactive","setButtonsActive","disable","enable","_init","isDisabled","hasIcon","message","setMessage","setApi","setTitle","alt","aria-label","setTooltip","setIcon","$icon","_buildTooltip","hideTooltip","preventDefault","_parseTitle","_parseTooltip","_buildCallback","_buildAttributes","_buildObserver","_buildIcon","href","rel","role","isHtml","isDesktop","created","arrowOffset","$items","isOpened","$dropdown","getItem","getItemsByClass","classname","_closeAll","_observe","_handleKeyboard","updatePosition","_isButton","_close","btnHeight","btnWidth","topOffset","leftOffset","winWidth","leftFix","leftPos","heightTolerance","winHeight","cropHeight","isDom","_buildDom","_buildItems","_buildFormattingItems","which","$span","getTitle","storedComponents","storedComments","storedImages","storedLinks","deniedTags","convertRules","unconvertRules","reComments","reSpacedEmpty","reScriptTag","addConvertRules","addUnconvertRules","storeComments","encodeCode","buildWrapper","src","imageattrs","removeAttrs","removeDataSrc","getWrapperHtml","converter","convert","storeComponents","_setSpanAttr","_setStyleCache","removeTags","_removeScriptTag","_replaceScriptTag","_isSpacedEmpty","restoreComponents","_cleanWrapped","restoreComments","removeMarkers","removeInvisibleSpaces","_isParagraphEmpty","removeServiceTagsAndAttrs","removeSpanWithoutAttributes","removeFirstBlockBreaklineInHtml","_unreplaceScriptTag","_setPreClass","_setLinkNofollow","cleanNewLines","unconvert","removeEmptyAttributes","cleanSpacesInPre","tidy","paste","isMsWord","_isHtmlMsWord","_cleanGDocs","_cleanMsWord","lastChild","exceptedTags","removeTagsExcept","$elms","filterStyle","filterClass","filterAttrs","$li","storeLinks","storeImages","getPlainText","_replaceNlToBr","restoreLinks","restoreImages","comments","getFlatText","$div","innerText","replaceToTag","replaceNbspToSpaces","replaceBlocksToBr","removeNl","removeBrAtEnd","denied","re","$0","except","encodeHtml","encodeEntities","encodeAttrSings","_encodeCode","decodeAttrSings","_encodeNode","encoded","decodeEntities","_encodeNodeHtml","encodePhpCode","String","matched","getElementsFromHtml","_storeMatched","_restoreMatched","spaces","floor","$parent","exec","parseInt","_parseWordLists","hasAttribute","lines","space","lastLevel","$list","$listChild","level","txt","listTag","stored","rules","_convertImage","_convertLine","_convertIframe","_convertTable","_convertForm","_convertCode","_convertWidget","_setContenteditableCode","isIe","_acceptExtraRules","_unconvertWidget","_unconvertForm","_unconvertTable","_unconvertImages","_removeTypes","_unconvertBreakTag","_isNonEditable","getRandomId","$link","$figure","isImage","_setFigure","_wrapFigure","isVideo","encodeURI","$next","decodeURI","hasFigcaption","hasStyle","removed","$code","remStart","remEnd","paragraphizeTags","_isConverted","_convert","tablemarkup","_storeTags","_trimLinks","_restoreTags","_convertCell","replacement","createTextNode","outerHTML","_trimLink","_isDisabled","_isEmptyHtml","userAgent","navigator","isWebkit","isFirefox","v","documentMode","ie","isIpad","trimmed","$startNode","_getString","_setComponentOffset","charIndex","nodeStack","foundStart","pop","nextCharIndex","_isFigcaptionNext","nodeValue","_extendTags","_isTag","isHeadingTag","$component","getComponentType","isComponentActive","types","isPre","getPre","isCode","_getLastOrFirstListItem","isLastListItem","_getLastOrFirstTableCell","isHeading","getHeading","isBlockquote","getBlockquote","isDl","getDl","isParagraph","getParagraph","isLink","getLink","isFile","getFile","hasParent","_getClosestNode","getParentList","_getClosestUpNode","getListItem","getTableCell","$td","getImageElement","_getClosestElement","list","id","_getPos","buildHtml","side","atStart","cloned","setEndBefore","$context","$marker","_restoreInject","activeClass","findSiblings","cell","_find","$caret","_buildCaret","setOnEvent","contextmenu","executeScripts","scripts","$script","instgrm","Embeds","process","head","fragment","isFragment","createFragment","_collapseSelection","_insertFragment","_sendNodes","insertBreakLine","insertNewline","insertText","insertHtml","insertChar","charhtml","insertRaw","insertToEnd","lastNode","$lastNode","$newNode","insertPoint","markerInserted","x","clientX","y","clientY","caretPositionFromPoint","offsetNode","caretRangeFromPoint","insertToPoint","point","pointInserted","insertToOffset","parsedInput","parseHtml","_insertToAllSelected","dataCurrent","_getCleanedInput","isFigure","_isFigure","isComponentSpan","_isComponentSpan","isInsertedText","_insertToEmptyEditor","_insertToWidget","_insertToInline","splitNode","_insertToCode","_insertToPre","_isPlainHtml","deleteContents","_hasBlocksAndImages","_containsTags","_buildList","insertedHtml","dataInserted","normalizeTextNodes","isLastInline","_isLastInline","ucfirst","isPreformatted","_getContainer","createTmpContainer","parentListTag","_hasFigureOrTable","_hasBlocks","_isHtmlString","_format","_apply","clearFormat","_clear","_getBlocks","_isToggleFormatType","replacedTag","_getReplacedTag","_replaceBlocks","_buildNodes","_restoreSelection","_getElements","finalBlocks","_isStandardParagraph","_isStandardDiv","_isBreaklineBlock","count","_isCurrentBlockOneAndEmpty","_applyArgs","_combinePre","_cleanBlocks","combinedNodes","$current","newline","headings","_cleanEmptyClass","_cleanEmptyStyle","keepStyleAndClass","keepAttrs","_isFormat","arrangeTag","formatCollapsed","formatUncollapsed","replaced","$secondPart","extractedContent","$inline","dataInline","hasSameArgs","insertInline","extractHtmlFromCaret","cloneAttributes","$breaked","$last","same","nodeAttrValue","origRules","styleToObj","innerCount","ruleName","ruleValue","_convertTags","_convertToStrike","execCommand","_clearDecoration","_revertToInlines","_clearEmptyStyle","_normalizeBlocks","_revertTags","_replaceToStrike","_forceRemoveClass","removeFromArrayByValue","textDecoration","textDecorationLine","_clearEmptyStyleAttr","$objects","$object","_isKey","reTags","imagesMatches","iframeStart","iframeEnd","https","$video","_formatLinks","_restoreReplaced","enter","isNotFormatted","_convertToRegExp","$img","setSrc","$cloned","protocol","classstr","_subLinkText","substring","decodeURIComponent","observeImages","$images","_addImage","observeFiles","$files","_addFile","setStatus","getChanges","searchInvisibleChars","trimInvisibleChars","isSpace","firstNode","n","div","extractContents","createMarkup","createMarkupBefore","exclude","elems","mapping","thisArg","newArr","recursive","nestedNodes","getChildElements","_getFirst","_getLast","$replaced","ax","a","elFrom","elTo","rule","extendData","serializedData","_setData","normalize","rgb","possible","random","$box","_is","_destroy","onstart","_startStop","onstop","onenable","ondisable","_buildModes","_buildMarkup","_redefineOptions","_isRootOption","autoparser","onenablefocus","_enableFocus","oncontextmenu","onclick","onkeyup","onenablereadonly","_enableReadOnly","ondisablereadonly","_disableReadOnly","onautoparseobserve","onplaceholder","_buildPlaceholder","_togglePlacehodler","_buildEvents","_buildOptions","_buildAccesibility","classesEditor","classesContainer","_destroyEvents","contenteditable","_disableBrowsersEditing","max-width","margin","aria-labelledby","_enableFocusSource","_enableFocusEditor","setSelectionRange","attachEvent","returnValue","destroy","_getEditables","blurNamespace","eventsList","isFocused","isBlured","blur","targets","stopBlur","cut","_passSelectionToClipboard","drop","originalEvent","stopPropagation","_removeOverClass","$dragComponent","dt","dataTransfer","getData","dragenter","dragstart","_setDragData","dragover","dragleave","detail","pad","posHeight","pageY","keydown","keyup","mouseup","touchstart","_passAllToClipboard","clipboard","clipboardData","setData","effectAllowed","$label","aria-hidden","syncedHtml","onstartcode","sourceContent","startContent","syncContent","onstartcodeshow","ontrytosync","sync","onhardsync","_syncing","_buildClasses","editorHeight","_onChangedSource","_onTabKey","_onFocus","codemirror","codemirrorSrc","fromTextArea","setSize","cm","changeObj","_disableButtons","_setActiveSourceButton","getValue","toTextArea","_enableButtons","_setInactiveSourceButton","_isSync","timeout","clearTimeout","keyCode","selectionStart","selectionEnd","observerUnit","MutationObserver","subtree","childList","characterData","characterDataOldValue","disconnect","mutations","mutation","onstartclicktoedit","_isEnabled","buttonSave","buttonCancel","_setFocus","objected","enabled","statusbar","oncontextbar","$contextbar","_buildPosition","barWidth","barHeight","docScrollTop","targetOffset","topFix","_buildTitle","_buildMessage","_toggle","toolbarModule","onsource","resetPosition","opened","createSourceHelper","destroySourceHelper","closed","openSelected","ontoolbar","removeexternal","onobserve","onfocus","_setExternalOnFocus","onsourcefocus","onempty","_buildButtons","_initToolbar","_initButtons","_buildImageButton","_buildFileButton","_buildSourceButton","_buildAdditionalButtons","_buildHiddenButtons","imageManagerJson","_removeExistButtons","btns","setExternal","clicks","$airHelper","_isSelection","_open","_openCmd","_isOpened","dataTarget","isModalTarget","isButtonCall","isDropdownCall","_doOpen","containerOffset","toolbarWidth","selPos","$fixedTarget","reset","_doFixed","isHeight","toolbarHeight","toleranceEnd","boxOffset","boxEnd","scrollOffset","bs","bsFix","fixedScrollTimeout","isExternalMultiple","_findToolbars","$toolbars","$external","_buildExternal","_buildFixed","_initExternal","_hideToolbarsExceptFirst","$first","contextbar","_buildWrapper","_buildElement","_initWrapper","data-redactor-type","isCurrentLink","currentText","onmodal","$modal","$form","_setFormData","_setFormFocus","_validateData","_update","_insert","_unlink","onbutton","_observeButton","ondropdown","_observeUnlink","_observeEdit","_getCurrent","$point","_truncateText","_buildCurrent","_getModalData","links","_getLinks","_resetCurrent","_setLinkData","_insertSingle","_removeInSelection","_insertMultiple","$clonedLink","_isCurrentTextChanged","_deleteContents","textContext","isTextChanged","linkData","parsed","commands","_isLink","modalData","handle","currentLink","setError","getField","reUrl","_get","_get_target","_get_url","_get_title","_get_text","_findDeepestChild","_set_target","_set_text","_escapeHtml","_set_title","_set_url","_cleanUrl","_isMailto","_isUrl","depth","child","childResult","selectionMarkers","$overlay","resize","setWidth","_buildDefaults","_openUrl","_openTemplate","template","_createModal","_buildModalBox","_buildOverlay","_buildModal","_buildModalForm","_buildModalCommands","_broadcast","_buildModalTabs","_opened","_handleEscape","getBody","_handleEnter","_needToClose","_closed","$modalForm","setHeight","$footer","getFooter","_handleCommand","$tabs","_showTab","getForm","isCloseNode","command","getHeader","$modalHeader","$modalBody","$modalFooter","margin-left","windowHeight","$modalClose","_buildClose","_buildHeader","_buildBody","_buildFooter","_buildTemplate","_getFieldEventName","_clearError","clearformat","clearstyle","clearclass","clearattr","onsynced","_send","_complete","lastShiftKey","onpaste","onkeydown","shortcut","ctrlKey","metaKey","altKey","_selectAll","arrowKeys","isKeys","isArrowKeys","isXKey","isAlphaKeys","shiftKey","_isArrowKey","_isDeleteKey","shortcode","_isRightLeftKey","_isExitVariable","_isRightDownKey","_isExitOnDownRight","_selectComponent","_isLeftUpKey","_isExitOnUpLeft","_exitPrevElement","isEndEditor","_exitNextElement","isNext","siblingBlock","_selectComponentItem","_removeActiveComponent","_removeAllSelectedTable","_detectVariableOrNonEditable","_traverseBackspace","_traverseDelete","_removeUnwantedStyles","_removeEmptySpans","_removeSpanTagsInHeadings","_removeInlineTagsInPre","isBlockStart","isBlockEnd","isCurrentStart","isCurrentEnd","isCurrentStartSpace","isCurrentEndSpace","_isVariable","_getBlock","dataNext","isNextBlock","$currentList","$lists","$prev","_replaceBlock","dataPrev","isPrevBlock","$newnode","$block","_isNeedToReplaceBlock","$tags","_disable","_insertBreak","_isExit","_traverse","$newBlock","isParagraphExit","_isExitableBlock","isBreaklineExit","_isExitableDblBreak","_exitFromElement","blockTag","$variable","_traverseDl","nextDd","nextDt","dd","_clearBlock","_isNeedToCleanBlockStyle","pasteHtml","dropPasted","isRawCode","_isPlainText","files","getAsFile","_insertFiles","isClipboard","worked","hotkeys","8","9","10","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","59","61","96","97","98","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","144","145","173","186","187","188","189","190","191","192","219","220","221","222","hotkeysShiftNums","`","1","2","3","4","5","6","7","0","-","=",";","'",",",".","/","\\","_handler","special","character","fromCharCode","modif","cmdKeys","specialKey","_insertHardTab","_tabCode","progress","paramName","_buildInput","_buildBox","$uploadbox","box","_onDropBox","_onDragOver","_onDragLeave","$placeholder","_onChange","_onClick","_onDrop","_setStatusDrop","_setStatusHover","_removeStatusHover","_setStatusError","_setStatusSuccess","_getUploadParam","_buildData","_sendData","Promise","$pre","_initElement","onform","_remove","imageedit","storage","justResized","oninsert","_observeImages","onstarted","resizer","ondropimage","onbottomclick","onimageresizer","onupload","_uploadError","_change","imagedrop","imagereplace","_setUpload","$image","_save","onimage","resized","_isImage","multiple","_createImageAndStore","inserted","_removeSpaceBeforeFigure","$inserted","img","_removeInvisibleSpace","align","modal","changeImage","$previewBox","_setReplaceUpload","_buildPreview","_buildPreviewUpload","$tab","$preview","$previewImg","$desc","_set_src","_set_id","_set_caption","$figcaption","_set_align","imageFloat","imageMargin","textAlign","positions","alignClass","float","margin-right","text-align","_set_link","_findLink","_get_src","_get_id","_get_caption","_get_align","_get_link","_setResizerPosition","$resizableBox","$resizableImage","$resizer","offsetFix","resizerWidth","resizerHeight","resizeHandle","pageX","ratio","h","targetTouches","_start","_move","_stop","_getResizableBoxWidth","ondropfile","filedrop","$file","_createFileAndStore","_insertAsAttachment","wrapAttachment","modalFormData","_truncateUrl","$remover","removeAttachment","$a","state","passed","keyPressed","undoStorage","redoStorage","_listen","onsyncing","onbuffer","onstate","_isUndo","_isRedo","_saveState","_setUndo","_getUndo","_getRedo","ctrl","cmd","_hasUndo","_removeOverStorage","_setRedo","buffer","_hasRedo","_observeDropdown","_isUnformat","_unformat","isIndent","$prevChild","$newList","nextItems","nextList","$nextList","$listItem","$liItem","isTop","isMiddle","isBottom","_getAllNext","_createUnformatContainer","$childList","countLists","_uniteBlocks","_createList","_createListItem","$oldList","lastcell","$cell","_isUniteBlock","selectedItems","_unformatEntire","_getItemsPosition","_unformatAtSide","ci","$secondList","$innerLists","sFirst","sLast","_observeButtonsList","itemOutdent","itemIndent","_observeIndent","param","_getHtml","Redactor","exports","en","align-left","align-center","align-right","align-justify","justify","words","chars","characters","_clean","arrWords","arrSpaces","buttonData","pickFile","that","insertFile","evt","file_id","EE","Rte","filedirUrls","upload_location_id","file_name","isSVG","Rte_browseImages","fontcolor","highlight","colors","fontcolors","onfontcolor","_buildDropdown","$selector","_buildSelector","$selectorText","_buildSelectorItem","$selectorBack","$pickerText","_buildPicker","$pickerBack","_buildSelectorEvents","color","$swatch","data-rule","background-color","font-size","border","padding","line-height","fullscreen","isOpen","docScroll","_createPlacemarker","$html","_buildInternalToolbar","_resize","_buildExternalToolbar","_removePlacemarker","$placemarker","marked","variable","onpasting","limiter","_getText","_count","_limit","arrows","handleTrigger","handleStart","handleStr","handleLen","_handle","_isShown","_hide","_load","ks","_getActiveItem","_hideForce","_replace","_getFirstItem","_setActive","_setNextActive","_setPrevActive","_getItems","_getLastItem","itemHeight","itemTop","itemsScrollTop","itemsHeight","_parse","_show","hidable","_reset","properties","labelStyle","font-family","border-radius","blockData","_getData","_createLabel","_removeLabel","_showData","z-index","readmore","pages","definedlinks","$option","_select","formData","specialchars","data-char","insert-table","insert-row-above","insert-row-below","insert-column-left","insert-column-right","add-head","delete-head","delete-column","delete-row","delete-table","rows","columns","addRow","addRowAbove","_getComponent","$row","addRowTo","addRowBelow","addColumnLeft","addColumnTo","addColumnRight","addHead","deleteHead","$head","removeHead","deleteColumn","$currentCell","nextCell","prevCell","removeColumn","deleteTable","deleteRow","$currentRow","nextRow","prevRow","removeRow","_getTable","tableItem","_observeItems","_buildRow","_addRowTo","origCell","$origCell","$newRow","change-text-direction","left-to-right","right-to-left","ltr","rtl","dir","textexpander","_expand","rangeText","_replaceSelection","video","video-html-code","_matchData","_isVideoIframe","allowed","yturl","widget","widget-html-code","$currentItem"],"mappings":"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","file":"redactor.min.js","sourcesContent":["/*\r\n    Redactor\r\n    Version 3.5.0\r\n    Updated: June 29, 2021\r\n\r\n    http://imperavi.com/redactor/\r\n\r\n    Copyright (c) 2009-2021, Imperavi Ltd.\r\n    License: http://imperavi.com/redactor/license/\r\n*/\r\nif (typeof CodeMirror === 'undefined') { var CodeMirror = undefined; }\r\nif (typeof jQuery === 'undefined') { var jQuery = undefined; }\r\n(function() {\r\nvar Ajax = {};\r\n\r\nAjax.settings = {};\r\nAjax.post = function(options) { return new AjaxRequest('post', options); };\r\nAjax.get = function(options) { return new AjaxRequest('get', options); };\r\nAjax.request = function(method, options) { return new AjaxRequest(method, options); };\r\n\r\nvar AjaxRequest = function(method, options)\r\n{\r\n    var defaults = {\r\n        method: method,\r\n        url: '',\r\n        before: function() {},\r\n        success: function() {},\r\n        error: function() {},\r\n        data: false,\r\n        async: true,\r\n        headers: {}\r\n    };\r\n\r\n    this.p = this.extend(defaults, options);\r\n    this.p = this.extend(this.p, Ajax.settings);\r\n    this.p.method = this.p.method.toUpperCase();\r\n\r\n    this.prepareData();\r\n\r\n    this.xhr = new XMLHttpRequest();\r\n    this.xhr.open(this.p.method, this.p.url, this.p.async);\r\n\r\n    this.setHeaders();\r\n\r\n    var before = (typeof this.p.before === 'function') ? this.p.before(this.xhr) : true;\r\n    if (before !== false)\r\n    {\r\n        this.send();\r\n    }\r\n};\r\n\r\nAjaxRequest.prototype = {\r\n    extend: function(obj1, obj2)\r\n    {\r\n        if (obj2) for (var name in obj2) { obj1[name] = obj2[name]; }\r\n        return obj1;\r\n    },\r\n    prepareData: function()\r\n    {\r\n        if (['POST', 'PUT'].indexOf(this.p.method) !== -1 && !this.isFormData()) this.p.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n        if (typeof this.p.data === 'object' && !this.isFormData()) this.p.data = this.toParams(this.p.data);\r\n        if (this.p.method === 'GET') this.p.url = (this.p.data) ? this.p.url + '?' + this.p.data : this.p.url;\r\n    },\r\n    setHeaders: function()\r\n    {\r\n        this.xhr.setRequestHeader('X-Requested-With', this.p.headers['X-Requested-With'] || 'XMLHttpRequest');\r\n        for (var name in this.p.headers)\r\n        {\r\n            this.xhr.setRequestHeader(name, this.p.headers[name]);\r\n        }\r\n    },\r\n    isFormData: function()\r\n    {\r\n        return (typeof window.FormData !== 'undefined' && this.p.data instanceof window.FormData);\r\n    },\r\n    isComplete: function()\r\n    {\r\n        return !(this.xhr.status < 200 || (this.xhr.status >= 300 && this.xhr.status !== 304));\r\n    },\r\n    send: function()\r\n    {\r\n        if (this.p.async)\r\n        {\r\n            this.xhr.onload = this.loaded.bind(this);\r\n            this.xhr.send(this.p.data);\r\n        }\r\n        else\r\n        {\r\n            this.xhr.send(this.p.data);\r\n            this.loaded.call(this);\r\n        }\r\n    },\r\n    loaded: function()\r\n    {\r\n        if (this.isComplete())\r\n        {\r\n            var response = this.parseResponse();\r\n            if (typeof this.p.success === 'function') this.p.success(response, this.xhr);\r\n        }\r\n        else\r\n        {\r\n            var response = this.parseResponse();\r\n            if (typeof this.p.error === 'function') this.p.error(response, this.xhr, this.xhr.status);\r\n        }\r\n    },\r\n    parseResponse: function() {\r\n        var response = this.xhr.response;\r\n        var json = this.parseJson(response);\r\n        return (json) ? json : response;\r\n    },\r\n    parseJson: function(str)\r\n    {\r\n        try {\r\n            var o = JSON.parse(str);\r\n            if (o && typeof o === 'object')\r\n            {\r\n                return o;\r\n            }\r\n\r\n        } catch (e) {}\r\n\r\n        return false;\r\n    },\r\n    toParams: function (obj)\r\n    {\r\n        return Object.keys(obj).map(\r\n            function(k){ return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]); }\r\n        ).join('&');\r\n    }\r\n};\r\nvar DomCache = [0];\r\nvar DomExpando = 'data' + new Date().getTime();\r\nvar DomHClass = 'is-hidden';\r\nvar DomHMClass = 'is-hidden-mobile';\r\n\r\nvar Dom = function(selector, context)\r\n{\r\n    return this.parse(selector, context);\r\n};\r\n\r\nDom.ready = function(fn)\r\n{\r\n    if (document.readyState !== 'loading') fn();\r\n    else document.addEventListener('DOMContentLoaded', fn);\r\n};\r\n\r\nDom.prototype = {\r\n    get sdom()\r\n    {\r\n        return true;\r\n    },\r\n    get length()\r\n    {\r\n        return this.nodes.length;\r\n    },\r\n    parse: function(selector, context)\r\n    {\r\n        var nodes;\r\n        var reHtmlTest = /^\\s*<(\\w+|!)[^>]*>/;\r\n\r\n        if (!selector)\r\n        {\r\n            nodes = [];\r\n        }\r\n        else if (selector.sdom)\r\n        {\r\n            this.nodes = selector.nodes;\r\n            return selector;\r\n        }\r\n        else if (typeof selector !== 'string')\r\n        {\r\n            if (selector.nodeType && selector.nodeType === 11)\r\n            {\r\n                nodes = selector.childNodes;\r\n            }\r\n            else\r\n            {\r\n                nodes = (selector.nodeType || selector === window) ? [selector] : selector;\r\n            }\r\n        }\r\n        else if (reHtmlTest.test(selector))\r\n        {\r\n            nodes = this.create(selector);\r\n        }\r\n        else\r\n        {\r\n            nodes = this._query(selector, context);\r\n        }\r\n\r\n        this.nodes = this._slice(nodes);\r\n    },\r\n    create: function(html)\r\n    {\r\n        if (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/.test(html))\r\n        {\r\n            return [document.createElement(RegExp.$1)];\r\n        }\r\n\r\n        var elements = [];\r\n        var container = document.createElement('div');\r\n        var children = container.childNodes;\r\n\r\n        container.innerHTML = html;\r\n\r\n        for (var i = 0, l = children.length; i < l; i++)\r\n        {\r\n            elements.push(children[i]);\r\n        }\r\n\r\n        return elements;\r\n    },\r\n\r\n    // add\r\n    add: function(nodes)\r\n    {\r\n        this.nodes = this.nodes.concat(this._toArray(nodes));\r\n    },\r\n\r\n    // get\r\n    get: function(index)\r\n    {\r\n        return this.nodes[(index || 0)] || false;\r\n    },\r\n    getAll: function()\r\n    {\r\n        return this.nodes;\r\n    },\r\n    eq: function(index)\r\n    {\r\n        return new Dom(this.nodes[index]);\r\n    },\r\n    first: function()\r\n    {\r\n        return new Dom(this.nodes[0]);\r\n    },\r\n    last: function()\r\n    {\r\n        return new Dom(this.nodes[this.nodes.length - 1]);\r\n    },\r\n    contents: function()\r\n    {\r\n        return this.get().childNodes;\r\n    },\r\n\r\n    // loop\r\n    each: function(callback)\r\n    {\r\n        var len = this.nodes.length;\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            callback.call(this, (this.nodes[i].sdom) ? this.nodes[i].get() : this.nodes[i], i);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    // traversing\r\n    is: function(selector)\r\n    {\r\n        return (this.filter(selector).length > 0);\r\n    },\r\n    filter: function (selector)\r\n    {\r\n        var callback;\r\n        if (selector === undefined)\r\n        {\r\n            return this;\r\n        }\r\n        else if (typeof selector === 'function')\r\n        {\r\n            callback = selector;\r\n        }\r\n        else\r\n        {\r\n            callback = function(node)\r\n            {\r\n                if (selector instanceof Node)\r\n                {\r\n                    return (selector === node);\r\n                }\r\n                else if (selector && selector.sdom)\r\n                {\r\n                    return ((selector.nodes).indexOf(node) !== -1);\r\n                }\r\n                else\r\n                {\r\n                    node.matches = node.matches || node.msMatchesSelector || node.webkitMatchesSelector;\r\n                    return (node.nodeType === 1) ? node.matches(selector || '*') : false;\r\n                }\r\n            };\r\n        }\r\n\r\n        return new Dom(this.nodes.filter(callback));\r\n    },\r\n    not: function(filter)\r\n    {\r\n        return this.filter(function(node)\r\n        {\r\n            return !new Dom(node).is(filter || true);\r\n        });\r\n    },\r\n    find: function(selector)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            var ns = this._query(selector || '*', node);\r\n            for (var i = 0; i < ns.length; i++)\r\n            {\r\n                nodes.push(ns[i]);\r\n            }\r\n        });\r\n\r\n        return new Dom(nodes);\r\n    },\r\n    children: function(selector)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            if (node.children)\r\n            {\r\n                var ns = node.children;\r\n                for (var i = 0; i < ns.length; i++)\r\n                {\r\n                    nodes.push(ns[i]);\r\n                }\r\n            }\r\n        });\r\n\r\n        return new Dom(nodes).filter(selector);\r\n    },\r\n    parent: function(selector)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            if (node.parentNode) nodes.push(node.parentNode);\r\n        });\r\n\r\n        return new Dom(nodes).filter(selector);\r\n    },\r\n    parents: function(selector, context)\r\n    {\r\n        context = this._getContext(context);\r\n\r\n        var nodes = [];\r\n        this.each(function(node) {\r\n            var parent = node.parentNode;\r\n            while (parent && parent !== context) {\r\n                if (selector) {\r\n                    if (new Dom(parent).is(selector)) { nodes.push(parent); }\r\n                }\r\n                else {\r\n                    nodes.push(parent);\r\n                }\r\n                parent = parent.parentNode;\r\n            }\r\n        });\r\n\r\n        return new Dom(nodes);\r\n\r\n    },\r\n    closest: function(selector, context)\r\n    {\r\n        context = this._getContext(context);\r\n        selector = (selector.sdom) ? selector.get() : selector;\r\n\r\n        var nodes = [];\r\n        var isNode = (selector && selector.nodeType);\r\n        this.each(function(node)\r\n        {\r\n            do {\r\n                if ((isNode && node === selector) || new Dom(node).is(selector)) return nodes.push(node);\r\n            } while ((node = node.parentNode) && node !== context);\r\n        });\r\n\r\n        return new Dom(nodes);\r\n    },\r\n    next: function(selector)\r\n    {\r\n         return this._getSibling(selector, 'nextSibling');\r\n    },\r\n    nextElement: function(selector)\r\n    {\r\n        return this._getSibling(selector, 'nextElementSibling');\r\n    },\r\n    prev: function(selector)\r\n    {\r\n        return this._getSibling(selector, 'previousSibling');\r\n    },\r\n    prevElement: function(selector)\r\n    {\r\n        return this._getSibling(selector, 'previousElementSibling');\r\n    },\r\n\r\n    // css\r\n    css: function(name, value)\r\n    {\r\n        if (value === undefined && (typeof name !== 'object'))\r\n        {\r\n            var node = this.get();\r\n            if (name === 'width' || name === 'height')\r\n            {\r\n                return (node.style) ? this._getHeightOrWidth(name, node, false) + 'px' : undefined;\r\n            }\r\n            else\r\n            {\r\n                return (node.style) ? getComputedStyle(node, null)[name] : undefined;\r\n            }\r\n        }\r\n\r\n        // set\r\n        return this.each(function(node)\r\n        {\r\n            var obj = {};\r\n            if (typeof name === 'object') obj = name;\r\n            else obj[name] = value;\r\n\r\n            for (var key in obj)\r\n            {\r\n                if (node.style) node.style[key] = obj[key];\r\n            }\r\n        });\r\n    },\r\n\r\n    // attr\r\n    attr: function(name, value, data)\r\n    {\r\n        data = (data) ? 'data-' : '';\r\n\r\n        if (value === undefined && (typeof name !== 'object'))\r\n        {\r\n            var node = this.get();\r\n            if (node && node.nodeType !== 3)\r\n            {\r\n                return (name === 'checked') ? node.checked : this._getBooleanFromStr(node.getAttribute(data + name));\r\n            }\r\n            else return;\r\n        }\r\n\r\n        // set\r\n        return this.each(function(node)\r\n        {\r\n            var obj = {};\r\n            if (typeof name === 'object') obj = name;\r\n            else obj[name] = value;\r\n\r\n            for (var key in obj)\r\n            {\r\n                if (node.nodeType !== 3)\r\n                {\r\n                    if (key === 'checked') node.checked = obj[key];\r\n                    else node.setAttribute(data + key, obj[key]);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    data: function(name, value)\r\n    {\r\n        if (name === undefined)\r\n        {\r\n            var reDataAttr = /^data-(.+)$/;\r\n            var attrs = this.get().attributes;\r\n\r\n            var data = {};\r\n            var replacer = function (g) { return g[1].toUpperCase(); };\r\n\r\n            for (var key in attrs)\r\n            {\r\n                if (attrs[key] && reDataAttr.test(attrs[key].nodeName))\r\n                {\r\n                    var dataName = attrs[key].nodeName.match(reDataAttr)[1];\r\n                    var val = attrs[key].value;\r\n                    dataName = dataName.replace(/-([a-z])/g, replacer);\r\n\r\n                    if (this._isObjectString(val)) val = this._toObject(val);\r\n                    else val = (this._isNumber(val)) ? parseFloat(val) : this._getBooleanFromStr(val);\r\n\r\n                    data[dataName] = val;\r\n                }\r\n            }\r\n\r\n            return data;\r\n        }\r\n\r\n        return this.attr(name, value, true);\r\n    },\r\n    val: function(value)\r\n    {\r\n        if (value === undefined)\r\n        {\r\n            var el = this.get();\r\n            if (el.type && el.type === 'checkbox') return el.checked;\r\n            else return el.value;\r\n        }\r\n\r\n        return this.each(function(node)\r\n        {\r\n            node.value = value;\r\n        });\r\n    },\r\n    removeAttr: function(value)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var rmAttr = function(name) { if (node.nodeType !== 3) node.removeAttribute(name); };\r\n            value.split(' ').forEach(rmAttr);\r\n        });\r\n    },\r\n    removeData: function(value)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var rmData = function(name) { if (node.nodeType !== 3) node.removeAttribute('data-' + name); };\r\n            value.split(' ').forEach(rmData);\r\n        });\r\n    },\r\n\r\n    // dataset/dataget\r\n    dataset: function(key, value)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            DomCache[this.dataindex(node)][key] = value;\r\n        });\r\n    },\r\n    dataget: function(key)\r\n    {\r\n        return DomCache[this.dataindex(this.get())][key];\r\n    },\r\n    dataindex: function(el)\r\n    {\r\n        var cacheIndex = el[DomExpando];\r\n        var nextCacheIndex = DomCache.length;\r\n\r\n        if (!cacheIndex)\r\n        {\r\n            cacheIndex = el[DomExpando] = nextCacheIndex;\r\n            DomCache[cacheIndex] = {};\r\n        }\r\n\r\n        return cacheIndex;\r\n    },\r\n\r\n\r\n    // class\r\n    addClass: function(value)\r\n    {\r\n        return this._eachClass(value, 'add');\r\n    },\r\n    removeClass: function(value)\r\n    {\r\n        return this._eachClass(value, 'remove');\r\n    },\r\n    toggleClass: function(value)\r\n    {\r\n        return this._eachClass(value, 'toggle');\r\n    },\r\n    hasClass: function(value)\r\n    {\r\n        return this.nodes.some(function(node)\r\n        {\r\n            return (node.classList) ? node.classList.contains(value) : false;\r\n        });\r\n    },\r\n\r\n    // html & text\r\n    empty: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            node.innerHTML = '';\r\n        });\r\n    },\r\n    html: function(html)\r\n    {\r\n        return (html === undefined) ? (this.get().innerHTML || '') : this.empty().append(html);\r\n    },\r\n    text: function(text)\r\n    {\r\n        return (text === undefined) ? (this.get().textContent || '') : this.each(function(node) { node.textContent = text; });\r\n    },\r\n\r\n    // manipulation\r\n    after: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string')\r\n            {\r\n                node.insertAdjacentHTML('afterend', frag);\r\n            }\r\n            else\r\n            {\r\n                if (node.parentNode !== null) {\r\n                    for (var i = frag instanceof Node ? [frag] : this._toArray(frag).reverse(), s = 0; s < i.length; s++) {\r\n                        node.parentNode.insertBefore(i[s], node.nextSibling);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return node;\r\n\r\n        });\r\n    },\r\n    before: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string')\r\n            {\r\n                node.insertAdjacentHTML('beforebegin', frag);\r\n            }\r\n            else\r\n            {\r\n                var elms = (frag instanceof Node) ? [frag] : this._toArray(frag);\r\n                for (var i = 0; i < elms.length; i++)\r\n                {\r\n                    node.parentNode.insertBefore(elms[i], node);\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n    },\r\n    append: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string' || typeof frag === 'number')\r\n            {\r\n                node.insertAdjacentHTML('beforeend', frag);\r\n            }\r\n            else\r\n            {\r\n                var elms = (frag instanceof Node) ? [frag] : this._toArray(frag);\r\n                for (var i = 0; i < elms.length; i++)\r\n                {\r\n                    node.appendChild(elms[i]);\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n    },\r\n    prepend: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string' || typeof frag === 'number')\r\n            {\r\n                node.insertAdjacentHTML('afterbegin', frag);\r\n            }\r\n            else\r\n            {\r\n                var elms = (frag instanceof Node) ? [frag] : this._toArray(frag).reverse();\r\n                for (var i = 0; i < elms.length; i++)\r\n                {\r\n                    node.insertBefore(elms[i], node.firstChild);\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n    },\r\n    wrap: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            var wrapper = (typeof frag === 'string' || typeof frag === 'number') ? this.create(frag)[0] : (frag instanceof Node) ? frag : this._toArray(frag)[0];\r\n\r\n            if (node.parentNode)\r\n            {\r\n                node.parentNode.insertBefore(wrapper, node);\r\n            }\r\n\r\n            wrapper.appendChild(node);\r\n\r\n            return new Dom(wrapper);\r\n\r\n        });\r\n    },\r\n    unwrap: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var $node = new Dom(node);\r\n\r\n            return $node.replaceWith($node.contents());\r\n        });\r\n    },\r\n    replaceWith: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            var docFrag = document.createDocumentFragment();\r\n            var elms = (typeof frag === 'string' || typeof frag === 'number') ? this.create(frag) : (frag instanceof Node) ? [frag] : this._toArray(frag);\r\n\r\n            for (var i = 0; i < elms.length; i++)\r\n            {\r\n                docFrag.appendChild(elms[i]);\r\n            }\r\n\r\n            var result = docFrag.childNodes[0];\r\n            if (node.parentNode) {\r\n                node.parentNode.replaceChild(docFrag, node);\r\n            }\r\n\r\n            return result;\r\n\r\n        });\r\n    },\r\n    remove: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (node.parentNode) node.parentNode.removeChild(node);\r\n        });\r\n    },\r\n    clone: function(events)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            var copy = this._clone(node);\r\n            if (events) copy = this._cloneEvents(node, copy);\r\n            nodes.push(copy);\r\n        });\r\n\r\n        return new Dom(nodes);\r\n    },\r\n\r\n    // show/hide\r\n    show: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (!node.style || !this._hasDisplayNone(node)) return;\r\n\r\n            var target = node.getAttribute('domTargetShow');\r\n            var isHidden = (node.classList) ? node.classList.contains(DomHClass) : false;\r\n            var isHiddenMobile = (node.classList) ? node.classList.contains(DomHMClass) : false;\r\n            var type;\r\n\r\n            if (isHidden)\r\n            {\r\n                type = DomHClass;\r\n                node.classList.remove(DomHClass);\r\n            }\r\n            else if (isHiddenMobile)\r\n            {\r\n                type = DomHMClass;\r\n                node.classList.remove(DomHMClass);\r\n            }\r\n            else\r\n            {\r\n                node.style.display = (target) ? target : 'block';\r\n            }\r\n\r\n            if (type) node.setAttribute('domTargetHide', type);\r\n            node.removeAttribute('domTargetShow');\r\n\r\n        }.bind(this));\r\n    },\r\n    hide: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (!node.style || this._hasDisplayNone(node)) return;\r\n\r\n            var display = node.style.display;\r\n            var target = node.getAttribute('domTargetHide');\r\n\r\n            if (target === DomHClass)\r\n            {\r\n                node.classList.add(DomHClass);\r\n            }\r\n            else if (target === DomHMClass)\r\n            {\r\n                node.classList.add(DomHMClass);\r\n            }\r\n            else\r\n            {\r\n                if (display !== 'block') node.setAttribute('domTargetShow', display);\r\n                node.style.display = 'none';\r\n            }\r\n\r\n            node.removeAttribute('domTargetHide');\r\n\r\n        });\r\n    },\r\n\r\n    // dimensions\r\n    scrollTop: function(value)\r\n    {\r\n        var node = this.get();\r\n        var isWindow = (node === window);\r\n        var isDocument = (node.nodeType === 9);\r\n        var el = (isDocument) ? (document.scrollingElement || document.body.parentNode || document.body || document.documentElement) : node;\r\n\r\n        if (value !== undefined)\r\n        {\r\n            if (isWindow) window.scrollTo(0, value);\r\n            else el.scrollTop = value;\r\n            return;\r\n        }\r\n\r\n        if (isDocument)\r\n        {\r\n            return (typeof window.pageYOffset != 'undefined') ? window.pageYOffset : ((document.documentElement.scrollTop) ? document.documentElement.scrollTop : ((document.body.scrollTop) ? document.body.scrollTop : 0));\r\n        }\r\n        else\r\n        {\r\n            return (isWindow) ? window.pageYOffset : el.scrollTop;\r\n        }\r\n    },\r\n    offset: function()\r\n    {\r\n        return this._getDim('Offset');\r\n    },\r\n    position: function()\r\n    {\r\n        return this._getDim('Position');\r\n    },\r\n    width: function(value, adjust)\r\n    {\r\n        return this._getSize('width', 'Width', value, adjust);\r\n    },\r\n    height: function(value, adjust)\r\n    {\r\n        return this._getSize('height', 'Height', value, adjust);\r\n    },\r\n    outerWidth: function()\r\n    {\r\n        return this._getInnerOrOuter('width', 'outer');\r\n    },\r\n    outerHeight: function()\r\n    {\r\n        return this._getInnerOrOuter('height', 'outer');\r\n    },\r\n    innerWidth: function()\r\n    {\r\n        return this._getInnerOrOuter('width', 'inner');\r\n    },\r\n    innerHeight: function()\r\n    {\r\n        return this._getInnerOrOuter('height', 'inner');\r\n    },\r\n\r\n    // events\r\n    click: function()\r\n    {\r\n        return this._triggerEvent('click');\r\n    },\r\n    focus: function()\r\n    {\r\n        return this._triggerEvent('focus');\r\n    },\r\n    trigger: function(names)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var events = names.split(' ');\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                var ev;\r\n                var opts = { bubbles: true, cancelable: true };\r\n\r\n                try {\r\n                    ev = new window.CustomEvent(events[i], opts);\r\n                } catch(e) {\r\n                    ev = document.createEvent('CustomEvent');\r\n                    ev.initCustomEvent(events[i], true, true);\r\n                }\r\n\r\n                node.dispatchEvent(ev);\r\n            }\r\n        });\r\n    },\r\n    on: function(names, handler, one)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var events = names.split(' ');\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                var event = this._getEventName(events[i]);\r\n                var namespace = this._getEventNamespace(events[i]);\r\n\r\n                handler = (one) ? this._getOneHandler(handler, names) : handler;\r\n                node.addEventListener(event, handler);\r\n\r\n                node._e = node._e || {};\r\n                node._e[namespace] = node._e[namespace] || {};\r\n                node._e[namespace][event] = node._e[namespace][event] || [];\r\n                node._e[namespace][event].push(handler);\r\n            }\r\n\r\n        });\r\n    },\r\n    one: function(events, handler)\r\n    {\r\n        return this.on(events, handler, true);\r\n    },\r\n    off: function(names, handler)\r\n    {\r\n        var testEvent = function(name, key, event) { return (name === event); };\r\n        var testNamespace = function(name, key, event, namespace) { return (key === namespace); };\r\n        var testEventNamespace = function(name, key, event, namespace) { return (name === event && key === namespace); };\r\n        var testPositive = function() { return true; };\r\n\r\n        if (names === undefined)\r\n        {\r\n            // ALL\r\n            return this.each(function(node)\r\n            {\r\n                this._offEvent(node, false, false, handler, testPositive);\r\n            });\r\n        }\r\n\r\n        return this.each(function(node)\r\n        {\r\n            var events = names.split(' ');\r\n\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                var event = this._getEventName(events[i]);\r\n                var namespace = this._getEventNamespace(events[i]);\r\n\r\n                // 1) event without namespace\r\n                if (namespace === '_events') this._offEvent(node, event, namespace, handler, testEvent);\r\n                // 2) only namespace\r\n                else if (!event && namespace !== '_events') this._offEvent(node, event, namespace, handler, testNamespace);\r\n                // 3) event + namespace\r\n                else this._offEvent(node, event, namespace, handler, testEventNamespace);\r\n            }\r\n        });\r\n    },\r\n\r\n    // form\r\n    serialize: function(asObject)\r\n    {\r\n        var obj = {};\r\n        var elms = this.get().elements;\r\n        for (var i = 0; i < elms.length; i++)\r\n        {\r\n            var el = elms[i];\r\n            if (/(checkbox|radio)/.test(el.type) && !el.checked) continue;\r\n            if (!el.name || el.disabled || el.type === 'file') continue;\r\n\r\n            if (el.type === 'select-multiple')\r\n            {\r\n                for (var z = 0; z < el.options.length; z++)\r\n                {\r\n                    var opt = el.options[z];\r\n                    if (opt.selected) obj[el.name] = opt.value;\r\n                }\r\n            }\r\n\r\n            obj[el.name] = (this._isNumber(el.value)) ? parseFloat(el.value) : this._getBooleanFromStr(el.value);\r\n        }\r\n\r\n        return (asObject) ? obj : this._toParams(obj);\r\n    },\r\n    ajax: function(success, error)\r\n    {\r\n        if (typeof AjaxRequest !== 'undefined')\r\n        {\r\n            var method = this.attr('method') || 'post';\r\n            var options = {\r\n                url: this.attr('action'),\r\n                data: this.serialize(),\r\n                success: success,\r\n                error: error\r\n            };\r\n\r\n            return new AjaxRequest(method, options);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _queryContext: function(selector, context)\r\n    {\r\n        context = this._getContext(context);\r\n\r\n        return (context.nodeType !== 3 && typeof context.querySelectorAll === 'function') ? context.querySelectorAll(selector) : [];\r\n    },\r\n    _query: function(selector, context)\r\n    {\r\n        if (context)\r\n        {\r\n            return this._queryContext(selector, context);\r\n        }\r\n        else if (/^[.#]?[\\w-]*$/.test(selector))\r\n        {\r\n            if (selector[0] === '#')\r\n            {\r\n                var element = document.getElementById(selector.slice(1));\r\n                return element ? [element] : [];\r\n            }\r\n\r\n            if (selector[0] === '.')\r\n            {\r\n                return document.getElementsByClassName(selector.slice(1));\r\n            }\r\n\r\n            return document.getElementsByTagName(selector);\r\n        }\r\n\r\n        return document.querySelectorAll(selector);\r\n    },\r\n    _getContext: function(context)\r\n    {\r\n        context = (typeof context === 'string') ? document.querySelector(context) : context;\r\n\r\n        return (context && context.sdom) ? context.get() : (context || document);\r\n    },\r\n    _inject: function(html, fn)\r\n    {\r\n        var len = this.nodes.length;\r\n        var nodes = [];\r\n        while (len--)\r\n        {\r\n            var res = (typeof html === 'function') ? html.call(this, this.nodes[len]) : html;\r\n            var el = (len === 0) ? res : this._clone(res);\r\n            var node = fn.call(this, el, this.nodes[len]);\r\n\r\n            if (node)\r\n            {\r\n                if (node.sdom) nodes.push(node.get());\r\n                else nodes.push(node);\r\n            }\r\n        }\r\n\r\n        return new Dom(nodes);\r\n    },\r\n    _cloneEvents: function(node, copy)\r\n    {\r\n        var events = node._e;\r\n        if (events)\r\n        {\r\n            copy._e = events;\r\n            for (var name in events._events)\r\n            {\r\n                for (var i = 0; i < events._events[name].length; i++)\r\n                {\r\n                    copy.addEventListener(name, events._events[name][i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return copy;\r\n    },\r\n    _clone: function(node)\r\n    {\r\n        if (typeof node === 'undefined') return;\r\n        if (typeof node === 'string') return node;\r\n        else if (node instanceof Node || node.nodeType) return node.cloneNode(true);\r\n        else if ('length' in node)\r\n        {\r\n            return [].map.call(this._toArray(node), function(el) { return el.cloneNode(true); });\r\n        }\r\n    },\r\n    _slice: function(obj)\r\n    {\r\n        return (!obj || obj.length === 0) ? [] : (obj.length) ? [].slice.call(obj.nodes || obj) : [obj];\r\n    },\r\n    _eachClass: function(value, type)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (value)\r\n            {\r\n                var setClass = function(name) { if (node.classList) node.classList[type](name); };\r\n                value.split(' ').forEach(setClass);\r\n            }\r\n        });\r\n    },\r\n    _triggerEvent: function(name)\r\n    {\r\n        var node = this.get();\r\n        if (node && node.nodeType !== 3) node[name]();\r\n        return this;\r\n    },\r\n    _getOneHandler: function(handler, events)\r\n    {\r\n        var self = this;\r\n        return function()\r\n        {\r\n            handler.apply(this, arguments);\r\n            self.off(events);\r\n        };\r\n    },\r\n    _getEventNamespace: function(event)\r\n    {\r\n        var arr = event.split('.');\r\n        var namespace = (arr[1]) ? arr[1] : '_events';\r\n        return (arr[2]) ? namespace + arr[2] : namespace;\r\n    },\r\n    _getEventName: function(event)\r\n    {\r\n        return event.split('.')[0];\r\n    },\r\n    _offEvent: function(node, event, namespace, handler, condition)\r\n    {\r\n        for (var key in node._e)\r\n        {\r\n            for (var name in node._e[key])\r\n            {\r\n                if (condition(name, key, event, namespace))\r\n                {\r\n                    var handlers = node._e[key][name];\r\n                    for (var i = 0; i < handlers.length; i++)\r\n                    {\r\n                        if (typeof handler !== 'undefined' && handlers[i].toString() !== handler.toString())\r\n                        {\r\n                            continue;\r\n                        }\r\n\r\n                        node.removeEventListener(name, handlers[i]);\r\n                        node._e[key][name].splice(i, 1);\r\n\r\n                        if (node._e[key][name].length === 0) delete node._e[key][name];\r\n                        if (Object.keys(node._e[key]).length === 0) delete node._e[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getInnerOrOuter: function(method, type)\r\n    {\r\n        return this[method](undefined, type);\r\n    },\r\n    _getDocSize: function(node, type)\r\n    {\r\n        var body = node.body, html = node.documentElement;\r\n        return Math.max(body['scroll' + type], body['offset' + type], html['client' + type], html['scroll' + type], html['offset' + type]);\r\n    },\r\n    _getSize: function(type, captype, value, adjust)\r\n    {\r\n        if (value === undefined)\r\n        {\r\n            var el = this.get();\r\n            if (el.nodeType === 3)      value = 0;\r\n            else if (el.nodeType === 9) value = this._getDocSize(el, captype);\r\n            else if (el === window)     value = window['inner' + captype];\r\n            else                        value = this._getHeightOrWidth(type, el, adjust || 'normal');\r\n\r\n            return Math.round(value);\r\n        }\r\n\r\n        return this.each(function(node)\r\n        {\r\n            value = parseFloat(value);\r\n            value = value + this._adjustResultHeightOrWidth(type, node, adjust || 'normal');\r\n\r\n            new Dom(node).css(type, value + 'px');\r\n\r\n        }.bind(this));\r\n    },\r\n    _getHeightOrWidth: function(type, el, adjust)\r\n    {\r\n        if (!el) return 0;\r\n\r\n        var name = type.charAt(0).toUpperCase() + type.slice(1);\r\n        var result = 0;\r\n        var style = getComputedStyle(el, null);\r\n        var $el = new Dom(el);\r\n        var $targets = $el.parents().filter(function(node)\r\n        {\r\n            return (node.nodeType === 1 && getComputedStyle(node, null).display === 'none') ? node : false;\r\n        });\r\n\r\n        if (style.display === 'none') $targets.add(el);\r\n        if ($targets.length !== 0)\r\n        {\r\n            var fixStyle = 'visibility: hidden !important; display: block !important;';\r\n            var tmp = [];\r\n\r\n            $targets.each(function(node)\r\n            {\r\n                var $node = new Dom(node);\r\n                var thisStyle = $node.attr('style');\r\n                if (thisStyle !== null) tmp.push(thisStyle);\r\n                $node.attr('style', (thisStyle !== null) ? thisStyle + ';' + fixStyle : fixStyle);\r\n            });\r\n\r\n            result = $el.get()['offset' + name] - this._adjustResultHeightOrWidth(type, el, adjust);\r\n\r\n            $targets.each(function(node, i)\r\n            {\r\n                var $node = new Dom(node);\r\n                if (tmp[i] === undefined) $node.removeAttr('style');\r\n                else $node.attr('style', tmp[i]);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            result = el['offset' + name] - this._adjustResultHeightOrWidth(type, el, adjust);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _adjustResultHeightOrWidth: function(type, el, adjust)\r\n    {\r\n        if (!el || adjust === false) return 0;\r\n\r\n        var fix = 0;\r\n        var style = getComputedStyle(el, null);\r\n        var isBorderBox = (style.boxSizing === \"border-box\");\r\n\r\n        if (type === 'height')\r\n        {\r\n            if (adjust === 'inner' || (adjust === 'normal' && isBorderBox))\r\n            {\r\n                fix += (parseFloat(style.borderTopWidth) || 0) + (parseFloat(style.borderBottomWidth) || 0);\r\n            }\r\n\r\n            if (adjust === 'outer') fix -= (parseFloat(style.marginTop) || 0) + (parseFloat(style.marginBottom) || 0);\r\n        }\r\n        else\r\n        {\r\n            if (adjust === 'inner' || (adjust === 'normal' && isBorderBox))\r\n            {\r\n                fix += (parseFloat(style.borderLeftWidth) || 0) + (parseFloat(style.borderRightWidth) || 0);\r\n            }\r\n\r\n            if (adjust === 'outer') fix -= (parseFloat(style.marginLeft) || 0) + (parseFloat(style.marginRight) || 0);\r\n        }\r\n\r\n        return fix;\r\n    },\r\n    _getDim: function(type)\r\n    {\r\n        var node = this.get();\r\n        return (node.nodeType === 3) ? { top: 0, left: 0 } : this['_get' + type](node);\r\n    },\r\n    _getPosition: function(node)\r\n    {\r\n        return { top: node.offsetTop, left: node.offsetLeft };\r\n    },\r\n    _getOffset: function(node)\r\n    {\r\n        if (typeof(node) === 'undefined' || node === false) {\r\n            return;\r\n        }\r\n        var rect = node.getBoundingClientRect();\r\n        var doc = node.ownerDocument;\r\n\t\tvar docElem = doc.documentElement;\r\n\t\tvar win = doc.defaultView;\r\n\r\n\t\treturn {\r\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\r\n\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\r\n\t\t};\r\n    },\r\n    _getSibling: function(selector, method)\r\n    {\r\n        selector = (selector && selector.sdom) ? selector.get() : selector;\r\n\r\n        var isNode = (selector && selector.nodeType);\r\n        var sibling;\r\n\r\n        this.each(function(node)\r\n        {\r\n            while (node = node[method])\r\n            {\r\n                if ((isNode && node === selector) || new Dom(node).is(selector))\r\n                {\r\n                    sibling = node;\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n\r\n        return new Dom(sibling);\r\n    },\r\n    _toArray: function(obj)\r\n    {\r\n        if (obj instanceof NodeList)\r\n        {\r\n            var arr = [];\r\n            for (var i = 0; i < obj.length; i++)\r\n            {\r\n                arr[i] = obj[i];\r\n            }\r\n\r\n            return arr;\r\n        }\r\n        else if (obj === undefined) return [];\r\n        else\r\n        {\r\n            return (obj.sdom) ? obj.nodes : obj;\r\n        }\r\n    },\r\n    _toParams: function(obj)\r\n    {\r\n        var params = '';\r\n        for (var key in obj)\r\n        {\r\n            params += '&' + this._encodeUri(key) + '=' + this._encodeUri(obj[key]);\r\n        }\r\n\r\n        return params.replace(/^&/, '');\r\n    },\r\n    _toObject: function(str)\r\n    {\r\n        return (new Function(\"return \" + str))();\r\n    },\r\n    _encodeUri: function(str)\r\n    {\r\n        return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\r\n    },\r\n    _isNumber: function(str)\r\n    {\r\n        return !isNaN(str) && !isNaN(parseFloat(str));\r\n    },\r\n    _isObjectString: function(str)\r\n    {\r\n        return (str.search(/^{/) !== -1);\r\n    },\r\n    _getBooleanFromStr: function(str)\r\n    {\r\n        if (str === 'true') return true;\r\n        else if (str === 'false') return false;\r\n\r\n        return str;\r\n    },\r\n    _hasDisplayNone: function(el)\r\n    {\r\n        return (el.style.display === 'none') || ((el.currentStyle) ? el.currentStyle.display : getComputedStyle(el, null).display) === 'none';\r\n    }\r\n};\r\n// Unique ID\r\nvar uuid = 0;\r\n\r\n// Wrapper\r\nvar $R = function(selector, options)\r\n{\r\n    return RedactorApp(selector, options, [].slice.call(arguments, 2));\r\n};\r\n\r\n// Globals\r\n$R.app = [];\r\n$R.version = '3.5.0';\r\n$R.options = {};\r\n$R.modules = {};\r\n$R.services = {};\r\n$R.classes = {};\r\n$R.plugins = {};\r\n$R.mixins = {};\r\n$R.modals = {};\r\n$R.lang = {};\r\n$R.dom = function(selector, context) { return new Dom(selector, context); };\r\n$R.ajax = Ajax;\r\n$R.Dom = Dom;\r\n$R.keycodes = {\r\n\tBACKSPACE: 8,\r\n\tDELETE: 46,\r\n\tUP: 38,\r\n\tDOWN: 40,\r\n\tENTER: 13,\r\n\tSPACE: 32,\r\n\tESC: 27,\r\n\tTAB: 9,\r\n\tCTRL: 17,\r\n\tMETA: 91,\r\n\tSHIFT: 16,\r\n\tALT: 18,\r\n\tRIGHT: 39,\r\n\tLEFT: 37\r\n};\r\n$R.env = {\r\n    'plugin': 'plugins',\r\n    'module': 'modules',\r\n    'service': 'services',\r\n    'class': 'classes',\r\n    'mixin': 'mixins'\r\n};\r\n\r\n// jQuery Wrapper\r\n/*eslint-env jquery*/\r\nif (typeof jQuery !== 'undefined')\r\n{\r\n    (function($) { $.fn.redactor = function(options) { return RedactorApp(this.toArray(), options, [].slice.call(arguments, 1)); }; })(jQuery);\r\n}\r\n\r\n// Class\r\nvar RedactorApp = function(selector, options, args)\r\n{\r\n    var namespace = 'redactor';\r\n    var nodes = (Array.isArray(selector)) ? selector : (selector && selector.nodeType) ? [selector] : document.querySelectorAll(selector);\r\n    var isApi = (typeof options === 'string' || typeof options === 'function');\r\n    var value = [];\r\n    var instance;\r\n\r\n    for (var i = 0; i < nodes.length; i++)\r\n    {\r\n        var el = nodes[i];\r\n        var $el = $R.dom(el);\r\n\r\n        instance = $el.dataget(namespace);\r\n        if (!instance && !isApi)\r\n        {\r\n            // Initialization\r\n            instance = new App(el, options, uuid);\r\n            $el.dataset(namespace, instance);\r\n            $R.app[uuid] = instance;\r\n            uuid++;\r\n        }\r\n\r\n        // API\r\n        if (instance && isApi)\r\n        {\r\n            var isDestroy = (options === 'destroy');\r\n            options = (isDestroy) ? 'stop' : options;\r\n\r\n            var methodValue;\r\n            if (typeof options === 'function')\r\n            {\r\n                methodValue = options.apply(instance, args);\r\n            }\r\n            else\r\n            {\r\n                args.unshift(options);\r\n                methodValue = instance.api.apply(instance, args);\r\n            }\r\n            if (methodValue !== undefined) value.push(methodValue);\r\n\r\n            if (isDestroy) $el.dataset(namespace, false);\r\n        }\r\n    }\r\n\r\n    return (value.length === 0 || value.length === 1) ? ((value.length === 0) ? instance : value[0]) : value;\r\n};\r\n\r\n// add\r\n$R.add = function(type, name, obj)\r\n{\r\n    if (typeof $R.env[type] === 'undefined') return;\r\n\r\n    // translations\r\n    if (obj.translations)\r\n    {\r\n        $R.lang = $R.extend(true, {}, $R.lang, obj.translations);\r\n    }\r\n\r\n    // modals\r\n    if (obj.modals)\r\n    {\r\n        $R.modals = $R.extend(true, {}, $R.modals, obj.modals);\r\n    }\r\n\r\n    // mixin\r\n    if (type === 'mixin')\r\n    {\r\n        $R[$R.env[type]][name] = obj;\r\n    }\r\n    else\r\n    {\r\n        // prototype\r\n        var F = function() {};\r\n        F.prototype = obj;\r\n\r\n        // mixins\r\n        if (obj.mixins)\r\n        {\r\n            for (var i = 0; i < obj.mixins.length; i++)\r\n            {\r\n                $R.inherit(F, $R.mixins[obj.mixins[i]]);\r\n            }\r\n        }\r\n\r\n        $R[$R.env[type]][name] = F;\r\n    }\r\n};\r\n\r\n// add lang\r\n$R.addLang = function(lang, obj)\r\n{\r\n    if (typeof $R.lang[lang] === 'undefined')\r\n    {\r\n        $R.lang[lang] = {};\r\n    }\r\n\r\n    $R.lang[lang] = $R.extend($R.lang[lang], obj);\r\n};\r\n\r\n// create\r\n$R.create = function(name)\r\n{\r\n    var arr = name.split('.');\r\n    var args = [].slice.call(arguments, 1);\r\n\r\n    var type = 'classes';\r\n    if (typeof $R.env[arr[0]] !== 'undefined')\r\n    {\r\n        type = $R.env[arr[0]];\r\n        name = arr.slice(1).join('.');\r\n    }\r\n\r\n    // construct\r\n    var instance = new $R[type][name]();\r\n\r\n    // init\r\n    if (instance.init)\r\n    {\r\n        var res = instance.init.apply(instance, args);\r\n\r\n        return (res) ? res : instance;\r\n    }\r\n\r\n    return instance;\r\n};\r\n\r\n// inherit\r\n$R.inherit = function(current, parent)\r\n{\r\n    var F = function () {};\r\n    F.prototype = parent;\r\n    var f = new F();\r\n\r\n    for (var prop in current.prototype)\r\n    {\r\n        if (current.prototype.__lookupGetter__(prop)) f.__defineGetter__(prop, current.prototype.__lookupGetter__(prop));\r\n        else f[prop] = current.prototype[prop];\r\n    }\r\n\r\n    current.prototype = f;\r\n    current.prototype.super = parent;\r\n\r\n    return current;\r\n};\r\n\r\n// error\r\n$R.error = function(exception)\r\n{\r\n    throw exception;\r\n};\r\n\r\n// extend\r\n$R.extend = function()\r\n{\r\n    var extended = {};\r\n    var deep = false;\r\n    var i = 0;\r\n    var length = arguments.length;\r\n\r\n    if (Object.prototype.toString.call( arguments[0] ) === '[object Boolean]')\r\n    {\r\n        deep = arguments[0];\r\n        i++;\r\n    }\r\n\r\n    var merge = function(obj)\r\n    {\r\n        for (var prop in obj)\r\n        {\r\n            if (Object.prototype.hasOwnProperty.call(obj, prop))\r\n            {\r\n                if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') extended[prop] = $R.extend(true, extended[prop], obj[prop]);\r\n                else extended[prop] = obj[prop];\r\n            }\r\n        }\r\n    };\r\n\r\n    for (; i < length; i++ )\r\n    {\r\n        var obj = arguments[i];\r\n        merge(obj);\r\n    }\r\n\r\n    return extended;\r\n};\r\n$R.opts = {\r\n    animation: true,\r\n    lang: 'en',\r\n    direction: 'ltr',\r\n    spellcheck: true,\r\n    structure: false,\r\n    scrollTarget: false,\r\n    styles: true,\r\n    stylesClass: 'redactor-styles',\r\n    placeholder: false,\r\n\r\n    source: true,\r\n    showSource: false,\r\n\r\n    inline: false,\r\n\r\n    breakline: false,\r\n    markup: 'p',\r\n    enterKey: true,\r\n\r\n    clickToEdit: false,\r\n    clickToSave: false,\r\n    clickToCancel: false,\r\n\r\n    focus: false,\r\n    focusEnd: false,\r\n\r\n    minHeight: false, // string, '100px'\r\n    maxHeight: false, // string, '100px'\r\n    maxWidth: false, // string, '700px'\r\n\r\n    plugins: [], // array\r\n    callbacks: {},\r\n\r\n    // pre & tab\r\n    preClass: false, // string\r\n    preSpaces: 4, // or false\r\n    tabindex: false, // int\r\n    tabAsSpaces: false, // true or number of spaces\r\n    tabKey: true,\r\n\r\n    // autosave\r\n    autosave: false, // false or url\r\n    autosaveName: false,\r\n    autosaveData: false,\r\n    autosaveMethod: 'post',\r\n\r\n    // toolbar\r\n    toolbar: true,\r\n    toolbarFixed: true,\r\n    toolbarFixedTarget: document,\r\n    toolbarFixedTopOffset: 0, // pixels\r\n    toolbarExternal: false, // ID selector\r\n    toolbarContext: true,\r\n\r\n    // air\r\n    air: false,\r\n\r\n    // formatting\r\n    formatting: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n    formattingAdd: false,\r\n    formattingHide: false,\r\n\r\n    // buttons\r\n    buttons: ['html', 'format', 'bold', 'italic', 'deleted', 'lists', 'image', 'file', 'link'],\r\n    // + 'line', 'redo', 'undo', 'underline', 'ol', 'ul', 'indent', 'outdent'\r\n    buttonsTextLabeled: false,\r\n    buttonsAdd: [],\r\n    buttonsAddFirst: [],\r\n    buttonsAddAfter: false,\r\n    buttonsAddBefore: false,\r\n    buttonsHide: [],\r\n    buttonsHideOnMobile: [],\r\n\r\n    // image\r\n    imageUpload: false,\r\n    imageUploadParam: 'file',\r\n    imageData: false,\r\n    imageEditable: true,\r\n    imageCaption: true,\r\n    imageLink: true,\r\n    imagePosition: false,\r\n    imageResizable: false,\r\n    imageFloatMargin: '10px',\r\n    imageFigure: true,\r\n    imageObserve: true,\r\n    imageSrcData: false,\r\n\r\n    // file\r\n    fileUpload: false,\r\n    fileUploadParam: 'file',\r\n    fileData: false,\r\n    fileAttachment: false,\r\n\r\n    // upload opts\r\n    uploadData: false,\r\n    dragUpload: true,\r\n    multipleUpload: false,\r\n    clipboardUpload: true,\r\n    uploadBase64: false,\r\n\r\n    // link\r\n    linkTarget: false,\r\n    linkTitle: false,\r\n    linkNewTab: true,\r\n    linkNofollow: false,\r\n    linkSize: 30,\r\n    linkValidation: true,\r\n\r\n    // clean\r\n    cleanOnEnter: true,\r\n    cleanInlineOnEnter: false,\r\n    paragraphize: true,\r\n    removeScript: true,\r\n    removeNewLines: false,\r\n    removeComments: true,\r\n    replaceTags: {\r\n        'b': 'strong',\r\n        'i': 'em',\r\n        'strike': 'del'\r\n    },\r\n\r\n    // paste\r\n    pastePlainText: false,\r\n    pasteLinkTarget: false,\r\n    pasteImages: true,\r\n    pasteLinks: true,\r\n    pasteClean: true,\r\n    pasteKeepStyle: [],\r\n    pasteKeepClass: [],\r\n    pasteKeepAttrs: ['td', 'th'],\r\n    pasteBlockTags: ['pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'table', 'tbody', 'thead', 'tfoot', 'th', 'tr', 'td', 'ul', 'ol', 'li', 'blockquote', 'p', 'figure', 'figcaption'],\r\n    pasteInlineTags: ['a', 'img', 'br', 'strong', 'ins', 'code', 'del', 'span', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'b', 'u', 'em', 'i', 'abbr'],\r\n\r\n    // active buttons\r\n    activeButtons: {\r\n        b: 'bold',\r\n        strong: 'bold',\r\n        i: 'italic',\r\n        em: 'italic',\r\n        del: 'deleted',\r\n        strike: 'deleted',\r\n        u: 'underline'\r\n    },\r\n    activeButtonsAdd: {},\r\n    activeButtonsObservers: {},\r\n\r\n    // autoparser\r\n    autoparse: true,\r\n    autoparseStart: true,\r\n    autoparsePaste: true,\r\n    autoparseLinks: true,\r\n    autoparseImages: true,\r\n    autoparseVideo: true,\r\n    autoparseHttps: false,\r\n\r\n    // shortcodes\r\n    shortcodes: {\r\n        'p.': { format: 'p' },\r\n        'quote.': { format: 'blockquote' },\r\n        'pre.': { format: 'pre' },\r\n        'h1.': { format: 'h1' },\r\n        'h2.': { format: 'h2' },\r\n        'h3.': { format: 'h3' },\r\n        'h4.': { format: 'h4' },\r\n        'h5.': { format: 'h5' },\r\n        'h6.': { format: 'h6' },\r\n        //'1.': { format: 'ol' },\r\n        '*.': { format: 'ul' }\r\n    },\r\n    shortcodesAdd: false, // object\r\n\r\n    // shortcuts\r\n    shortcuts: {\r\n        'ctrl+shift+m, meta+shift+m': { api: 'module.inline.clearformat' },\r\n        'ctrl+b, meta+b': { api: 'module.inline.format', args: 'b' },\r\n        'ctrl+i, meta+i': { api: 'module.inline.format', args: 'i' },\r\n        'ctrl+u, meta+u': { api: 'module.inline.format', args: 'u' },\r\n        'ctrl+h, meta+h': { api: 'module.inline.format', args: 'sup' },\r\n        'ctrl+l, meta+l': { api: 'module.inline.format', args: 'sub' },\r\n        'ctrl+k, meta+k': { api: 'module.link.open' },\r\n        'ctrl+alt+0, meta+alt+0': { api: 'module.block.format', args: 'p' },\r\n        'ctrl+alt+1, meta+alt+1': { api: 'module.block.format', args: 'h1' },\r\n        'ctrl+alt+2, meta+alt+2': { api: 'module.block.format', args: 'h2' },\r\n        'ctrl+alt+3, meta+alt+3': { api: 'module.block.format', args: 'h3' },\r\n        'ctrl+alt+4, meta+alt+4': { api: 'module.block.format', args: 'h4' },\r\n        'ctrl+alt+5, meta+alt+5': { api: 'module.block.format', args: 'h5' },\r\n        'ctrl+alt+6, meta+alt+6': { api: 'module.block.format', args: 'h6' },\r\n        'ctrl+shift+7, meta+shift+7': { api: 'module.list.toggle', args: 'ol' },\r\n        'ctrl+shift+8, meta+shift+8': { api: 'module.list.toggle', args: 'ul' }\r\n    },\r\n    shortcutsAdd: false, // object\r\n\r\n    // misc\r\n    grammarly: true,\r\n    notranslate: false,\r\n\r\n    // private\r\n    bufferLimit: 100,\r\n    emptyHtml: '<p></p>',\r\n    markerChar: '\\ufeff',\r\n    imageTypes: ['image/png', 'image/jpeg', 'image/gif'],\r\n    imageAttrs: ['alt', 'title', 'src', 'class', 'width', 'height', 'srcset'],\r\n    inlineTags: ['a', 'span', 'strong', 'strike', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'abbr'],\r\n    blockTags: ['pre', 'ul', 'ol', 'li', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',  'dl', 'dt', 'dd', 'div', 'table', 'tbody', 'thead', 'tfoot', 'tr', 'th', 'td', 'blockquote', 'output', 'figcaption', 'figure', 'address', 'section', 'header', 'footer', 'aside', 'article', 'iframe'],\r\n    regex: {\r\n        youtube: /^https?\\:\\/\\/(?:www\\.youtube(?:\\-nocookie)?\\.com\\/|m\\.youtube\\.com\\/|youtube\\.com\\/)?(?:ytscreeningroom\\?vi?=|youtu\\.be\\/|vi?\\/|user\\/.+\\/u\\/\\w{1,2}\\/|embed\\/|watch\\?(?:.*\\&)?vi?=|\\&vi?=|\\?(?:.*\\&)?vi?=)([^#\\&\\?\\n\\/<>\"']*)/gi,\r\n        vimeo: /(http|https)?:\\/\\/(?:www.|player.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:\\/[a-zA-Z0-9_-]+)?/gi,\r\n        imageurl: /((https?|www)[^\\s]+\\.)(jpe?g|png|gif)(\\?[^\\s-]+)?/gi,\r\n        url: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z\\u00F0-\\u02AF0-9()!@:%_+.~#?&//=]*)/gi,\r\n        aurl1: /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim,\r\n        aurl2: /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim\r\n    },\r\n    input: true,\r\n    zindex: false,\r\n    modes: {\r\n        \"inline\": {\r\n            pastePlainText: true,\r\n            pasteImages: false,\r\n            enterKey: false,\r\n            toolbar: false,\r\n            autoparse: false,\r\n            source: false,\r\n            showSource: false,\r\n            styles: false,\r\n            air: false\r\n        },\r\n        \"original\": {\r\n            styles: false\r\n        }\r\n    }\r\n};\r\n$R.lang['en'] = {\r\n    \"format\": \"Format\",\r\n    \"image\": \"Image\",\r\n    \"file\": \"File\",\r\n    \"link\": \"Link\",\r\n    \"bold\": \"Bold\",\r\n    \"italic\": \"Italic\",\r\n    \"deleted\": \"Strikethrough\",\r\n    \"underline\": \"Underline\",\r\n    \"superscript\": \"Superscript\",\r\n    \"subscript\": \"Subscript\",\r\n    \"bold-abbr\": \"B\",\r\n    \"italic-abbr\": \"I\",\r\n    \"deleted-abbr\": \"S\",\r\n    \"underline-abbr\": \"U\",\r\n    \"superscript-abbr\": \"Sup\",\r\n    \"subscript-abbr\": \"Sub\",\r\n    \"lists\": \"Lists\",\r\n    \"link-insert\": \"Insert Link\",\r\n    \"link-edit\": \"Edit Link\",\r\n    \"link-in-new-tab\": \"Open link in new tab\",\r\n    \"unlink\": \"Unlink\",\r\n    \"cancel\": \"Cancel\",\r\n    \"close\": \"Close\",\r\n    \"insert\": \"Insert\",\r\n    \"save\": \"Save\",\r\n    \"delete\": \"Delete\",\r\n    \"text\": \"Text\",\r\n    \"edit\": \"Edit\",\r\n    \"title\": \"Alt\",\r\n    \"paragraph\": \"Normal text\",\r\n    \"quote\": \"Quote\",\r\n    \"code\": \"Code\",\r\n    \"heading1\": \"Heading 1\",\r\n    \"heading2\": \"Heading 2\",\r\n    \"heading3\": \"Heading 3\",\r\n    \"heading4\": \"Heading 4\",\r\n    \"heading5\": \"Heading 5\",\r\n    \"heading6\": \"Heading 6\",\r\n    \"filename\": \"Name\",\r\n    \"optional\": \"optional\",\r\n    \"unorderedlist\": \"Unordered List\",\r\n    \"orderedlist\": \"Ordered List\",\r\n    \"outdent\": \"Outdent\",\r\n    \"indent\": \"Indent\",\r\n    \"horizontalrule\": \"Line\",\r\n    \"upload\": \"Upload\",\r\n    \"upload-label\": \"Drop files here or click to upload\",\r\n    \"accessibility-help-label\": \"Rich text editor\",\r\n    \"caption\": \"Caption\",\r\n    \"bulletslist\": \"Bullets\",\r\n    \"numberslist\": \"Numbers\",\r\n    \"image-position\": \"Position\",\r\n    \"none\": \"None\",\r\n    \"left\": \"Left\",\r\n    \"right\": \"Right\",\r\n    \"center\": \"Center\",\r\n    \"undo\": \"Undo\",\r\n    \"redo\": \"Redo\"\r\n};\r\n$R.buttons = {\r\n    html: {\r\n        title: 'HTML',\r\n        icon: true,\r\n        api: 'module.source.toggle'\r\n    },\r\n    undo: {\r\n        title: '## undo ##',\r\n        icon: true,\r\n        api: 'module.buffer.undo'\r\n    },\r\n    redo: {\r\n        title: '## redo ##',\r\n        icon: true,\r\n        api: 'module.buffer.redo'\r\n    },\r\n    format: {\r\n        title: '## format ##',\r\n        icon: true,\r\n        dropdown: {\r\n            p: {\r\n                title: '## paragraph ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'p'\r\n                }\r\n            },\r\n            blockquote: {\r\n                title: '## quote ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'blockquote'\r\n                }\r\n            },\r\n            pre: {\r\n                title: '## code ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'pre'\r\n                }\r\n            },\r\n            h1: {\r\n                title: '## heading1 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h1'\r\n                }\r\n            },\r\n            h2: {\r\n                title: '## heading2 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h2'\r\n                }\r\n            },\r\n            h3: {\r\n                title: '## heading3 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h3'\r\n                }\r\n            },\r\n            h4: {\r\n                title: '## heading4 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h4'\r\n                }\r\n            },\r\n            h5: {\r\n                title: '## heading5 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h5'\r\n                }\r\n            },\r\n            h6: {\r\n                title: '## heading6 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h6'\r\n                }\r\n            }\r\n        }\r\n    },\r\n    bold: {\r\n        title: '## bold-abbr ##',\r\n        icon: true,\r\n        tooltip: '## bold ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'b'\r\n        }\r\n    },\r\n    italic: {\r\n        title: '## italic-abbr ##',\r\n        icon: true,\r\n        tooltip: '## italic ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'i'\r\n        }\r\n    },\r\n    deleted: {\r\n        title: '## deleted-abbr ##',\r\n        icon: true,\r\n        tooltip: '## deleted ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'del'\r\n        }\r\n    },\r\n    underline: {\r\n        title: '## underline-abbr ##',\r\n        icon: true,\r\n        tooltip: '## underline ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'u'\r\n        }\r\n    },\r\n    sup: {\r\n        title: '## superscript-abbr ##',\r\n        icon: true,\r\n        tooltip: '## superscript ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'sup'\r\n        }\r\n    },\r\n    sub: {\r\n        title: '## subscript-abbr ##',\r\n        icon: true,\r\n        tooltip: '## subscript ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'sub'\r\n        }\r\n    },\r\n    lists: {\r\n        title: '## lists ##',\r\n        icon: true,\r\n        observe: 'list',\r\n        dropdown: {\r\n            observe: 'list',\r\n            unorderedlist: {\r\n                title: '&bull; ## unorderedlist ##',\r\n                api: 'module.list.toggle',\r\n                args: 'ul'\r\n            },\r\n            orderedlist: {\r\n                title: '1. ## orderedlist ##',\r\n                api: 'module.list.toggle',\r\n                args: 'ol'\r\n            },\r\n            outdent: {\r\n                title: '< ## outdent ##',\r\n                api: 'module.list.outdent'\r\n            },\r\n            indent: {\r\n                title: '> ## indent ##',\r\n                api: 'module.list.indent'\r\n            }\r\n        }\r\n    },\r\n    ul: {\r\n        title: '&bull; ## bulletslist ##',\r\n        icon: true,\r\n        api: 'module.list.toggle',\r\n        observe: 'list',\r\n        args: 'ul'\r\n    },\r\n    ol: {\r\n        title: '1. ## numberslist ##',\r\n        icon: true,\r\n        api: 'module.list.toggle',\r\n        observe: 'list',\r\n        args: 'ol'\r\n    },\r\n    outdent: {\r\n        title: '## outdent ##',\r\n        icon: true,\r\n        api: 'module.list.outdent',\r\n        observe: 'list'\r\n    },\r\n    indent: {\r\n        title: '## indent ##',\r\n        icon: true,\r\n        api: 'module.list.indent',\r\n        observe: 'list'\r\n    },\r\n    image: {\r\n        title: '## image ##',\r\n        icon: true,\r\n        api: 'module.image.open'\r\n    },\r\n    file: {\r\n        title: '## file ##',\r\n        icon: true,\r\n        api: 'module.file.open'\r\n    },\r\n    link: {\r\n        title: '## link ##',\r\n        icon: true,\r\n        observe: 'link',\r\n        dropdown: {\r\n            observe: 'link',\r\n            link: {\r\n                title: '## link-insert ##',\r\n                api: 'module.link.open'\r\n            },\r\n            unlink: {\r\n                title: '## unlink ##',\r\n                api: 'module.link.unlink'\r\n            }\r\n        }\r\n    },\r\n    line: {\r\n        title: '## horizontalrule ##',\r\n        icon: true,\r\n        api: 'module.line.insert'\r\n    }\r\n};\r\nvar App = function(element, options, uuid)\r\n{\r\n    this.module = {};\r\n    this.plugin = {};\r\n    this.instances = {};\r\n\r\n    // start/stop\r\n    this.started = false;\r\n    this.stopped = false;\r\n\r\n    // environment\r\n    this.uuid = uuid;\r\n    this.rootElement = element;\r\n    this.rootOpts = options;\r\n    this.dragInside = false;\r\n    this.dragComponentInside = false;\r\n    this.keycodes = $R.keycodes;\r\n    this.namespace = 'redactor';\r\n    this.$win = $R.dom(window);\r\n    this.$doc = $R.dom(document);\r\n    this.$body = $R.dom('body');\r\n    this.editorReadOnly = false;\r\n\r\n    // core services\r\n    this.opts = $R.create('service.options', options, element);\r\n    this.lang = $R.create('service.lang', this);\r\n\r\n    // build\r\n    this.buildServices();\r\n    this.buildModules();\r\n    this.buildPlugins();\r\n\r\n    // start\r\n    this.start();\r\n};\r\n\r\nApp.prototype = {\r\n    start: function()\r\n    {\r\n        // start\r\n        this.stopped = false;\r\n        this.broadcast('start');\r\n        this.broadcast('startcode');\r\n\r\n        if (this.opts.clickToEdit)\r\n        {\r\n            this.broadcast('startclicktoedit');\r\n        }\r\n        else\r\n        {\r\n            this.broadcast('enable');\r\n            if (this.opts.showSource) this.broadcast('startcodeshow');\r\n            this.broadcast('enablefocus');\r\n        }\r\n\r\n        // started\r\n        this.broadcast('started');\r\n        this.started = true;\r\n    },\r\n    stop: function()\r\n    {\r\n        this.started = false;\r\n        this.stopped = true;\r\n\r\n        this.broadcast('stop');\r\n        this.broadcast('disable');\r\n        this.broadcast('stopped');\r\n    },\r\n\r\n    // started & stopped\r\n    isStarted: function()\r\n    {\r\n        return this.started;\r\n    },\r\n    isStopped: function()\r\n    {\r\n        return this.stopped;\r\n    },\r\n\r\n    // build\r\n    buildServices: function()\r\n    {\r\n        var core = ['options', 'lang'];\r\n        var bindable = ['uuid', 'keycodes', 'opts', 'lang', '$win', '$doc', '$body'];\r\n        var services = [];\r\n        for (var name in $R.services)\r\n        {\r\n            if (core.indexOf(name) === -1)\r\n            {\r\n                this[name] = $R.create('service.' + name, this);\r\n                services.push(name);\r\n                bindable.push(name);\r\n            }\r\n        }\r\n\r\n        // binding\r\n        for (var i = 0; i < services.length; i++)\r\n        {\r\n            var service = services[i];\r\n            for (var z = 0; z < bindable.length; z++)\r\n            {\r\n                var inj = bindable[z];\r\n                if (service !== inj)\r\n                {\r\n                    this[service][inj] = this[inj];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    buildModules: function()\r\n    {\r\n        for (var name in $R.modules)\r\n        {\r\n            this.module[name] = $R.create('module.' + name, this);\r\n            this.instances[name] = this.module[name];\r\n        }\r\n    },\r\n    buildPlugins: function()\r\n    {\r\n        var plugins = this.opts.plugins;\r\n        for (var i = 0; i < plugins.length; i++)\r\n        {\r\n            var name = plugins[i];\r\n            if (typeof $R.plugins[name] !== 'undefined')\r\n            {\r\n                this.plugin[name] = $R.create('plugin.' + name, this);\r\n                this.instances[name] = this.plugin[name];\r\n            }\r\n        }\r\n    },\r\n\r\n    // draginside\r\n    isDragInside: function()\r\n    {\r\n        return this.dragInside;\r\n    },\r\n    setDragInside: function(dragInside)\r\n    {\r\n        this.dragInside = dragInside;\r\n    },\r\n    isDragComponentInside: function()\r\n    {\r\n        return this.dragComponentInside;\r\n    },\r\n    setDragComponentInside: function(dragInside)\r\n    {\r\n        this.dragComponentInside = dragInside;\r\n    },\r\n    getDragComponentInside: function()\r\n    {\r\n        return this.dragComponentInside;\r\n    },\r\n\r\n    // readonly\r\n    isReadOnly: function()\r\n    {\r\n        return this.editorReadOnly;\r\n    },\r\n    enableReadOnly: function()\r\n    {\r\n        this.editorReadOnly = true;\r\n        this.broadcast('enablereadonly');\r\n        this.component.clearActive();\r\n        this.toolbar.disableButtons();\r\n    },\r\n    disableReadOnly: function()\r\n    {\r\n        this.editorReadOnly = false;\r\n        this.broadcast('disablereadonly');\r\n        this.toolbar.enableButtons();\r\n    },\r\n\r\n    // messaging\r\n    callMessageHandler: function(instance, name, args)\r\n    {\r\n        var arr = name.split('.');\r\n        var value;\r\n        if (arr.length === 1)\r\n        {\r\n            if (typeof instance['on' + name] === 'function')\r\n            {\r\n                value = instance['on' + name].apply(instance, args);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            arr[0] = 'on' + arr[0];\r\n\r\n            var func = this.utils.checkProperty(instance, arr);\r\n            if (typeof func === 'function')\r\n            {\r\n                value = func.apply(instance, args);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    },\r\n    broadcast: function(name)\r\n    {\r\n        var args = [].slice.call(arguments, 1);\r\n        var returned;\r\n        for (var moduleName in this.instances)\r\n        {\r\n            var value = this.callMessageHandler(this.instances[moduleName], name, args);\r\n            if (typeof value !== 'undefined') {\r\n                returned = value;\r\n            }\r\n        }\r\n\r\n        // callback\r\n        var cval = this.callback.trigger(name, args);\r\n\r\n        return (typeof returned !== 'undefined') ? returned : cval;\r\n    },\r\n\r\n    // callback\r\n    on: function(name, func)\r\n    {\r\n        this.callback.add(name, func);\r\n    },\r\n    off: function(name, func)\r\n    {\r\n        this.callback.remove(name, func);\r\n    },\r\n\r\n    // api\r\n    api: function(name)\r\n    {\r\n        if (!this.isStarted() && name !== 'start') return;\r\n        if (this.isReadOnly() && name !== 'disableReadOnly') return;\r\n\r\n        this.broadcast('state');\r\n\r\n        var args = [].slice.call(arguments, 1);\r\n        var arr = name.split('.');\r\n\r\n        var isApp = (arr.length === 1);\r\n        var isCallback = (arr[0] === 'on' || arr[0] === 'off');\r\n        var isService = (!isCallback && arr.length === 2);\r\n        var isPlugin = (arr[0] === 'plugin');\r\n        var isModule = (arr[0] === 'module');\r\n\r\n        // app\r\n        if (isApp)\r\n        {\r\n            if (typeof this[arr[0]] === 'function')\r\n            {\r\n                return this.callInstanceMethod(this, arr[0], args);\r\n            }\r\n        }\r\n        // callback\r\n        else if (isCallback)\r\n        {\r\n            return (arr[0] === 'on') ? this.on(arr[1], args[0]) : this.off(arr[1], args[0] || undefined);\r\n        }\r\n        // service\r\n        else if (isService)\r\n        {\r\n            if (this.isInstanceExists(this, arr[0]))\r\n            {\r\n                return this.callInstanceMethod(this[arr[0]], arr[1], args);\r\n            }\r\n            else\r\n            {\r\n                $R.error(new Error('Service \"' + arr[0] + '\" not found'));\r\n            }\r\n        }\r\n        // plugin\r\n        else if (isPlugin)\r\n        {\r\n            if (this.isInstanceExists(this.plugin, arr[1]))\r\n            {\r\n                return this.callInstanceMethod(this.plugin[arr[1]], arr[2], args);\r\n            }\r\n            else\r\n            {\r\n                $R.error(new Error('Plugin \"' + arr[1] + '\" not found'));\r\n            }\r\n        }\r\n        // module\r\n        else if (isModule)\r\n        {\r\n            if (this.isInstanceExists(this.module, arr[1]))\r\n            {\r\n                return this.callInstanceMethod(this.module[arr[1]], arr[2], args);\r\n            }\r\n            else\r\n            {\r\n                $R.error(new Error('Module \"' + arr[1] + '\" not found'));\r\n            }\r\n        }\r\n\r\n    },\r\n    isInstanceExists: function(obj, name)\r\n    {\r\n        return (typeof obj[name] !== 'undefined');\r\n    },\r\n    callInstanceMethod: function(instance, method, args)\r\n    {\r\n        if (typeof instance[method] === 'function')\r\n        {\r\n            return instance[method].apply(instance, args);\r\n        }\r\n    }\r\n};\r\n$R.add('mixin', 'formatter', {\r\n\r\n    // public\r\n    buildArgs: function(args)\r\n    {\r\n        this.args = {\r\n            'class': args['class'] || false,\r\n            'style': args['style'] || false,\r\n            'attr': args['attr'] || false\r\n        };\r\n\r\n        if (!this.args['class'] && !this.args['style'] && !this.args['attr'])\r\n        {\r\n            this.args = false;\r\n        }\r\n    },\r\n    applyArgs: function(nodes, selection)\r\n    {\r\n        if (this.args)\r\n        {\r\n            nodes = this[this.type](this.args, false, nodes, selection);\r\n        }\r\n        else\r\n        {\r\n            nodes = this._clearAll(nodes, selection);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    clearClass: function(tags, nodes)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags, true);\r\n        $elements.removeAttr('class');\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    clearStyle: function(tags, nodes)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags, true);\r\n        $elements.removeAttr('style');\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    clearAttr: function(tags, nodes)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags, true);\r\n        this._removeAllAttr($elements);\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    set: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.removeAttr('class');\r\n            $elements.addClass(args['class']);\r\n        }\r\n\r\n        if (args['style'])\r\n        {\r\n            $elements.removeAttr('style');\r\n            $elements.css(args['style']);\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n            });\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            this._removeAllAttr($elements);\r\n            $elements.attr(args['attr']);\r\n        }\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return $elements.getAll();\r\n    },\r\n    toggle: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.toggleClass(args['class']);\r\n            $elements.each(function(node)\r\n            {\r\n                if (node.className === '') node.removeAttribute('class');\r\n            });\r\n        }\r\n\r\n        var params;\r\n        if (args['style'])\r\n        {\r\n            params = args['style'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                for (var key in params)\r\n                {\r\n                    var newVal = params[key];\r\n                    var oldVal = $node.css(key);\r\n\r\n                    oldVal = (this.utils.isRgb(oldVal)) ? this.utils.rgb2hex(oldVal) : oldVal.replace(/\"/g, '');\r\n                    newVal = (this.utils.isRgb(newVal)) ? this.utils.rgb2hex(newVal) : newVal.replace(/\"/g, '');\r\n\r\n                    oldVal = this.utils.hex2long(oldVal);\r\n                    newVal = this.utils.hex2long(newVal);\r\n\r\n                    var compareNew = (typeof newVal === 'string') ? newVal.toLowerCase() : newVal;\r\n                    var compareOld = (typeof oldVal === 'string') ? oldVal.toLowerCase() : oldVal;\r\n\r\n                    if (compareNew === compareOld) $node.css(key, '');\r\n                    else $node.css(key, newVal);\r\n                }\r\n\r\n                this._convertStyleQuotes($node);\r\n                if (this.utils.removeEmptyAttr(node, 'style'))\r\n                {\r\n                    $node.removeAttr('data-redactor-style-cache');\r\n                }\r\n                else\r\n                {\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            params = args['attr'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                for (var key in params)\r\n                {\r\n                    if ($node.attr(key)) $node.removeAttr(key);\r\n                    else $node.attr(key, params[key]);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return $elements.getAll();\r\n    },\r\n    add: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.addClass(args['class']);\r\n        }\r\n\r\n        if (args['style'])\r\n        {\r\n            var params = args['style'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                $node.css(params);\r\n                $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n\r\n                this._convertStyleQuotes($node);\r\n\r\n            }.bind(this));\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            $elements.attr(args['attr']);\r\n        }\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return $elements.getAll();\r\n    },\r\n    remove: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.removeClass(args['class']);\r\n            $elements.each(function(node)\r\n            {\r\n                if (node.className === '') node.removeAttribute('class');\r\n            });\r\n        }\r\n\r\n        if (args['style'])\r\n        {\r\n            var name = args['style'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                $node.css(name, '');\r\n\r\n                if (this.utils.removeEmptyAttr(node, 'style'))\r\n                {\r\n                    $node.removeAttr('data-redactor-style-cache');\r\n                }\r\n                else\r\n                {\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            $elements.removeAttr(args['attr']);\r\n        }\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // private\r\n    _removeAllAttr: function($elements)\r\n    {\r\n        $elements.each(function(node)\r\n        {\r\n            for (var i = node.attributes.length; i-->0;)\r\n            {\r\n                var nodeAttr = node.attributes[i];\r\n                var name = nodeAttr.name;\r\n                if (name !== 'style' && name !== 'class')\r\n                {\r\n                    node.removeAttributeNode(nodeAttr);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    _convertStyleQuotes: function($node)\r\n    {\r\n        var style = $node.attr('style');\r\n        if (style) $node.attr('style', style.replace(/\"/g, '\\''));\r\n    },\r\n    _clearAll: function(nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = nodes[i];\r\n            while (node.attributes.length > 0)\r\n            {\r\n                node.removeAttribute(node.attributes[0].name);\r\n            }\r\n        }\r\n\r\n        nodes = this._unwrapSpanWithoutAttr(nodes);\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    _unwrapSpanWithoutAttr: function(nodes)\r\n    {\r\n        var finalNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = nodes[i];\r\n            var len = node.attributes.length;\r\n            if (len <= 0 && node.nodeType !== 3 && node.tagName === 'SPAN')\r\n            {\r\n                $R.dom(node).unwrap();\r\n            }\r\n            else\r\n            {\r\n                finalNodes.push(node);\r\n            }\r\n        }\r\n\r\n        return finalNodes;\r\n    }\r\n});\r\n$R.add('mixin', 'dom', $R.Dom.prototype);\r\n$R.add('mixin', 'component', {\r\n    get cmnt()\r\n    {\r\n        return true;\r\n    }\r\n});\r\n$R.add('service', 'options', {\r\n    init: function(options, element)\r\n    {\r\n        var $el = $R.dom(element);\r\n        var opts = $R.extend({}, $R.opts, (element) ? $el.data() : {}, $R.options);\r\n        opts = $R.extend(true, opts, options);\r\n\r\n        return opts;\r\n    }\r\n});\r\n$R.add('service', 'lang', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // build\r\n        this.vars = this._build(this.opts.lang);\r\n    },\r\n\r\n    // public\r\n    rebuild: function(lang)\r\n    {\r\n        this.opts.lang = lang;\r\n        this.vars = this._build(lang);\r\n    },\r\n    extend: function(obj)\r\n    {\r\n        this.vars = $R.extend(this.vars, obj);\r\n    },\r\n    parse: function(str)\r\n    {\r\n        if (str === undefined)\r\n        {\r\n            return '';\r\n        }\r\n\r\n        var matches = str.match(/## (.*?) ##/g);\r\n        if (matches)\r\n        {\r\n            for (var i = 0; i < matches.length; i++)\r\n            {\r\n                var key = matches[i].replace(/^##\\s/g, '').replace(/\\s##$/g, '');\r\n                str = str.replace(matches[i], this.get(key));\r\n            }\r\n        }\r\n\r\n        return str;\r\n    },\r\n    get: function(name)\r\n    {\r\n        var str = '';\r\n        if (typeof this.vars[name] !== 'undefined')\r\n        {\r\n            str = this.vars[name];\r\n        }\r\n        else if (this.opts.lang !== 'en' && typeof $R.lang['en'][name] !== 'undefined')\r\n        {\r\n            str = $R.lang['en'][name];\r\n        }\r\n\r\n        return str;\r\n    },\r\n\r\n    // private\r\n    _build: function(lang)\r\n    {\r\n        var vars = $R.lang['en'];\r\n        if (lang !== 'en')\r\n        {\r\n            vars = ($R.lang[lang] !== undefined) ? $R.lang[lang] : vars;\r\n        }\r\n\r\n        return vars;\r\n    }\r\n});\r\n$R.add('service', 'callback', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.callbacks = {};\r\n\r\n        // build\r\n        if (this.opts.callbacks)\r\n        {\r\n            this._set(this.opts.callbacks, '');\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        this.callbacks = {};\r\n    },\r\n    add: function(name, handler)\r\n    {\r\n        if (!this.callbacks[name]) this.callbacks[name] = [];\r\n        this.callbacks[name].push(handler);\r\n    },\r\n    remove: function(name, handler)\r\n    {\r\n        if (handler === undefined)\r\n        {\r\n            delete this.callbacks[name];\r\n        }\r\n        else\r\n        {\r\n            for (var i = 0; i < this.callbacks[name].length; i++)\r\n            {\r\n                this.callbacks[name].splice(i, 1);\r\n            }\r\n\r\n            if (Object.keys(this.callbacks[name]).length === 0) delete this.callbacks[name];\r\n        }\r\n    },\r\n    trigger: function(name, args)\r\n    {\r\n        var value = this._loop(name, args, this.callbacks);\r\n        return (typeof value === 'undefined' && args && args[0] !== false) ? args[0] : value;\r\n    },\r\n\r\n    // private\r\n    _set: function(obj, name)\r\n    {\r\n        for (var key in obj)\r\n        {\r\n            var path = (name === '') ? key : name + '.' + key;\r\n            if (typeof obj[key] === 'object')\r\n            {\r\n                this._set(obj[key], path);\r\n            }\r\n            else\r\n            {\r\n                this.callbacks[path] = [];\r\n                this.callbacks[path].push(obj[key]);\r\n            }\r\n        }\r\n    },\r\n    _loop: function(name, args, obj)\r\n    {\r\n        var value;\r\n        for (var key in obj)\r\n        {\r\n            if (name === key)\r\n            {\r\n                for (var i = 0; i < obj[key].length; i++)\r\n                {\r\n                    value = obj[key][i].apply(this.app, args);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n});\r\n$R.add('service', 'animate', {\r\n    init: function(app)\r\n    {\r\n        this.animationOpt = app.opts.animation;\r\n    },\r\n    start: function(element, animation, options, callback)\r\n    {\r\n        var defaults = {\r\n            duration: false,\r\n            iterate: false,\r\n            delay: false,\r\n            timing: false,\r\n            prefix: 'redactor-'\r\n        };\r\n\r\n        defaults = (typeof options === 'function') ? defaults : $R.extend(defaults, options);\r\n        callback = (typeof options === 'function') ? options : callback;\r\n\r\n        // play\r\n        return new $R.AnimatePlay(element, animation, defaults, callback, this.animationOpt);\r\n    },\r\n    stop: function(element)\r\n    {\r\n        this.$el = $R.dom(element);\r\n        this.$el.removeClass('redactor-animated');\r\n\r\n        var effect = this.$el.attr('redactor-animate-effect');\r\n        this.$el.removeClass(effect);\r\n\r\n        this.$el.removeAttr('redactor-animate-effect');\r\n        var hide = this.$el.attr('redactor-animate-hide');\r\n        if (hide)\r\n        {\r\n            this.$el.addClass(hide).removeAttr('redactor-animate-hide');\r\n        }\r\n\r\n        this.$el.off('animationend webkitAnimationEnd');\r\n    }\r\n});\r\n\r\n$R.AnimatePlay = function(element, animation, defaults, callback, animationOpt)\r\n{\r\n    this.hidableEffects = ['fadeOut', 'flipOut', 'slideUp', 'zoomOut', 'slideOutUp', 'slideOutRight', 'slideOutLeft'];\r\n    this.prefixes = ['', '-webkit-'];\r\n\r\n    this.$el = $R.dom(element);\r\n    this.$body = $R.dom('body');\r\n    this.callback = callback;\r\n    this.animation = (!animationOpt) ? this.buildAnimationOff(animation) : animation;\r\n    this.defaults = defaults;\r\n\r\n    if (this.animation === 'slideUp')\r\n    {\r\n        this.$el.height(this.$el.height());\r\n    }\r\n\r\n    // animate\r\n    return (this.isInanimate()) ? this.inanimate() : this.animate();\r\n};\r\n\r\n$R.AnimatePlay.prototype = {\r\n    buildAnimationOff: function(animation)\r\n    {\r\n        return (this.isHidable(animation)) ? 'hide' : 'show';\r\n    },\r\n    buildHideClass: function()\r\n    {\r\n        return 'redactor-animate-hide';\r\n    },\r\n    isInanimate: function()\r\n    {\r\n        return (this.animation === 'show' || this.animation === 'hide');\r\n    },\r\n    isAnimated: function()\r\n    {\r\n        return this.$el.hasClass('redactor-animated');\r\n    },\r\n    isHidable: function(effect)\r\n    {\r\n        return (this.hidableEffects.indexOf(effect) !== -1);\r\n    },\r\n    inanimate: function()\r\n    {\r\n        this.defaults.timing = 'linear';\r\n\r\n        var hide;\r\n        if (this.animation === 'show')\r\n        {\r\n            hide = this.buildHideClass();\r\n            this.$el.attr('redactor-animate-hide', hide);\r\n            this.$el.removeClass(hide);\r\n        }\r\n        else\r\n        {\r\n            hide = this.$el.attr('redactor-animate-hide');\r\n            this.$el.addClass(hide).removeAttr('redactor-animate-hide');\r\n        }\r\n\r\n        if (typeof this.callback === 'function') this.callback(this);\r\n\r\n        return this;\r\n    },\r\n    animate: function()\r\n    {\r\n        var delay = (this.defaults.delay) ? this.defaults.delay : 0;\r\n        setTimeout(function()\r\n        {\r\n            this.$body.addClass('no-scroll-x');\r\n            this.$el.addClass('redactor-animated');\r\n            if (!this.$el.attr('redactor-animate-hide'))\r\n            {\r\n                var hide = this.buildHideClass();\r\n                this.$el.attr('redactor-animate-hide', hide);\r\n                this.$el.removeClass(hide);\r\n            }\r\n\r\n            this.$el.addClass(this.defaults.prefix + this.animation);\r\n            this.$el.attr('redactor-animate-effect', this.defaults.prefix + this.animation);\r\n\r\n            this.set(this.defaults.duration + 's', this.defaults.iterate, this.defaults.timing);\r\n            this.complete();\r\n\r\n        }.bind(this), delay * 1000);\r\n\r\n        return this;\r\n    },\r\n    set: function(duration, iterate, timing)\r\n    {\r\n        var len = this.prefixes.length;\r\n\r\n        while (len--)\r\n        {\r\n            if (duration !== false || duration === '') this.$el.css(this.prefixes[len] + 'animation-duration', duration);\r\n            if (iterate !== false || iterate === '') this.$el.css(this.prefixes[len] + 'animation-iteration-count', iterate);\r\n            if (timing !== false || timing === '') this.$el.css(this.prefixes[len] + 'animation-timing-function', timing);\r\n        }\r\n    },\r\n    clean: function()\r\n    {\r\n        this.$body.removeClass('no-scroll-x');\r\n        this.$el.removeClass('redactor-animated');\r\n        this.$el.removeClass(this.defaults.prefix + this.animation);\r\n        this.$el.removeAttr('redactor-animate-effect');\r\n\r\n        this.set('', '', '');\r\n    },\r\n    complete: function()\r\n    {\r\n        this.$el.one('animationend webkitAnimationEnd', function()\r\n        {\r\n            if (this.$el.hasClass(this.defaults.prefix + this.animation)) this.clean();\r\n            if (this.isHidable(this.animation))\r\n            {\r\n                var hide = this.$el.attr('redactor-animate-hide');\r\n                this.$el.addClass(hide).removeAttr('redactor-animate-hide');\r\n            }\r\n\r\n            if (this.animation === 'slideUp') this.$el.height('');\r\n            if (typeof this.callback === 'function') this.callback(this.$el);\r\n\r\n        }.bind(this));\r\n    }\r\n};\r\n$R.add('service', 'caret', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n\r\n    // set\r\n    setStart: function(el)\r\n    {\r\n        this._setCaret('Start', el);\r\n    },\r\n    setEnd: function(el)\r\n    {\r\n        this._setCaret('End', el);\r\n    },\r\n    setBefore: function(el)\r\n    {\r\n        this._setCaret('Before', el);\r\n    },\r\n    setAfter: function(el)\r\n    {\r\n        this._setCaret('After', el);\r\n    },\r\n\r\n    // is\r\n    isStart: function(el)\r\n    {\r\n        return this._isStartOrEnd(el, 'First');\r\n    },\r\n    isEnd: function(el)\r\n    {\r\n        return this._isStartOrEnd(el, 'Last');\r\n    },\r\n\r\n    // set side\r\n    setAtEnd: function(node)\r\n    {\r\n        var data = this.inspector.parse(node);\r\n        var tag = data.getTag();\r\n        var range = document.createRange();\r\n        if (this._isInPage(node))\r\n        {\r\n            if (tag === 'a')\r\n            {\r\n                var textNode = this.utils.createInvisibleChar();\r\n                $R.dom(node).after(textNode);\r\n\r\n                range.selectNodeContents(textNode);\r\n                range.collapse(true);\r\n            }\r\n            else\r\n            {\r\n                range.selectNodeContents(node);\r\n                range.collapse(false);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtStart: function(node)\r\n    {\r\n\t\tvar range = document.createRange();\r\n\t\tvar data = this.inspector.parse(node);\r\n        if (this._isInPage(node))\r\n        {\r\n            range.setStart(node, 0);\r\n            range.collapse(true);\r\n\r\n            if (data.isInline())\r\n            {\r\n                var textNode = this.utils.createInvisibleChar();\r\n                range.insertNode(textNode);\r\n                range.selectNodeContents(textNode);\r\n                range.collapse(false);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtBefore: function(node)\r\n    {\r\n        var data = this.inspector.parse(node);\r\n        var range = document.createRange();\r\n        if (this._isInPage(node))\r\n        {\r\n            range.setStartBefore(node);\r\n            range.collapse(true);\r\n\r\n            if (data.isInline())\r\n            {\r\n                var textNode = this.utils.createInvisibleChar();\r\n                node.parentNode.insertBefore(textNode, node);\r\n                range.selectNodeContents(textNode);\r\n                range.collapse(false);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtAfter: function(node)\r\n    {\r\n\r\n        var range = document.createRange();\r\n        if (this._isInPage(node))\r\n        {\r\n            range.setStartAfter(node);\r\n            range.collapse(true);\r\n\r\n            var textNode = this.utils.createInvisibleChar();\r\n            range.insertNode(textNode);\r\n            range.selectNodeContents(textNode);\r\n            range.collapse(false);\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtPrev: function(node)\r\n    {\r\n        var prev = node.previousSibling;\r\n        if (prev)\r\n        {\r\n            prev = (prev.nodeType === 3 && this._isEmptyTextNode(prev)) ? prev.previousElementSibling : prev;\r\n            if (prev) this.setEnd(prev);\r\n        }\r\n    },\r\n    setAtNext: function(node)\r\n    {\r\n        var next = node.nextSibling;\r\n        if (next)\r\n        {\r\n            next = (next.nodeType === 3 && this._isEmptyTextNode(next)) ? next.nextElementSibling : next;\r\n            if (next) this.setStart(next);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _setCaret: function(type, el)\r\n    {\r\n        var data = this.inspector.parse(el);\r\n        var node = data.getNode();\r\n\r\n        if (node)\r\n        {\r\n            this.component.clearActive();\r\n            this['_set' + type](node, data, data.getTag());\r\n        }\r\n    },\r\n    _setStart: function(node, data, tag)\r\n    {\r\n        // 1. text\r\n        if (data.isText())\r\n        {\r\n            this.editor.focus();\r\n            return this.setAtStart(node);\r\n        }\r\n        // 2. ul, ol\r\n        else if (tag === 'ul' || tag === 'ol')\r\n        {\r\n            node = data.findFirstNode('li');\r\n\r\n            var item = this.utils.getFirstElement(node);\r\n            var dataItem = this.inspector.parse(item);\r\n            if (item && dataItem.isComponent())\r\n            {\r\n                return this.setStart(dataItem.getComponent());\r\n            }\r\n        }\r\n        // 3. dl\r\n        else if (tag === 'dl')\r\n        {\r\n            node = data.findFirstNode('dt');\r\n        }\r\n        // 4. br / hr\r\n        else if (tag === 'br' || tag === 'hr')\r\n        {\r\n            return this.setBefore(node);\r\n        }\r\n        // 5. th, td\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            var el = data.getFirstElement(node);\r\n            if (el)\r\n            {\r\n                return this.setStart(el);\r\n            }\r\n        }\r\n        // 6. table\r\n        else if (tag === 'table' || tag === 'tr')\r\n        {\r\n            return this.setStart(data.findFirstNode('th, td'));\r\n        }\r\n        // 7. figure code\r\n        else if (data.isComponentType('code') && !data.isFigcaption())\r\n        {\r\n            var code = data.findLastNode('pre, code');\r\n\r\n            this.editor.focus();\r\n            return this.setAtStart(code);\r\n        }\r\n        // 8. table component\r\n        else if (tag === 'figure' && data.isComponentType('table'))\r\n        {\r\n            var table = data.getTable();\r\n            var tableData = this.inspector.parse(table);\r\n\r\n            return this.setStart(tableData.findFirstNode('th, td'));\r\n        }\r\n        // 9. non editable components\r\n        else if (!data.isComponentType('table') && data.isComponent() && !data.isFigcaption())\r\n        {\r\n            return this.component.setActive(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n\r\n        // set\r\n        if (!this._setInline(node, 'Start'))\r\n        {\r\n            this.setAtStart(node);\r\n        }\r\n    },\r\n    _setEnd: function(node, data, tag)\r\n    {\r\n        // 1. text\r\n        if (data.isText())\r\n        {\r\n            this.editor.focus();\r\n            return this.setAtEnd(node);\r\n        }\r\n        // 2. ul, ol\r\n        else if (tag === 'ul' || tag === 'ol')\r\n        {\r\n            node = data.findLastNode('li');\r\n\r\n            var item = this.utils.getLastElement(node);\r\n            var dataItem = this.inspector.parse(item);\r\n            if (item && dataItem.isComponent())\r\n            {\r\n                return this.setEnd(dataItem.getComponent());\r\n            }\r\n        }\r\n        // 3. dl\r\n        else if (tag === 'dl')\r\n        {\r\n            node = data.findLastNode('dd');\r\n        }\r\n        // 4. br / hr\r\n        else if (tag === 'br' || tag === 'hr')\r\n        {\r\n            return this.setAfter(node);\r\n        }\r\n        // 5. th, td\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            var el = data.getLastElement();\r\n            if (el)\r\n            {\r\n                return this.setEnd(el);\r\n            }\r\n        }\r\n        // 6. table\r\n        else if (tag === 'table' || tag === 'tr')\r\n        {\r\n            return this.setEnd(data.findLastNode('th, td'));\r\n        }\r\n        // 7. figure code\r\n        else if (data.isComponentType('code') && !data.isFigcaption())\r\n        {\r\n            var code = data.findLastNode('pre, code');\r\n\r\n            this.editor.focus();\r\n            return this.setAtEnd(code);\r\n        }\r\n        // 8. table component\r\n        else if (tag === 'figure' && data.isComponentType('table'))\r\n        {\r\n            var table = data.getTable();\r\n            var tableData = this.inspector.parse(table);\r\n\r\n            return this.setEnd(tableData.findLastNode('th, td'));\r\n        }\r\n        // 9. non editable components\r\n        else if (!data.isComponentType('table') && data.isComponent() && !data.isFigcaption())\r\n        {\r\n            return this.component.setActive(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n\r\n        // set\r\n        if (!this._setInline(node, 'End'))\r\n        {\r\n            // is element empty\r\n            if (this.utils.isEmpty(node))\r\n            {\r\n                return this.setStart(node);\r\n            }\r\n\r\n            this.setAtEnd(node);\r\n        }\r\n    },\r\n    _setBefore: function(node, data, tag)\r\n    {\r\n        // text\r\n        if (node.nodeType === 3)\r\n        {\r\n            return this.setAtBefore(node);\r\n        }\r\n        // inline\r\n        else if (data.isInline())\r\n        {\r\n            return this.setAtBefore(node);\r\n        }\r\n        // td / th\r\n        else if (data.isFirstTableCell())\r\n        {\r\n            return this.setAtPrev(data.getComponent());\r\n        }\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            return this.setAtPrev(node);\r\n        }\r\n        // li\r\n        else if (data.isFirstListItem())\r\n        {\r\n            return this.setAtPrev(data.getList());\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            return this.setStart(data.getComponent());\r\n        }\r\n        // component\r\n        else if (!data.isComponentType('table') && data.isComponent())\r\n        {\r\n            return this.setAtPrev(data.getComponent());\r\n        }\r\n        // block\r\n        else if (data.isBlock())\r\n        {\r\n            return this.setAtPrev(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n        this.setAtBefore(node);\r\n\r\n    },\r\n    _setAfter: function(node, data, tag)\r\n    {\r\n        // text\r\n        if (node.nodeType === 3)\r\n        {\r\n            return this.setAtAfter(node);\r\n        }\r\n        // inline\r\n        else if (data.isInline())\r\n        {\r\n            return this.setAtAfter(node);\r\n        }\r\n        // td / th\r\n        else if (data.isLastTableCell())\r\n        {\r\n            return this.setAtNext(data.getComponent());\r\n        }\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            return this.setAtNext(node);\r\n        }\r\n        // li\r\n        else if (data.isFirstListItem())\r\n        {\r\n            return this.setAtNext(data.getList());\r\n        }\r\n        // component\r\n        else if (!data.isComponentType('table') && data.isComponent())\r\n        {\r\n            return this.setAtNext(data.getComponent());\r\n        }\r\n        // block\r\n        else if (data.isBlock())\r\n        {\r\n            return this.setAtNext(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n        this.setAtAfter(node);\r\n    },\r\n    _setInline: function(node, type)\r\n    {\r\n        // is first element inline (FF only)\r\n        var inline = this._hasInlineChild(node, (type === 'Start') ? 'first' : 'last');\r\n        if (inline)\r\n        {\r\n            if (type === 'Start')\r\n            {\r\n                this.setStart(inline);\r\n            }\r\n            else\r\n            {\r\n                this.setEnd(inline);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    },\r\n    _isStartOrEnd: function(el, type)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return false;\r\n\r\n        var data = this.inspector.parse(node);\r\n        node = this._getStartEndNode(node, data, type);\r\n\r\n        if (node && (node.nodeType !== 3 && node.tagName !== 'LI'))\r\n        {\r\n            var html = (node.nodeType === 3) ? node.textContent : node.innerHTML;\r\n            html = this.utils.trimSpaces(html);\r\n            if (html === '') return true;\r\n        }\r\n\r\n        if (!data.isFigcaption() && data.isComponent() && !data.isComponentEditable())\r\n        {\r\n            return true;\r\n        }\r\n\r\n        var offset = this.offset.get(node, true);\r\n        if (offset)\r\n        {\r\n            return (type === 'First') ? (offset.start === 0) : (offset.end === this.offset.size(node, true));\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    },\r\n    _isInPage: function(node)\r\n    {\r\n        if (node && node.nodeType)\r\n        {\r\n            return (node === document.body) ? false : document.body.contains(node);\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    },\r\n    _hasInlineChild: function(el, pos)\r\n    {\r\n        var data = this.inspector.parse(el);\r\n        var node = (pos === 'first') ? data.getFirstNode() : data.getLastNode();\r\n        var $node = $R.dom(node);\r\n\r\n        if (node && node.nodeType !== 3\r\n            && this.inspector.isInlineTag(node.tagName)\r\n            && !$node.hasClass('redactor-component')\r\n             && !$node.hasClass('non-editable'))\r\n        {\r\n            return node;\r\n        }\r\n    },\r\n    _isEmptyTextNode: function(node)\r\n    {\r\n        var text = node.textContent.trim().replace(/\\n/, '');\r\n        text = this.utils.removeInvisibleChars(text);\r\n\r\n        return (text === '');\r\n    },\r\n    _getStartEndNode: function(node, data, type)\r\n    {\r\n        if (data.isFigcaption())\r\n        {\r\n            node = data.getFigcaption();\r\n        }\r\n        else if (data.isTable())\r\n        {\r\n            node = data['find' + type + 'Node']('th, td');\r\n        }\r\n        else if (data.isList())\r\n        {\r\n            node = data['find' + type + 'Node']('li');\r\n        }\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            node = data.findLastNode('pre, code');\r\n        }\r\n\r\n        return node;\r\n    }\r\n});\r\nvar containsNode = function containsNode(node) {\r\n    return document.getSelection().containsNode(node, true);\r\n};\r\n\r\nvar containsNodePolyfill = function polyfill(node) {\r\n    var selection = document.getSelection();\r\n    var start = selection.anchorNode.parentNode;\r\n    var finalnode = selection.focusNode.parentNode;\r\n    var rectSelection = selection.getRangeAt(0).getBoundingClientRect();\r\n    var rectBlock = node.getBoundingClientRect();\r\n\r\n    if ($R.dom(start).closest(node).length) {\r\n        return true;\r\n    }\r\n\r\n    if ($R.dom(finalnode).closest(node).length) {\r\n        return true;\r\n    }\r\n\r\n    if (rectSelection.top < rectBlock.top && rectSelection.height > rectBlock.height) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nif (!('containsNode' in Selection.prototype)) {\r\n    containsNode = containsNodePolyfill;\r\n}\r\n\r\n$R.add('service', 'selection', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // is\r\n    is: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel)\r\n        {\r\n            var node = sel.anchorNode;\r\n\r\n            return ($R.dom(node).closest('.redactor-in-' + this.uuid).length !== 0 || node === this.editor.getElement().get());\r\n        }\r\n\r\n        return false;\r\n    },\r\n    isCollapsed: function()\r\n    {\r\n        var sel = this.get();\r\n        var range = this.getRange();\r\n\r\n        if (sel && sel.isCollapsed) return true;\r\n        else if (range && range.toString().length === 0) return true;\r\n\r\n        return false;\r\n    },\r\n    isBackwards: function()\r\n    {\r\n        var backwards = false;\r\n        var sel = this.get();\r\n\r\n        if (sel && !sel.isCollapsed)\r\n        {\r\n            var range = document.createRange();\r\n            range.setStart(sel.anchorNode, sel.anchorOffset);\r\n            range.setEnd(sel.focusNode, sel.focusOffset);\r\n            backwards = range.collapsed;\r\n            range.detach();\r\n        }\r\n\r\n        return backwards;\r\n    },\r\n    isIn: function(el)\r\n    {\r\n        var node = $R.dom(el).get();\r\n        var current = this.getCurrent();\r\n\r\n        return (current && node) ? node.contains(current) : false;\r\n    },\r\n    isText: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel)\r\n        {\r\n            var el = sel.anchorNode;\r\n            var block = this.getBlock(el);\r\n            var blocks = this.getBlocks();\r\n\r\n            // td, th or hasn't block\r\n            if ((block && this.inspector.isTableCellTag(block.tagName)) || (block === false && blocks.length === 0))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    isAll: function(el)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return false;\r\n\r\n        var isEditor = this.editor.isEditor(node);\r\n        var data = this.inspector.parse(node);\r\n\r\n        // component\r\n        if (!data.isFigcaption() && this.component.isNonEditable(node) && this.component.isActive(node))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        if (isEditor)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var output = $editor.html().replace(/<p><\\/p>$/i, '');\r\n            var htmlLen = this.getHtml(false).length;\r\n            var outputLen = output.length;\r\n\r\n            if (htmlLen !== outputLen)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // editor empty or collapsed\r\n        if ((isEditor && this.editor.isEmpty()) || this.isCollapsed())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // all\r\n        var offset = this.offset.get(node, true);\r\n        var size = this.offset.size(node, true);\r\n\r\n        // pre, table, or pre/code in figure\r\n        if (!isEditor && data.isComponentType('code'))\r\n        {\r\n            size = this.getText().trim().length;\r\n        }\r\n\r\n        if (offset && offset.start === 0 && offset.end === size)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    // has\r\n    hasNonEditable: function()\r\n    {\r\n        var selected = this.getHtml();\r\n        var $wrapper = $R.dom('<div>').html(selected);\r\n\r\n        return (!this.isCollapsed() && $wrapper.find('.non-editable').length !== 0);\r\n    },\r\n\r\n    // set\r\n    setRange: function(range)\r\n    {\r\n        var sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    },\r\n    setAll: function(el)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return;\r\n\r\n        var data = this.inspector.parse(node);\r\n\r\n        this.component.clearActive();\r\n\r\n        this.editor.focus();\r\n        this.editor.saveScroll();\r\n        this.editor.disableNonEditables();\r\n\r\n        if (node && node.tagName === 'TABLE')\r\n        {\r\n            var first = data.findFirstNode('td, th');\r\n            var last = data.findLastNode('td, th');\r\n\r\n            $R.dom(first).prepend(this.marker.build('start'));\r\n            $R.dom(last).append(this.marker.build('end'));\r\n\r\n            this.restoreMarkers();\r\n        }\r\n        else if (!data.isFigcaption() && this.component.isNonEditable(node))\r\n        {\r\n            this.component.setActive(node);\r\n        }\r\n        else\r\n        {\r\n            if (data.isComponentType('code'))\r\n            {\r\n                node = data.getComponentCodeElement();\r\n                node.focus();\r\n            }\r\n\r\n            var range = document.createRange();\r\n            range.selectNodeContents(node);\r\n\r\n            this.setRange(range);\r\n        }\r\n\r\n        this.editor.enableNonEditables();\r\n        this.editor.restoreScroll();\r\n    },\r\n\r\n    // get\r\n    get: function()\r\n    {\r\n        var sel = window.getSelection();\r\n        return (sel.rangeCount > 0) ? sel : null;\r\n    },\r\n    getRange: function()\r\n    {\r\n        var sel = this.get();\r\n        return (sel) ? ((sel.getRangeAt(0)) ? sel.getRangeAt(0) : null) : null;\r\n    },\r\n    getTextBeforeCaret: function(num)\r\n    {\r\n        num = (typeof num === 'undefined') ? 1 : num;\r\n\r\n        var el = this.editor.getElement().get();\r\n        var range = this.getRange();\r\n        var text = false;\r\n        if (range)\r\n        {\r\n            range = range.cloneRange();\r\n            range.collapse(true);\r\n            range.setStart(el, 0);\r\n            text = range.toString().slice(-num);\r\n        }\r\n\r\n        return text;\r\n    },\r\n    getTextAfterCaret: function(num)\r\n    {\r\n        num = (typeof num === 'undefined') ? 1 : num;\r\n\r\n        var el = this.editor.getElement().get();\r\n        var range = this.getRange();\r\n        var text = false;\r\n        if (range)\r\n        {\r\n            var clonedRange = range.cloneRange();\r\n            clonedRange.selectNodeContents(el);\r\n            clonedRange.setStart(range.endContainer, range.endOffset);\r\n\r\n            text = clonedRange.toString().slice(0, num);\r\n        }\r\n\r\n        return text;\r\n    },\r\n    getPosition: function()\r\n    {\r\n        var range = this.getRange();\r\n        var pos = { top: 0, left: 0, width: 0, height: 0 };\r\n        if (window.getSelection && range.getBoundingClientRect)\r\n        {\r\n            range = range.cloneRange();\r\n            var offset = (range.startOffset-1);\r\n            range.setStart(range.startContainer, (offset < 0) ? 0 : offset);\r\n            var rect = range.getBoundingClientRect();\r\n            pos = { top: rect.top, left: rect.left, width: (rect.right - rect.left) , height: (rect.bottom - rect.top) };\r\n        }\r\n\r\n        return pos;\r\n    },\r\n    getCurrent: function()\r\n    {\r\n        var node = false;\r\n        var sel = this.get();\r\n        var component = this.component.getActive();\r\n\r\n        if (component)\r\n        {\r\n            node = component;\r\n        }\r\n        else if (sel && this.is())\r\n        {\r\n            node = (sel.anchorNode !== this.editor.getElement().get()) ? sel.anchorNode : false;\r\n        }\r\n\r\n        return node;\r\n    },\r\n    getParent: function()\r\n    {\r\n        var node = false;\r\n        var current = this.getCurrent();\r\n        if (current)\r\n        {\r\n            var parent = current.parentNode;\r\n            node = (parent !== this.editor.getElement().get()) ? parent : false;\r\n        }\r\n\r\n        return node;\r\n    },\r\n    getElement: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        while (node)\r\n        {\r\n            var data = this.inspector.parse(node);\r\n            if (data.isElement() && data.isInEditor())\r\n            {\r\n                return node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getInline: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        var inline = false;\r\n        while (node)\r\n        {\r\n            if (this._isInlineNode(node))\r\n            {\r\n                inline = node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return inline;\r\n    },\r\n    getInlineFirst: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        while (node)\r\n        {\r\n            if (this._isInlineNode(node))\r\n            {\r\n                return node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getInlineAll: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        var inlines = [];\r\n        while (node)\r\n        {\r\n            if (this._isInlineNode(node))\r\n            {\r\n                inlines.push(node);\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return inlines;\r\n    },\r\n    getBlock: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        while (node)\r\n        {\r\n            var data = this.inspector.parse(node);\r\n            var isBlock = this.inspector.isBlockTag(node.tagName);\r\n\r\n            if (isBlock && data.isInEditor(node))\r\n            {\r\n                return node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getInlinesAllSelected: function(options)\r\n    {\r\n        if (this.isAll()) return [];\r\n\r\n        var inlines = this.getInlines({ all: true, inside: true });\r\n        //var textNodes = this.getNodes({ textnodes: true, inline: false });\r\n        var selected = this.getText().replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\r\n        var finalNodes = [];\r\n\r\n        //if (textNodes.length !== 0)\r\n        // {\r\n        //     return finalNodes;\r\n        // }\r\n\r\n        if (selected === '')\r\n        {\r\n            finalNodes = inlines;\r\n        }\r\n        else if (inlines.length > 1)\r\n        {\r\n            for (var i = 0; i < inlines.length; i++)\r\n            {\r\n                if (this._isTextSelected(inlines[i], selected))\r\n                {\r\n                    finalNodes.push(inlines[i]);\r\n                }\r\n            }\r\n        }\r\n        else if (inlines.length === 1)\r\n        {\r\n            if (this._isTextSelected(inlines[0], selected))\r\n            {\r\n                finalNodes = inlines;\r\n            }\r\n        }\r\n\r\n        finalNodes = (options && options.tags) ? this._filterNodesByTags(finalNodes, options.tags) : finalNodes;\r\n\r\n        return finalNodes;\r\n    },\r\n    getInlines: function(options)\r\n    {\r\n        var nodes = this.getNodes();\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node;\r\n            if (options && options.all)\r\n            {\r\n                node = nodes[i];\r\n                while (node)\r\n                {\r\n                    if (this._isInlineNode(node) && !this._isInNodesArray(filteredNodes, node))\r\n                    {\r\n                        filteredNodes.push(node);\r\n                    }\r\n\r\n                    node = node.parentNode;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                node = this.getInline(nodes[i]);\r\n                if (node && !this._isInNodesArray(filteredNodes, node))\r\n                {\r\n                    filteredNodes.push(node);\r\n                }\r\n            }\r\n        }\r\n\r\n        // filter\r\n        filteredNodes = (options && options.tags) ? this._filterNodesByTags(filteredNodes, options.tags) : filteredNodes;\r\n        filteredNodes = (options && options.inside) ? this._filterInlinesInside(filteredNodes, options) : filteredNodes;\r\n\r\n        return filteredNodes;\r\n    },\r\n    getBlocks: function(options)\r\n    {\r\n        var nodes = this.getNodes();\r\n        var block = this.getBlock();\r\n        nodes = (nodes.length === 0 && block) ? [block] : nodes;\r\n\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = this.getBlock(nodes[i]);\r\n            var $node = $R.dom(node);\r\n            if ($node.hasClass('non-editable')) continue;\r\n\r\n            if (node && !this._isInNodesArray(filteredNodes, node))\r\n            {\r\n                filteredNodes.push(node);\r\n            }\r\n        }\r\n\r\n        // filter\r\n        filteredNodes = (options && options.tags) ? this._filterNodesByTags(filteredNodes, options.tags) : filteredNodes;\r\n        filteredNodes = (options && options.first) ? this._filterBlocksFirst(filteredNodes, options) : filteredNodes;\r\n\r\n        return filteredNodes;\r\n    },\r\n    getElements: function(options)\r\n    {\r\n        var nodes = this.getNodes({ textnodes: false });\r\n        var block = this.getBlock();\r\n        nodes = (nodes.length === 0 && block) ? [block] : nodes;\r\n\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (!this._isInNodesArray(filteredNodes, nodes[i]))\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        // filter\r\n        filteredNodes = (options && options.tags) ? this._filterNodesByTags(filteredNodes, options.tags) : filteredNodes;\r\n\r\n        return filteredNodes;\r\n    },\r\n    getNodes: function(options)\r\n    {\r\n        var nodes = [];\r\n        var activeComponent = this.component.getActive();\r\n        if (activeComponent)\r\n        {\r\n            nodes = this._getNodesComponent(activeComponent);\r\n        }\r\n        else if (this.isCollapsed())\r\n        {\r\n            var current = this.getCurrent();\r\n            nodes = (current) ? [current] : [];\r\n        }\r\n        else if (this.is() && !activeComponent)\r\n        {\r\n            nodes = this._getRangeSelectedNodes();\r\n        }\r\n\r\n        // filter\r\n        nodes = this._filterServicesNodes(nodes);\r\n        nodes = this._filterEditor(nodes);\r\n\r\n        // options\r\n        nodes = (options && options.tags) ? this._filterNodesByTags(nodes, options.tags) : nodes;\r\n        nodes = (options && options.textnodes) ? this._filterNodesTexts(nodes, options) : nodes;\r\n        nodes = (options && !options.textnodes) ? this._filterNodesElements(nodes) : nodes;\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // text & html\r\n    getText: function()\r\n    {\r\n        var sel = this.get();\r\n        return (sel) ? this.utils.removeInvisibleChars(sel.toString()) : '';\r\n    },\r\n    getHtml: function(clean)\r\n    {\r\n        var html = '';\r\n        var sel = this.get();\r\n        if (sel)\r\n        {\r\n            var container = document.createElement('div');\r\n            var len = sel.rangeCount;\r\n            for (var i = 0; i < len; ++i)\r\n            {\r\n                container.appendChild(sel.getRangeAt(i).cloneContents());\r\n            }\r\n\r\n            html = container.innerHTML;\r\n            html = (clean !== false) ? this.cleaner.output(html) : html;\r\n            html = html.replace(/<p><\\/p>$/i, '');\r\n        }\r\n\r\n        return html;\r\n    },\r\n\r\n    // clear\r\n    clear: function()\r\n    {\r\n        this.component.clearActive();\r\n        this.get().removeAllRanges();\r\n    },\r\n\r\n    // collapse\r\n    collapseToStart: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel && !sel.isCollapsed) sel.collapseToStart();\r\n    },\r\n    collapseToEnd: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel && !sel.isCollapsed) sel.collapseToEnd();\r\n    },\r\n\r\n    // save\r\n    saveActiveComponent: function()\r\n    {\r\n        var activeComponent = this.component.getActive();\r\n        if (activeComponent)\r\n        {\r\n            this.savedComponent = activeComponent;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    restoreActiveComponent: function()\r\n    {\r\n        if (this.savedComponent)\r\n        {\r\n            this.component.setActive(this.savedComponent);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    save: function()\r\n    {\r\n        this._clearSaved();\r\n\r\n        var el = this.getElement();\r\n        var tags = ['TD', 'TH', 'P', 'DIV', 'PRE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'LI', 'BLOCKQUOTE'];\r\n        if (el && (tags.indexOf(el.tagName) !== -1) && (el.innerHTML === '' || el.innerHTML === '<br>'))\r\n        {\r\n            this.savedElement = el;\r\n        }\r\n        else if (!this.saveActiveComponent())\r\n        {\r\n            this.saved = this.offset.get();\r\n        }\r\n    },\r\n    restore: function()\r\n    {\r\n        if (!this.saved && !this.savedComponent && !this.savedElement) return;\r\n\r\n        this.editor.saveScroll();\r\n\r\n        if (this.savedElement)\r\n        {\r\n            this.caret.setStart(this.savedElement);\r\n        }\r\n        else if (!this.restoreActiveComponent())\r\n        {\r\n            this.offset.set(this.saved);\r\n        }\r\n\r\n        this._clearSaved();\r\n        this.editor.restoreScroll();\r\n    },\r\n    saveMarkers: function()\r\n    {\r\n        this._clearSaved();\r\n\r\n        if (!this.saveActiveComponent())\r\n        {\r\n            this.marker.insert();\r\n        }\r\n    },\r\n    restoreMarkers: function()\r\n    {\r\n        this.editor.saveScroll();\r\n\r\n        if (!this.restoreActiveComponent())\r\n        {\r\n            this.marker.restore();\r\n        }\r\n\r\n        this._clearSaved();\r\n        this.editor.restoreScroll();\r\n    },\r\n\r\n    // private\r\n    _getNextNode: function(node)\r\n    {\r\n        if (node.hasChildNodes()) return node.firstChild;\r\n\r\n        while (node && !node.nextSibling)\r\n        {\r\n            node = node.parentNode;\r\n        }\r\n\r\n        if (!node) return null;\r\n\r\n        return node.nextSibling;\r\n    },\r\n    _getNodesComponent: function(component)\r\n    {\r\n        var current = this.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        return (data.isFigcaption()) ? [data.getFigcaption()] : [component];\r\n    },\r\n    _getRangeSelectedNodes: function()\r\n    {\r\n        var nodes = [];\r\n        var range = this.getRange();\r\n        var node = range.startContainer;\r\n        var startNode = range.startContainer;\r\n        var endNode = range.endContainer;\r\n        var $editor = this.editor.getElement();\r\n\r\n        // editor\r\n        if (startNode === $editor.get() && this.isAll())\r\n        {\r\n            nodes = this.utils.getChildNodes($editor);\r\n        }\r\n        // single node\r\n        else if (node === endNode)\r\n        {\r\n            nodes = [node];\r\n        }\r\n        else\r\n        {\r\n            while (node && node !== endNode)\r\n            {\r\n                nodes.push(node = this._getNextNode(node));\r\n            }\r\n\r\n            node = range.startContainer;\r\n            while (node && node !== range.commonAncestorContainer)\r\n            {\r\n                nodes.unshift(node);\r\n                node = node.parentNode;\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _isInNodesArray: function(nodes, node)\r\n    {\r\n        return (nodes.indexOf(node) !== -1);\r\n    },\r\n    _filterEditor: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var data = this.inspector.parse(nodes[i]);\r\n            if (data.isInEditor())\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterServicesNodes: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $el = $R.dom(nodes[i]);\r\n            var skip = false;\r\n\r\n            if (nodes[i] && nodes[i].nodeType === 3 && this.utils.isEmpty(nodes[i])) skip = true;\r\n            if ($el.hasClass('redactor-script-tag')\r\n                || $el.hasClass('redactor-component-caret')\r\n                || $el.hasClass('redactor-selection-marker')\r\n                || $el.hasClass('non-editable')) skip = true;\r\n\r\n            if (!skip)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterNodesTexts: function(nodes, options)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (nodes[i].nodeType === 3 || (options.keepbr && nodes[i].tagName === 'BR'))\r\n            {\r\n                var inline = this.getInline(nodes[i]);\r\n                var isInline = (inline && options && options.inline === false);\r\n                if (!isInline)\r\n                {\r\n                    filteredNodes.push(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterNodesElements: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (nodes[i].nodeType !== 3)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterNodesByTags: function(nodes, tags, passtexts)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (passtexts && nodes[i].nodeType === 3)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n            else if (nodes[i].nodeType !== 3)\r\n            {\r\n                var nodeTag = nodes[i].tagName.toLowerCase();\r\n                if (tags.indexOf(nodeTag.toLowerCase()) !== -1)\r\n                {\r\n                    filteredNodes.push(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterBlocksFirst: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $node = $R.dom(nodes[i]);\r\n            var parent = $node.parent().get();\r\n            var isFirst = ($node.parent().hasClass('redactor-in'));\r\n            var isCellParent = (parent && (parent.tagName === 'TD' || parent.tagName === 'TH'));\r\n            if (isFirst || isCellParent)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterInlinesInside: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (containsNode(nodes[i], true))\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _isTextSelected: function(node, selected) {\r\n        var text = (node.nodeType !== 9) ? this.utils.removeInvisibleChars(node.textContent) : '';\r\n\r\n        return (\r\n            selected === text\r\n            || text.search(selected) !== -1\r\n            || selected.search(new RegExp('^' + this.utils.escapeRegExp(text) + '$')) !== -1\r\n        );\r\n    },\r\n    _isInlineNode: function(node)\r\n    {\r\n        var data = this.inspector.parse(node);\r\n\r\n        return (this.inspector.isInlineTag(node.tagName) && data.isInEditor());\r\n    },\r\n    _clearSaved: function()\r\n    {\r\n        this.saved = false;\r\n        this.savedComponent = false;\r\n        this.savedElement = false;\r\n    }\r\n});\r\n$R.add('service', 'element', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.rootElement = app.rootElement;\r\n\r\n        // local\r\n        this.$element = {};\r\n        this.type = 'inline';\r\n    },\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildType();\r\n    },\r\n\r\n    // public\r\n    isType: function(type)\r\n    {\r\n        return (type === this.type);\r\n    },\r\n    getType: function()\r\n    {\r\n        return this.type;\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$element;\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.$element = $R.dom(this.rootElement);\r\n    },\r\n    _buildType: function()\r\n    {\r\n        var tag = this.$element.get().tagName;\r\n\r\n        this.type = (tag === 'TEXTAREA') ? 'textarea' : this.type;\r\n        this.type = (tag === 'DIV') ? 'div' : this.type;\r\n        this.type = (this.opts.inline) ? 'inline' : this.type;\r\n    }\r\n});\r\n$R.add('service', 'editor', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.scrolltop = false;\r\n        this.pasting = false;\r\n    },\r\n\r\n    // start\r\n    start: function()\r\n    {\r\n        this._build();\r\n    },\r\n\r\n    // focus\r\n    focus: function()\r\n    {\r\n        if (!this.isFocus() && !this._isContenteditableFocus())\r\n        {\r\n            this.saveScroll();\r\n            this.$editor.focus();\r\n            this.restoreScroll();\r\n        }\r\n    },\r\n    startFocus: function()\r\n    {\r\n        this.caret.setStart(this.getFirstNode());\r\n    },\r\n    endFocus: function()\r\n    {\r\n        this.caret.setEnd(this.getLastNode());\r\n    },\r\n\r\n    // pasting\r\n    isPasting: function()\r\n    {\r\n        return this.pasting;\r\n    },\r\n    enablePasting: function()\r\n    {\r\n        this.pasting = true;\r\n    },\r\n    disablePasting: function()\r\n    {\r\n        this.pasting = false;\r\n    },\r\n\r\n    // scroll\r\n    saveScroll: function()\r\n    {\r\n        this.scrolltop = this._getScrollTarget().scrollTop();\r\n        if (this.opts.maxHeight) {\r\n            this.scrolltopin = this.$editor.scrollTop();\r\n        }\r\n\r\n    },\r\n    restoreScroll: function()\r\n    {\r\n        if (this.scrolltop !== false)\r\n        {\r\n            this._getScrollTarget().scrollTop(this.scrolltop);\r\n            this.scrolltop = false;\r\n        }\r\n\r\n        if (this.scrolltopin) {\r\n            this.$editor.scrollTop(this.scrolltopin);\r\n            this.scrolltopin = false;\r\n        }\r\n    },\r\n\r\n    // non editables\r\n    disableNonEditables: function()\r\n    {\r\n        this.$noneditables = this.$editor.find('[contenteditable=false]');\r\n        this.$noneditables.attr('contenteditable', true);\r\n    },\r\n    enableNonEditables: function()\r\n    {\r\n        if (this.$noneditables)\r\n        {\r\n            setTimeout(function() { this.$noneditables.attr('contenteditable', false); }.bind(this), 1);\r\n        }\r\n    },\r\n\r\n    // nodes\r\n    getFirstNode: function()\r\n    {\r\n        return this.$editor.contents()[0];\r\n    },\r\n    getLastNode: function()\r\n    {\r\n        var nodes = this.$editor.contents();\r\n\r\n        return nodes[nodes.length-1];\r\n    },\r\n\r\n    // utils\r\n    isSourceMode: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n\r\n        return $source.hasClass('redactor-source-open');\r\n    },\r\n    isEditor: function(el)\r\n    {\r\n        var node = $R.dom(el).get();\r\n\r\n        return (node === this.$editor.get());\r\n    },\r\n    isEmpty: function(keeplists)\r\n    {\r\n        return this.utils.isEmptyHtml(this.$editor.html(), false, keeplists);\r\n    },\r\n    isFocus: function()\r\n    {\r\n        var $active = $R.dom(document.activeElement);\r\n        var isComponentSelected = (this.$editor.find('.redactor-component-active').length !== 0);\r\n\r\n        return (isComponentSelected || $active.closest('.redactor-in-' + this.uuid).length !== 0);\r\n    },\r\n    setEmpty: function()\r\n    {\r\n        this.$editor.html(this.opts.emptyHtml);\r\n    },\r\n\r\n    // element\r\n    getElement: function()\r\n    {\r\n        return this.$editor;\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var editableElement = (this.element.isType('textarea')) ? '<div>' : $element.get();\r\n\r\n        this.$editor = $R.dom(editableElement);\r\n    },\r\n    _getScrollTarget: function()\r\n    {\r\n        var $target = this.$doc;\r\n        if (this.opts.toolbarFixedTarget !== document)\r\n        {\r\n            $target = $R.dom(this.opts.toolbarFixedTarget);\r\n        }\r\n        else\r\n        {\r\n            $target = (this.opts.scrollTarget) ? $R.dom(this.opts.scrollTarget) : $target;\r\n        }\r\n\r\n        return $target;\r\n    },\r\n    _isContenteditableFocus: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var $blockParent = (block) ? $R.dom(block).closest('[contenteditable=true]').not('.redactor-in') : [];\r\n\r\n        return ($blockParent.length !== 0);\r\n    }\r\n});\r\n$R.add('service', 'container', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$container;\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var tag = (this.element.isType('inline')) ? '<span>' : '<div>';\r\n        this.$container = $R.dom(tag);\r\n    }\r\n});\r\n$R.add('service', 'source', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.$source = {};\r\n        this.content = '';\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildName();\r\n        this._buildStartedContent();\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$source;\r\n    },\r\n    getCode: function()\r\n    {\r\n        return this.$source.val();\r\n    },\r\n    getName: function()\r\n    {\r\n        return this.$source.attr('name');\r\n    },\r\n    getStartedContent: function()\r\n    {\r\n        return this.content;\r\n    },\r\n    setCode: function(html)\r\n    {\r\n        return this.insertion.set(html, true, false);\r\n    },\r\n    isNameGenerated: function()\r\n    {\r\n        return (this.name);\r\n    },\r\n    rebuildStartedContent: function()\r\n    {\r\n        this._buildStartedContent();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var isTextarea = this.element.isType('textarea');\r\n        var sourceElement = (isTextarea) ? $element.get() : '<textarea>';\r\n\r\n        this.$source = $R.dom(sourceElement);\r\n    },\r\n    _buildName: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n\r\n        this.name = $element.attr('name');\r\n        this.$source.attr('name', (this.name) ? this.name : 'content-' + this.uuid);\r\n    },\r\n    _buildStartedContent: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var content = (this.element.isType('textarea')) ? $element.val() : $element.html();\r\n\r\n        this.content = content.trim();\r\n    }\r\n});\r\n$R.add('service', 'statusbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.$statusbar = {};\r\n        this.items = [];\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this.$statusbar = $R.dom('<ul>');\r\n        this.$statusbar.attr('dir', this.opts.direction);\r\n    },\r\n    add: function(name, html)\r\n    {\r\n        return this.update(name, html);\r\n    },\r\n    update: function(name, html)\r\n    {\r\n        var $item;\r\n        if (typeof this.items[name] !== 'undefined')\r\n        {\r\n            $item = this.items[name];\r\n        }\r\n        else\r\n        {\r\n            $item = $R.dom('<li>');\r\n            this.$statusbar.append($item);\r\n            this.items[name] = $item;\r\n        }\r\n\r\n        return $item.html(html);\r\n    },\r\n    get: function(name)\r\n    {\r\n        return (this.items[name]) ? this.items[name] : false;\r\n    },\r\n    remove: function(name)\r\n    {\r\n        if (this.items[name])\r\n        {\r\n            this.items[name].remove();\r\n            delete this.items[name];\r\n        }\r\n    },\r\n    getItems: function()\r\n    {\r\n        return this.items;\r\n    },\r\n    removeItems: function()\r\n    {\r\n        this.items = {};\r\n        this.$statusbar.html('');\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$statusbar;\r\n    }\r\n});\r\n$R.add('service', 'toolbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.buttons = [];\r\n        this.dropdownOpened = false;\r\n        this.buttonsObservers = {};\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        if (this.is())\r\n        {\r\n            this.opts.activeButtons = (this.opts.activeButtonsAdd) ? this._extendActiveButtons() : this.opts.activeButtons;\r\n            this.create();\r\n        }\r\n    },\r\n    stopObservers: function()\r\n    {\r\n        this.buttonsObservers = {};\r\n    },\r\n    create: function()\r\n    {\r\n        this.$wrapper = $R.dom('<div>');\r\n        this.$toolbar = $R.dom('<div>');\r\n    },\r\n    observe: function()\r\n    {\r\n        if (!this.is()) return;\r\n\r\n        this.setButtonsInactive();\r\n\r\n        var button, observer;\r\n\r\n        // observers\r\n        for (var name in this.buttonsObservers)\r\n        {\r\n            observer = this.buttonsObservers[name];\r\n            button = this.getButton(name);\r\n            this.app.broadcast('button.' + observer + '.observe', button);\r\n        }\r\n\r\n        // inline buttons\r\n        var buttons = this.opts.activeButtons;\r\n        var inlines = this.selection.getInlinesAllSelected();\r\n        var current = this.selection.getInline();\r\n        var currents = this.selection.getInlineAll();\r\n\r\n        if (this.selection.isCollapsed())\r\n        {\r\n            if (current) inlines.push(current);\r\n            if (currents.length !== 0) {\r\n                inlines = inlines.concat(currents);\r\n            }\r\n        }\r\n\r\n        var tags = this._inlinesToTags(inlines);\r\n        for (var key in buttons)\r\n        {\r\n            if (tags.indexOf(key) !== -1)\r\n            {\r\n                button = this.getButton(buttons[key]);\r\n                if (button) {\r\n                    button.setActive();\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    // is\r\n    is: function()\r\n    {\r\n        return !(!this.opts.toolbar || (this.detector.isMobile() && this.opts.air));\r\n    },\r\n    isAir: function()\r\n    {\r\n        return (this.is()) ? this.$toolbar.hasClass('redactor-air') : false;\r\n    },\r\n    isFixed: function()\r\n    {\r\n        return (this.is()) ? this.$toolbar.hasClass('redactor-toolbar-fixed') : false;\r\n    },\r\n    isContextBar: function()\r\n    {\r\n        var $bar = this.$body.find('#redactor-context-toolbar-' + this.uuid);\r\n        return $bar.hasClass('open');\r\n    },\r\n    isTarget: function()\r\n    {\r\n        return (this.opts.toolbarFixedTarget !== document);\r\n    },\r\n\r\n    // get\r\n    getElement: function()\r\n    {\r\n        return this.$toolbar;\r\n    },\r\n    getWrapper: function()\r\n    {\r\n        return this.$wrapper;\r\n    },\r\n    getDropdown: function()\r\n    {\r\n        return this.dropdownOpened;\r\n    },\r\n    getTargetElement: function()\r\n    {\r\n        return $R.dom(this.opts.toolbarFixedTarget);\r\n    },\r\n    getButton: function(name)\r\n    {\r\n        var $btn = this._findButton('.re-' + name);\r\n\r\n        return ($btn.length !== 0) ? $btn.dataget('data-button-instance') : false;\r\n    },\r\n    getButtons: function()\r\n    {\r\n        var buttons = [];\r\n        this._findButtons().each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            buttons.push($node.dataget('data-button-instance'));\r\n        });\r\n\r\n        return buttons;\r\n    },\r\n    getButtonsKeys: function()\r\n    {\r\n        var keys = [];\r\n        this._findButtons().each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            keys.push($node.attr('data-re-name'));\r\n        });\r\n\r\n        return keys;\r\n    },\r\n\r\n    // add\r\n    addButton: function(name, btnObj, position, $el, start)\r\n    {\r\n        position = position || 'end';\r\n\r\n        var $button = $R.create('toolbar.button', this.app, name, btnObj);\r\n        if (btnObj.observe)\r\n        {\r\n            this.opts.activeButtonsObservers[name] = { observe: btnObj.observe, button: $button };\r\n        }\r\n\r\n        if (this.is())\r\n        {\r\n            if (position === 'first') this.$toolbar.prepend($button);\r\n            else if (position === 'after') $el.after($button);\r\n            else if (position === 'before') $el.before($button);\r\n            else {\r\n                var index = this.opts.buttons.indexOf(name);\r\n                if (start !== true && index !== -1) {\r\n                    if (index === 0) {\r\n                        this.$toolbar.prepend($button);\r\n                    }\r\n                    else {\r\n                        var $btns = this._findButtons();\r\n                        var $btn = $btns.eq(index-1);\r\n                        if ($btn.length > 0) {\r\n                            $btn.after($button);\r\n                        }\r\n                        else {\r\n                            this.$toolbar.append($button);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.$toolbar.append($button);\r\n                }\r\n            }\r\n        }\r\n\r\n        return $button;\r\n    },\r\n    addButtonFirst: function(name, btnObj)\r\n    {\r\n        return this.addButton(name, btnObj, 'first');\r\n    },\r\n    addButtonAfter: function(after, name, btnObj)\r\n    {\r\n        var $btn = this.getButton(after);\r\n\r\n        return ($btn) ? this.addButton(name, btnObj, 'after', $btn) : this.addButton(name, btnObj);\r\n    },\r\n    addButtonBefore: function(before, name, btnObj)\r\n    {\r\n        var $btn = this.getButton(before);\r\n\r\n        return ($btn) ? this.addButton(name, btnObj, 'before', $btn) : this.addButton(name, btnObj);\r\n    },\r\n    addButtonObserver: function(name, observer)\r\n    {\r\n        this.buttonsObservers[name] = observer;\r\n    },\r\n\r\n    // set\r\n    setButtons: function(buttons)\r\n    {\r\n        this.buttons = buttons;\r\n    },\r\n    setDropdown: function(dropdown)\r\n    {\r\n        this.dropdownOpened = dropdown;\r\n    },\r\n    setButtonsInactive: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].setInactive();\r\n        }\r\n    },\r\n    setButtonsActive: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].setActive();\r\n        }\r\n    },\r\n\r\n    // disable & enable\r\n    disableButtons: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].disable();\r\n        }\r\n    },\r\n    enableButtons: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].enable();\r\n        }\r\n\r\n    },\r\n\r\n    // private\r\n    _findButton: function(selector)\r\n    {\r\n        return (this.is()) ? this.$toolbar.find(selector) : $R.dom();\r\n    },\r\n    _findButtons: function()\r\n    {\r\n        return (this.is()) ? this.$toolbar.find('.re-button') : $R.dom();\r\n    },\r\n    _extendActiveButtons: function()\r\n    {\r\n        return $R.extend({}, this.opts.activeButtons, this.opts.activeButtonsAdd);\r\n    },\r\n    _inlinesToTags: function(inlines)\r\n    {\r\n        var tags = [];\r\n        for (var i = 0; i < inlines.length; i++)\r\n        {\r\n            tags.push(inlines[i].tagName.toLowerCase());\r\n        }\r\n\r\n        return tags;\r\n    }\r\n});\r\n$R.add('class', 'toolbar.button', {\r\n    mixins: ['dom'],\r\n    init: function(app, name, btnObj)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.$body = app.$body;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n\r\n        // local\r\n        this.obj = btnObj;\r\n        this.name = name;\r\n        this.dropdown = false;\r\n        this.tooltip = false;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // is\r\n    isActive: function()\r\n    {\r\n        return this.hasClass('redactor-button-active');\r\n    },\r\n    isDisabled: function()\r\n    {\r\n        return this.hasClass('redactor-button-disabled');\r\n    },\r\n\r\n    // has\r\n    hasIcon: function()\r\n    {\r\n        return (this.obj.icon && !this.opts.buttonsTextLabeled);\r\n    },\r\n\r\n    // set\r\n    setDropdown: function(dropdown)\r\n    {\r\n        this.obj.dropdown = dropdown;\r\n        this.obj.message = false;\r\n        this.dropdown = $R.create('toolbar.dropdown', this.app, this.name, this.obj.dropdown);\r\n        this.attr('data-dropdown', true);\r\n    },\r\n    setMessage: function(message, args)\r\n    {\r\n        this.obj.message = message;\r\n        this.obj.args = args;\r\n        this.obj.dropdown = false;\r\n    },\r\n    setApi: function(api, args)\r\n    {\r\n        this.obj.api = api;\r\n        this.obj.args = args;\r\n        this.obj.dropdown = false;\r\n    },\r\n    setTitle: function(title)\r\n    {\r\n        this.obj.title = this.lang.parse(title);\r\n        this.obj.tooltip = this.obj.title;\r\n\r\n        this.attr({ 'alt': this.obj.tooltip, 'aria-label': this.obj.tooltip });\r\n        if (!this.attr('data-re-icon')) this.html(this.obj.title);\r\n    },\r\n    setTooltip: function(tooltip)\r\n    {\r\n        this.obj.tooltip = this.lang.parse(tooltip);\r\n        this.attr({ 'alt': this.obj.tooltip, 'aria-label': this.obj.tooltip });\r\n    },\r\n    setIcon: function(icon)\r\n    {\r\n        if (this.opts.buttonsTextLabeled) return;\r\n\r\n        this.obj.icon = true;\r\n        this.$icon = $R.dom(icon);\r\n\r\n        this.html('');\r\n        this.append(this.$icon);\r\n        this.attr('data-re-icon', true);\r\n        this.addClass('re-button-icon');\r\n        this.setTooltip(this.obj.title);\r\n        this._buildTooltip();\r\n    },\r\n    setActive: function()\r\n    {\r\n        this.addClass('redactor-button-active');\r\n    },\r\n    setInactive: function()\r\n    {\r\n        this.removeClass('redactor-button-active');\r\n    },\r\n\r\n    // hide\r\n    hideTooltip: function()\r\n    {\r\n        this.$body.find('.re-button-tooltip').remove();\r\n    },\r\n\r\n    // get\r\n    getDropdown: function()\r\n    {\r\n        return this.dropdown;\r\n    },\r\n\r\n    // enable & disable\r\n    disable: function()\r\n    {\r\n        this.addClass('redactor-button-disabled');\r\n    },\r\n    enable: function()\r\n    {\r\n        this.removeClass('redactor-button-disabled');\r\n    },\r\n\r\n    // toggle\r\n    toggle: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n        if (this.isDisabled()) return;\r\n\r\n        if (this.obj.dropdown)\r\n        {\r\n            this.dropdown.toggle(e);\r\n        }\r\n        else if (this.obj.api)\r\n        {\r\n            // broadcast\r\n            this.app.api(this.obj.api, this.obj.args, this.name);\r\n        }\r\n        else if (this.obj.message)\r\n        {\r\n            // broadcast\r\n            this.app.broadcast(this.obj.message, this.obj.args, this.name);\r\n        }\r\n\r\n        this.hideTooltip();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        // parse\r\n        this._parseTitle();\r\n        this._parseTooltip();\r\n\r\n        // build\r\n        this._build();\r\n        this._buildCallback();\r\n        this._buildAttributes();\r\n        this._buildObserver();\r\n\r\n        if (this.hasIcon())\r\n        {\r\n            this._buildIcon();\r\n            this._buildTooltip();\r\n        }\r\n        else\r\n        {\r\n            this.html(this.obj.title);\r\n        }\r\n    },\r\n    _parseTooltip: function()\r\n    {\r\n        this.obj.tooltip = (this.obj.tooltip) ? this.lang.parse(this.obj.tooltip) : this.obj.title;\r\n    },\r\n    _parseTitle: function()\r\n    {\r\n        this.obj.title = this.lang.parse(this.obj.title);\r\n    },\r\n    _build: function()\r\n    {\r\n        this.parse('<a>');\r\n        this.addClass('re-button re-' + this.name);\r\n        this.attr('data-re-name', this.name);\r\n        this.dataset('data-button-instance', this);\r\n\r\n        if (this.obj.dropdown) this.setDropdown(this.obj.dropdown);\r\n    },\r\n    _buildCallback: function()\r\n    {\r\n        this.on('click', this.toggle.bind(this));\r\n    },\r\n    _buildAttributes: function()\r\n    {\r\n        var attrs = {\r\n            'href': '#',\r\n            'alt': this.obj.tooltip,\r\n            'rel': this.name,\r\n            'role': 'button',\r\n            'aria-label': this.obj.tooltip,\r\n            'tabindex': '-1'\r\n        };\r\n\r\n        this.attr(attrs);\r\n    },\r\n    _buildObserver: function()\r\n    {\r\n        if (typeof this.obj.observe !== 'undefined')\r\n        {\r\n            this.toolbar.addButtonObserver(this.name, this.obj.observe);\r\n        }\r\n    },\r\n    _buildIcon: function()\r\n    {\r\n        var icon = this.obj.icon;\r\n        var isHtml = (/(<([^>]+)>)/ig.test(icon));\r\n\r\n        this.$icon = (isHtml) ? $R.dom(icon) : $R.dom('<i>');\r\n        if (!isHtml) this.$icon.addClass('re-icon-' + this.name);\r\n\r\n        this.append(this.$icon);\r\n        this.attr('data-re-icon', true);\r\n        this.addClass('re-button-icon');\r\n    },\r\n    _buildTooltip: function()\r\n    {\r\n        if (this.detector.isDesktop())\r\n        {\r\n            this.tooltip = $R.create('toolbar.button.tooltip', this.app, this);\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.button.tooltip', {\r\n    mixins: ['dom'],\r\n    init: function(app, $button)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.$body = app.$body;\r\n        this.toolbar = app.toolbar;\r\n\r\n        // local\r\n        this.$button = $button;\r\n        this.created = false;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    open: function()\r\n    {\r\n        if (this.$button.hasClass('redactor-button-disabled') || this.$button.hasClass('redactor-button-active')) return;\r\n\r\n        this.created = true;\r\n        this.parse('<span>');\r\n        this.addClass('re-button-tooltip re-button-tooltip-' + this.uuid);\r\n        this.$body.append(this);\r\n        this.html(this.$button.attr('alt'));\r\n\r\n        var offset = this.$button.offset();\r\n        var position = 'absolute';\r\n        var height = this.$button.height();\r\n        var width = this.$button.width();\r\n        var arrowOffset = 4;\r\n\r\n        this.css({\r\n            top: (offset.top + height + arrowOffset) + 'px',\r\n            left: (offset.left + width/2 - this.width()/2) + 'px',\r\n            position: position\r\n        });\r\n\r\n        this.show();\r\n    },\r\n    close: function()\r\n    {\r\n        if (!this.created || this.$button.hasClass('redactor-button-disabled')) return;\r\n\r\n        this.remove();\r\n        this.created = false;\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.$button.on('mouseover', this.open.bind(this));\r\n        this.$button.on('mouseout', this.close.bind(this));\r\n    }\r\n});\r\n$R.add('class', 'toolbar.dropdown', {\r\n    mixins: ['dom'],\r\n    init: function(app, name, items)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.$win = app.$win;\r\n        this.$doc = app.$doc;\r\n        this.$body = app.$body;\r\n        this.animate = app.animate;\r\n        this.toolbar = app.toolbar;\r\n\r\n        // local\r\n        this.name = name;\r\n        this.started = false;\r\n        this.items = (name === 'format') ? $R.extend({}, true, items) : items;\r\n        this.$items = [];\r\n    },\r\n    // public\r\n    toggle: function(e)\r\n    {\r\n        if (!this.started)\r\n        {\r\n            this._build();\r\n        }\r\n\r\n        // toggle\r\n        if (this.isOpened() && this.isActive())\r\n        {\r\n            this.close(false);\r\n        }\r\n        else\r\n        {\r\n            this.open(e);\r\n        }\r\n    },\r\n    isOpened: function()\r\n    {\r\n        var $dropdown = this.$body.find('.redactor-dropdown-' + this.uuid + '.open');\r\n\r\n        return ($dropdown.length !== 0 && $dropdown.attr('data-re-name') === this.name);\r\n    },\r\n    isActive: function()\r\n    {\r\n        var $dropdown = this.$body.find('#redactor-dropdown-' + this.uuid + '-' + this.name + '.open');\r\n        return ($dropdown.length !== 0);\r\n    },\r\n    getName: function()\r\n    {\r\n        return this.attr('data-re-name');\r\n    },\r\n    getItem: function(name)\r\n    {\r\n        return this.$items[name];\r\n    },\r\n    getItemsByClass: function(classname)\r\n    {\r\n        var result = [];\r\n        for (var key in this.$items) {\r\n            var item = this.$items[key];\r\n            if (typeof item === 'object' && item.attr('data-re-name') && item.hasClass(classname)) {\r\n                result.push(item);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n    open: function(e)\r\n    {\r\n        this._closeAll();\r\n\r\n        this.$btn = this.toolbar.getButton(this.name);\r\n        this.app.broadcast('dropdown.open', e, this, this.$btn);\r\n        this.toolbar.setDropdown(this);\r\n\r\n        this.show();\r\n        this.removeClass('redactor-animate-hide');\r\n        this.addClass('open');\r\n        this._observe();\r\n\r\n        this.$btn.hideTooltip();\r\n        this.$btn.setActive();\r\n\r\n        this.$doc.on('keyup.redactor.dropdown-' + this.uuid, this._handleKeyboard.bind(this));\r\n        this.$doc.on('click.redactor.dropdown-' + this.uuid, this.close.bind(this));\r\n\r\n        this.updatePosition();\r\n        this.app.broadcast('dropdown.opened', e, this, this.$btn);\r\n\r\n    },\r\n    close: function(e, animate)\r\n    {\r\n        if (e)\r\n        {\r\n            var $el = $R.dom(e.target);\r\n            if (this._isButton(e) || $el.hasClass('redactor-dropdown-not-close') || $el.hasClass('redactor-dropdown-item-disabled'))\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.app.broadcast('dropdown.close', this, this.$btn);\r\n        this.toolbar.setDropdown(false);\r\n\r\n        this.$btn.setInactive();\r\n        if (animate === false)\r\n        {\r\n            this._close();\r\n        }\r\n        else\r\n        {\r\n            this.animate.start(this, 'fadeOut', this._close.bind(this));\r\n        }\r\n    },\r\n    updatePosition: function()\r\n    {\r\n        var isFixed = this.toolbar.isFixed();\r\n        var isTarget = this.toolbar.isTarget();\r\n\r\n        var btnHeight = this.$btn.height();\r\n        var btnWidth = this.$btn.width();\r\n\r\n        var pos = this.$btn.offset();\r\n        var position = 'absolute';\r\n        var topOffset = 2;\r\n\r\n\r\n        if (isFixed) {\r\n            //pos.top = (isTarget) ? this.$btn.offset().top : this.$btn.position().top;\r\n            //position = 'fixed';\r\n            //topOffset = topOffset + this.opts.toolbarFixedTopOffset;\r\n        }\r\n\r\n        var leftOffset = 0;\r\n        var left = (pos.left + leftOffset);\r\n        var width = parseFloat(this.css('width'));\r\n        var winWidth = this.$win.width();\r\n        var leftFix = (winWidth < (left + width)) ? (width - btnWidth) : 0;\r\n        var leftPos = (left - leftFix);\r\n        var top = (pos.top + btnHeight + topOffset);\r\n        leftPos = (leftPos < 0) ? 4 : leftPos;\r\n\r\n        this.css({\r\n            maxHeight: '',\r\n            position: position,\r\n            top: top + 'px',\r\n            left: leftPos + 'px'\r\n        });\r\n\r\n        // height adaptive\r\n        var heightTolerance = 10;\r\n        var winHeight = this.$win.height();\r\n        var scrollTop = this.$doc.scrollTop();\r\n        var cropHeight = winHeight - (top - scrollTop) - heightTolerance;\r\n\r\n        this.css('max-height', cropHeight + 'px');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.parse('<div>');\r\n        this.attr('dir', this.opts.direction);\r\n        this.attr('id', 'redactor-dropdown-' + this.uuid + '-' + this.name);\r\n        this.attr('data-re-name', this.name);\r\n\r\n        this.addClass('redactor-dropdown redactor-dropdown-' + this.uuid + ' redactor-dropdown-' + this.name);\r\n        this.dataset('data-dropdown-instance', this);\r\n        var isDom = (this.items.sdom || typeof this.items === 'string');\r\n\r\n        if (isDom) this._buildDom();\r\n        else this._buildItems();\r\n\r\n        this.$body.append(this);\r\n        this.started = true;\r\n    },\r\n    _buildDom: function()\r\n    {\r\n        this.html('').append($R.dom(this.items));\r\n    },\r\n    _buildItems: function()\r\n    {\r\n        this.items = (this.name === 'format') ? this._buildFormattingItems() : this.items;\r\n\r\n        for (var key in this.items)\r\n        {\r\n            var obj = this.items[key];\r\n\r\n            if (key === 'observe')\r\n            {\r\n                this.attr('data-observe', this.items[key]);\r\n            }\r\n            else\r\n            {\r\n                var $item = $R.create('toolbar.dropdown.item', this.app, key, obj, this);\r\n\r\n                this.$items[key] = $item;\r\n                this.append($item);\r\n            }\r\n        }\r\n    },\r\n    _buildFormattingItems: function()\r\n    {\r\n        // build the format set\r\n        for (var key in this.items)\r\n        {\r\n            if (this.opts.formatting.indexOf(key) === -1) delete this.items[key];\r\n        }\r\n\r\n        // remove from the format set\r\n        if (this.opts.formattingHide)\r\n        {\r\n            for (var key in this.items)\r\n            {\r\n                if (this.opts.formattingHide.indexOf(key) !== -1) delete this.items[key];\r\n            }\r\n        }\r\n\r\n        // add to the format set\r\n        if (this.opts.formattingAdd)\r\n        {\r\n            for (var key in this.opts.formattingAdd)\r\n            {\r\n                this.items[key] = this.opts.formattingAdd[key];\r\n            }\r\n        }\r\n\r\n        return this.items;\r\n    },\r\n    _handleKeyboard: function(e)\r\n    {\r\n        if (e.which === 27) this.close();\r\n    },\r\n    _isButton: function(e)\r\n    {\r\n        var $el = $R.dom(e.target);\r\n        var $btn = $el.closest('.re-button');\r\n\r\n        return ($btn.get() === this.$btn.get());\r\n    },\r\n    _close: function()\r\n    {\r\n        this.$btn.setInactive();\r\n        this.$doc.off('.redactor.dropdown-' + this.uuid);\r\n        this.removeClass('open');\r\n        this.addClass('redactor-animate-hide');\r\n        this.app.broadcast('dropdown.closed', this, this.$btn);\r\n    },\r\n    _closeAll: function()\r\n    {\r\n        this.$body.find('.redactor-dropdown-' + this.uuid + '.open').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var instance =  $node.dataget('data-dropdown-instance');\r\n            instance._close();\r\n        });\r\n    },\r\n    _observe: function()\r\n    {\r\n        var observer = this.attr('data-observe');\r\n        if (observer)\r\n        {\r\n            this.app.broadcast('dropdown.' + observer + '.observe', this);\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.dropdown.item', {\r\n    mixins: ['dom'],\r\n    init: function(app, name, obj, dropdown)\r\n    {\r\n        this.app = app;\r\n        this.lang = app.lang;\r\n\r\n        // local\r\n        this.dropdown = dropdown;\r\n        this.name = name;\r\n        this.obj = obj;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    setTitle: function(html)\r\n    {\r\n        this.$span.html(html);\r\n    },\r\n    getTitle: function()\r\n    {\r\n        return this.$span.html();\r\n    },\r\n    enable: function()\r\n    {\r\n        this.removeClass('redactor-dropdown-item-disabled');\r\n    },\r\n    disable: function()\r\n    {\r\n        this.addClass('redactor-dropdown-item-disabled');\r\n    },\r\n    toggle: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n        if (this.hasClass('redactor-dropdown-item-disabled')) return;\r\n\r\n        if (this.obj.message)\r\n        {\r\n            // broadcast\r\n            this.app.broadcast(this.obj.message, this.obj.args, this.name);\r\n        }\r\n        else if (this.obj.api)\r\n        {\r\n            this.app.api(this.obj.api, this.obj.args, this.name);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.parse('<a>');\r\n        this.attr('href', '#');\r\n        this.addClass('redactor-dropdown-item-' + this.name);\r\n\r\n        if (this.obj.classname)\r\n        {\r\n            this.addClass(this.obj.classname);\r\n        }\r\n\r\n        this.attr('data-re-name', this.name);\r\n        this.on('click', this.toggle.bind(this));\r\n\r\n        this.$span = $R.dom('<span>');\r\n        this.append(this.$span);\r\n        this.setTitle(this.lang.parse(this.obj.title));\r\n    }\r\n});\r\n$R.add('service', 'cleaner', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.storedComponents = [];\r\n        this.storedComments = [];\r\n        this.storedImages = [];\r\n        this.storedLinks = [];\r\n        this.deniedTags = ['font', 'html', 'head', 'link', 'title', 'body', 'meta', 'applet'];\r\n        this.convertRules = {};\r\n        this.unconvertRules = {};\r\n\r\n        // regex\r\n        this.reComments = /<!--[\\s\\S]*?-->\\n?/g;\r\n        this.reSpacedEmpty = /^(||\\s||<br\\s?\\/?>||&nbsp;)$/i;\r\n        this.reScriptTag = /<script(.*?[^>]?)>([\\w\\W]*?)<\\/script>/gi;\r\n    },\r\n    // public\r\n    addConvertRules: function(name, func)\r\n    {\r\n        this.convertRules[name] = func;\r\n    },\r\n    addUnconvertRules: function(name, func)\r\n    {\r\n        this.unconvertRules[name] = func;\r\n    },\r\n    input: function(html, paragraphize, started)\r\n    {\r\n        // fix &curren; entity in the links\r\n        html = html.replace(/¤t/gi, '&current');\r\n\r\n        // store\r\n        var storedComments = [];\r\n        html = this.storeComments(html, storedComments);\r\n\r\n        // pre/code\r\n        html = this.encodeCode(html);\r\n\r\n        // sanitize\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('a, b, i, strong, em, img, svg, details, audio').removeAttr('onload onerror ontoggle onwheel onmouseover oncopy');\r\n        $wrapper.find('a, iframe, embed').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var href = $node.attr('href');\r\n            var src = $node.attr('src');\r\n            if (href && href.trim().search(/^data|javascript:/i) !== -1) $node.attr('href', '');\r\n            if (src && src.trim().search(/^data|javascript:/i) !== -1) $node.attr('src', '');\r\n        });\r\n\r\n        var imageattrs = ['alt', 'title', 'src', 'class', 'width', 'height', 'srcset', 'style', 'usemap'];\r\n        $wrapper.find('img').each(function(node) {\r\n            if (node.attributes.length > 0) {\r\n                var attrs = node.attributes;\r\n                for (var i = attrs.length - 1; i >= 0; i--) {\r\n                    var removeAttrs = (attrs[i].name.search(/^data-/) === -1 && imageattrs.indexOf(attrs[i].name) === -1);\r\n                    var removeDataSrc = (attrs[i].name === 'src' && attrs[i].value.search(/^data|javascript:/i) !== -1);\r\n                    if (this.opts.imageSrcData) removeDataSrc = false;\r\n\r\n                    if (removeAttrs || removeDataSrc) {\r\n                        node.removeAttribute(attrs[i].name);\r\n                    }\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n        // get wrapper html\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        // converting entity\r\n        html = html.replace(/\\$/g, '&#36;');\r\n        html = html.replace(/&amp;/g, '&');\r\n\r\n        // convert to figure\r\n        var converter = $R.create('cleaner.figure', this.app);\r\n        html = converter.convert(html, this.convertRules);\r\n\r\n        // store components\r\n        html = this.storeComponents(html);\r\n\r\n        // clean\r\n        html = this.replaceTags(html, this.opts.replaceTags);\r\n        html = this._setSpanAttr(html);\r\n        html = this._setStyleCache(html);\r\n        html = this.removeTags(html, this.deniedTags);\r\n        html = (this.opts.removeScript) ? this._removeScriptTag(html) : this._replaceScriptTag(html);\r\n        //html = (this.opts.removeScript) ? this._removeScriptTag(html) : html;\r\n        html = (this.opts.removeComments) ? this.removeComments(html) : html;\r\n        html = (this._isSpacedEmpty(html)) ? this.opts.emptyHtml : html;\r\n\r\n\r\n        // restore components\r\n        html = this.restoreComponents(html);\r\n\r\n\r\n        // clear wrapped components\r\n        html = this._cleanWrapped(html);\r\n\r\n        // restore comments\r\n        html = this.restoreComments(html, storedComments);\r\n\r\n        // paragraphize\r\n        html = (paragraphize) ? this.paragraphize(html) : html;\r\n\r\n        return html;\r\n    },\r\n    output: function(html, removeMarkers)\r\n    {\r\n        html = this.removeInvisibleSpaces(html);\r\n\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/<\\/(span|strong|b|i|em)><br\\s?\\/?><\\/div>/gi, \"</$1></div>\");\r\n            html = html.replace(/<br\\s?\\/?><\\/(span|strong|b|i|em)><\\/div>/gi, \"</$1></div>\");\r\n        }\r\n\r\n        html = html.replace(/&#36;/g, '$');\r\n\r\n        // empty\r\n        if (this._isSpacedEmpty(html)) return '';\r\n        if (this._isParagraphEmpty(html)) return '';\r\n\r\n        html = this.removeServiceTagsAndAttrs(html, removeMarkers);\r\n\r\n        // store components\r\n        html = this.storeComponents(html);\r\n\r\n        html = this.removeSpanWithoutAttributes(html);\r\n        html = this.removeFirstBlockBreaklineInHtml(html);\r\n\r\n        html = (this.opts.removeScript) ? html : this._unreplaceScriptTag(html);\r\n        html = (this.opts.preClass) ? this._setPreClass(html) : html;\r\n        html = (this.opts.linkNofollow) ? this._setLinkNofollow(html) : html;\r\n        html = (this.opts.removeNewLines) ? this.cleanNewLines(html) : html;\r\n\r\n        // restore components\r\n        html = this.restoreComponents(html);\r\n\r\n        // convert to figure\r\n        var converter = $R.create('cleaner.figure', this.app);\r\n        html = converter.unconvert(html, this.unconvertRules);\r\n\r\n        // final clean up\r\n        html = this.removeEmptyAttributes(html, ['style', 'class', 'rel', 'alt', 'title']);\r\n        html = this.cleanSpacesInPre(html);\r\n        html = this.tidy(html);\r\n\r\n        // converting entity\r\n        html = html.replace(/&amp;/g, '&');\r\n\r\n        // breakline tidy\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/<br\\s?\\/?>/gi, \"<br>\\n\");\r\n            html = html.replace(/<br\\s?\\/?>\\n+/gi, \"<br>\\n\");\r\n        }\r\n\r\n        // check whitespaces\r\n        html = (html.replace(/\\n/g, '') === '') ? '' : html;\r\n\r\n        return html;\r\n    },\r\n    paste: function(html)\r\n    {\r\n        // store components\r\n        html = this.storeComponents(html);\r\n\r\n        // remove comments\r\n        html = html.replace(/<!--[\\s\\S]*?-->/g, '');\r\n\r\n        // remove tags\r\n        var deniedTags = this.deniedTags.concat(['iframe']);\r\n        html = this.removeTags(html, deniedTags);\r\n\r\n        // remove doctype tag\r\n        html = html.replace(new RegExp(\"<!doctype([\\\\s\\\\S]+?)>\", 'gi'), '');\r\n\r\n        // remove style tag\r\n        html = html.replace(new RegExp(\"<style([\\\\s\\\\S]+?)</style>\", 'gi'), '');\r\n\r\n        // remove br between\r\n        html = html.replace(new RegExp(\"</p><br /><p\", 'gi'), '</p><p');\r\n\r\n        // gdocs & word\r\n        var isMsWord = this._isHtmlMsWord(html);\r\n\r\n        html = (isMsWord) ? html : this._cleanGDocs(html);\r\n        html = (isMsWord) ? this._cleanMsWord(html) : html;\r\n\r\n        // do not clean\r\n        if (!this.opts.pasteClean)\r\n        {\r\n            // restore components\r\n            html = this.restoreComponents(html);\r\n\r\n            return html;\r\n        }\r\n\r\n        // plain text\r\n        if (this.opts.pastePlainText)\r\n        {\r\n            // restore components\r\n            html = this.restoreComponents(html);\r\n\r\n            return this.pastePlainText(html);\r\n        }\r\n\r\n        // unconvert data redactor tag\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('*').removeAttr('style');\r\n        $wrapper.find('[data-redactor-tag]').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            $node.removeAttr('data-redactor-tag');\r\n\r\n            if (this.utils.isEmptyHtml($node.html())) {\r\n                $node.html('<br>').unwrap();\r\n            }\r\n            else if (node.lastChild && node.lastChild.tagName === 'BR') {\r\n                $node.unwrap();\r\n            }\r\n            else {\r\n                $node.append('<br>').unwrap();\r\n            }\r\n        }.bind(this));\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n        html = html.replace(/<br\\s?\\/?>$/, '');\r\n        html = html.replace(/<br\\s?\\/?><\\/(td|th)>/, '</$1>');\r\n\r\n        // remove tags\r\n        var exceptedTags = this.opts.pasteBlockTags.concat(this.opts.pasteInlineTags);\r\n        html = this.removeTagsExcept(html, exceptedTags);\r\n\r\n        // links & images\r\n        html = (this.opts.pasteLinks) ? html : this.removeTags(html, ['a']);\r\n        html = (this.opts.pasteImages) ? html : this.removeTags(html, ['img']);\r\n\r\n        // build wrapper\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // clean attrs\r\n        var $elms = $wrapper.find('*');\r\n\r\n        // remove style\r\n        var filterStyle = (this.opts.pasteKeepStyle.length !== 0) ? ',' + this.opts.pasteKeepStyle.join(',') : '';\r\n        $elms.not('[data-redactor-style-cache]' + filterStyle).removeAttr('style');\r\n\r\n        // remove class\r\n        var filterClass = (this.opts.pasteKeepClass.length !== 0) ? ',' + this.opts.pasteKeepClass.join(',') : '';\r\n        $elms.not('[data-redactor-style-cache], span.redactor-component' + filterClass).removeAttr('class');\r\n\r\n        // remove attrs\r\n        var filterAttrs = (this.opts.pasteKeepAttrs.length !== 0) ? ',' + this.opts.pasteKeepAttrs.join(',') : '';\r\n        $elms.not('img, a, span.redactor-component, [data-redactor-style-cache]' + filterAttrs).each(function(node)\r\n        {\r\n            var attrs = node.attributes;\r\n            for (var i = attrs.length - 1; i >= 0; i--) {\r\n                if (node.attributes[i].name !== 'class' && node.attributes[i].name !== 'dir') {\r\n                    node.removeAttribute(attrs[i].name);\r\n                }\r\n            }\r\n        });\r\n\r\n        // paste link target\r\n        if (this.opts.pasteLinks && this.opts.pasteLinkTarget !== false)\r\n        {\r\n            $wrapper.find('a').attr('target', this.opts.pasteLinkTarget);\r\n        }\r\n\r\n        // keep style\r\n        $wrapper.find('[data-redactor-style-cache]').each(function(node)\r\n        {\r\n            var style = node.getAttribute('data-redactor-style-cache');\r\n            node.setAttribute('style', style);\r\n        });\r\n\r\n        // remove image attributes\r\n        var imageattrs = this.opts.imageAttrs;\r\n        $wrapper.find('img').each(function(node) {\r\n            if (node.attributes.length > 0) {\r\n                var attrs = node.attributes;\r\n                for (var i = attrs.length - 1; i >= 0; i--) {\r\n                    if (imageattrs.indexOf(attrs[i].name) === -1) {\r\n                        node.removeAttribute(attrs[i].name);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // remove empty span\r\n        $wrapper.find('span').each(function(node)\r\n        {\r\n            if (node.attributes.length === 0)\r\n            {\r\n                $R.dom(node).unwrap();\r\n            }\r\n        });\r\n\r\n        // remove empty inline\r\n        $wrapper.find(this.opts.inlineTags.join(',')).each(function(node)\r\n        {\r\n            if (node.attributes.length === 0 && this.utils.isEmptyHtml(node.innerHTML))\r\n            {\r\n                $R.dom(node).unwrap();\r\n            }\r\n\r\n        }.bind(this));\r\n\r\n        // place ul/ol into li\r\n        $wrapper.find('ul, ol').each(function(node)\r\n        {\r\n            var prev = node.previousSibling;\r\n            if (prev && prev.tagName === 'LI')\r\n            {\r\n                var $li = $R.dom(prev);\r\n                $li.find('p').unwrap();\r\n                $li.append(node);\r\n            }\r\n        });\r\n\r\n        // get wrapper\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        // remove paragraphs form lists (google docs bug)\r\n        html = html.replace(/<li><p>/gi, '<li>');\r\n        html = html.replace(/<\\/p><\\/li>/gi, '</li>');\r\n\r\n        // gmail list paste\r\n        html = html.replace(/^<li/gi, '<ul><li');\r\n        html = html.replace(/<\\/li>$/gi, '</li></ul>');\r\n\r\n        // convert lines to br\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/\\n/g, '<br>');\r\n        }\r\n\r\n        // clean empty p\r\n        html = html.replace(/<p>&nbsp;<\\/p>/gi, '<p></p>');\r\n        html = html.replace(/<p><br\\s?\\/?><\\/p>/gi, '<p></p>');\r\n\r\n        if (isMsWord)\r\n        {\r\n            html = html.replace(/<p><\\/p>/gi, '');\r\n            html = html.replace(/<p>\\s<\\/p>/gi, '');\r\n            html = html.replace(/<td\\n/gi, '<td ');\r\n        }\r\n\r\n        // restore components\r\n        html = this.restoreComponents(html);\r\n\r\n        return html;\r\n    },\r\n    pastePlainText: function(html)\r\n    {\r\n        html = (this.opts.pasteLinks) ? this.storeLinks(html) : html;\r\n        html = (this.opts.pasteImages) ? this.storeImages(html) : html;\r\n\r\n        html = this.getPlainText(html);\r\n        html = this._replaceNlToBr(html);\r\n\r\n        html = (this.opts.pasteLinks) ? this.restoreLinks(html) : html;\r\n        html = (this.opts.pasteImages) ? this.restoreImages(html) : html;\r\n\r\n        return html;\r\n    },\r\n    tidy: function(html)\r\n    {\r\n        return html;\r\n    },\r\n    paragraphize: function(html)\r\n    {\r\n        var paragraphize = $R.create('cleaner.paragraphize', this.app);\r\n        html = paragraphize.convert(html);\r\n        return html;\r\n    },\r\n    storeComments: function(html, storedComments) {\r\n        var comments = html.match(new RegExp('<!--([\\\\w\\\\W]*?)-->', 'gi'));\r\n        if (comments !== null) {\r\n            for (var i = 0; i < comments.length; i++) {\r\n                html = html.replace(comments[i], '#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####');\r\n                storedComments.push(comments[i]);\r\n            }\r\n        }\r\n\r\n        return html;\r\n    },\r\n    restoreComments: function(html, storedComments) {\r\n        for (var i = 0; i < storedComments.length; i++) {\r\n            html = html.replace('#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####', storedComments[i]);\r\n        }\r\n\r\n        return html;\r\n    },\r\n\r\n    // get\r\n    getFlatText: function(html)\r\n    {\r\n        var $div = $R.dom('<div>');\r\n\r\n        if (!html.nodeType && !html.dom)\r\n        {\r\n            html = html.toString();\r\n            html = html.trim();\r\n            $div.html(html);\r\n        }\r\n        else\r\n        {\r\n            $div.append(html);\r\n        }\r\n\r\n        html = $div.get().textContent || $div.get().innerText || '';\r\n\r\n        return (html === undefined) ? '' : html;\r\n    },\r\n\tgetPlainText: function(html)\r\n\t{\r\n\t\thtml = html.replace(/<!--[\\s\\S]*?-->/gi, '');\r\n\t\thtml = html.replace(/<style[\\s\\S]*?style>/gi, '');\r\n        html = html.replace(/<p><\\/p>/g, '');\r\n\t\thtml = html.replace(/<\\/div>|<\\/li>|<\\/td>/gi, '\\n');\r\n\t\thtml = html.replace(/<\\/p>/gi, '\\n\\n');\r\n\t\thtml = html.replace(/<\\/H[1-6]>/gi, '\\n\\n');\r\n\r\n\t\tvar tmp = document.createElement('div');\r\n\t\ttmp.innerHTML = html;\r\n\r\n\t\thtml = tmp.textContent || tmp.innerText;\r\n\r\n\t\treturn html.trim();\r\n\t},\r\n\r\n    // replace\r\n    replaceTags: function(html, tags)\r\n    {\r\n        if (tags)\r\n        {\r\n            var self = this;\r\n            var keys = Object.keys(tags);\r\n            var $wrapper = this.utils.buildWrapper(html);\r\n            $wrapper.find(keys.join(',')).each(function(node)\r\n            {\r\n                self.utils.replaceToTag(node, tags[node.tagName.toLowerCase()]);\r\n            });\r\n\r\n            html = this.utils.getWrapperHtml($wrapper);\r\n        }\r\n\r\n        return html;\r\n    },\r\n    replaceNbspToSpaces: function(html)\r\n    {\r\n        return html.replace('&nbsp;', ' ');\r\n    },\r\n    replaceBlocksToBr: function(html)\r\n    {\r\n        html = html.replace(/<div[^>]*><\\/div>/gi, '');\r\n        html = html.replace(/<td[^>]*><\\/td>/gi, '');\r\n        html = html.replace(/<\\/div>|<\\/li>|<\\/td>|<\\/p>|<\\/H[1-6]>/gi, '<br>');\r\n\r\n        return html;\r\n    },\r\n\r\n    // clean\r\n    cleanNewLines: function(html)\r\n    {\r\n        return html.replace(/\\r?\\n/g, \"\");\r\n    },\r\n    cleanSpacesInPre: function(html)\r\n    {\r\n        return html.replace('&nbsp;&nbsp;&nbsp;&nbsp;', '    ');\r\n    },\r\n\r\n    // remove\r\n    removeInvisibleSpaces: function(html)\r\n    {\r\n        html = this.utils.removeInvisibleChars(html);\r\n        html = html.replace(/&#65279;/gi, '');\r\n\r\n        return html;\r\n    },\r\n    removeNl: function(html)\r\n    {\r\n        html = html.replace(/\\n/g, \" \");\r\n        html = html.replace(/\\s+/g, \"\\s\");\r\n\r\n        return html;\r\n    },\r\n    removeBrAtEnd: function(html)\r\n    {\r\n        html = html.replace(/<br\\s?\\/?>$/gi, ' ');\r\n        html = html.replace(/<br\\s?\\/?><li/gi, '<li');\r\n\r\n        return html;\r\n    },\r\n    removeTags: function(input, denied)\r\n    {\r\n        var re = (denied) ? /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi : /(<([^>]+)>)/gi;\r\n        var replacer = (!denied) ? '' : function ($0, $1)\r\n        {\r\n            return denied.indexOf($1.toLowerCase()) === -1 ? $0 : '';\r\n        };\r\n\r\n        return input.replace(re, replacer);\r\n    },\r\n    removeTagsExcept: function(input, except)\r\n    {\r\n        if (except === undefined) return input.replace(/(<([^>]+)>)/gi, '');\r\n\r\n        var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\r\n        return input.replace(tags, function($0, $1)\r\n        {\r\n            return except.indexOf($1.toLowerCase()) === -1 ? '' : $0;\r\n        });\r\n    },\r\n    removeComments: function(html)\r\n    {\r\n        return html.replace(this.reComments, '');\r\n    },\r\n    removeServiceTagsAndAttrs: function(html, removeMarkers)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        var self = this;\r\n        if (removeMarkers !== false)\r\n        {\r\n            $wrapper.find('.redactor-selection-marker').each(function(node)\r\n            {\r\n                var $el = $R.dom(node);\r\n                var text = self.utils.removeInvisibleChars($el.text());\r\n\r\n                return (text === '') ? $el.remove() : $el.unwrap();\r\n            });\r\n        }\r\n\r\n        $wrapper.find('[data-redactor-style-cache]').removeAttr('data-redactor-style-cache');\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    removeSpanWithoutAttributes: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('span').removeAttr('data-redactor-span data-redactor-style-cache').each(function(node)\r\n        {\r\n            if (node.attributes.length === 0) $R.dom(node).unwrap();\r\n        });\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    removeFirstBlockBreaklineInHtml: function(html)\r\n    {\r\n        return html.replace(new RegExp('</li><br\\\\s?/?>', 'gi'), '</li>');\r\n    },\r\n    removeEmptyAttributes: function(html, attrs)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        for (var i = 0; i < attrs.length; i++)\r\n        {\r\n            $wrapper.find('[' + attrs[i] + '=\"\"]').removeAttr(attrs[i]);\r\n        }\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n\r\n    // encode / decode\r\n    encodeHtml: function(html)\r\n    {\r\n        html = html.replace(/<br\\s?\\/?>/g, \"\\n\");\r\n        html = html.replace(/&nbsp;/g, ' ');\r\n        html = html.replace(/”/g, '\"');\r\n        html = html.replace(/“/g, '\"');\r\n        html = html.replace(/‘/g, '\\'');\r\n        html = html.replace(/’/g, '\\'');\r\n        html = this.encodeEntities(html);\r\n        html = html.replace(/\\$/g, '&#36;');\r\n\r\n        if (this.opts.preSpaces)\r\n        {\r\n            html = html.replace(/\\t/g, new Array(this.opts.preSpaces + 1).join(' '));\r\n        }\r\n\r\n        return html;\r\n    },\r\n\r\n    encodeCode: function(html) {\r\n\r\n        html = this.encodeAttrSings(html);\r\n\r\n        // replace all tags\r\n        html = html.replace(/<\\s/gi, '&lt; ');\r\n        html = html.replace(/<([^>]+)</gi, '&lt;$1<');\r\n        html = html.replace(/<(.*?)>/gi, 'xtagstartz$1xtagendz');\r\n\r\n        // revert pre / code\r\n        html = html.replace(/xtagstartzpre(.*?)xtagendz/g, '<pre$1>');\r\n        html = html.replace(/xtagstartzcode(.*?)xtagendz/g, '<code$1>');\r\n        html = html.replace(/xtagstartz\\/codextagendz/g, '</code>');\r\n        html = html.replace(/xtagstartz\\/prextagendz/g, '</pre>');\r\n\r\n        // encode\r\n        html = this._encodeCode(html);\r\n\r\n        // revert all tags\r\n        html = html.replace(/xtagstartz([\\w\\W]*?)xtagendz/g, '<$1>');\r\n        html = html.replace(/xtagstartz\\/(.*?)xtagendz/g, '</$1>');\r\n\r\n        html = this.decodeAttrSings(html);\r\n\r\n        return html;\r\n    },\r\n    _encodeCode: function(html) {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('pre code, pre, code').each(this._encodeNode.bind(this));\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _encodeNode: function(node) {\r\n        var first = node.firstChild;\r\n        var html = node.innerHTML;\r\n        if (node.tagName === 'PRE' && first && first.tagName === 'CODE') {\r\n            return;\r\n        }\r\n\r\n        html = html.replace(/xtagstartz/g, '<');\r\n        html = html.replace(/xtagendz/g, '>');\r\n\r\n        var encoded = this.decodeEntities(html);\r\n        node.textContent = this._encodeNodeHtml(encoded);\r\n    },\r\n    _encodeNodeHtml: function(html) {\r\n        html = html.replace(/&nbsp;/g, ' ').replace(/<br\\s?\\/?>/g, '\\n');\r\n        html = (this.opts.preSpaces) ? html.replace(/\\t/g, new Array(this.opts.preSpaces + 1).join(' ')) : html;\r\n\r\n        return html;\r\n    },\r\n\r\n    encodeAttrSings: function(html) {\r\n        var matches = html.match(/=\"(.*?)\"/g);\r\n        if (matches !== null) {\r\n            for (var i = 0; i < matches.length; i++) {\r\n                if (matches[i].search(/^\"</) !== -1 || matches[i].search(/>\"$/) !== -1) {\r\n                    continue;\r\n                }\r\n\r\n\r\n                var str = matches[i].replace('>', 'xmoresignz');\r\n                str = str.replace('<', 'xlesssignz');\r\n                html = html.replace(matches[i], str);\r\n            }\r\n        }\r\n\r\n        return html;\r\n    },\r\n    encodeEntities: function(str)\r\n    {\r\n        str = this.decodeEntities(str);\r\n        str = str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\r\n\r\n        return str;\r\n    },\r\n    encodePhpCode: function(html)\r\n    {\r\n        html = html.replace('<?php', '&lt;?php');\r\n        html = html.replace('<?', '&lt;?');\r\n        html = html.replace('?>', '?&gt;');\r\n\r\n        return html;\r\n    },\r\n    decodeAttrSings: function(html) {\r\n        html = html.replace(/xmoresignz/gi, '>');\r\n        html = html.replace(/xlesssignz/gi, '<');\r\n\r\n        return html;\r\n    },\r\n    decodeEntities: function(str)\r\n    {\r\n        return String(str).replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&amp;/g, '&');\r\n    },\r\n\r\n    // store / restore\r\n    storeComponents: function(html)\r\n    {\r\n        var matched = this.utils.getElementsFromHtml(html, 'figure', 'table');\r\n\r\n        return this._storeMatched(html, matched, 'Components', 'figure');\r\n    },\r\n    restoreComponents: function(html)\r\n    {\r\n        return this._restoreMatched(html, 'Components', 'figure');\r\n    },\r\n    storeLinks: function(html)\r\n    {\r\n        var matched = this.utils.getElementsFromHtml(html, 'a');\r\n\r\n        return this._storeMatched(html, matched, 'Links', 'a');\r\n    },\r\n    storeImages: function(html)\r\n    {\r\n        var matched = this.utils.getElementsFromHtml(html, 'img');\r\n\r\n        return this._storeMatched(html, matched, 'Images', 'img');\r\n    },\r\n    restoreLinks: function(html)\r\n    {\r\n        return this._restoreMatched(html, 'Links', 'a');\r\n    },\r\n    restoreImages: function(html)\r\n    {\r\n        return this._restoreMatched(html, 'Images', 'img');\r\n    },\r\n\r\n    // PRIVATE\r\n\r\n    // clean\r\n    _cleanWrapped: function(html)\r\n    {\r\n        html = html.replace(new RegExp('<p><figure([\\\\w\\\\W]*?)</figure></p>', 'gi'), '<figure$1</figure>');\r\n\r\n        return html;\r\n    },\r\n    _cleanGDocs: function(html)\r\n    {\r\n        // remove google docs markers\r\n        html = html.replace(/<b\\sid=\"internal-source-marker(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$2\");\r\n        html = html.replace(/<b(.*?)id=\"docs-internal-guid(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$3\");\r\n\r\n        html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?bold|font-weight:\\s?bold;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\r\n        html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?600|font-weight:\\s?600;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\r\n        html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?700|font-weight:\\s?700;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\r\n        html = html.replace(/<span[^>]*font-style:\\s?italic[^>]*>([\\w\\W]*?)<\\/span>/gi, '<i>$1</i>');\r\n        html = html.replace(/<span[^>]*font-weight:\\s?bold[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$1</b>');\r\n        html = html.replace(/<span[^>]*font-weight:\\s?700[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$1</b>');\r\n        html = html.replace(/<span[^>]*font-weight:\\s?600[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$1</b>');\r\n\r\n        return html;\r\n    },\r\n    _cleanMsWord: function(html)\r\n    {\r\n        html = html.replace(/<!--[\\s\\S]+?-->/gi, '');\r\n        html = html.replace(/<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s\\/>]))[^>]*>/gi, '');\r\n        html = html.replace(/<(\\/?)s>/gi, \"<$1strike>\");\r\n        html = html.replace(/&nbsp;/gi, ' ');\r\n        html = html.replace(/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function(str, spaces) {\r\n            return (spaces.length > 0) ? spaces.replace(/./, \" \").slice(Math.floor(spaces.length/2)).split(\"\").join(\"\\u00a0\") : '';\r\n        });\r\n\r\n        // build wrapper\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // footnote fix\r\n        $wrapper.find('.MsoFootnoteText').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var $parent = $node.parent();\r\n            if ($parent.length !== 0 && $parent.attr('style').search(/mso-element:footnote/) !== -1) {\r\n                $node.find('a').attr('id', '_' + $parent.attr('id'));\r\n            }\r\n\r\n        });\r\n\r\n        $wrapper.find('.MsoFootnoteReference').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var $parent = $node.parent();\r\n            if ($parent.length !== 0 && $parent.get().tagName === 'A') {\r\n                $parent.attr('id', $parent.attr('name'));\r\n            }\r\n\r\n        });\r\n\r\n        // build lists\r\n        $wrapper.find('p').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var str = $node.attr('style');\r\n            var matches = /mso-list:\\w+ \\w+([0-9]+)/.exec(str);\r\n            if (matches)\r\n            {\r\n                $node.attr('data-listLevel',  parseInt(matches[1], 10));\r\n            }\r\n        });\r\n\r\n        // parse Lists\r\n        this._parseWordLists($wrapper);\r\n\r\n        $wrapper.find('[align]').removeAttr('align');\r\n        $wrapper.find('[name]').removeAttr('name');\r\n        $wrapper.find('span').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var str = $node.attr('style');\r\n            var matches = /mso-list:Ignore/.exec(str);\r\n\r\n            if (matches) $node.remove();\r\n            else $node.unwrap();\r\n\r\n        });\r\n        $wrapper.find('[style]').removeAttr('style');\r\n        $wrapper.find(\"[class^='Mso']\").removeAttr('class');\r\n        $wrapper.find('a').filter(function(node) { return !node.hasAttribute('href'); }).unwrap();\r\n\r\n        // get wrapper\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n        html = html.replace(/<p[^>]*><\\/p>/gi, '');\r\n        html = html.replace(/<li>·/gi, '<li>');\r\n        html = html.trim();\r\n\r\n        // remove spaces between\r\n        html = html.replace(/\\/(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)>\\s+<(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)/gi, '/$1>\\n<$2');\r\n\r\n        var result = '';\r\n        var lines = html.split(/\\n/);\r\n        for (var i = 0; i < lines.length; i++)\r\n        {\r\n            var space = (lines[i] !== '' && lines[i].search(/>$/) === -1) ? ' ' : '\\n';\r\n\r\n            result += lines[i] + space;\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _parseWordLists: function($wrapper)\r\n    {\r\n        var lastLevel = 0;\r\n        var $item = null;\r\n        var $list = null;\r\n        var $listChild = null;\r\n\r\n        $wrapper.find('p').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var level = $node.attr('data-listLevel');\r\n            if (level === null && $node.hasClass('MsoListParagraphCxSpMiddle')) {\r\n                level = 1;\r\n            }\r\n\r\n            if (level !== null) {\r\n                var txt = $node.text();\r\n                var listTag = (/^\\s*\\w+\\./.test(txt)) ? '<ol></ol>' : '<ul></ul>';\r\n\r\n                // new parent list\r\n                if ($node.hasClass('MsoListParagraphCxSpFirst') || $node.hasClass('MsoNormal')) {\r\n                    $list = $R.dom(listTag);\r\n                    $node.before($list);\r\n                }\r\n                // new child list\r\n                else if (level > lastLevel && lastLevel !== 0) {\r\n                    $listChild = $R.dom(listTag);\r\n                    $item.append($listChild);\r\n                    $list = $listChild;\r\n                }\r\n                // level up\r\n                if (level < lastLevel) {\r\n                    var len = lastLevel - level + 1;\r\n                    for (var i = 0; i < len; i++) {\r\n                        $list = $list.parent();\r\n                    }\r\n                }\r\n\r\n                // create item\r\n                $node.find('span').first().unwrap();\r\n                $item = $R.dom('<li>' + $node.html().trim() + '</li>');\r\n                if ($list === null) {\r\n                    $node.before(listTag);\r\n                    $list = $node.prev();\r\n                }\r\n\r\n                // append\r\n                $list.append($item);\r\n                $node.remove();\r\n\r\n                lastLevel = level;\r\n            }\r\n            else {\r\n                $list = null;\r\n                lastLevel = 0;\r\n            }\r\n        });\r\n    },\r\n\r\n    // is\r\n    _isSpacedEmpty: function(html)\r\n    {\r\n        return (html.search(this.reSpacedEmpty) !== -1);\r\n    },\r\n    _isParagraphEmpty: function(html)\r\n    {\r\n        return (html.search(/^<p><\\/p>$/i) !== -1);\r\n    },\r\n    _isHtmlMsWord: function(html)\r\n    {\r\n        return html.match(/class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^'']*\\bmso-|w:WordDocument/i);\r\n    },\r\n\r\n    // set\r\n    _setSpanAttr: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('span').attr('data-redactor-span', true);\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _setStyleCache: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('[style]').each(function(node)\r\n        {\r\n            var $el = $R.dom(node);\r\n            $el.attr('data-redactor-style-cache', $el.attr('style'));\r\n        });\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _setPreClass: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('pre').addClass(this.opts.preClass);\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _setLinkNofollow: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('a').attr('rel', 'nofollow');\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n\r\n    // replace\r\n    _replaceScriptTag: function(html)\r\n    {\r\n        return html.replace(this.reScriptTag, '<script class=\"redactor-script-tag\" $1>$2</script>');\r\n    },\r\n    _unreplaceScriptTag: function(html)\r\n    {\r\n        return html.replace(/<script class=\"redactor-script-tag\"(.*?[^>]?)>([\\w\\W]*?)<\\/script>/gi, '<script$1>$2</script>');\r\n    },\r\n\t_replaceNlToBr: function(html)\r\n\t{\r\n\t\treturn html.replace(/\\n/g, '<br />');\r\n\t},\r\n\r\n    // remove\r\n    _removeScriptTag: function(html)\r\n    {\r\n        return html.replace(this.reScriptTag, '');\r\n    },\r\n\r\n    // private\r\n    _storeMatched: function(html, matched, stored, name)\r\n    {\r\n        this['stored' + stored] = [];\r\n        if (matched)\r\n        {\r\n            for (var i = 0; i < matched.length; i++)\r\n            {\r\n                this['stored' + stored][i] = matched[i];\r\n                html = html.replace(matched[i], '####' + name + i + '####');\r\n            }\r\n        }\r\n\r\n        return html;\r\n    },\r\n    _restoreMatched: function(html, stored, name)\r\n    {\r\n        if (this['stored' + stored])\r\n        {\r\n            for (var i = 0; i < this['stored' + stored].length; i++)\r\n            {\r\n                html = html.replace('####' + name + i + '####', this['stored' + stored][i]);\r\n            }\r\n        }\r\n\r\n        return html;\r\n    }\r\n});\r\n$R.add('class', 'cleaner.figure', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.detector = app.detector;\r\n    },\r\n    // public\r\n    convert: function(html, rules)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // convert\r\n        $wrapper.find('img').each(this._convertImage.bind(this));\r\n        $wrapper.find('hr').each(this._convertLine.bind(this));\r\n        $wrapper.find('iframe').each(this._convertIframe.bind(this));\r\n        $wrapper.find('table').each(this._convertTable.bind(this));\r\n        $wrapper.find('form').each(this._convertForm.bind(this));\r\n        $wrapper.find('figure pre').each(this._convertCode.bind(this));\r\n\r\n        // variables\r\n        $wrapper.find('[data-redactor-type=variable]').addClass('redactor-component');\r\n\r\n        // widgets\r\n        $wrapper.find('figure').not('.redactor-component, .redactor-figure-code').each(this._convertWidget.bind(this));\r\n\r\n        // contenteditable\r\n        $wrapper.find('figure pre').each(this._setContenteditableCode.bind(this));\r\n        $wrapper.find('.redactor-component, .non-editable').attr('contenteditable', false);\r\n\r\n        if (this.detector.isIe())\r\n        {\r\n            $wrapper.find('[data-redactor-type=table]').removeAttr('contenteditable');\r\n        }\r\n\r\n        $wrapper.find('figcaption, td, th').attr('contenteditable', true);\r\n        $wrapper.find('.redactor-component, figcaption').attr('tabindex', '-1');\r\n\r\n        // extra rules\r\n        this._acceptExtraRules($wrapper, rules);\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    unconvert: function(html, rules)\r\n    {\r\n        html = html.replace(/<\\/([^>]+)><div data-redactor-tag/g, '</$1>\\n<div data-redactor-tag');\r\n        html = html.replace(/<\\/([^>]+)><p/g, '</$1>\\n<p');\r\n\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // contenteditable\r\n        $wrapper.find('th, td, figcaption, figure, pre, code, .redactor-component').removeAttr('contenteditable tabindex');\r\n\r\n        // remove class\r\n        $wrapper.find('figure').removeClass('redactor-component redactor-component-active redactor-uploaded-figure');\r\n\r\n        // unconvert\r\n        $wrapper.find('[data-redactor-type=variable]').removeClass('redactor-component redactor-component-active');\r\n        $wrapper.find('figure[data-redactor-type=line]').unwrap();\r\n        $wrapper.find('figure[data-redactor-type=widget]').each(this._unconvertWidget.bind(this));\r\n        $wrapper.find('figure[data-redactor-type=form]').each(this._unconvertForm.bind(this));\r\n        $wrapper.find('figure[data-redactor-type=table]').each(this._unconvertTable.bind(this));\r\n        $wrapper.find('figure[data-redactor-type=image]').removeAttr('rel').each(this._unconvertImages.bind(this));\r\n\r\n        $wrapper.find('img').removeAttr('data-redactor-type').removeClass('redactor-component');\r\n        $wrapper.find('.non-editable').removeAttr('contenteditable');\r\n\r\n        // remove types\r\n        $wrapper.find('figure').each(this._removeTypes.bind(this));\r\n\r\n        // remove caret\r\n        $wrapper.find('span.redactor-component-caret').remove();\r\n\r\n        // break div\r\n        $wrapper = this._unconvertBreakTag($wrapper);\r\n\r\n        // extra rules\r\n        this._acceptExtraRules($wrapper, rules);\r\n\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n        html = html.replace(/<br\\s?\\/?>$/, '');\r\n        html = html.replace(/<br\\s?\\/?><\\/(td|th)>/, '</$1>');\r\n\r\n        return html;\r\n    },\r\n\r\n    // private\r\n    _convertImage: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        if (this._isNonEditable($node)) return;\r\n\r\n        // set id\r\n        if (this.opts.imageObserve && !$node.attr('data-image'))\r\n        {\r\n            $node.attr('data-image', this.utils.getRandomId());\r\n        }\r\n\r\n        var $link = $node.closest('a');\r\n        var $figure = $node.closest('figure');\r\n        var isImage = ($figure.children().not('a, img, br, figcaption').length === 0);\r\n        if (!isImage) return;\r\n\r\n        if ($figure.length === 0)\r\n        {\r\n            var $parent = ($link.length !== 0) ? $link.closest('p') : $node.closest('p');\r\n            if (this.opts.imageFigure === false && $parent.length !== 0)\r\n            {\r\n                var $el = this.utils.replaceToTag($parent, 'figure');\r\n                $figure = $el;\r\n                $figure.addClass('redactor-replace-figure');\r\n            }\r\n            else\r\n            {\r\n                if ($parent.length !== 0) {\r\n                    $parent.unwrap();\r\n                }\r\n\r\n                $figure = ($link.length !== 0) ? $link.wrap('<figure>') : $node.wrap('<figure>');\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if ($figure.hasClass('redactor-uploaded-figure'))\r\n            {\r\n                $figure.removeClass('redactor-uploaded-figure');\r\n            }\r\n            else\r\n            {\r\n                $figure.addClass('redactor-keep-figure');\r\n            }\r\n        }\r\n\r\n        this._setFigure($figure, 'image');\r\n    },\r\n    _convertTable: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this._wrapFigure(node);\r\n        this._setFigure($figure, 'table');\r\n    },\r\n    _convertLine: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this._wrapFigure(node);\r\n        this._setFigure($figure, 'line');\r\n    },\r\n    _convertForm: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this.utils.replaceToTag(node, 'figure');\r\n        this._setFigure($figure, 'form');\r\n    },\r\n    _convertIframe: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $node = $R.dom(node);\r\n        if ($node.closest('.redactor-component').length !== 0) return;\r\n\r\n        var src = node.getAttribute('src');\r\n        var isVideo = (src && (src.match(this.opts.regex.youtube) || src.match(this.opts.regex.vimeo)));\r\n        var $figure = this._wrapFigure(node);\r\n\r\n        if (isVideo)\r\n        {\r\n            this._setFigure($figure, 'video');\r\n        }\r\n    },\r\n    _convertCode: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this._wrapFigure(node);\r\n        this._setFigure($figure, 'code');\r\n    },\r\n    _convertWidget: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $node = $R.dom(node);\r\n        $node.addClass('redactor-component');\r\n        $node.attr('data-redactor-type', 'widget');\r\n        $node.attr('data-widget-code', encodeURI(node.innerHTML.trim()));\r\n    },\r\n\r\n    // unconvert\r\n    _unconvertBreakTag: function($wrapper) {\r\n        $wrapper.find('[data-redactor-tag]').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            $node.removeAttr('data-redactor-tag');\r\n            if (node.attributes.length !== 0) {\r\n                if (node.lastChild && node.lastChild.tagName === 'BR') $R.dom(node.lastChild).remove();\r\n                return;\r\n            }\r\n\r\n            if (node.lastChild && node.lastChild.tagName === 'BR') {\r\n                $node.unwrap();\r\n            }\r\n            else {\r\n                var $next = $node.nextElement();\r\n                if ($next.length !== 0 && $next.attr('data-redactor-tag')) {\r\n                    node.appendChild(document.createElement('br'));\r\n                }\r\n\r\n                $node.unwrap();\r\n            }\r\n        }.bind(this));\r\n        return $wrapper;\r\n    },\r\n    _unconvertForm: function(node)\r\n    {\r\n        this.utils.replaceToTag(node, 'form');\r\n    },\r\n    _unconvertTable: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        $node.unwrap();\r\n    },\r\n    _unconvertWidget: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        $node.html(decodeURI($node.attr('data-widget-code')));\r\n        $node.removeAttr('data-widget-code');\r\n    },\r\n    _unconvertImages: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        $node.removeClass('redactor-component');\r\n\r\n        var isList = ($node.closest('li').length !== 0);\r\n        var isTable = ($node.closest('table').length !== 0);\r\n        var hasFigcaption = ($node.find('figcaption').length !== 0);\r\n\r\n        var style = $node.attr('style');\r\n        var hasStyle = !(style === null || style === '');\r\n        var hasClass = ($node.attr('class') !== '');\r\n\r\n        if (isList || (isTable && !hasFigcaption && !hasStyle && !hasClass))\r\n        {\r\n            $node.unwrap();\r\n        }\r\n    },\r\n    _removeTypes: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        var type = $node.attr('data-redactor-type');\r\n        var removed = ['image', 'widget', 'line', 'video', 'code', 'form', 'table'];\r\n        if (type && removed.indexOf(type) !== -1)\r\n        {\r\n            $node.removeAttr('data-redactor-type');\r\n        }\r\n\r\n        // keep figure\r\n        if ($node.hasClass('redactor-keep-figure'))\r\n        {\r\n            $node.removeClass('redactor-keep-figure');\r\n        }\r\n\r\n        // unwrap figure\r\n        else if (type === 'image' && this.opts.imageFigure === false)\r\n        {\r\n            var hasFigcaption = ($node.find('figcaption').length !== 0);\r\n            if (!hasFigcaption)\r\n            {\r\n                // replace\r\n                if ($node.hasClass('redactor-replace-figure'))\r\n                {\r\n                    $node.removeClass('redactor-replace-figure');\r\n                    this.utils.replaceToTag($node, 'p');\r\n                }\r\n                else\r\n                {\r\n                    this.utils.replaceToTag($node, 'p');\r\n                }\r\n            }\r\n        }\r\n\r\n        $node.removeClass('redactor-replace-figure');\r\n    },\r\n\r\n    // wrap\r\n    _wrapFigure: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        var $figure = $node.closest('figure');\r\n\r\n        return ($figure.length === 0) ? $node.wrap('<figure>') : $figure;\r\n    },\r\n\r\n    // set\r\n    _setFigure: function($figure, type)\r\n    {\r\n        $figure.addClass('redactor-component');\r\n        $figure.attr('data-redactor-type', type);\r\n    },\r\n    _setContenteditableCode: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $node = $R.dom(node);\r\n        var $code = $node.children('code').first();\r\n\r\n        var $el = ($code.length !== 0) ? $code : $node;\r\n        $el.attr('contenteditable', true).attr('tabindex', '-1');\r\n    },\r\n\r\n    // utils\r\n    _acceptExtraRules: function($wrapper, rules)\r\n    {\r\n        for (var key in rules)\r\n        {\r\n            if (typeof rules[key] === 'function')\r\n            {\r\n                rules[key]($wrapper);\r\n            }\r\n        }\r\n    },\r\n    _isNonEditable: function(node)\r\n    {\r\n        return ($R.dom(node).closest('.non-editable').length !== 0);\r\n    }\r\n});\r\n$R.add('class', 'cleaner.paragraphize', {\r\n    init: function(app) {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.cleaner = app.cleaner;\r\n        this.element = app.element;\r\n\r\n        // local\r\n        this.stored = [];\r\n        this.remStart = '#####replace';\r\n        this.remEnd = '#####';\r\n        this.paragraphizeTags = ['table', 'div', 'pre', 'form', 'ul', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'blockquote', 'figcaption',\r\n                'address', 'section', 'header', 'footer', 'aside', 'article', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea',\r\n                'button', 'option', 'map', 'area', 'math', 'hr', 'fieldset', 'legend', 'hgroup', 'nav', 'figure', 'details', 'menu', 'summary', 'p'];\r\n    },\r\n    // public\r\n    convert: function(html) {\r\n\r\n        var value = this._isConverted(html);\r\n\r\n        value = (value === true) ? this._convert(html) : value;\r\n        value = this._convertTable(value);\r\n\r\n        return value;\r\n    },\r\n\r\n    // private\r\n    _convert: function(html, tablemarkup) {\r\n        // build markup tag\r\n        var tag = (this.opts.breakline || tablemarkup) ? 'sdivtag' : this.opts.markup;\r\n        var attr = (tablemarkup) ? 'tbr' : 'br';\r\n\r\n        // store\r\n        html = this._storeTags(html);\r\n\r\n        var storedComments = [];\r\n        html = this.cleaner.storeComments(html, storedComments);\r\n\r\n        // trim\r\n        html = html.trim();\r\n        html = this._trimLinks(html);\r\n\r\n        // trim new line in inline\r\n        var inlines = this.opts.inlineTags.join('|');\r\n        html = html.replace(new RegExp('<(' + inlines + ')(.*?[^>]?)>\\n</(' + inlines + ')>', 'gi'), '<$1$2></$3>');\r\n\r\n        // replace new lines\r\n        html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)$/g, '');\r\n        html = html.replace(/xparagraphmarkerz$/g, '');\r\n        html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)/g, '\\n');\r\n        html = html.replace(/xparagraphmarkerz/g, '\\n');\r\n\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/<br\\s?\\/?>(?:\\r\\n|\\r|\\n)/gi, 'xbreakmarkerz\\n');\r\n            html = html.replace(/<br\\s?\\/?>/gi, 'xbreakmarkerz\\n');\r\n            html = html.replace(/xbreakmarkerz\\n<\\//gi, 'xbreakmarkerz</');\r\n\r\n        }\r\n        else {\r\n            html = html.replace(/[\\n]+/g, \"\\n\");\r\n        }\r\n\r\n        // wrap to tag\r\n        var str = '';\r\n        var arr = html.split(\"\\n\");\r\n        for (var i = 0; i < arr.length; i++) {\r\n            str += '<' + tag + '>' + arr[i] + '</' + tag + '>\\n';\r\n        }\r\n\r\n        html = str.replace(/\\n$/, '');\r\n\r\n\r\n        // clean\r\n        html = html.replace(new RegExp('<' + tag + '>\\\\s+#####', 'gi'), '#####');\r\n        html = html.replace(new RegExp('<' + tag + '>#####', 'gi'), '#####');\r\n        html = html.replace(new RegExp('#####</' + tag + '>', 'gi'), '#####');\r\n\r\n        // replace marker\r\n        html = (this.opts.breakline) ? html.replace(/xbreakmarkerz/gi, \"<br>\") : html;\r\n\r\n        // restore\r\n        html = this._restoreTags(html);\r\n        html = this.cleaner.restoreComments(html, storedComments);\r\n\r\n        // remove empty\r\n        if (this.opts.breakline) {\r\n            html = html.replace(new RegExp('<' + tag + '></' + tag + '>', 'gi'), '<' + tag + '><br></' + tag + '>');\r\n        }\r\n        else {\r\n            //html = html.replace(new RegExp('<' + tag + '><br\\\\s?/?></' + tag + '>', 'gi'), '');\r\n            //html = html.replace(new RegExp('<' + tag + '></' + tag + '>', 'gi'), '');\r\n        }\r\n\r\n        // clean restored\r\n        html = html.replace(new RegExp('<sdivtag>', 'gi'), '<div data-redactor-tag=\"' + attr + '\">');\r\n        html = html.replace(new RegExp('sdivtag', 'gi'), 'div');\r\n        html = html.replace(/<\\/([^>]+)><div data-redactor-tag/g, '</$1>\\n<div data-redactor-tag');\r\n\r\n        return html;\r\n    },\r\n    _convertTable: function(html) {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('td, th').each(this._convertCell.bind(this));\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        return html;\r\n    },\r\n    _convertCell: function(node) {\r\n        var $node = $R.dom(node);\r\n        this.stored = [];\r\n        var code = this._convert($node.html(), true);\r\n        $node.html(code);\r\n    },\r\n    _storeTags: function(html) {\r\n        var self = this;\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find(this.paragraphizeTags.join(', ')).each(function(node, i) {\r\n            var replacement = document.createTextNode(self.remStart + i + self.remEnd + 'xparagraphmarkerz'); //  + \"\\n\"\r\n            self.stored.push(node.outerHTML);\r\n            node.parentNode.replaceChild(replacement, node);\r\n        });\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _restoreTags: function(html) {\r\n        for (var i = 0; i < this.stored.length; i++) {\r\n            this.stored[i] = this.stored[i].replace(/\\$/g, '&#36;');\r\n            html = html.replace(this.remStart + i + this.remEnd, this.stored[i]);\r\n        }\r\n\r\n        return html;\r\n    },\r\n    _trimLinks: function(html) {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('a').each(this._trimLink.bind(this));\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        return html;\r\n    },\r\n    _trimLink: function(node) {\r\n        var $node = $R.dom(node);\r\n        $node.html($node.html().trim());\r\n    },\r\n    _isConverted: function(html) {\r\n        if (this._isDisabled(html)) return html;\r\n        else if (this._isEmptyHtml(html)) return this.opts.emptyHtml;\r\n        else return true;\r\n    },\r\n    _isDisabled: function() {\r\n        return (this.opts.paragraphize === false || this.element.isType('inline'));\r\n    },\r\n    _isEmptyHtml: function(html) {\r\n        return (html === '' || html === '<p></p>' || html === '<div></div>');\r\n    }\r\n});\r\n$R.add('service', 'detector', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.userAgent = navigator.userAgent.toLowerCase();\r\n    },\r\n\tisWebkit: function()\r\n\t{\r\n\t\treturn /webkit/.test(this.userAgent);\r\n\t},\r\n\tisFirefox: function()\r\n\t{\r\n\t\treturn (this.userAgent.indexOf('firefox') > -1);\r\n\t},\r\n\tisIe: function(v)\r\n\t{\r\n        if (document.documentMode || /Edge/.test(navigator.userAgent)) return 'edge';\r\n\r\n\t\tvar ie;\r\n\t\tie = RegExp('msie' + (!isNaN(v)?('\\\\s'+v):''), 'i').test(navigator.userAgent);\r\n\t\tif (!ie) ie = !!navigator.userAgent.match(/Trident.*rv[ :]*11\\./);\r\n\r\n\t\treturn ie;\r\n\t},\r\n\tisMobile: function()\r\n\t{\r\n\t\treturn /(iPhone|iPod|Android)/.test(navigator.userAgent);\r\n\t},\r\n\tisDesktop: function()\r\n\t{\r\n\t\treturn !/(iPhone|iPod|iPad|Android)/.test(navigator.userAgent);\r\n\t},\r\n\tisIpad: function()\r\n\t{\r\n\t\treturn /iPad/.test(navigator.userAgent);\r\n\t}\r\n});\r\n$R.add('service', 'offset', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    get: function(el, trimmed)\r\n    {\r\n        var offset = { start: 0, end: 0 };\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return false;\r\n\r\n        var isEditor = this.editor.isEditor(node);\r\n        var isIn = (isEditor) ? true : this.selection.isIn(node);\r\n        var range = this.selection.getRange();\r\n\r\n        if (!isEditor && !isIn)\r\n        {\r\n            offset = false;\r\n        }\r\n        else if (this.selection.is() && isIn)\r\n        {\r\n            var $startNode = $R.dom(range.startContainer);\r\n            var fix = ($startNode.hasClass('redactor-component')) ? range.startOffset : 0;\r\n            var clonedRange = range.cloneRange();\r\n\r\n            clonedRange.selectNodeContents(node);\r\n            clonedRange.setEnd(range.startContainer, range.startOffset);\r\n\r\n            var selection = this._getString(range, trimmed);\r\n\r\n            offset.start = this._getString(clonedRange, trimmed).length - fix;\r\n            offset.end = offset.start + selection.length + fix;\r\n        }\r\n\r\n        return offset;\r\n    },\r\n    set: function(offset, el)\r\n    {\r\n        if (this._setComponentOffset(el)) return;\r\n\r\n        this.component.clearActive();\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return;\r\n\r\n        var size = this.size(node);\r\n        var charIndex = 0, range = document.createRange();\r\n\r\n        offset.end = (offset.end > size) ? size : offset.end;\r\n\r\n        range.setStart(node, 0);\r\n        range.collapse(true);\r\n\r\n        var nodeStack = [node], foundStart = false, stop = false;\r\n        while (!stop && (node = nodeStack.pop()))\r\n        {\r\n            if (node.nodeType === 3)\r\n            {\r\n                var nextCharIndex = charIndex + node.length;\r\n\r\n                if (!foundStart && !this._isFigcaptionNext(node) && offset.start >= charIndex && offset.start <= nextCharIndex)\r\n                {\r\n                    range.setStart(node, offset.start - charIndex);\r\n                    foundStart = true;\r\n                }\r\n\r\n                if (foundStart && offset.end >= charIndex && offset.end <= nextCharIndex)\r\n                {\r\n                    range.setEnd(node, offset.end - charIndex);\r\n                    stop = true;\r\n                }\r\n\r\n                charIndex = nextCharIndex;\r\n            }\r\n            else\r\n            {\r\n                var i = node.childNodes.length;\r\n                while (i--)\r\n                {\r\n                    nodeStack.push(node.childNodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.selection.setRange(range);\r\n    },\r\n    size: function(el, trimmed)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (node)\r\n        {\r\n            var range = document.createRange();\r\n\r\n            var clonedRange = range.cloneRange();\r\n            clonedRange.selectNodeContents(node);\r\n\r\n            return this._getString(clonedRange, trimmed).length;\r\n        }\r\n\r\n        return 0;\r\n    },\r\n\r\n    // private\r\n    _getString: function(obj, trimmed)\r\n    {\r\n        var str = obj.toString();\r\n        str = (this.editor.isEmpty()) ? str.replace(/\\uFEFF/g, '') : str;\r\n        str = (trimmed) ? str.trim() : str;\r\n\r\n        return str;\r\n    },\r\n    _setComponentOffset: function(el)\r\n    {\r\n        return (this.component.isNonEditable(el)) ? this.component.setActive(el) : false;\r\n    },\r\n    _isFigcaptionNext: function(node)\r\n    {\r\n        var next = node.nextSibling;\r\n        return (node.nodeValue.trim() === '' && next && next.tagName === 'FIGCAPTION');\r\n    }\r\n});\r\n$R.add('service', 'inspector', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // parse\r\n    parse: function(el)\r\n    {\r\n        return $R.create('inspector.parser', this.app, this, el);\r\n    },\r\n\r\n    // text detection\r\n    isText: function(el)\r\n    {\r\n        if (typeof el === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(el))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        var node = $R.dom(el).get();\r\n        return (node && node.nodeType === 3); //  && !this.selection.getBlock(el)\r\n    },\r\n\r\n    // tag detection\r\n    isInlineTag: function(tag, extend)\r\n    {\r\n        var tags = this._extendTags(this.opts.inlineTags, extend);\r\n\r\n        return (this._isTag(tag) && tags.indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n    isBlockTag: function(tag, extend)\r\n    {\r\n        var tags = this._extendTags(this.opts.blockTags, extend);\r\n\r\n        return (this._isTag(tag) && tags.indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n    isTableCellTag: function(tag)\r\n    {\r\n        return (['td', 'th'].indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n    isHeadingTag: function(tag)\r\n    {\r\n        return (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n\r\n\r\n    _isTag: function(tag)\r\n    {\r\n        return (tag !== undefined && tag);\r\n    },\r\n    _extendTags: function(tags, extend)\r\n    {\r\n        tags = tags.concat(tags);\r\n\r\n        if (extend)\r\n        {\r\n            for (var i = 0 ; i < extend.length; i++)\r\n            {\r\n                tags.push(extend[i]);\r\n            }\r\n        }\r\n\r\n        return tags;\r\n    }\r\n});\r\n$R.add('class', 'inspector.parser', {\r\n    init: function(app, inspector, el)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.selection = app.selection;\r\n        this.inspector = inspector;\r\n\r\n        // local\r\n        var $editor = this.editor.getElement();\r\n        this.el = el;\r\n        this.$el = $R.dom(this.el, $editor);\r\n        this.node = this.$el.get();\r\n\r\n        // comment node\r\n        if (this.node && this.node.nodeType === 8)\r\n        {\r\n            this.node = false;\r\n        }\r\n\r\n        this.$component = this.$el.closest('.redactor-component', $editor);\r\n    },\r\n    // is\r\n    isEditor: function()\r\n    {\r\n        return (this.node === this.editor.getElement().get());\r\n    },\r\n    isInEditor: function()\r\n    {\r\n        return (this.$el.parents('.redactor-in-' + this.uuid).length !== 0);\r\n    },\r\n    isComponent: function()\r\n    {\r\n        return (this.$component.length !== 0);\r\n    },\r\n    isComponentType: function(type)\r\n    {\r\n        return (this.getComponentType() === type);\r\n    },\r\n    isComponentActive: function()\r\n    {\r\n        return (this.isComponent() && this.$component.hasClass('redactor-component-active'));\r\n    },\r\n    isComponentEditable: function()\r\n    {\r\n        var types = ['code', 'table'];\r\n        var type = this.getComponentType();\r\n\r\n        return (this.isComponent() && types.indexOf(type) !== -1);\r\n    },\r\n    isFigcaption: function()\r\n    {\r\n        return this.getFigcaption();\r\n    },\r\n    isPre: function()\r\n    {\r\n        return this.getPre();\r\n    },\r\n    isCode: function()\r\n    {\r\n        var $code = this.$el.closest('code');\r\n        var $parent = $code.parent('pre');\r\n\r\n        return ($code.length !== 0 && $parent.length === 0);\r\n    },\r\n    isList: function()\r\n    {\r\n        return this.getList();\r\n    },\r\n    isFirstListItem: function()\r\n    {\r\n        return this._getLastOrFirstListItem('first');\r\n    },\r\n    isLastListItem: function()\r\n    {\r\n        return this._getLastOrFirstListItem('last');\r\n    },\r\n    isFirstTableCell: function()\r\n    {\r\n        return this._getLastOrFirstTableCell('first');\r\n    },\r\n    isLastTableCell: function()\r\n    {\r\n        return this._getLastOrFirstTableCell('last');\r\n    },\r\n    isTable: function()\r\n    {\r\n        return (this.isComponentType('table') || this.getTable());\r\n    },\r\n    isHeading: function()\r\n    {\r\n        return this.getHeading();\r\n    },\r\n    isBlockquote: function()\r\n    {\r\n        return this.getBlockquote();\r\n    },\r\n    isDl: function()\r\n    {\r\n        return this.getDl();\r\n    },\r\n    isParagraph: function()\r\n    {\r\n        return this.getParagraph();\r\n    },\r\n    isLink: function()\r\n    {\r\n        return this.getLink();\r\n    },\r\n    isFile: function()\r\n    {\r\n        return this.getFile();\r\n    },\r\n    isText: function()\r\n    {\r\n        return this.inspector.isText(this.el);\r\n    },\r\n    isInline: function()\r\n    {\r\n        var tags = this.opts.inlineTags;\r\n\r\n        return (this.isElement()) ? (tags.indexOf(this.node.tagName.toLowerCase()) !== -1) : false;\r\n    },\r\n    isBlock: function()\r\n    {\r\n        var tags = this.opts.blockTags;\r\n\r\n        return (this.isElement()) ? (tags.indexOf(this.node.tagName.toLowerCase()) !== -1) : false;\r\n    },\r\n    isElement: function()\r\n    {\r\n        return (this.node && this.node.nodeType && this.node.nodeType !== 3);\r\n    },\r\n\r\n    // has\r\n    hasParent: function(tags)\r\n    {\r\n        return (this.$el.closest(tags.join(',')).length !== 0);\r\n    },\r\n\r\n    // get\r\n    getNode: function()\r\n    {\r\n        return this.node;\r\n    },\r\n    getTag: function()\r\n    {\r\n        return (this.isElement()) ? this.node.tagName.toLowerCase() : false;\r\n    },\r\n    getComponent: function()\r\n    {\r\n        return (this.isComponent()) ? this.$component.get() : false;\r\n    },\r\n    getComponentType: function()\r\n    {\r\n        return (this.isComponent()) ? this.$component.attr('data-redactor-type') : false;\r\n    },\r\n    getFirstNode: function()\r\n    {\r\n        return this.utils.getFirstNode(this.node);\r\n    },\r\n    getLastNode: function()\r\n    {\r\n        return this.utils.getLastNode(this.node);\r\n    },\r\n    getFirstElement: function()\r\n    {\r\n        return this.utils.getFirstElement(this.node);\r\n    },\r\n    getLastElement: function()\r\n    {\r\n        return this.utils.getLastElement(this.node);\r\n    },\r\n    getFigcaption: function()\r\n    {\r\n        return this._getClosestNode('figcaption');\r\n    },\r\n    getPre: function()\r\n    {\r\n        return this._getClosestNode('pre');\r\n    },\r\n    getCode: function()\r\n    {\r\n        return this._getClosestNode('code');\r\n    },\r\n    getList: function()\r\n    {\r\n        return this._getClosestNode('ul, ol');\r\n    },\r\n    getParentList: function()\r\n    {\r\n        return this._getClosestUpNode('ul, ol');\r\n    },\r\n    getListItem: function()\r\n    {\r\n        return this._getClosestNode('li');\r\n    },\r\n    getTable: function()\r\n    {\r\n        if (this.getComponentType('table'))\r\n        {\r\n            return this.$component.find('table').get();\r\n        }\r\n        else\r\n        {\r\n            return this._getClosestNode('table');\r\n        }\r\n    },\r\n    getTableCell: function()\r\n    {\r\n        var $td = this.$el.closest('td, th');\r\n\r\n        return ($td.length !== 0) ? $td.get() : false;\r\n    },\r\n    getComponentCodeElement: function()\r\n    {\r\n        return (this.isComponentType('code')) ? this.$component.find('pre code, pre').last().get() : false;\r\n    },\r\n    getImageElement: function()\r\n    {\r\n        return (this.isComponentType('image')) ? this.$component.find('img').get() : false;\r\n    },\r\n    getParagraph: function()\r\n    {\r\n        return this._getClosestNode('p');\r\n    },\r\n    getHeading: function()\r\n    {\r\n        return this._getClosestNode('h1, h2, h3, h4, h5, h6');\r\n    },\r\n    getDl: function()\r\n    {\r\n        return this._getClosestNode('dl');\r\n    },\r\n    getBlockquote: function()\r\n    {\r\n        return this._getClosestNode('blockquote');\r\n    },\r\n    getLink: function()\r\n    {\r\n        var isComponent = (this.isComponent() && !this.isFigcaption());\r\n        var isTable = this.isComponentType('table');\r\n\r\n        if (isTable || !isComponent)\r\n        {\r\n            var $el = this._getClosestElement('a');\r\n\r\n            return ($el && !$el.attr('data-file')) ? $el.get() : false;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getFile: function()\r\n    {\r\n        var isComponent = this.isComponent();\r\n        var isTable = this.isComponentType('table');\r\n\r\n        if (isTable || !isComponent)\r\n        {\r\n            var $el = this._getClosestElement('a');\r\n\r\n            return ($el && $el.attr('data-file')) ? $el.get() : false;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    // find\r\n    findFirstNode: function(selector)\r\n    {\r\n        return this.$el.find(selector).first().get();\r\n    },\r\n    findLastNode: function(selector)\r\n    {\r\n        return this.$el.find(selector).last().get();\r\n    },\r\n\r\n    // private\r\n    _getLastOrFirstListItem: function(type)\r\n    {\r\n        var list = this.getList();\r\n        var tag = this.getTag();\r\n        if (list && tag === 'li')\r\n        {\r\n            var item = $R.dom(list).find('li')[type]().get();\r\n            if (item && this.node === item)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _getLastOrFirstTableCell: function(type)\r\n    {\r\n        var table = this.getTable();\r\n        var tag = this.getTag();\r\n        if (table && (tag === 'td' || tag === 'th'))\r\n        {\r\n            var item = $R.dom(table).find('td, th')[type]().get();\r\n            if (item && this.node === item)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _getClosestUpNode: function(selector)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $el = this.$el.parents(selector, $editor).last();\r\n\r\n        return ($el.length !== 0) ? $el.get() : false;\r\n    },\r\n    _getClosestNode: function(selector)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $el = this.$el.closest(selector, $editor);\r\n\r\n        return ($el.length !== 0) ? $el.get() : false;\r\n    },\r\n    _getClosestElement: function(selector)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $el = this.$el.closest(selector, $editor);\r\n\r\n        return ($el.length !== 0) ? $el : false;\r\n    }\r\n});\r\n$R.add('service', 'marker', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    build: function(pos, html)\r\n    {\r\n        var marker = document.createElement('span');\r\n\r\n        marker.id = 'selection-marker-' + this._getPos(pos);\r\n        marker.className = 'redactor-selection-marker';\r\n        marker.innerHTML = this.opts.markerChar;\r\n\r\n        return (html) ? marker.outerHTML : marker;\r\n    },\r\n    buildHtml: function(pos)\r\n    {\r\n        return this.build(pos, true);\r\n    },\r\n    insert: function(side)\r\n    {\r\n        this.remove();\r\n\r\n        var atStart = (side !== 'both' && (side === 'start' || this.selection.isCollapsed()));\r\n\r\n        if (!this.selection.is()) this.editor.focus();\r\n\r\n        var range = this.selection.getRange();\r\n        if (range)\r\n        {\r\n            var start = this.build('start');\r\n            var end = this.build('end');\r\n\r\n            var cloned = range.cloneRange();\r\n\r\n            if (!atStart)\r\n            {\r\n                cloned.collapse(false);\r\n                cloned.insertNode(end);\r\n            }\r\n\r\n            cloned.setStart(range.startContainer, range.startOffset);\r\n            cloned.collapse(true);\r\n            cloned.insertNode(start);\r\n\r\n            range.setStartAfter(start);\r\n\r\n            if (!atStart)\r\n            {\r\n                range.setEndBefore(end);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n\r\n            return start;\r\n        }\r\n    },\r\n    find: function(pos, $context)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $marker = ($context || $editor).find('span#selection-marker-' + this._getPos(pos));\r\n\r\n        return ($marker.length !== 0) ? $marker.get() : false;\r\n    },\r\n    restore: function()\r\n    {\r\n        var start = this.find('start');\r\n        var end = this.find('end');\r\n\r\n        var range = this.selection.getRange();\r\n        if (!range || !this.selection.is())\r\n        {\r\n            this.editor.focus();\r\n            range = document.createRange();\r\n        }\r\n\r\n        if (start)\r\n        {\r\n            var prev = (end) ? end.previousSibling : false;\r\n            var next = start.nextSibling;\r\n            next = (next && next.nodeType === 3 && next.textContent.replace(/[\\n\\t]/g, '') === '') ? false : next;\r\n\r\n            if (!end)\r\n            {\r\n                if (next)\r\n                {\r\n                    range.selectNodeContents(next);\r\n                    range.collapse(true);\r\n                }\r\n                else\r\n                {\r\n                    this._restoreInject(range, start);\r\n                }\r\n            }\r\n            else if (next && next.id === 'selection-marker-end')\r\n            {\r\n                this._restoreInject(range, start);\r\n            }\r\n            else\r\n            {\r\n                if (prev && next)\r\n                {\r\n                    range.selectNodeContents(prev);\r\n                    range.collapse(false);\r\n                    range.setStart(next, 0);\r\n                }\r\n                else if (prev && !next)\r\n                {\r\n                    range.selectNodeContents(prev);\r\n                    range.collapse(false);\r\n                    range.setStartAfter(start);\r\n                }\r\n                else\r\n                {\r\n                    range.setStartAfter(start);\r\n                    range.setEndBefore(end);\r\n                }\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n\r\n            if (start) start.parentNode.removeChild(start);\r\n            if (end) end.parentNode.removeChild(end);\r\n        }\r\n    },\r\n    remove: function()\r\n    {\r\n        var start = this.find('start');\r\n        var end = this.find('end');\r\n\r\n        if (start) start.parentNode.removeChild(start);\r\n        if (end) end.parentNode.removeChild(end);\r\n    },\r\n\r\n    // private\r\n    _getPos: function(pos)\r\n    {\r\n        return (pos === undefined) ? 'start' : pos;\r\n    },\r\n    _restoreInject: function(range, start)\r\n    {\r\n        var textNode = this.utils.createInvisibleChar();\r\n        $R.dom(start).after(textNode);\r\n\r\n        range.selectNodeContents(textNode);\r\n        range.collapse(false);\r\n    }\r\n});\r\n$R.add('service', 'component', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.activeClass = 'redactor-component-active';\r\n    },\r\n    create: function(type, el)\r\n    {\r\n        return $R.create(type + '.component', this.app, el);\r\n    },\r\n    build: function(el)\r\n    {\r\n        var $el = $R.dom(el);\r\n        var component;\r\n        var type = $el.attr('data-redactor-type');\r\n        if (type)\r\n        {\r\n            component = this.create(type, el);\r\n        }\r\n\r\n        return (component) ? component : el;\r\n    },\r\n    remove: function(el, caret)\r\n    {\r\n        var $component = $R.dom(el).closest('.redactor-component');\r\n        var type = $component.attr('data-redactor-type');\r\n        var current = $component.parent();\r\n        var data = this.inspector.parse(current);\r\n        var prev = this.utils.findSiblings($component, 'prev');\r\n        var next = this.utils.findSiblings($component, 'next');\r\n        var stop = this.app.broadcast(type + '.delete', $component);\r\n        if (stop !== false)\r\n        {\r\n            $component.remove();\r\n\r\n            // callback\r\n            this.app.broadcast(type + '.deleted', $component);\r\n            this.app.broadcast('contextbar.close');\r\n            this.app.broadcast('imageresizer.stop');\r\n\r\n            if (caret !== false)\r\n            {\r\n                var cell = data.getTableCell();\r\n                if (cell && this.utils.isEmptyHtml(cell.innerHTML))\r\n                {\r\n                    this.caret.setStart(cell);\r\n                }\r\n                else if (next) this.caret.setStart(next);\r\n                else if (prev) this.caret.setEnd(prev);\r\n                else\r\n                {\r\n                    this.editor.startFocus();\r\n                }\r\n            }\r\n\r\n            // is empty\r\n            if (this.editor.isEmpty())\r\n            {\r\n                this.editor.setEmpty();\r\n                this.editor.startFocus();\r\n                this.app.broadcast('empty');\r\n            }\r\n        }\r\n    },\r\n    isNonEditable: function(el)\r\n    {\r\n        var data = this.inspector.parse(el);\r\n        return (data.isComponent() && !data.isComponentEditable());\r\n    },\r\n    isActive: function(el)\r\n    {\r\n        var $component;\r\n        if (el)\r\n        {\r\n            var data = this.inspector.parse(el);\r\n            $component = $R.dom(data.getComponent());\r\n\r\n            return $component.hasClass(this.activeClass);\r\n        }\r\n        else\r\n        {\r\n            $component = this._find();\r\n\r\n            return ($component.length !== 0);\r\n        }\r\n    },\r\n    getActive: function(dom)\r\n    {\r\n        var $component = this._find();\r\n\r\n        return ($component.length !== 0) ? ((dom) ? $component : $component.get()) : false;\r\n    },\r\n    setActive: function(el)\r\n    {\r\n        this.clearActive();\r\n        this.editor.focus();\r\n\r\n        var data = this.inspector.parse(el);\r\n        var component = data.getComponent();\r\n        var $component = $R.dom(component);\r\n\r\n        if (!data.isFigcaption())\r\n        {\r\n            var $caret = $component.find('.redactor-component-caret');\r\n            if ($caret.length === 0)\r\n            {\r\n                $caret = this._buildCaret();\r\n                $component.prepend($caret);\r\n            }\r\n\r\n            this.caret.setAtStart($caret.get());\r\n        }\r\n\r\n        $component.addClass(this.activeClass);\r\n    },\r\n    clearActive: function()\r\n    {\r\n        var $component = this._find();\r\n\r\n        $component.removeClass(this.activeClass);\r\n        $component.find('.redactor-component-caret').remove();\r\n\r\n        this.app.broadcast('imageresizer.stop');\r\n    },\r\n    setOnEvent: function(e, contextmenu)\r\n    {\r\n        this.clearActive();\r\n\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isFigcaption() || data.isComponentEditable())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // component\r\n        if (data.isComponent())\r\n        {\r\n            this.setActive(e.target);\r\n            if (contextmenu !== true) e.preventDefault();\r\n        }\r\n    },\r\n    executeScripts: function(scripts)\r\n    {\r\n        if (scripts === undefined)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var scripts = $editor.find('[data-redactor-type]').find(\"script\").getAll();\r\n            this.executeScripts.call(this, scripts);\r\n        }\r\n        else\r\n        {\r\n            for (var i = 0; i < scripts.length; i++)\r\n            {\r\n                if (scripts[i].src !== '')\r\n                {\r\n                    var src = scripts[i].src;\r\n                    this.$doc.find('head script[src=\"' + src + '\"]').remove();\r\n\r\n                    var $script = $R.dom('<script>');\r\n                    $script.attr('src', src);\r\n                    $script.attr('async defer');\r\n                    $script.get().onload = function()\r\n                    {\r\n                        if (src.search('instagram') !== -1) window.instgrm.Embeds.process();\r\n                        this.executeScripts(scripts.slice(i + 1));\r\n                    }.bind(this);\r\n\r\n                    var head = document.getElementsByTagName('head')[0];\r\n                    if (head) head.appendChild($script.get());\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    // private\r\n    _find: function()\r\n    {\r\n        return this.editor.getElement().find('.' + this.activeClass);\r\n    },\r\n    _buildCaret: function()\r\n    {\r\n        var $caret = $R.dom('<span>');\r\n        $caret.addClass('redactor-component-caret');\r\n        $caret.attr('contenteditable', true);\r\n\r\n        return $caret;\r\n    }\r\n});\r\n$R.add('service', 'insertion', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    set: function(html, clean, focus)\r\n    {\r\n        if (html === null) {\r\n            html = '';\r\n        }\r\n\r\n        html = (clean !== false) ? this.cleaner.input(html) : html;\r\n        html = (clean !== false) ? this.cleaner.paragraphize(html) : html;\r\n\r\n        // set html\r\n        var $editor = this.editor.getElement();\r\n        $editor.html(html);\r\n\r\n        // set focus at the end\r\n        if (focus !== false) this.editor.endFocus();\r\n\r\n        return html;\r\n    },\r\n    insertNode: function(node, caret)\r\n    {\r\n        this.editor.focus();\r\n        var fragment = (this.utils.isFragment(node)) ? node : this.utils.createFragment(node);\r\n\r\n        this._collapseSelection();\r\n        this._insertFragment(fragment);\r\n        this._setCaret(caret, fragment);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    insertBreakLine: function()\r\n    {\r\n        return this.insertNode(document.createElement('br'), 'after');\r\n    },\r\n    insertNewline: function()\r\n    {\r\n        return this.insertNode(document.createTextNode('\\n'), 'after');\r\n    },\r\n    insertText: function(text)\r\n    {\r\n        return this.insertHtml(this.cleaner.getFlatText(text));\r\n    },\r\n    insertChar: function(charhtml)\r\n    {\r\n        return this.insertNode(charhtml, 'after');\r\n    },\r\n    insertRaw: function(html)\r\n    {\r\n        return this.insertHtml(html, false);\r\n    },\r\n    insertToEnd: function(lastNode, type)\r\n    {\r\n        if (!lastNode) return;\r\n        if (lastNode.nodeType === 3 && lastNode.nodeValue.search(/^\\n/) !== -1)\r\n        {\r\n            lastNode = lastNode.previousElementSibling;\r\n        }\r\n\r\n        var $lastNode = $R.dom(lastNode);\r\n        if ($lastNode.attr('data-redactor-type') === type)\r\n        {\r\n            var tag = (this.opts.breakline) ? '<br>' : '<p>';\r\n            var $newNode = $R.dom(tag);\r\n\r\n            $lastNode.after($newNode);\r\n            this.caret.setStart($newNode);\r\n        }\r\n    },\r\n    insertPoint: function(e)\r\n    {\r\n        var range, data;\r\n        var marker = this.marker.build('start');\r\n        var markerInserted = false;\r\n        var x = e.clientX, y = e.clientY;\r\n\r\n        if (document.caretPositionFromPoint)\r\n        {\r\n            var pos = document.caretPositionFromPoint(x, y);\r\n            var sel = document.getSelection();\r\n\r\n            data = this.inspector.parse(pos.offsetNode);\r\n            if (data.isInEditor())\r\n            {\r\n                range = sel.getRangeAt(0);\r\n                range.setStart(pos.offsetNode, pos.offset);\r\n                range.collapse(true);\r\n                range.insertNode(marker);\r\n                markerInserted = true;\r\n            }\r\n        }\r\n        else if (document.caretRangeFromPoint)\r\n        {\r\n            range = document.caretRangeFromPoint(x, y);\r\n\r\n            data = this.inspector.parse(range.startContainer);\r\n            if (data.isInEditor())\r\n            {\r\n                range.insertNode(marker);\r\n                markerInserted = true;\r\n            }\r\n        }\r\n\r\n        return markerInserted;\r\n    },\r\n    insertToPoint: function(e, html, point, clean)\r\n    {\r\n        var pointInserted = (point === true) ? true : this.insertPoint(e);\r\n        if (!pointInserted)\r\n        {\r\n            var lastNode = this.editor.getLastNode();\r\n            $R.dom(lastNode).after(this.marker.build('start'));\r\n        }\r\n\r\n        this.component.clearActive();\r\n        this.selection.restoreMarkers();\r\n\r\n        return this.insertHtml(html, clean);\r\n    },\r\n    insertToOffset: function(start, html)\r\n    {\r\n        this.offset.set({ start: start, end: start });\r\n\r\n        return this.insertHtml(html);\r\n    },\r\n    insertHtml: function(html, clean)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        // parse\r\n        var parsedInput = this.utils.parseHtml(html);\r\n\r\n        // all selection\r\n        if (this.selection.isAll())\r\n        {\r\n            return this._insertToAllSelected(parsedInput);\r\n        }\r\n\r\n        // there is no selection\r\n        if (!this.selection.is())\r\n        {\r\n            var $el = $R.dom('<p>');\r\n            var $editor = this.editor.getElement();\r\n\r\n            $editor.append($el);\r\n            this.caret.setStart($el);\r\n        }\r\n\r\n        // environment\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var isText = this.selection.isText();\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock();\r\n        var dataCurrent = this.inspector.parse(current);\r\n\r\n        // collapse air\r\n        this._collapseSelection();\r\n\r\n        // clean\r\n        parsedInput = this._getCleanedInput(parsedInput, dataCurrent, clean);\r\n\r\n        // input is figure or component span\r\n        var isFigure = this._isFigure(parsedInput.html);\r\n        var isComponentSpan = this._isComponentSpan(parsedInput.html);\r\n        var isInsertedText = this.inspector.isText(parsedInput.html);\r\n        var fragment, except;\r\n\r\n        // multiple selection\r\n        //var blocks = this.selection.getBlocks();\r\n        //if (blocks && blocks.length > 1) {\r\n        //    parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n        //}\r\n\r\n        // empty editor\r\n        if (this.editor.isEmpty())\r\n        {\r\n            return this._insertToEmptyEditor(parsedInput.html);\r\n        }\r\n        // to component\r\n        else if (dataCurrent.isComponent() && !dataCurrent.isComponentEditable())\r\n        {\r\n            return this._insertToWidget(current, dataCurrent, parsedInput.html);\r\n        }\r\n        // component span\r\n        else if (isComponentSpan)\r\n        {\r\n            return this.insertNode(parsedInput.nodes, 'end');\r\n        }\r\n        // inserting figure & split node\r\n        else if (isFigure && !isText && !dataCurrent.isList())\r\n        {\r\n            if (dataCurrent.isInline())\r\n            {\r\n                return this._insertToInline(current, parsedInput);\r\n            }\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n            this.utils.splitNode(current, fragment);\r\n            this.caret.setEnd(fragment.last);\r\n\r\n            return this._sendNodes(fragment.nodes);\r\n        }\r\n        // to code\r\n        else if (dataCurrent.isCode())\r\n        {\r\n            return this._insertToCode(parsedInput, current, clean);\r\n        }\r\n        // to pre\r\n        else if (dataCurrent.isPre())\r\n        {\r\n            return this._insertToPre(parsedInput, clean);\r\n        }\r\n        // to h1-h6 & figcaption\r\n        else if (dataCurrent.isHeading() || dataCurrent.isFigcaption())\r\n        {\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeTagsExcept(parsedInput.html, ['a']) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.replaceNbspToSpaces(parsedInput.html) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment, 'end');\r\n        }\r\n        // breakline div\r\n        else if (this.opts.breakline && block && block.tagName === 'DIV') {\r\n\r\n            if (this._isPlainHtml(parsedInput.html)) {\r\n                return this.insertNode(parsedInput.nodes, 'end');\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            var range = this.selection.getRange();\r\n            if (range && !this.selection.isCollapsed()) {\r\n                range.deleteContents();\r\n            }\r\n\r\n            this.utils.splitNode(current, fragment);\r\n            this.caret.setEnd(fragment.last);\r\n\r\n            return this._sendNodes(fragment.nodes);\r\n        }\r\n        // text inserting\r\n        else if (isInsertedText)\r\n        {\r\n            if (!isText && this.opts.markup !== 'br' && this._hasBlocksAndImages(parsedInput.nodes))\r\n            {\r\n                parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n\r\n                fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n                this.utils.splitNode(current, fragment);\r\n                this.caret.setEnd(fragment.last);\r\n                return this._sendNodes(fragment.nodes);\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? parsedInput.html.replace(/\\n/g, '<br>') : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment.nodes, 'end');\r\n        }\r\n        // uncollapsed\r\n        else if (!isCollapsed && !isFigure)\r\n        {\r\n            if (this._isPlainHtml(parsedInput.html))\r\n            {\r\n                return this.insertNode(parsedInput.nodes, 'end');\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment, 'end');\r\n        }\r\n        // to inline tag\r\n        else if (dataCurrent.isInline() && !this._isPlainHtml(parsedInput.html))\r\n        {\r\n            return this._insertToInline(current, parsedInput);\r\n        }\r\n        // to blockquote or dt, dd\r\n        else if (dataCurrent.isBlockquote() || dataCurrent.isDl())\r\n        {\r\n            except = this.opts.inlineTags;\r\n            except.concat(['br']);\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.replaceBlocksToBr(parsedInput.html) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeTagsExcept(parsedInput.html, except) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment, 'end');\r\n        }\r\n        // to p\r\n        else if (dataCurrent.isParagraph())\r\n        {\r\n            if (this._isPlainHtml(parsedInput.html))\r\n            {\r\n                return this.insertNode(parsedInput.nodes, 'end');\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            this.utils.splitNode(current, fragment);\r\n            this.caret.setEnd(fragment.last);\r\n\r\n            return this._sendNodes(fragment.nodes);\r\n        }\r\n        // to li\r\n        else if (dataCurrent.isList())\r\n        {\r\n            except = this.opts.inlineTags;\r\n            except = except.concat(['br', 'li', 'ul', 'ol', 'img']);\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.replaceBlocksToBr(parsedInput.html) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeTagsExcept(parsedInput.html, except) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeBrAtEnd(parsedInput.html) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n            parsedInput.nodes = fragment.nodes;\r\n\r\n            if (this._containsTags(parsedInput.html, ['ul', 'ol', 'li']))\r\n            {\r\n                var element = this.selection.getElement(current);\r\n                if (element && element.tagName === 'LI' && this.caret.isStart(element))\r\n                {\r\n                    parsedInput.nodes = $R.dom(fragment.nodes).unwrap('ul, ol').getAll();\r\n                    $R.dom(element).before(parsedInput.nodes);\r\n\r\n                    var lastNode = parsedInput.nodes[parsedInput.nodes.length-1];\r\n                    this.caret.setEnd(lastNode);\r\n\r\n                    return this._sendNodes(parsedInput.nodes);\r\n                }\r\n                else if (this._isPlainHtml(parsedInput.html))\r\n                {\r\n                    return this.insertNode(fragment, 'end');\r\n                }\r\n                else\r\n                {\r\n                    fragment = this._buildList(parsedInput, element, fragment);\r\n\r\n                    this.utils.splitNode(current, fragment, true);\r\n                    this.caret.setEnd(fragment.last);\r\n\r\n                    return this._sendNodes(fragment.nodes);\r\n                }\r\n            }\r\n        }\r\n\r\n        // other cases\r\n        return this.insertNode(parsedInput.nodes, 'end');\r\n    },\r\n\r\n    // private\r\n    _insertToAllSelected: function(parsedInput)\r\n    {\r\n        var insertedHtml = this.set(parsedInput.html);\r\n        var dataInserted = this.utils.parseHtml(insertedHtml);\r\n\r\n        return this._sendNodes(dataInserted.nodes);\r\n    },\r\n    _insertToEmptyEditor: function(html)\r\n    {\r\n        html = this.cleaner.paragraphize(html);\r\n\r\n        var fragment = this.utils.createFragment(html);\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.html('');\r\n        $editor.append(fragment.frag);\r\n\r\n        this.caret.setEnd(fragment.last);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    _insertToInline: function(current, parsedInput)\r\n    {\r\n        var fragment = this.utils.createFragment(parsedInput.html);\r\n        this.utils.splitNode(current, fragment, false, true);\r\n        this.caret.setEnd(fragment.last);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    _insertToCode: function(parsedInput, current, clean)\r\n    {\r\n        parsedInput.html = (clean !== false) ? this.cleaner.encodeHtml(parsedInput.html) : parsedInput.html;\r\n        parsedInput.html = (clean !== false) ? this.cleaner.removeNl(parsedInput.html) : parsedInput.html;\r\n\r\n        var fragment = this.utils.createFragment(parsedInput.html);\r\n        var nodes = this.insertNode(fragment, 'end');\r\n\r\n        this.utils.normalizeTextNodes(current);\r\n\r\n        return nodes;\r\n    },\r\n    _insertToPre: function(parsedInput, clean)\r\n    {\r\n        parsedInput.html = (clean !== false) ? this.cleaner.encodeHtml(parsedInput.html) : parsedInput.html;\r\n\r\n        var fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n        return this.insertNode(fragment, 'end');\r\n    },\r\n    _insertToWidget: function(current, dataCurrent, html)\r\n    {\r\n        html = (this._isComponentSpan(html)) ? html : this.cleaner.paragraphize(html);\r\n\r\n        var fragment = this.utils.createFragment(html);\r\n        var component = dataCurrent.getComponent();\r\n        var $component = $R.dom(component);\r\n\r\n        $component.after(fragment.frag);\r\n        $component.remove();\r\n\r\n        this.caret.setEnd(fragment.last);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    _insertFragment: function(fragment)\r\n    {\r\n        var range = this.selection.getRange();\r\n        if (range)\r\n        {\r\n            if (this.selection.isCollapsed())\r\n            {\r\n                var startNode = range.startContainer;\r\n                if (startNode.nodeType !== 3 && startNode.tagName === 'BR')\r\n                {\r\n                    this.caret.setAfter(startNode);\r\n                    startNode.parentNode.removeChild(startNode);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                range.deleteContents();\r\n            }\r\n\r\n            range.insertNode(fragment.frag);\r\n        }\r\n    },\r\n    _sendNodes: function(nodes)\r\n    {\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var el = nodes[i];\r\n            var type = (el.nodeType !== 3 && typeof el.getAttribute === 'function') ? el.getAttribute('data-redactor-type') : false;\r\n            if (type)\r\n            {\r\n                this.app.broadcast(type + '.inserted', this.component.build(el));\r\n            }\r\n        }\r\n\r\n        if (this.detector.isIe())\r\n        {\r\n            this.editor.getElement().find('[data-redactor-type=table]').attr('contenteditable', true);\r\n        }\r\n\r\n        // callback\r\n        this.app.broadcast('inserted', nodes);\r\n\r\n        // widget's scripts\r\n        this.component.executeScripts();\r\n\r\n        return nodes;\r\n    },\r\n    _setCaret: function(caret, fragment)\r\n    {\r\n        var isLastInline = this._isLastInline(fragment);\r\n\r\n        if (caret)\r\n        {\r\n            caret = (isLastInline && caret === 'end') ? 'after' : caret;\r\n            this.caret['set' + this.utils.ucfirst(caret)](fragment.last);\r\n        }\r\n        else if (caret !== false)\r\n        {\r\n            if (isLastInline) this.caret.setAfter(fragment.last);\r\n        }\r\n    },\r\n    _isLastInline: function(fragment)\r\n    {\r\n        if (fragment.last)\r\n        {\r\n            var data = this.inspector.parse(fragment.last);\r\n\r\n            return data.isInline();\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _getCleanedInput: function(parsedInput, dataCurrent, clean)\r\n    {\r\n        var isPreformatted = (dataCurrent.isCode() || dataCurrent.isPre());\r\n\r\n        parsedInput.html = parsedInput.html.replace(/&nbsp;/g, ' ');\r\n        parsedInput.html = (!isPreformatted && clean !== false) ? this.cleaner.input(parsedInput.html) : parsedInput.html;\r\n        parsedInput = (!isPreformatted && clean !== false) ? this.utils.parseHtml(parsedInput.html) : parsedInput;\r\n\r\n        return parsedInput;\r\n    },\r\n    _getContainer: function(nodes)\r\n    {\r\n        return $R.dom(this.utils.createTmpContainer(nodes));\r\n    },\r\n    _buildList: function(parsedInput, list, fragment)\r\n    {\r\n        var nodes = parsedInput.nodes;\r\n        var first = nodes[0];\r\n\r\n        if (first && first.nodeType !== 3 && first.tagName === 'li')\r\n        {\r\n            var $parent = $R.dom(list);\r\n            var parentListTag = $parent.get().tagName.toLowerCase();\r\n            var $list = $R.dom('<' + parentListTag + ' />');\r\n            $list.append(fragment.nodes);\r\n\r\n            return this.utils.createFragment($list.get().outerHTML);\r\n        }\r\n\r\n        return fragment;\r\n    },\r\n    _containsTags: function(html, tags)\r\n    {\r\n        return (this._getContainer(html).find(tags.join(',')).length !== 0);\r\n    },\r\n    _collapseSelection: function()\r\n    {\r\n        //if (this.app.isAirToolbar()) this.selection.collapseToEnd();\r\n    },\r\n    _hasFigureOrTable: function(nodes)\r\n    {\r\n        return (this._getContainer(nodes).find('figure, table').length !== 0);\r\n    },\r\n    _hasBlocks: function(nodes)\r\n    {\r\n        return (this._getContainer(nodes).find(this.opts.blockTags.join(',')).length !== 0);\r\n    },\r\n    _hasBlocksAndImages: function(nodes)\r\n    {\r\n        return (this._getContainer(nodes).find(this.opts.blockTags.join(',') + ',img').length !== 0);\r\n    },\r\n    _isPlainHtml: function(html)\r\n    {\r\n        return (this._getContainer(html).find(this.opts.blockTags.join(',') + ', img').length === 0);\r\n    },\r\n    _isFigure: function(html)\r\n    {\r\n        if (this._isHtmlString(html))\r\n        {\r\n            return ($R.dom(html).closest('figure').length !== 0);\r\n        }\r\n    },\r\n    _isComponentSpan: function(html)\r\n    {\r\n        if (this._isHtmlString(html))\r\n        {\r\n            return ($R.dom(html).closest('span.redactor-component').length !== 0);\r\n        }\r\n    },\r\n    _isHtmlString: function(html)\r\n    {\r\n        return !(typeof html === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(html));\r\n    }\r\n});\r\n$R.add('service', 'block', {\r\n    init: function(app) {\r\n        this.app = app;\r\n        this.tags = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\r\n    },\r\n    // format\r\n    format: function(args) {\r\n\r\n        // params\r\n        this.params = {\r\n            args: false\r\n        };\r\n\r\n        // type of applying styles and attributes\r\n        this.params.type = (args.type) ? args.type : 'set'; // add, remove, toggle\r\n\r\n        // tag\r\n        this.params.tag = (typeof args === 'string') ? args : (args.tag || this.opts.markup);\r\n        this.params.tag = this.params.tag.toLowerCase();\r\n\r\n        // args\r\n        this.params.args = {\r\n            'class': args['class'] || false,\r\n            'style': args['style'] || false,\r\n            'attr': args['attr'] || false\r\n        };\r\n\r\n        if (!args['class'] && !args['style'] && !args['attr']) {\r\n            this.params.args = false;\r\n        }\r\n\r\n        // format\r\n        return this._format();\r\n    },\r\n\r\n    // funcs\r\n    add: function(args, tags, el) {\r\n        return this._apply('add', args, tags, true, el);\r\n    },\r\n    set: function(args, tags) {\r\n        return this._apply('set', args, tags);\r\n    },\r\n    toggle: function(args, tags) {\r\n        return this._apply('toggle', args, tags);\r\n    },\r\n    remove: function(args, tags) {\r\n        return this._apply('remove', args, tags);\r\n    },\r\n\r\n    // clear\r\n    clearFormat: function(tags) {\r\n        return this._clear(tags, 'all');\r\n    },\r\n    clearStyle: function(tags) {\r\n        return this._clear(tags, 'style');\r\n    },\r\n    clearClass: function(tags) {\r\n        return this._clear(tags, 'class');\r\n    },\r\n    clearAttr: function(tags) {\r\n        return this._clear(tags, 'attr');\r\n    },\r\n\r\n    // format\r\n    _format: function() {\r\n\r\n        var nodes = [];\r\n\r\n        // collapsed\r\n        this.collapsed = this.selection.isCollapsed();\r\n\r\n        // save selection\r\n        this.selection.save();\r\n\r\n        // blocks\r\n        var block = this.selection.getBlock();\r\n        var blocks = this._getBlocks();\r\n        var type = (this._isToggleFormatType(blocks)) ? 'toggle' : 'set';\r\n        var replacedTag = this._getReplacedTag(type);\r\n\r\n        nodes = this._replaceBlocks(blocks, replacedTag);\r\n\r\n        // apply args & clean\r\n        nodes = this._buildNodes(nodes);\r\n\r\n        // restore selection\r\n        this._restoreSelection(nodes);\r\n\r\n        return nodes;\r\n    },\r\n\r\n\r\n    // clear\r\n    _clear: function(tags, type, selection, nodes) {\r\n        // save selection\r\n        if (selection !== false) {\r\n\t\t    this.selection.save();\r\n\t\t}\r\n\r\n        // get elements\r\n        var $elements = this._getElements(tags, nodes);\r\n\r\n        // remove all format\r\n        if (type === 'all') {\r\n            this._removeAllAttr($elements, false);\r\n        }\r\n        // remove style\r\n        else if (type === 'style') {\r\n            $elements.removeAttr('style');\r\n            $elements.removeAttr('data-redactor-style-cache');\r\n        }\r\n        // remove class\r\n        else if (type === 'class') {\r\n            $elements.removeAttr('class');\r\n        }\r\n        // remove attrs\r\n        else if (type === 'attr') {\r\n            this._removeAllAttr($elements);\r\n        }\r\n\r\n        // get nodes\r\n        nodes = $elements.getAll();\r\n\r\n        // restore selection\r\n        if (selection !== false) {\r\n            this._restoreSelection(nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // get\r\n    _getElements: function(tags, nodes) {\r\n        return (nodes) ? $R.dom(nodes) : $R.dom(this._getBlocks(tags));\r\n    },\r\n    _getBlocks: function(tags) {\r\n        var blocks = this.selection.getBlocks({ tags: tags || this.tags });\r\n        var finalBlocks = [];\r\n        for (var i = 0; i < blocks.length; i++) {\r\n            if (blocks[i].tagName === 'DIV' && !blocks[i].getAttribute('data-redactor-tag')) {\r\n                continue;\r\n            }\r\n            else {\r\n                finalBlocks.push(blocks[i]);\r\n            }\r\n        }\r\n\r\n        return finalBlocks;\r\n    },\r\n\r\n    _getReplacedTag: function(type) {\r\n        if (this.opts.breakline) {\r\n            return (type === 'toggle') ? 'div' : (this.params.tag === 'p') ? 'div' : this.params.tag;\r\n        }\r\n        else {\r\n            return (type === 'toggle') ? this.opts.markup : this.params.tag;\r\n        }\r\n    },\r\n\r\n    // is\r\n    _isStandardParagraph: function() {\r\n        return (!this.opts.breakline && this.opts.markup === 'p');\r\n    },\r\n    _isStandardDiv: function() {\r\n        return (!this.opts.breakline && this.opts.markup === 'div');\r\n    },\r\n    _isBreaklineBlock: function(block) {\r\n        return (block && block.tagName === 'DIV' && block.getAttribute('data-redactor-tag') === 'br');\r\n    },\r\n    _isToggleFormatType: function(blocks) {\r\n        var count = 0;\r\n        var len = blocks.length;\r\n        for (var i = 0; i < len; i++) {\r\n            if (blocks[i] && this.params.tag === blocks[i].tagName.toLowerCase()) count++;\r\n        }\r\n\r\n        return (count === len);\r\n    },\r\n    _isCurrentBlockOneAndEmpty: function(nodes) {\r\n        return (this.collapsed && nodes.length === 1 && this.utils.isEmpty(nodes[0]));\r\n    },\r\n\r\n    // build\r\n    _buildNodes: function(nodes) {\r\n        if (nodes.length > 0) {\r\n            // clean & appliyng styles and attributes\r\n            nodes = this._applyArgs(nodes, false);\r\n            nodes = this._combinePre(nodes);\r\n            nodes = this._cleanBlocks(nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // replace\r\n    _replaceBlocks: function(blocks, replacedTag) {\r\n        var nodes = [];\r\n\r\n        for (var i = 0; i < blocks.length; i++) {\r\n            var $node = this.utils.replaceToTag(blocks[i], replacedTag);\r\n            nodes.push($node.get());\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // combine\r\n    _combinePre: function(nodes) {\r\n        var combinedNodes = [];\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var next = nodes[i].nextElementSibling;\r\n            if (next && nodes[i].tagName === 'PRE' && next.tagName === 'PRE') {\r\n                var $current = $R.dom(nodes[i]);\r\n                var $next = $R.dom(next);\r\n                var newline = document.createTextNode('\\n');\r\n\r\n                $current.append(newline);\r\n                $current.append($next);\r\n                $next.unwrap('pre');\r\n            }\r\n\r\n            combinedNodes.push(nodes[i]);\r\n        }\r\n\r\n        return combinedNodes;\r\n    },\r\n\r\n    // clean\r\n    _cleanBlocks: function(nodes) {\r\n        var headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\r\n        var tags = this.opts.inlineTags;\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var tag = nodes[i].tagName.toLowerCase();\r\n            var $node = $R.dom(nodes[i]);\r\n\r\n            // remove all spans in headings\r\n            if (headings.indexOf(tag) !== - 1) {\r\n                $node.find('span').not('.redactor-component, .non-editable, .redactor-selection-marker').unwrap();\r\n            }\r\n            // remove all inlines in pre\r\n            else if (tag === 'pre') {\r\n                $node.find(tags.join(',')).not('.redactor-selection-marker').unwrap();\r\n            }\r\n\r\n\r\n            if (this.params.args === false && this.params.tag === 'p') {\r\n                $node.removeAttr('class');\r\n            }\r\n\r\n            // breakline attr\r\n            if (this.opts.breakline && tag === 'div') {\r\n                $node.attr('data-redactor-tag', 'br');\r\n            }\r\n            else {\r\n                $node.removeAttr('data-redactor-tag');\r\n            }\r\n\r\n            // normalize\r\n            this.utils.normalizeTextNodes(nodes[i]);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _cleanEmptyClass: function($elements) {\r\n        $elements.each(function(node) {\r\n            if (node.className === '') node.removeAttribute('class');\r\n        });\r\n    },\r\n    _cleanEmptyStyle: function($node) {\r\n         if (this.utils.removeEmptyAttr($node.get(), 'style')) {\r\n            $node.removeAttr('data-redactor-style-cache');\r\n        }\r\n        else {\r\n            $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n        }\r\n    },\r\n\r\n    // apply\r\n    _apply: function(type, args, tags, selection, nodes) {\r\n        // save selection\r\n        if (selection !== false) {\r\n\t\t    this.selection.save();\r\n\t\t}\r\n\r\n        // get elements\r\n        var $elements = this._getElements(tags, nodes);\r\n\r\n        // class\r\n        if (args['class']) {\r\n            if (type === 'set') {\r\n                $elements.removeAttr('class');\r\n                $elements.addClass(args['class']);\r\n            }\r\n            else if (type === 'add') {\r\n                $elements.addClass(args['class']);\r\n            }\r\n            else if (type === 'toggle') {\r\n                $elements.toggleClass(args['class']);\r\n            }\r\n            else if (type === 'remove') {\r\n                $elements.removeClass(args['class']);\r\n            }\r\n\r\n            this._cleanEmptyClass($elements);\r\n        }\r\n\r\n        // attr\r\n        if (args['attr']) {\r\n            if (type === 'set') {\r\n                this._removeAllAttr($elements);\r\n                $elements.attr(args['attr']);\r\n            }\r\n            else if (type === 'add') {\r\n                $elements.attr(args['attr']);\r\n            }\r\n            else if (type === 'toggle') {\r\n                params = args['attr'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    for (var key in params) {\r\n                        if ($node.attr(key)) $node.removeAttr(key);\r\n                        else $node.attr(key, params[key]);\r\n                    }\r\n                });\r\n            }\r\n            else if (type === 'remove') {\r\n                $elements.removeAttr(args['attr']);\r\n            }\r\n        }\r\n\r\n        // style\r\n        if (args['style']) {\r\n            if (type === 'set') {\r\n                $elements.removeAttr('style');\r\n                $elements.css(args['style']);\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                });\r\n            }\r\n            else if (type === 'add') {\r\n                var params = args['style'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    $node.css(params);\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                    this._convertStyleQuotes($node);\r\n                }.bind(this));\r\n            }\r\n            else if (type === 'toggle') {\r\n                var params = args['style'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    for (var key in params) {\r\n                        var newVal = params[key];\r\n                        var oldVal = $node.css(key);\r\n\r\n                        oldVal = (this.utils.isRgb(oldVal)) ? this.utils.rgb2hex(oldVal) : oldVal.replace(/\"/g, '');\r\n                        newVal = (this.utils.isRgb(newVal)) ? this.utils.rgb2hex(newVal) : newVal.replace(/\"/g, '');\r\n\r\n                        oldVal = this.utils.hex2long(oldVal);\r\n                        newVal = this.utils.hex2long(newVal);\r\n\r\n                        var compareNew = (typeof newVal === 'string') ? newVal.toLowerCase() : newVal;\r\n                        var compareOld = (typeof oldVal === 'string') ? oldVal.toLowerCase() : oldVal;\r\n\r\n                        if (compareNew === compareOld) $node.css(key, '');\r\n                        else $node.css(key, newVal);\r\n                    }\r\n\r\n                    this._convertStyleQuotes($node);\r\n                    this._cleanEmptyStyle($node);\r\n                }.bind(this));\r\n            }\r\n            else if (type === 'remove') {\r\n                var name = args['style'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    $node.css(name, '');\r\n                    this._cleanEmptyStyle($node);\r\n                }.bind(this));\r\n            }\r\n        }\r\n\r\n        // get nodes\r\n        nodes = $elements.getAll();\r\n\r\n        // restore selection\r\n        if (selection !== false) {\r\n            this._restoreSelection(nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _applyArgs: function(nodes) {\r\n        if (this.params.args) {\r\n            nodes = this._apply(this.params.type, this.params.args, false, false, nodes);\r\n        }\r\n        else {\r\n            nodes = this._clear(false, 'all', false, nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // remove\r\n    _removeAllAttr: function($elements, keepStyleAndClass) {\r\n        $elements.each(function(node) {\r\n            var keepAttrs = ['data-redactor-tag', 'data-redactor-style-cache'];\r\n            if (keepStyleAndClass === false) {\r\n                keepAttrs.push('style');\r\n                keepAttrs.push('class');\r\n            }\r\n\r\n            for (var i = node.attributes.length; i--> 0;) {\r\n                var nodeAttr = node.attributes[i];\r\n                var name = nodeAttr.name;\r\n                if (keepAttrs.indexOf(name) === -1) {\r\n                    node.removeAttributeNode(nodeAttr);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    // selection\r\n    _restoreSelection: function(nodes) {\r\n        if (this._isCurrentBlockOneAndEmpty(nodes)) {\r\n            this.caret.setStart(nodes[0]);\r\n        }\r\n        else {\r\n            setTimeout(function() { this.selection.restore(); }.bind(this), 1);\r\n        }\r\n    },\r\n\r\n    // convert\r\n    _convertStyleQuotes: function($node) {\r\n        var style = $node.attr('style');\r\n        if (style) $node.attr('style', style.replace(/\"/g, '\\''));\r\n    }\r\n});\r\n$R.add('service', 'inline', {\r\n    mixins: ['formatter'],\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        this.count = 0;\r\n    },\r\n    // public\r\n    format: function(args)\r\n    {\r\n        if (!this._isFormat()) return [];\r\n\r\n        // type of applying styles and attributes\r\n        this.type = (args.type) ? args.type : 'set'; // add, remove, toggle\r\n        // tag\r\n        this.tag = (typeof args === 'string') ? args : args.tag;\r\n        this.tag = this.tag.toLowerCase();\r\n        this.tag = this.arrangeTag(this.tag);\r\n\r\n        if (typeof args === 'string') this.args = false;\r\n        else this.buildArgs(args);\r\n\r\n        if (!this.detector.isIe())\r\n        {\r\n            this.editor.disableNonEditables();\r\n        }\r\n\r\n        // format\r\n        var nodes = (this.selection.isCollapsed()) ? this.formatCollapsed() : this.formatUncollapsed();\r\n\r\n        if (!this.detector.isIe())\r\n        {\r\n            this.editor.enableNonEditables();\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // private\r\n    _isFormat: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var isComponent = (data.isComponent() && !data.isComponentType('table') && !data.isFigcaption());\r\n\r\n        if (current === false && this.selection.isAll())\r\n        {\r\n            return true;\r\n        }\r\n        else if (!current || data.isPre() || data.isCode() || isComponent)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    },\r\n    arrangeTag: function(tag)\r\n    {\r\n        var replaced = this.opts.replaceTags;\r\n        for (var key in replaced)\r\n        {\r\n            if (tag === key) tag = replaced[key];\r\n        }\r\n\r\n        return tag;\r\n    },\r\n    formatCollapsed: function()\r\n    {\r\n        var nodes = [];\r\n        var inline = this.selection.getInlineFirst();\r\n        var inlines = this.selection.getInlines({ all: true });\r\n        var $inline = $R.dom(inline);\r\n        var $parent, parent, $secondPart, extractedContent;\r\n\r\n        // 1) not inline\r\n        if (!inline)\r\n        {\r\n            nodes = this.insertInline(nodes);\r\n        }\r\n        else\r\n        {\r\n            var dataInline = this.inspector.parse(inline);\r\n            var isEmpty = this.utils.isEmptyHtml(inline.innerHTML);\r\n\r\n            // 2) inline is empty\r\n            if (isEmpty)\r\n            {\r\n                // 2.1) has same tag\r\n                if (inline.tagName.toLowerCase() === this.tag)\r\n                {\r\n                    // 2.1.1) has same args or hasn't args\r\n                    if (this.hasSameArgs(inline))\r\n                    {\r\n                        this.caret.setAfter(inline);\r\n                        $inline.remove();\r\n\r\n                        var el = this.selection.getElement();\r\n                        this.utils.normalizeTextNodes(el);\r\n                    }\r\n                    // 2.1.2) has different args and it is span tag\r\n                    else if (this.tag === 'span')\r\n                    {\r\n                        nodes = this.applyArgs([inline], false);\r\n                        this.caret.setStart(inline);\r\n                    }\r\n                    // 2.1.3) has different args and it is not span tag\r\n                    else\r\n                    {\r\n                       nodes = this.insertInline(nodes);\r\n                    }\r\n\r\n                }\r\n                // 2.2) has another tag\r\n                else\r\n                {\r\n                    // 2.2.1) has parent\r\n                    if (dataInline.hasParent([this.tag]))\r\n                    {\r\n                        $parent = $inline.closest(this.tag);\r\n                        parent = $parent.get();\r\n                        if (this.hasSameArgs(parent))\r\n                        {\r\n                            $parent.unwrap();\r\n                            this.caret.setStart(inline);\r\n                        }\r\n                        else\r\n                        {\r\n                            nodes = this.insertInline(nodes);\r\n                        }\r\n                    }\r\n                    // 2.2.2) hasn't parent\r\n                    else\r\n                    {\r\n                        nodes = this.insertInline(nodes);\r\n                    }\r\n                }\r\n            }\r\n            // 3) inline isn't empty\r\n            else\r\n            {\r\n                // 3.1) has same tag\r\n                if (inline.tagName.toLowerCase() === this.tag)\r\n                {\r\n                    // 3.1.1) has same args or hasn't args\r\n                    if (this.hasSameArgs(inline))\r\n                    {\r\n                        // insert break\r\n                        extractedContent = this.utils.extractHtmlFromCaret(inline);\r\n                        $secondPart = $R.dom('<' + this.tag + ' />');\r\n                        $secondPart = this.utils.cloneAttributes(inline, $secondPart);\r\n\r\n                        $inline.after($secondPart.append(extractedContent));\r\n\r\n                        if ($secondPart.html().trim() === '') {\r\n                            $secondPart.remove();\r\n                        }\r\n\r\n                        this.caret.setAfter(inline);\r\n                    }\r\n                    else\r\n                    {\r\n                        nodes = this.insertInline(nodes);\r\n                    }\r\n                }\r\n                // 3.2) has another tag\r\n                else\r\n                {\r\n                    // 3.2.1) has parent\r\n                    if (dataInline.hasParent([this.tag]))\r\n                    {\r\n                        $parent = $inline.closest(this.tag);\r\n                        parent = $parent.get();\r\n                        if (this.hasSameArgs(parent))\r\n                        {\r\n                            // insert break\r\n                            extractedContent = this.utils.extractHtmlFromCaret(parent, parent);\r\n                            $secondPart = $R.dom('<' + this.tag + ' />');\r\n                            $secondPart = this.utils.cloneAttributes(parent, $secondPart);\r\n\r\n                            var $breaked, $last;\r\n                            var z = 0;\r\n                            inlines = inlines.reverse();\r\n                            for (var i = 0; i < inlines.length; i++)\r\n                            {\r\n                                if (inlines[i] !== parent)\r\n                                {\r\n                                    $last = $R.dom('<' + inlines[i].tagName.toLowerCase() + '>');\r\n                                    if (z === 0)\r\n                                    {\r\n                                        $breaked = $last;\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        $breaked.append($last);\r\n                                    }\r\n\r\n                                    z++;\r\n                                }\r\n                            }\r\n\r\n                            $parent.after($secondPart.append(extractedContent));\r\n                            $parent.after($breaked);\r\n\r\n                            this.caret.setStart($last);\r\n                        }\r\n                        else\r\n                        {\r\n                            nodes = this.insertInline(nodes);\r\n                        }\r\n                    }\r\n                    // 3.2.2) hasn't parent\r\n                    else\r\n                    {\r\n                        nodes = this.insertInline(nodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    insertInline: function(nodes)\r\n    {\r\n        var node = document.createElement(this.tag);\r\n        nodes = this.insertion.insertNode(node, 'start');\r\n\r\n        return this.applyArgs(nodes, false);\r\n    },\r\n    hasSameArgs: function(inline)\r\n    {\r\n        if (inline.attributes.length === 0 && this.args === false)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            var same = true;\r\n            if (this.args)\r\n            {\r\n                var count = 0;\r\n                for (var key in this.args)\r\n                {\r\n                    var $node = $R.dom(inline);\r\n                    var args = (this.args[key]);\r\n                    var value = this.utils.toParams(args);\r\n                    var nodeAttrValue = $node.attr(key);\r\n\r\n                    if (args)\r\n                    {\r\n                        if (key === 'style')\r\n                        {\r\n                            value = value.trim().replace(/;$/, '');\r\n\r\n                            var origRules = this.utils.styleToObj($node.attr('style'));\r\n                            var rules = value.split(';');\r\n                            var innerCount = 0;\r\n\r\n                            for (var i = 0; i < rules.length; i++)\r\n                            {\r\n                                var arr = rules[i].split(':');\r\n                                var ruleName = arr[0].trim();\r\n                                var ruleValue = arr[1].trim();\r\n\r\n                                if (ruleName.search(/color/) !== -1)\r\n                                {\r\n                                    var val = $node.css(ruleName);\r\n                                    if (val && (val === ruleValue || this.utils.rgb2hex(val) === ruleValue))\r\n                                    {\r\n                                        innerCount++;\r\n                                    }\r\n                                }\r\n                                else if ($node.css(ruleName) === ruleValue)\r\n                                {\r\n                                    innerCount++;\r\n                                }\r\n                            }\r\n\r\n                            if (innerCount === rules.length && Object.keys(origRules).length === rules.length)\r\n                            {\r\n                                count++;\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (nodeAttrValue === value)\r\n                            {\r\n                                count++;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (!nodeAttrValue || nodeAttrValue === '')\r\n                        {\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                same = (count === Object.keys(this.args).length);\r\n            }\r\n\r\n            return same;\r\n        }\r\n    },\r\n    formatUncollapsed: function()\r\n    {\r\n        var inlines = this.selection.getInlines({ all: true, inside: true });\r\n\r\n        if (this.detector.isIe()) this.selection.saveMarkers();\r\n        else this.selection.save();\r\n\r\n        // convert del / u\r\n        this._convertTags('u');\r\n        this._convertTags('del');\r\n\r\n        // convert target tags\r\n        this._convertToStrike(inlines);\r\n\r\n        if (this.detector.isIe()) this.selection.restoreMarkers();\r\n        else this.selection.restore();\r\n\r\n        // apply strike\r\n        document.execCommand('strikethrough');\r\n\r\n        // clear decoration\r\n        this._clearDecoration();\r\n\r\n        this.selection.save();\r\n\r\n        // revert and set style\r\n        var nodes = this._revertToInlines();\r\n        nodes = this.applyArgs(nodes, false);\r\n\r\n        // unwrap if attributes was removed\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = nodes[i];\r\n            var tag = node.tagName.toLowerCase();\r\n            var len = node.attributes.length;\r\n\r\n            if (tag === this.tag && len === 0 && this.args)\r\n            {\r\n                $R.dom(node).unwrap();\r\n                nodes.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.selection.restore();\r\n\r\n        // clear and normalize\r\n        this._clearEmptyStyle();\r\n        nodes = this._normalizeBlocks(nodes);\r\n\r\n        return nodes;\r\n    },\r\n    _convertTags: function(tag)\r\n    {\r\n        if (this.tag !== tag)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            $editor.find(tag).each(function(node)\r\n            {\r\n                var $el = this.utils.replaceToTag(node, 'span');\r\n                $el.addClass('redactor-convertable-' + tag);\r\n            }.bind(this));\r\n        }\r\n    },\r\n    _revertTags: function(tag)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.find('span.redactor-convertable-' + tag).each(function(node)\r\n        {\r\n            var $el = this.utils.replaceToTag(node, tag);\r\n            $el.removeClass('redactor-convertable-' + tag);\r\n            if (this.utils.removeEmptyAttr($el, 'class')) $el.removeAttr('class');\r\n\r\n        }.bind(this));\r\n    },\r\n    _convertToStrike: function(inlines)\r\n    {\r\n        var selected = this.selection.getText().replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\r\n\r\n        for (var i = 0; i < inlines.length; i++)\r\n        {\r\n            var tag = this.arrangeTag(inlines[i].tagName.toLowerCase());\r\n            var inline = inlines[i];\r\n            var $inline = $R.dom(inline);\r\n            var hasSameArgs = this.hasSameArgs(inline);\r\n\r\n            if (tag === this.tag)\r\n            {\r\n\r\n                if (this.tag === 'span' && this._isTextSelected(inline, selected))\r\n                {\r\n                    $inline.addClass('redactor-convertable-apply');\r\n                }\r\n                else if (hasSameArgs && this.tag !== 'a')\r\n                {\r\n                    this._replaceToStrike($inline);\r\n                }\r\n                else if (this.tag === 'span')\r\n                {\r\n                    if (this.args && this.args.style) {\r\n                        for (var key in this.args.style) {\r\n                            $inline.css(key, '');\r\n                        }\r\n                    }\r\n\r\n                    if (this.utils.removeEmptyAttr($inline.get(), 'style')) {\r\n                        $inline.addClass('redactor-convertable-apply');\r\n                    }\r\n                    else {\r\n                        $inline.addClass('redactor-unconvertable-apply');\r\n                    }\r\n                }\r\n                else if (!hasSameArgs)\r\n                {\r\n                    $inline.addClass('redactor-convertable-apply');\r\n                }\r\n\r\n            }\r\n        }\r\n    },\r\n    _replaceToStrike: function($el)\r\n    {\r\n        $el.replaceWith(function()\r\n        {\r\n            return $R.dom('<strike>').append($el.contents());\r\n        });\r\n    },\r\n    _revertToInlines: function()\r\n    {\r\n        var nodes = [];\r\n        var $editor = this.editor.getElement();\r\n\r\n        if (this.tag !== 'u') $editor.find('u').unwrap();\r\n\r\n        $editor.find('.redactor-convertable-u').each(function(node)\r\n        {\r\n             nodes.push(node);\r\n\r\n        });\r\n\r\n        // span convertable\r\n        $editor.find('.redactor-convertable-apply').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            $node.find('strike').unwrap();\r\n\r\n            this._forceRemoveClass($node, 'redactor-convertable-apply');\r\n            nodes.push(node);\r\n\r\n        }.bind(this));\r\n\r\n        // span unconvertable\r\n        $editor.find('span.redactor-unconvertable-apply').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            this._forceRemoveClass($node, 'redactor-unconvertable-apply');\r\n\r\n        }.bind(this));\r\n\r\n        // strike\r\n        $editor.find('strike').each(function(node)\r\n        {\r\n            var $node = this.utils.replaceToTag(node, this.tag);\r\n            nodes.push($node.get());\r\n\r\n        }.bind(this));\r\n\r\n\r\n        this._revertTags('u');\r\n        this._revertTags('del');\r\n\r\n        return nodes;\r\n    },\r\n    _normalizeBlocks: function(nodes)\r\n    {\r\n        var tags = this.opts.inlineTags;\r\n        var blocks = this.selection.getBlocks();\r\n        if (blocks)\r\n        {\r\n            for (var i = 0; i < blocks.length; i++)\r\n            {\r\n                if (blocks[i].tagName === 'PRE')\r\n                {\r\n                    var $node = $R.dom(blocks[i]);\r\n                    $node.find(tags.join(',')).not('.redactor-selection-marker').each(function(inline)\r\n                    {\r\n                        if (nodes.indexOf(inline) !== -1)\r\n                        {\r\n                            nodes = this.utils.removeFromArrayByValue(nodes, inline);\r\n                        }\r\n\r\n                        $R.dom(inline).unwrap();\r\n                    }.bind(this));\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _clearDecoration: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.find(this.opts.inlineTags.join(',')).each(function(node)\r\n        {\r\n            if (node.style.textDecoration === 'line-through' || node.style.textDecorationLine === 'line-through')\r\n            {\r\n                var $el = $R.dom(node);\r\n                $el.css('textDecorationLine', '');\r\n                $el.css('textDecoration', '');\r\n                $el.wrap('<strike>');\r\n            }\r\n        });\r\n    },\r\n    _clearEmptyStyle: function()\r\n    {\r\n        var inlines = this.getInlines();\r\n        for (var i = 0; i < inlines.length; i++)\r\n        {\r\n            this._clearEmptyStyleAttr(inlines[i]);\r\n\r\n            var childNodes = inlines[i].childNodes;\r\n            if (childNodes)\r\n            {\r\n                for (var z = 0; z < childNodes.length; z++)\r\n                {\r\n                    this._clearEmptyStyleAttr(childNodes[z]);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _clearEmptyStyleAttr: function(node)\r\n    {\r\n        if (node.nodeType !== 3 && this.utils.removeEmptyAttr(node, 'style'))\r\n        {\r\n            node.removeAttribute('style');\r\n            node.removeAttribute('data-redactor-style-cache');\r\n        }\r\n    },\r\n    _forceRemoveClass: function($node, classname)\r\n    {\r\n        $node.removeClass(classname);\r\n        if (this.utils.removeEmptyAttr($node, 'class')) $node.removeAttr('class');\r\n    },\r\n    _isTextSelected: function(node, selected)\r\n    {\r\n        var text = this.utils.removeInvisibleChars(node.textContent);\r\n\r\n        return (selected === text || selected.search(new RegExp('^' + this.utils.escapeRegExp(text) + '$')) !== -1);\r\n    },\r\n    getInlines: function(tags)\r\n    {\r\n        return (tags) ? this.selection.getInlines({ tags: tags, all: true }) : this.selection.getInlines({ all: true });\r\n    },\r\n    getElements: function(tags)\r\n    {\r\n        return $R.dom(this.getInlines(tags));\r\n    },\r\n    clearFormat: function()\r\n    {\r\n        this.selection.save();\r\n\r\n        var nodes = this.selection.getInlines({ all: true });\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $el = $R.dom(nodes[i]);\r\n            var inline = this.selection.getInline(nodes[i]);\r\n            if (inline)\r\n            {\r\n                $el.unwrap();\r\n            }\r\n        }\r\n\r\n        this.selection.restore();\r\n    }\r\n});\r\n$R.add('service', 'autoparser', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.cleaner = this.app.cleaner;\r\n    },\r\n    observe: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $objects = $editor.find('.redactor-autoparser-object').each(function(node)\r\n        {\r\n           var $node = $R.dom(node);\r\n           $node.removeClass('redactor-autoparser-object');\r\n           if ($node.attr('class') === '') $node.removeAttr('class');\r\n        });\r\n\r\n        if ($objects.length > 0)\r\n        {\r\n            $objects.each(function(node)\r\n            {\r\n                var type;\r\n                var $object = false;\r\n                var tag = node.tagName;\r\n\r\n                if (tag === 'A') type = 'link';\r\n                else if (tag === 'IMG') type = 'image';\r\n                else if (tag === 'IFRAME') type = 'video';\r\n\r\n                if (type)\r\n                {\r\n                    $object = $R.create(type + '.component', this.app, node);\r\n                    this.app.broadcast(type + '.inserted', $object);\r\n                    this.app.broadcast('autoparse', type, $object);\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n    },\r\n    format: function(e, key)\r\n    {\r\n        if (this._isKey(key))\r\n        {\r\n            this._format(key === this.keycodes.ENTER);\r\n        }\r\n    },\r\n    parse: function(html)\r\n    {\r\n        var tags = ['figure', 'form', 'pre', 'object', 'video', 'iframe', 'code', 'a', 'img'];\r\n        var stored = [];\r\n        var z = 0;\r\n\r\n        // store\r\n        var storedComments = [];\r\n        html = this.cleaner.storeComments(html, storedComments);\r\n\r\n        // encode\r\n        html = this.cleaner.encodeCode(html);\r\n\r\n        // converting entity\r\n        html = html.replace(/\\$/g, '&#36;');\r\n        html = html.replace(/&amp;/g, '&');\r\n\r\n        // store tags\r\n        for (var i = 0; i < tags.length; i++)\r\n        {\r\n            var reTags = (tags[i] === 'img') ? '<' + tags[i] + '[^>]*>' : '<' + tags[i] + '([\\\\w\\\\W]*?)</' + tags[i] + '>';\r\n            var matched = html.match(new RegExp(reTags, 'gi'));\r\n\r\n            if (matched !== null)\r\n            {\r\n                for (var y = 0; y < matched.length; y++)\r\n                {\r\n                    html = html.replace(matched[y], '#####replaceparse' + z + '#####');\r\n                    stored.push(matched[y]);\r\n                    z++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // images\r\n        if (this.opts.autoparseImages && html.match(this.opts.regex.imageurl))\r\n        {\r\n            var imagesMatches = html.match(this.opts.regex.imageurl);\r\n            for (var i = 0; i < imagesMatches.length; i++)\r\n            {\r\n                html = html.replace(imagesMatches[i], '<img class=\"redactor-autoparser-object\" src=\"' + imagesMatches[i] + '\">');\r\n            }\r\n        }\r\n\r\n        // video\r\n        if (this.opts.autoparseVideo && (html.match(this.opts.regex.youtube) || html.match(this.opts.regex.vimeo)))\r\n        {\r\n            var iframeStart = '<iframe width=\"500\" height=\"281\" src=\"';\r\n            var iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\r\n\r\n            var str, re;\r\n            var https = (this.opts.autoparseHttps) ? 'https:' : '';\r\n            if (html.match(this.opts.regex.youtube))\r\n            {\r\n                str = https + '//www.youtube.com/embed/$1';\r\n                re = this.opts.regex.youtube;\r\n            }\r\n            else if (html.match(this.opts.regex.vimeo))\r\n            {\r\n                str = https + '//player.vimeo.com/video/$2';\r\n                re = this.opts.regex.vimeo;\r\n            }\r\n\r\n            var $video = this.component.create('video', iframeStart + str + iframeEnd);\r\n\r\n            html = html.replace(re, $video.get().outerHTML);\r\n        }\r\n\r\n        // store tags\r\n        for (var i = 0; i < tags.length; i++)\r\n        {\r\n            var reTags = (tags[i] === 'img') ? '<' + tags[i] + '[^>]*>' : '<' + tags[i] + '([\\\\w\\\\W]*?)</' + tags[i] + '>';\r\n            var matched = html.match(new RegExp(reTags, 'gi'));\r\n\r\n            if (matched !== null)\r\n            {\r\n                for (var y = 0; y < matched.length; y++)\r\n                {\r\n                    html = html.replace(matched[y], '#####replaceparse' + z + '#####');\r\n                    stored.push(matched[y]);\r\n                    z++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // links\r\n        if (this.opts.autoparseLinks && html.match(this.opts.regex.url))\r\n        {\r\n            html = this._formatLinks(html);\r\n        }\r\n\r\n        // restore\r\n        html = this._restoreReplaced(stored, html);\r\n\r\n        // repeat for nested tags\r\n        html = this._restoreReplaced(stored, html);\r\n\r\n        // restore comments\r\n        html = this.cleaner.restoreComments(html, storedComments);\r\n\r\n        return html;\r\n    },\r\n\r\n    // private\r\n    _isKey: function(key)\r\n    {\r\n        return (key === this.keycodes.ENTER || key === this.keycodes.SPACE);\r\n    },\r\n    _format: function(enter)\r\n    {\r\n        var parent = this.selection.getParent();\r\n        var $parent = $R.dom(parent);\r\n\r\n        var isNotFormatted = (parent && $parent.closest('figure, pre, code, img, a, iframe').length !== 0);\r\n        if (isNotFormatted || !this.selection.isCollapsed())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // add split marker\r\n        var marker = this.utils.createInvisibleChar();\r\n        var range = this.selection.getRange();\r\n        range.insertNode(marker);\r\n\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $current = $R.dom(current);\r\n\r\n        // remove split marker\r\n        marker.parentNode.removeChild(marker);\r\n\r\n        if (current && current.nodeType === 3)\r\n        {\r\n            var content = current.textContent;\r\n            var type;\r\n\r\n            // images\r\n            if (this.opts.autoparseImages && content.match(this._convertToRegExp(this.opts.regex.imageurl)))\r\n            {\r\n                var isList = data.isList();\r\n                var matches = content.match(this.opts.regex.imageurl);\r\n                var el = (isList) ? undefined : '<figure><img></figure>';\r\n\r\n                var $img = this.component.create('image', el);\r\n                $img.setSrc(matches[0]);\r\n                $img.addClass('redactor-autoparser-object');\r\n\r\n                content = content.replace(matches[0], $img.get().outerHTML);\r\n                type = 'image';\r\n            }\r\n            // video\r\n            else if (this.opts.autoparseVideo && (content.match(this._convertToRegExp(this.opts.regex.youtube)) || content.match(this._convertToRegExp(this.opts.regex.vimeo))))\r\n            {\r\n                var iframeStart = '<iframe width=\"500\" height=\"281\" src=\"';\r\n                var iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\r\n                var str, re;\r\n\r\n                if (content.match(this.opts.regex.youtube))\r\n                {\r\n                    str = '//www.youtube.com/embed/$1';\r\n                    re = this.opts.regex.youtube;\r\n                }\r\n                else if (content.match(this.opts.regex.vimeo))\r\n                {\r\n                    str = '//player.vimeo.com/video/$2';\r\n                    re = this.opts.regex.vimeo;\r\n                }\r\n\r\n                var $video = this.component.create('video', iframeStart + str + iframeEnd);\r\n                $video.addClass('redactor-autoparser-object');\r\n\r\n                content = content.replace(re, $video.get().outerHTML);\r\n                type = 'video';\r\n            }\r\n            // links\r\n            else if (this.opts.autoparseLinks && content.match(this._convertToRegExp(this.opts.regex.url)))\r\n            {\r\n                content = this._formatLinks(content, enter);\r\n                type = 'link';\r\n            }\r\n\r\n            // replace\r\n            if (type)\r\n            {\r\n                if (enter)\r\n                {\r\n                    this.selection.save();\r\n                    $current.replaceWith(content);\r\n                    this.selection.restore();\r\n                }\r\n                else\r\n                {\r\n                    $current.replaceWith(content);\r\n                }\r\n\r\n                // object\r\n                var $editor = this.editor.getElement();\r\n                var $object = $editor.find('.redactor-autoparser-object').removeClass('redactor-autoparser-object');\r\n                $object = (type === 'link') ? $R.create('link.component', this.app, $object) : $object;\r\n\r\n                // caret\r\n                if (type === 'link')\r\n                {\r\n                    if (!enter) this.caret.setAfter($object);\r\n                    this.app.broadcast('link.inserted', $object);\r\n                }\r\n                else\r\n                {\r\n                    this.caret.setAfter($object);\r\n\r\n                    var $cloned = $object.clone();\r\n                    $object.remove();\r\n                    $object = this.insertion.insertHtml($cloned);\r\n                    $object = this.component.build($object);\r\n                }\r\n\r\n                // callback\r\n                this.app.broadcast('autoparse', type, $object);\r\n            }\r\n        }\r\n    },\r\n    _formatLinks: function(content) {\r\n        var target = (this.opts.pasteLinkTarget !== false) ? ' target=\"' + this.opts.pasteLinkTarget + '\"' : '';\r\n        var protocol = 'http';\r\n        var classstr = ' class=\"redactor-autoparser-object\"';\r\n        var self = this;\r\n\r\n        content = content.replace(this.opts.regex.aurl1, function(url) {\r\n            return '<a href=\"' + url + '\"' + target + classstr + '>' + self._subLinkText(url) + '</a>';\r\n        });\r\n\r\n        content = content.replace(this.opts.regex.aurl2, function(match, before, url) {\r\n            return before + '<a href=\"' + protocol + '://' + url + '\"' + target + classstr + '>' + self._subLinkText(url) + '</a>';\r\n        });\r\n\r\n        return content;\r\n    },\r\n    _subLinkText: function(text) {\r\n        text = (text.length > this.opts.linkSize) ? text.substring(0, this.opts.linkSize) + '...' : text;\r\n        text = (text.search('%') === -1) ? decodeURIComponent(text) : text;\r\n\r\n        return text;\r\n    },\r\n    _restoreReplaced: function(stored, html) {\r\n        for (var i = 0; i < stored.length; i++) {\r\n            html = html.replace('#####replaceparse' + i + '#####', stored[i]);\r\n        }\r\n\r\n        return html;\r\n    },\r\n    _convertToRegExp: function(str) {\r\n        return new RegExp(String(str).replace(/^\\//, '').replace(/\\/ig$/, '').replace(/\\/gi$/, '') + '$', 'gi');\r\n    }\r\n});\r\n$R.add('service', 'storage', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.data = [];\r\n    },\r\n    // public\r\n    observeImages: function()\r\n    {\r\n        if (this.opts.imageObserve) {\r\n            var $editor = this.editor.getElement();\r\n            var $images = $editor.find('[data-image]');\r\n            $images.each(this._addImage.bind(this));\r\n        }\r\n    },\r\n    observeFiles: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $files = $editor.find('[data-file]');\r\n\r\n\t\t$files.each(this._addFile.bind(this));\r\n    },\r\n\tsetStatus: function(url, status)\r\n\t{\r\n\t\tthis.data[url].status = status;\r\n\t},\r\n    getChanges: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        // check status\r\n        for (var key in this.data)\r\n\t\t{\r\n\t\t\tvar data = this.data[key];\r\n\t\t\tvar $el = $editor.find('[data-' + data.type + '=\"' + data.id + '\"]');\r\n\r\n\t\t\tthis.setStatus(data.id, ($el.length === 0) ? false : true);\r\n\t\t}\r\n\r\n        return this.data;\r\n    },\r\n\tadd: function(type, node)\r\n\t{\r\n        var $node = $R.dom(node);\r\n        var id = $node.attr('data-' + type);\r\n\r\n        this.data[id] = { type: type, status: true, node: $node.get(), id: $node.attr('data-' + type) };\r\n\t},\r\n\r\n    // private\r\n    _addImage: function(node)\r\n    {\r\n        this.add('image', node);\r\n    },\r\n    _addFile: function(node)\r\n    {\r\n        this.add('file', node);\r\n    }\r\n});\r\n$R.add('service', 'utils', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // empty\r\n    isEmpty: function(el)\r\n    {\r\n        var isEmpty = false;\r\n        el = $R.dom(el).get();\r\n        if (el)\r\n        {\r\n            isEmpty = (el.nodeType === 3) ? (el.textContent.trim().replace(/\\n/, '') === '') : (el.innerHTML === '');\r\n        }\r\n\r\n        return isEmpty;\r\n    },\r\n    isEmptyHtml: function(html, keepbr, keeplists)\r\n    {\r\n        html = this.removeInvisibleChars(html);\r\n        html = html.replace(/&nbsp;/gi, '');\r\n        html = html.replace(/<\\/?br\\s?\\/?>/g, ((keepbr) ? 'br' : ''));\r\n        html = html.replace(/\\s/g, '');\r\n        html = html.replace(/^<p>[^\\W\\w\\D\\d]*?<\\/p>$/i, '');\r\n        html = html.replace(/^<div>[^\\W\\w\\D\\d]*?<\\/div>$/i, '');\r\n\r\n        if (keeplists)\r\n        {\r\n            html = html.replace(/<ul(.*?[^>])>$/i, 'ul');\r\n            html = html.replace(/<ol(.*?[^>])>$/i, 'ol');\r\n        }\r\n\r\n        html = html.replace(/<hr(.*?[^>])>$/i, 'hr');\r\n        html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');\r\n        html = html.replace(/<source(.*?[^>])>$/i, 'source');\r\n\r\n        // remove empty tags\r\n        html = html.replace(/<[^\\/>][^>]*><\\/[^>]+>/gi, '');\r\n        html = html.replace(/<[^\\/>][^>]*><\\/[^>]+>/gi, '');\r\n\r\n        // trim\r\n        html = html.trim();\r\n\r\n        return html === '';\r\n    },\r\n    trimSpaces: function(html)\r\n    {\r\n        return html = this.removeInvisibleChars(html.trim());\r\n    },\r\n\r\n    // invisible chars\r\n    createInvisibleChar: function()\r\n    {\r\n        return document.createTextNode(this.opts.markerChar);\r\n    },\r\n    searchInvisibleChars: function(str)\r\n    {\r\n        return str.search(/^\\uFEFF$/g);\r\n    },\r\n    removeInvisibleChars: function(html)\r\n    {\r\n        return html.replace(/\\uFEFF/g, '');\r\n    },\r\n    trimInvisibleChars: function(direction)\r\n    {\r\n        if (!this.selection.isCollapsed()) return;\r\n\r\n        var current = this.selection.getCurrent();\r\n        var side = (direction === 'left') ? this.selection.getTextBeforeCaret() : this.selection.getTextAfterCaret();\r\n        var isSpace = (current && current.nodeType === 3 && this.searchInvisibleChars(side) === 0);\r\n\r\n        if (isSpace)\r\n        {\r\n            if (direction === 'left')\r\n            {\r\n                $R.dom(current).replaceWith(current.textContent.trim());\r\n            }\r\n            else\r\n            {\r\n                var offset = this.offset.get();\r\n                this.offset.set({ start: offset.start + 1, end: offset.end + 1 });\r\n            }\r\n        }\r\n    },\r\n\r\n    // wrapper\r\n    buildWrapper: function(html)\r\n    {\r\n        return $R.dom('<div>').html(html);\r\n    },\r\n    getWrapperHtml: function($wrapper)\r\n    {\r\n        var html = $wrapper.html();\r\n        $wrapper.remove();\r\n\r\n        return html;\r\n    },\r\n\r\n    // fragment\r\n    createTmpContainer: function(html)\r\n    {\r\n        var $div = $R.dom('<div>');\r\n\r\n        if (typeof html === 'string')\r\n        {\r\n            $div.html(html);\r\n        }\r\n        else\r\n        {\r\n            $div.append($R.dom(html).clone(true));\r\n        }\r\n\r\n        return $div.get();\r\n    },\r\n    createFragment: function(html)\r\n    {\r\n        var el = this.createTmpContainer(html);\r\n        var frag = document.createDocumentFragment(), node, firstNode, lastNode;\r\n        var nodes = [];\r\n        var i = 0;\r\n        while ((node = el.firstChild))\r\n        {\r\n            i++;\r\n            var n = frag.appendChild(node);\r\n            if (i === 1) firstNode = n;\r\n\r\n            nodes.push(n);\r\n            lastNode = n;\r\n        }\r\n\r\n        return { frag: frag, first: firstNode, last: lastNode, nodes: nodes };\r\n    },\r\n    isFragment: function(obj)\r\n    {\r\n        return (typeof obj === 'object' && obj.frag);\r\n    },\r\n    parseHtml: function(html)\r\n    {\r\n        var div = this.createTmpContainer(html);\r\n\r\n        return { html: div.innerHTML, nodes: div.childNodes };\r\n    },\r\n\r\n    splitNode: function(current, nodes, isList, inline)\r\n    {\r\n        nodes = (this.isFragment(nodes)) ? nodes.frag : nodes;\r\n\r\n        var element;\r\n        if (inline)\r\n        {\r\n            element = (this.inspector.isInlineTag(current.tagName)) ? current : this.selection.getInline(current);\r\n        }\r\n        else\r\n        {\r\n            element = (this.inspector.isBlockTag(current.tagName)) ? current : this.selection.getBlock(current);\r\n        }\r\n\r\n        var $element = $R.dom(element);\r\n\r\n        // replace is empty\r\n        if (!inline && this.isEmptyHtml(element.innerHTML, true))\r\n        {\r\n            $element.after(nodes);\r\n            $element.remove();\r\n\r\n            return nodes;\r\n        }\r\n\r\n        var tag = $element.get().tagName.toLowerCase();\r\n        var isEnd = this.caret.isEnd(element);\r\n        var isStart = this.caret.isStart(element);\r\n\r\n        if (!isEnd && !isStart)\r\n        {\r\n            var extractedContent = this.extractHtmlFromCaret(inline);\r\n\r\n            var $secondPart = $R.dom('<' + tag + ' />');\r\n            $secondPart = this.cloneAttributes(element, $secondPart);\r\n\r\n            $element.after($secondPart.append(extractedContent));\r\n        }\r\n\r\n        if (isStart)\r\n        {\r\n            return $element.before(nodes);\r\n        }\r\n        else\r\n        {\r\n            if (isList)\r\n            {\r\n                return $element.append(nodes);\r\n            }\r\n            else\r\n            {\r\n                nodes = $element.after(nodes);\r\n\r\n                var html = $element.html();\r\n                html = this.removeInvisibleChars(html);\r\n                html = html.replace(/&nbsp;/gi, '');\r\n\r\n                if (html === '') $element.remove();\r\n\r\n                return nodes;\r\n            }\r\n        }\r\n    },\r\n    extractHtmlFromCaret: function(inline, element)\r\n    {\r\n        var range = this.selection.getRange();\r\n        if (range)\r\n        {\r\n            element = (element) ? element : ((inline) ? this.selection.getInline() : this.selection.getBlock());\r\n            if (element)\r\n            {\r\n                var clonedRange = range.cloneRange();\r\n                clonedRange.selectNodeContents(element);\r\n                clonedRange.setStart(range.endContainer, range.endOffset);\r\n\r\n                return clonedRange.extractContents();\r\n            }\r\n        }\r\n    },\r\n    createMarkup: function(el)\r\n    {\r\n        var markup = document.createElement(this.opts.markup);\r\n        if (this.opts.breakline) markup.setAttribute('data-redactor-tag', 'br');\r\n\r\n        var $el = $R.dom(el);\r\n\r\n        $el.after(markup);\r\n        this.caret.setStart(markup);\r\n    },\r\n    createMarkupBefore: function(el)\r\n    {\r\n        var markup = document.createElement(this.opts.markup);\r\n        if (this.opts.breakline) markup.setAttribute('data-redactor-tag', 'br');\r\n\r\n        var $el = $R.dom(el);\r\n\r\n        $el.before(markup);\r\n        this.caret.setEnd(markup);\r\n    },\r\n    getNode: function(el)\r\n    {\r\n        var node = $R.dom(el).get();\r\n        var editor = this.editor.getElement().get();\r\n\r\n        return (typeof el === 'undefined') ? editor : ((node) ? node : false);\r\n    },\r\n    findSiblings: function(node, type)\r\n    {\r\n        node = $R.dom(node).get();\r\n        type = (type === 'next') ? 'nextSibling' : 'previousSibling';\r\n\r\n        while (node = node[type])\r\n        {\r\n            if ((node.nodeType === 3 && node.textContent.trim() === '') || node.tagName === 'BR')\r\n            {\r\n                continue;\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getElementsFromHtml: function(html, selector, exclude)\r\n    {\r\n        var div = document.createElement(\"div\");\r\n        div.innerHTML = html;\r\n\r\n        var elems = div.querySelectorAll(selector);\r\n\r\n        // array map polyfill\r\n        var mapping = function(callback, thisArg)\r\n        {\r\n            if (typeof this.length !== 'number') return;\r\n            if (typeof callback !== 'function') return;\r\n\r\n            var newArr = [];\r\n            if (typeof this == 'object')\r\n            {\r\n                for (var i = 0; i < this.length; i++)\r\n                {\r\n                    if (i in this) newArr[i] = callback.call(thisArg || this, this[i], i, this);\r\n                    else return;\r\n                }\r\n            }\r\n\r\n            return newArr;\r\n        };\r\n\r\n        return mapping.call(elems, function(el)\r\n        {\r\n            var type = el.getAttribute('data-redactor-type');\r\n            if (exclude && type && type === exclude) {}\r\n            else return el.outerHTML;\r\n        });\r\n    },\r\n\r\n    // childnodes\r\n    getChildNodes: function(el, recursive, elements)\r\n    {\r\n        el = (el && el.nodeType && el.nodeType === 11) ? el : $R.dom(el).get();\r\n\r\n        var nodes = el.childNodes;\r\n        var result = [];\r\n        if (nodes)\r\n        {\r\n            for (var i = 0; i < nodes.length; i++)\r\n            {\r\n                if (elements === true && nodes[i].nodeType === 3) continue;\r\n                else if (nodes[i].nodeType === 3 && this.isEmpty(nodes[i])) continue;\r\n\r\n                result.push(nodes[i]);\r\n\r\n                if (recursive !== false)\r\n                {\r\n                    var nestedNodes = this.getChildNodes(nodes[i], elements);\r\n                    if (nestedNodes.length > 0)\r\n                    {\r\n                        result = result.concat(nestedNodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n    getChildElements: function(el)\r\n    {\r\n        return this.getChildNodes(el, true, true);\r\n    },\r\n    getFirstNode: function(el)\r\n    {\r\n        return this._getFirst(this.getChildNodes(el, false));\r\n    },\r\n    getLastNode: function(el)\r\n    {\r\n        return this._getLast(this.getChildNodes(el, false));\r\n    },\r\n    getFirstElement: function(el)\r\n    {\r\n        return this._getFirst(this.getChildNodes(el, false, true));\r\n    },\r\n    getLastElement: function(el)\r\n    {\r\n        return this._getLast(this.getChildNodes(el, false, true));\r\n    },\r\n\r\n    // replace\r\n    replaceToTag: function(node, tag)\r\n    {\r\n        var $node = $R.dom(node);\r\n        return $node.replaceWith(function(node)\r\n        {\r\n            var $replaced = $R.dom('<' + tag + '>').append($R.dom(node).contents());\r\n            if (node.attributes)\r\n            {\r\n                var attrs = node.attributes;\r\n                for (var i = 0; i < attrs.length; i++)\r\n                {\r\n                    $replaced.attr(attrs[i].nodeName, attrs[i].value);\r\n                }\r\n            }\r\n\r\n            return $replaced;\r\n\r\n        });\r\n    },\r\n\r\n    // string\r\n    ucfirst: function(str)\r\n    {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    },\r\n\r\n    // array\r\n    removeFromArrayByValue: function(arr, value)\r\n    {\r\n        var a = arguments, len = a.length, ax;\r\n        while (len > 1 && arr.length)\r\n        {\r\n            value = a[--len];\r\n            while ((ax= arr.indexOf(value)) !== -1)\r\n            {\r\n                arr.splice(ax, 1);\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    },\r\n\r\n    // attributes\r\n    removeEmptyAttr: function(el, attr)\r\n    {\r\n        var $el = $R.dom(el);\r\n\r\n        if (typeof $el.attr(attr) === 'undefined' || $el.attr(attr) === null) return true;\r\n        else if ($el.attr(attr) === '')\r\n        {\r\n            $el.removeAttr(attr);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    cloneAttributes: function(elFrom, elTo)\r\n    {\r\n        elFrom = $R.dom(elFrom).get();\r\n        elTo = $R.dom(elTo);\r\n\r\n        var attrs = elFrom.attributes;\r\n        var len = attrs.length;\r\n        while (len--)\r\n        {\r\n            var attr = attrs[len];\r\n            elTo.attr(attr.name, attr.value);\r\n        }\r\n\r\n        return elTo;\r\n    },\r\n\r\n    // object\r\n    toParams: function(obj)\r\n    {\r\n        if (typeof obj !== 'object') return obj;\r\n\r\n        var keys = Object.keys(obj);\r\n        if (!keys.length) return '';\r\n        var result = '';\r\n\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            var key = keys[i];\r\n            result += key + ':' + obj[key] + ';';\r\n        }\r\n\r\n        return result;\r\n    },\r\n    styleToObj: function(str)\r\n    {\r\n        var obj = {};\r\n\r\n        if (str)\r\n        {\r\n            var style = str.replace(/;$/, '').split(';');\r\n            for (var i = 0; i < style.length; i++)\r\n            {\r\n                var rule = style[i].split(':');\r\n                obj[rule[0].trim()] = rule[1].trim();\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    },\r\n    checkProperty: function(obj)\r\n    {\r\n        var args = (arguments[1] && Array.isArray(arguments[1])) ? arguments[1] : [].slice.call(arguments, 1);\r\n\r\n        for (var i = 0; i < args.length; i++)\r\n        {\r\n            if (!obj || (typeof obj[args[i]] === 'undefined'))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            obj = obj[args[i]];\r\n        }\r\n\r\n        return obj;\r\n    },\r\n\r\n    // data\r\n    extendData: function(data, obj)\r\n    {\r\n        for (var key in obj)\r\n        {\r\n            if (key === 'elements')\r\n            {\r\n                var $elms = $R.dom(obj[key]);\r\n                $elms.each(function(node)\r\n                {\r\n                    var $node = $R.dom(node);\r\n                    if (node.tagName === 'FORM')\r\n                    {\r\n                        var serializedData = $node.serialize(true);\r\n                        for (var z in serializedData)\r\n                        {\r\n                            data = this._setData(data, z, serializedData[z]);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        var name = ($node.attr('name')) ? $node.attr('name') : $node.attr('id');\r\n                        data = this._setData(data, name, $node.val());\r\n                    }\r\n                }.bind(this));\r\n            }\r\n            else\r\n            {\r\n                data = this._setData(data, key, obj[key]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    _setData: function(data, name, value)\r\n    {\r\n        if (data instanceof FormData) data.append(name, value);\r\n        else data[name] = value;\r\n\r\n        return data;\r\n    },\r\n\r\n    // normalize\r\n    normalizeTextNodes: function(el)\r\n    {\r\n        el = $R.dom(el).get();\r\n        if (el) el.normalize();\r\n    },\r\n\r\n    // color\r\n    isRgb: function(str)\r\n    {\r\n        return (str.search(/^rgb/i) === 0);\r\n    },\r\n    rgb2hex: function(rgb)\r\n    {\r\n        rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\r\n\r\n        return (rgb && rgb.length === 4) ? \"#\" +\r\n        (\"0\" + parseInt(rgb[1],10).toString(16)).slice(-2) +\r\n        (\"0\" + parseInt(rgb[2],10).toString(16)).slice(-2) +\r\n        (\"0\" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';\r\n    },\r\n    hex2long: function(val)\r\n    {\r\n        if (val.search(/^#/) !== -1 && val.length === 4)\r\n        {\r\n            val = '#' + val[1] + val[1] + val[2] + val[2] + val[3] + val[3];\r\n        }\r\n\r\n        return val;\r\n    },\r\n\r\n    // escape\r\n    escapeRegExp: function(s)\r\n    {\r\n        return s.replace(/[-\\/\\\\^$*~+?.()|[\\]{}]/g, '\\\\$&');\r\n    },\r\n\r\n    // random\r\n    getRandomId: function()\r\n    {\r\n        var id = '';\r\n        var possible = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n        for (var i = 0; i < 12; i++)\r\n        {\r\n            id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n\r\n        return id;\r\n    },\r\n\r\n    // private\r\n    _getFirst: function(nodes)\r\n    {\r\n        return (nodes.length !== 0) ? nodes[0] : false;\r\n    },\r\n    _getLast: function(nodes)\r\n    {\r\n        return (nodes.length !== 0) ? nodes[nodes.length-1] : false;\r\n    }\r\n});\r\n$R.add('service', 'progress', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.$box = null;\r\n        this.$bar = null;\r\n    },\r\n\r\n    // public\r\n    show: function()\r\n    {\r\n        if (!this._is()) this._build();\r\n        this.$box.show();\r\n    },\r\n    hide: function()\r\n    {\r\n        if (this._is())\r\n        {\r\n            this.animate.start(this.$box, 'fadeOut', this._destroy.bind(this));\r\n        }\r\n    },\r\n    update: function(value)\r\n    {\r\n        this.show();\r\n        this.$bar.css('width', value + '%');\r\n    },\r\n\r\n    // private\r\n    _is: function()\r\n    {\r\n        return (this.$box !== null);\r\n    },\r\n    _build: function()\r\n    {\r\n        this.$bar = $R.dom('<span />');\r\n        this.$box = $R.dom('<div id=\"redactor-progress\" />');\r\n\r\n        this.$box.append(this.$bar);\r\n        this.$body.append(this.$box);\r\n    },\r\n    _destroy: function()\r\n    {\r\n        if (this._is()) this.$box.remove();\r\n\r\n        this.$box = null;\r\n        this.$bar = null;\r\n    }\r\n});\r\n$R.add('module', 'starter', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.plugin = app.plugin;\r\n        this.module = app.module;\r\n    },\r\n    // messages\r\n    onstart: function()\r\n    {\r\n        var services = ['element', 'container', 'source', 'editor', 'statusbar', 'toolbar'];\r\n        var modules = ['element', 'container', 'source', 'editor', 'statusbar', 'contextbar', 'input'];\r\n\r\n        this._startStop('start', this.app, services);\r\n        this._startStop('start', this.module, modules);\r\n    },\r\n    onstop: function()\r\n    {\r\n        var modules = ['observer', 'element', 'container', 'source', 'editor', 'contextbar'];\r\n\r\n        this._startStop('stop', this.module, modules);\r\n    },\r\n    onenable: function()\r\n    {\r\n        var modules = ['observer', 'toolbar'];\r\n        var plugins = this.opts.plugins;\r\n\r\n        this._startStop('start', this.module, modules);\r\n        this._startStop('start', this.plugin, plugins);\r\n    },\r\n    ondisable: function()\r\n    {\r\n        var modules = ['observer', 'toolbar'];\r\n        var plugins = this.opts.plugins;\r\n\r\n        this._startStop('stop', this.module, modules);\r\n        this._startStop('stop', this.plugin, plugins);\r\n    },\r\n\r\n    // private\r\n    _startStop: function(type, obj, arr)\r\n    {\r\n        for (var i = 0; i < arr.length; i++)\r\n        {\r\n            if (typeof obj[arr[i]] !== 'undefined')\r\n            {\r\n                this.app.callInstanceMethod(obj[arr[i]], type);\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'element', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.namespace = app.namespace;\r\n        this.element = app.element;\r\n        this.rootOpts = $R.extend({}, true, $R.options, app.rootOpts);\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildModes();\r\n        this._buildMarkup();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        $element.removeData(this.namespace + '-uuid');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        $element.data(this.namespace + '-uuid', this.uuid);\r\n    },\r\n    _buildModes: function()\r\n    {\r\n        var type = this.element.getType();\r\n\r\n        if (type === 'inline') this._redefineOptions(this.opts.modes['inline']);\r\n        if (type === 'div') this._redefineOptions(this.opts.modes['original']);\r\n\r\n        if (type !== 'inline')\r\n        {\r\n            if (this._isRootOption('styles') && this.rootOpts.styles) this.opts.styles = true;\r\n            if (this._isRootOption('source') && !this.rootOpts.source) this.opts.showSource = false;\r\n        }\r\n    },\r\n    _buildMarkup: function()\r\n    {\r\n        var type = this.element.getType();\r\n\r\n        if (type === 'inline')\r\n        {\r\n            this.opts.emptyHtml = '';\r\n        }\r\n        else if (this.opts.breakline)\r\n        {\r\n            this.opts.markup = 'div';\r\n            this.opts.emptyHtml = '<div data-redactor-tag=\"br\">' + this.opts.markerChar + '</div>';\r\n        }\r\n        else\r\n        {\r\n            this.opts.emptyHtml = '<' + this.opts.markup + '></' + this.opts.markup + '>';\r\n        }\r\n    },\r\n    _redefineOptions: function(opts)\r\n    {\r\n        for (var key in opts)\r\n        {\r\n            this.opts[key] = opts[key];\r\n        }\r\n    },\r\n    _isRootOption: function()\r\n    {\r\n        return (typeof this.rootOpts['styles'] !== 'undefined');\r\n    }\r\n});\r\n$R.add('module', 'editor', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.source = app.source;\r\n        this.element = app.element;\r\n        this.component = app.component;\r\n        this.container = app.container;\r\n        this.inspector = app.inspector;\r\n        this.autoparser = app.autoparser;\r\n\r\n        // local\r\n        this.placeholder = false;\r\n        this.events = false;\r\n    },\r\n    // messages\r\n    onenable: function()\r\n    {\r\n        this.enable();\r\n    },\r\n    ondisable: function()\r\n    {\r\n        this.disable();\r\n    },\r\n    onenablefocus: function()\r\n    {\r\n        this._enableFocus();\r\n    },\r\n    oncontextmenu: function(e)\r\n    {\r\n        this.component.setOnEvent(e, true);\r\n    },\r\n    onclick: function(e)\r\n    {\r\n        this.component.setOnEvent(e);\r\n    },\r\n    onkeyup: function(e)\r\n    {\r\n        var data = this.inspector.parse(e.target);\r\n        if (!data.isComponent())\r\n        {\r\n            this.component.clearActive();\r\n        }\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        this._enableReadOnly();\r\n    },\r\n    ondisablereadonly: function()\r\n    {\r\n        this._disableReadOnly();\r\n    },\r\n    onautoparseobserve: function()\r\n    {\r\n        this.autoparser.observe();\r\n    },\r\n    onplaceholder: {\r\n        build: function()\r\n        {\r\n            this._buildPlaceholder();\r\n        },\r\n        toggle: function()\r\n        {\r\n            this._togglePlacehodler();\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildEvents();\r\n        this._buildOptions();\r\n        this._buildAccesibility();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        var classesEditor = ['redactor-in', 'redactor-in-' + this.uuid, 'redactor-structure', 'redactor-placeholder', 'notranslate'];\r\n        if (this.opts.stylesClass !== '') {\r\n            classesEditor.push(this.opts.stylesClass);\r\n        }\r\n\r\n        var classesContainer = ['redactor-focus', 'redactor-blur', 'redactor-over', 'redactor-styles-on',\r\n                                'redactor-styles-off', 'redactor-toolbar-on', 'redactor-text-labeled-on', 'redactor-source-view'];\r\n\r\n        $editor.removeAttr('spellcheck');\r\n        $editor.removeAttr('dir');\r\n        $editor.removeAttr('contenteditable');\r\n        $editor.removeAttr('placeholder');\r\n        $editor.removeAttr('data-gramm_editor');\r\n        $editor.removeClass(classesEditor.join(' '));\r\n\r\n        $container.removeClass(classesContainer.join(' '));\r\n\r\n        this._destroyEvents();\r\n\r\n        if ($editor.get().classList.length === 0) $editor.removeAttr('class');\r\n    },\r\n    enable: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.addClass('redactor-in redactor-in-' + this.uuid);\r\n        $editor.attr({ 'contenteditable': true });\r\n\r\n        if (this.opts.structure)\r\n        {\r\n            $editor.addClass('redactor-structure');\r\n        }\r\n\r\n        if (this.opts.toolbar && !this.opts.air && !this.opts.toolbarExternal)\r\n        {\r\n            $container.addClass('redactor-toolbar-on');\r\n        }\r\n\r\n        // prevent editing\r\n        this._disableBrowsersEditing();\r\n    },\r\n    disable: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.removeClass('redactor-in redactor-in-' + this.uuid);\r\n        $editor.removeClass('redactor-structure');\r\n        $editor.removeAttr('contenteditable');\r\n\r\n        $container.addClass('redactor-toolbar-on');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $element = this.element.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $container.addClass('redactor-blur');\r\n\r\n        if (!this.opts.grammarly)\r\n        {\r\n            $editor.attr('data-gramm_editor', false);\r\n        }\r\n\r\n        if (this.opts.notranslate)\r\n        {\r\n            $editor.addClass('notranslate');\r\n        }\r\n\r\n        if (this.opts.styles)\r\n        {\r\n            $editor.addClass(this.opts.stylesClass);\r\n            $container.addClass('redactor-styles-on');\r\n        }\r\n        else\r\n        {\r\n            $container.addClass('redactor-styles-off');\r\n        }\r\n\r\n        if (this.opts.buttonsTextLabeled)\r\n        {\r\n            $container.addClass('redactor-text-labeled-on');\r\n        }\r\n\r\n        if (this.element.isType('textarea')) $element.before($editor);\r\n    },\r\n    _buildEvents: function()\r\n    {\r\n        this.events = $R.create('editor.events', this.app);\r\n    },\r\n    _buildOptions: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.attr('dir', this.opts.direction);\r\n\r\n        if (!this.opts.spellcheck) $editor.attr('spellcheck', false);\r\n        if (this.opts.tabindex) $editor.attr('tabindex', this.opts.tabindex);\r\n        if (this.opts.minHeight) $editor.css('min-height', this.opts.minHeight);\r\n        if (this.opts.maxHeight) $editor.css('max-height', this.opts.maxHeight);\r\n        if (this.opts.maxWidth) $editor.css({ 'max-width': this.opts.maxWidth, 'margin': 'auto' });\r\n    },\r\n    _buildAccesibility: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.attr({ 'aria-labelledby': 'redactor-voice-' + this.uuid, 'role': 'presentation' });\r\n    },\r\n    _buildPlaceholder: function()\r\n    {\r\n        this.placeholder = $R.create('editor.placeholder', this.app);\r\n    },\r\n    _enableFocus: function()\r\n    {\r\n        if (this.opts.showSource) this._enableFocusSource();\r\n        else this._enableFocusEditor();\r\n    },\r\n    _enableFocusSource: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n\r\n        if (this.opts.focus)\r\n        {\r\n            $source.focus();\r\n            $source.get().setSelectionRange(0, 0);\r\n        }\r\n        else if (this.opts.focusEnd)\r\n        {\r\n            $source.focus();\r\n        }\r\n    },\r\n    _enableFocusEditor: function()\r\n    {\r\n        if (this.opts.focus)\r\n        {\r\n            setTimeout(this.editor.startFocus.bind(this.editor), 100);\r\n        }\r\n        else if (this.opts.focusEnd)\r\n        {\r\n            setTimeout(this.editor.endFocus.bind(this.editor), 100);\r\n        }\r\n    },\r\n    _togglePlacehodler: function()\r\n    {\r\n        if (this.placeholder) this.placeholder.toggle();\r\n    },\r\n    _disableBrowsersEditing: function()\r\n    {\r\n        try {\r\n            // FF fix\r\n            document.execCommand('enableObjectResizing', false, false);\r\n            document.execCommand('enableInlineTableEditing', false, false);\r\n            // IE prevent converting links\r\n            document.execCommand(\"AutoUrlDetect\", false, false);\r\n\r\n            // IE disable image resizing\r\n            var $editor = this.editor.getElement();\r\n            var el = $editor.get();\r\n            if (el.addEventListener) el.addEventListener('mscontrolselect', function(e) { e.preventDefault(); });\r\n            else el.attachEvent('oncontrolselect', function(e) { e.returnValue = false; });\r\n\r\n        } catch (e) {}\r\n    },\r\n    _destroyEvents: function()\r\n    {\r\n        if (this.events)\r\n        {\r\n            this.events.destroy();\r\n        }\r\n    },\r\n    _enableReadOnly: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        this._getEditables($editor).removeAttr('contenteditable');\r\n        $editor.removeAttr('contenteditable');\r\n        $editor.addClass('redactor-read-only');\r\n\r\n        if (this.events) this.events.destroy();\r\n    },\r\n    _disableReadOnly: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        this._getEditables($editor).attr({ 'contenteditable': true });\r\n        $editor.removeClass('redactor-read-only');\r\n        $editor.attr({ 'contenteditable': true });\r\n\r\n        this._buildEvents();\r\n    },\r\n    _getEditables: function($editor)\r\n    {\r\n        return $editor.find('figcaption, td, th');\r\n    }\r\n});\r\n$R.add('class', 'editor.placeholder', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.element = app.element;\r\n\r\n        // build\r\n        this.build();\r\n    },\r\n    build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $editor = this.editor.getElement();\r\n\r\n        if (this.opts.placeholder !== false || $element.attr('placeholder'))\r\n        {\r\n            var text = (this.opts.placeholder !== false) ? this.opts.placeholder : $element.attr('placeholder');\r\n            $editor.attr('placeholder', text);\r\n            this.toggle();\r\n        }\r\n    },\r\n    toggle: function()\r\n    {\r\n        return (this.editor.isEmpty(true)) ? this.show() : this.hide();\r\n    },\r\n    show: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.addClass('redactor-placeholder');\r\n    },\r\n    hide: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.removeClass('redactor-placeholder');\r\n    }\r\n});\r\n$R.add('class', 'editor.events', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.$doc = app.$doc;\r\n        this.uuid = app.uuid;\r\n        this.source = app.source;\r\n        this.editor = app.editor;\r\n        this.cleaner = app.cleaner;\r\n        this.container = app.container;\r\n        this.insertion = app.insertion;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n        this.component = app.component;\r\n\r\n        // local\r\n        this.blurNamespace = '.redactor-blur.' + this.uuid;\r\n        this.eventsList = ['paste', 'click', 'contextmenu', 'keydown', 'keyup', 'mouseup', 'touchstart',\r\n                           'cut', 'copy', 'dragenter', 'dragstart', 'drop', 'dragover', 'dragleave'];\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    destroy: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.off('.redactor-focus');\r\n        this.$doc.off('keyup' + this.blurNamespace + ' mousedown' + this.blurNamespace);\r\n\r\n        // all events\r\n        this._loop('off');\r\n    },\r\n    focus: function(e)\r\n    {\r\n        var $container = this.container.getElement();\r\n\r\n        if (this.editor.isPasting() || $container.hasClass('redactor-focus')) return;\r\n\r\n        $container.addClass('redactor-focus');\r\n        $container.removeClass('redactor-blur');\r\n\r\n        this.app.broadcast('observe', e);\r\n        this.app.broadcast('focus', e);\r\n\r\n        this.isFocused = true;\r\n        this.isBlured = false;\r\n    },\r\n    blur: function(e)\r\n    {\r\n        var $container = this.container.getElement();\r\n        var $target = $R.dom(e.target);\r\n        var targets = ['.redactor-in-' + this.uuid,  '.redactor-toolbar', '.redactor-dropdown',\r\n        '.redactor-context-toolbar', '.redactor-modal-box', '#redactor-image-resizer'];\r\n\r\n        this.app.broadcast('originalblur', e);\r\n        if (this.app.stopBlur) return;\r\n\r\n        if (!this.app.isStarted() || this.editor.isPasting()) return;\r\n        if ($target.closest(targets.join(',')).length !== 0) return;\r\n\r\n        if (!this.isBlured && !$container.hasClass('redactor-blur'))\r\n        {\r\n            $container.removeClass('redactor-focus');\r\n            $container.addClass('redactor-blur');\r\n            this.app.broadcast('blur', e);\r\n\r\n            this.isFocused = false;\r\n            this.isBlured = true;\r\n        }\r\n    },\r\n    cut: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        this.app.broadcast('state', e);\r\n\r\n        if (this.component.isNonEditable(current))\r\n        {\r\n            this._passSelectionToClipboard(e, data, true);\r\n            e.preventDefault();\r\n        }\r\n    },\r\n    copy: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        this.app.broadcast('state', e);\r\n\r\n        if (this.component.isNonEditable(current))\r\n        {\r\n            this._passSelectionToClipboard(e, data, false);\r\n            e.preventDefault();\r\n        }\r\n    },\r\n    drop: function(e)\r\n    {\r\n        e = e.originalEvent || e;\r\n        e.stopPropagation();\r\n        this._removeOverClass();\r\n\r\n        if (this.opts.dragUpload === false)\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.app.isDragComponentInside())\r\n        {\r\n            var $dragComponent = $R.dom(this.app.getDragComponentInside());\r\n            var $component = $dragComponent.clone(true);\r\n            this.insertion.insertToPoint(e, $component);\r\n\r\n            $dragComponent.remove();\r\n\r\n            this.app.setDragComponentInside(false);\r\n            this.app.broadcast('state', e);\r\n            this.app.broadcast('drop', e);\r\n            this.app.broadcast('image.observe', e);\r\n\r\n            e.preventDefault();\r\n\r\n            return;\r\n        }\r\n        else if (this.app.isDragInside() && this.opts.input)\r\n        {\r\n            this.insertion.insertPoint(e);\r\n\r\n            var dt = e.dataTransfer;\r\n            var html = dt.getData('text/html');\r\n\r\n            // clear selected\r\n            var range = this.selection.getRange();\r\n            if (range)\r\n            {\r\n                var blocks = this.selection.getBlocks();\r\n                range.deleteContents();\r\n\r\n                // remove empty blocks\r\n                for (var i = 0; i < blocks.length; i++)\r\n                {\r\n                    if (blocks[i].innerHTML === '') $R.dom(blocks[i]).remove();\r\n                }\r\n            }\r\n\r\n            // paste\r\n            $R.create('input.paste', this.app, e, true, html, true);\r\n\r\n            this.app.broadcast('state', e);\r\n            this.app.broadcast('drop', e);\r\n\r\n            this.app.setDragInside(false);\r\n            e.preventDefault();\r\n\r\n            return;\r\n        }\r\n\r\n        this.app.broadcast('state', e);\r\n        this.app.broadcast('paste', e, e.dataTransfer);\r\n        this.app.broadcast('drop', e);\r\n\r\n    },\r\n    dragenter: function(e)\r\n    {\r\n        e.preventDefault();\r\n    },\r\n    dragstart: function(e)\r\n    {\r\n        this.app.setDragComponentInside(false);\r\n        this.app.setDragInside(false);\r\n\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isComponent() && !data.isComponentEditable() && !data.isFigcaption())\r\n        {\r\n            this.app.setDragComponentInside(data.getComponent());\r\n        }\r\n        else if (this.selection.is() && !this.selection.isCollapsed())\r\n        {\r\n            // drag starts inside editor\r\n            this.app.setDragInside(true);\r\n            this._setDragData(e);\r\n        }\r\n\r\n        this.app.broadcast('dragstart', e);\r\n    },\r\n    dragover: function(e)\r\n    {\r\n        this.app.broadcast('dragover', e);\r\n    },\r\n    dragleave: function(e)\r\n    {\r\n        this.app.broadcast('dragleave', e);\r\n    },\r\n    paste: function(e)\r\n    {\r\n        this.app.broadcast('paste', e);\r\n    },\r\n    contextmenu: function(e)\r\n    {\r\n        // chrome crashes fix\r\n        //this.editor.disableNonEditables();\r\n\r\n        //setTimeout(function()\r\n        //{\r\n          //  this.editor.enableNonEditables();\r\n           // this.app.broadcast('contextmenu', e);\r\n\r\n        //}.bind(this), 0);\r\n    },\r\n    click: function(e)\r\n    {\r\n        // triple click selection\r\n        if (e.detail === 3)\r\n        {\r\n            e.preventDefault();\r\n\r\n            var block = this.selection.getBlock();\r\n            if (block) {\r\n                var range = document.createRange();\r\n                range.selectNodeContents(block);\r\n                this.selection.setRange(range)\r\n            }\r\n        }\r\n\r\n        // observe bottom click & start click & outside click\r\n        var $target = $R.dom(e.target);\r\n        if ($target.hasClass('redactor-in'))\r\n        {\r\n            var top = $target.offset().top;\r\n            var pad = parseFloat($target.css('padding-bottom'));\r\n            var height = $target.height();\r\n            var posHeight = top + height - pad*2;\r\n\r\n            if (posHeight < e.pageY)\r\n            {\r\n                this.app.broadcast('bottomclick', e);\r\n            }\r\n            else if ($target.hasClass('redactor-placeholder')) {\r\n                this.editor.startFocus(this.editor);\r\n            }\r\n        }\r\n\r\n        this.app.broadcast('state', e);\r\n        this.app.broadcast('click', e);\r\n    },\r\n    keydown: function(e)\r\n    {\r\n        this.app.broadcast('state', e);\r\n        var stop = this.app.broadcast('keydown', e);\r\n        if (stop === false)\r\n        {\r\n            return e.preventDefault();\r\n        }\r\n    },\r\n    keyup: function(e)\r\n    {\r\n        this.app.broadcast('keyup', e);\r\n    },\r\n    mouseup: function(e)\r\n    {\r\n        this.app.broadcast('observe', e);\r\n        this.app.broadcast('state', e);\r\n    },\r\n    touchstart: function(e)\r\n    {\r\n        this.app.broadcast('observe', e);\r\n        this.app.broadcast('state', e);\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.on('focus.redactor-focus click.redactor-focus', this.focus.bind(this));\r\n        this.$doc.on('keyup' + this.blurNamespace + ' mousedown' + this.blurNamespace, this.blur.bind(this));\r\n\r\n        // all events\r\n        this._loop('on');\r\n    },\r\n    _removeOverClass: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.removeClass('over');\r\n    },\r\n    _loop: function(func)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        for (var i = 0; i < this.eventsList.length; i++)\r\n        {\r\n            var event = this.eventsList[i] + '.redactor-events';\r\n            var method = this.eventsList[i];\r\n\r\n            $editor[func](event, this[method].bind(this));\r\n        }\r\n    },\r\n    _passAllToClipboard: function(e)\r\n    {\r\n        var clipboard = e.clipboardData;\r\n        var content = this.source.getCode();\r\n\r\n        clipboard.setData('text/html', content);\r\n        clipboard.setData('text/plain', content.toString().replace(/\\n$/, \"\"));\r\n    },\r\n    _passSelectionToClipboard: function(e, data, remove)\r\n    {\r\n        var clipboard = e.clipboardData;\r\n        var node = data.getComponent();\r\n        var $node = $R.dom(node);\r\n        var $cloned = $node.clone();\r\n\r\n        // clean\r\n        $cloned.find('.redactor-component-caret').remove();\r\n        $cloned.removeClass('redactor-component-active');\r\n        $cloned.removeAttr('contenteditable');\r\n        $cloned.removeAttr('tabindex');\r\n\r\n        // html\r\n        var content = $cloned.get().outerHTML;\r\n\r\n        if (remove) this.component.remove(node);\r\n\r\n        clipboard.setData('text/html', content);\r\n        clipboard.setData('text/plain', content.toString().replace(/\\n$/, \"\"));\r\n    },\r\n    _setDragData: function(e)\r\n    {\r\n        e = e.originalEvent || e;\r\n\r\n        var dt = e.dataTransfer;\r\n        dt.effectAllowed = 'move';\r\n        dt.setData('text/Html', this.selection.getHtml());\r\n    }\r\n});\r\n$R.add('module', 'container', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.element = app.element;\r\n        this.container = app.container;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildAccesibility();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $container.after($element);\r\n        $container.remove();\r\n        $element.show();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $container.addClass('redactor-box');\r\n        $container.attr('dir', this.opts.direction);\r\n\r\n        if (this.element.isType('inline')) $container.addClass('redactor-inline');\r\n\r\n        $element.after($container);\r\n        $container.append($element);\r\n    },\r\n    _buildAccesibility: function()\r\n    {\r\n        var $container = this.container.getElement();\r\n        var $label = $R.dom('<span />');\r\n\r\n        $label.addClass('redactor-voice-label');\r\n        $label.attr({ 'id': 'redactor-voice-' + this.uuid, 'aria-hidden': false });\r\n        $label.html(this.lang.get('accessibility-help-label'));\r\n\r\n        $container.prepend($label);\r\n    }\r\n});\r\n$R.add('module', 'source', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.element = app.element;\r\n        this.source = app.source;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.cleaner = app.cleaner;\r\n        this.component = app.component;\r\n        this.container = app.container;\r\n        this.autoparser = app.autoparser;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.syncedHtml = '';\r\n    },\r\n    // messages\r\n    onstartcode: function()\r\n    {\r\n        var sourceContent = this.source.getStartedContent();\r\n        var $editor = this.editor.getElement();\r\n        var $source = this.source.getElement();\r\n\r\n        // autoparse\r\n        if (this.opts.autoparse && this.opts.autoparseStart)\r\n        {\r\n            sourceContent = this.autoparser.parse(sourceContent);\r\n        }\r\n\r\n        // started content\r\n        var startContent = this.cleaner.input(sourceContent, true, true);\r\n        var syncContent = this.cleaner.output(startContent);\r\n\r\n        // set content\r\n        $editor.html(startContent);\r\n        $source.val(syncContent);\r\n\r\n        this.syncedHtml = syncContent;\r\n        this.app.broadcast('placeholder.build');\r\n        this.app.broadcast('autoparseobserve');\r\n\r\n        // widget's scripts\r\n        this.component.executeScripts();\r\n    },\r\n    onstartcodeshow: function()\r\n    {\r\n        this.show();\r\n    },\r\n    ontrytosync: function()\r\n    {\r\n        this.sync();\r\n    },\r\n    onhardsync: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var html = $editor.html();\r\n\r\n        html = this.app.broadcast('syncBefore', html);\r\n        html = this.cleaner.output(html);\r\n\r\n        this._syncing(html);\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildClasses();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $source = this.source.getElement();\r\n\r\n        $element.removeClass('redactor-source redactor-source-open');\r\n        $source.off('input.redactor-source');\r\n        $source.removeAttr('data-gramm_editor');\r\n\r\n        if ($source.get().classList.length === 0) $source.removeAttr('class');\r\n        if (!this.source.isNameGenerated()) $element.removeAttr('name');\r\n        if (!this.element.isType('textarea')) $source.remove();\r\n\r\n    },\r\n    getCode: function()\r\n    {\r\n        return this.source.getCode();\r\n    },\r\n\r\n    // public\r\n    toggle: function()\r\n    {\r\n        if (!this.opts.source) return;\r\n\r\n        var $source = this.source.getElement();\r\n\r\n        return ($source.hasClass('redactor-source-open')) ? this.hide() : this.show();\r\n    },\r\n    show: function()\r\n    {\r\n        if (!this.opts.source) return;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var $source = this.source.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        var html = $source.val();\r\n\r\n        if (this.app.isStarted()) html = this.app.broadcast('source.open', html);\r\n\r\n        // get height\r\n        var editorHeight = $editor.height();\r\n\r\n        $editor.hide();\r\n        $source.height(editorHeight);\r\n        $source.val(html.trim());\r\n        $source.show();\r\n        $source.addClass('redactor-source-open');\r\n        $source.on('input.redactor-source-events', this._onChangedSource.bind(this));\r\n        $source.on('keydown.redactor-source-events', this._onTabKey.bind(this));\r\n        $source.on('focus.redactor-source-events', this._onFocus.bind(this));\r\n\r\n        if (this.opts.source.hasOwnProperty('codemirror')) {\r\n            var opts = (typeof this.opts.source.codemirror === 'object') ? this.opts.source.codemirror : {};\r\n            var codemirrorSrc = (typeof this.opts.source.codemirrorSrc !== 'undefined') ? this.opts.source.codemirrorSrc : CodeMirror;\r\n            this.codemirror = codemirrorSrc.fromTextArea($source.get(), opts);\r\n            this.codemirror.setSize(null, editorHeight);\r\n            this.codemirror.on('change', function(cm, changeObj){ cm.save() });\r\n            this.codemirror.on('change', this._onChangedSource.bind(this));\r\n        }\r\n        else {\r\n            $container.addClass('redactor-source-view');\r\n        }\r\n\r\n        // buttons\r\n        setTimeout(function()\r\n        {\r\n            this._disableButtons();\r\n            this._setActiveSourceButton();\r\n\r\n        }.bind(this), 100);\r\n\r\n        if (this.app.isStarted()) this.app.broadcast('source.opened');\r\n    },\r\n    hide: function()\r\n    {\r\n        if (!this.opts.source) return;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var $source = this.source.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        var html = $source.val();\r\n        if (this.opts.source.hasOwnProperty('codemirror')) {\r\n            html = this.codemirror.getValue();\r\n            this.codemirror.toTextArea();\r\n        }\r\n\r\n\r\n        // clean\r\n        html = this.cleaner.input(html, true);\r\n        html = (this.utils.isEmptyHtml(html)) ? this.opts.emptyHtml : html;\r\n        html = this.app.broadcast('source.close', html);\r\n\r\n        // buttons\r\n        this._enableButtons();\r\n        this._setInactiveSourceButton();\r\n\r\n        $source.hide();\r\n        $source.removeClass('redactor-source-open');\r\n        $source.off('.redactor-source-events');\r\n        $editor.show();\r\n        $editor.html(html);\r\n\r\n        $container.removeClass('redactor-source-view');\r\n\r\n        setTimeout(function()\r\n        {\r\n            this.editor.startFocus();\r\n\r\n            // widget's scripts\r\n            this.component.executeScripts();\r\n\r\n        }.bind(this), 0);\r\n\r\n        this.app.broadcast('source.closed');\r\n    },\r\n    sync: function()\r\n    {\r\n        var self = this;\r\n        var $editor = this.editor.getElement();\r\n        var html = $editor.html();\r\n\r\n        html = this.app.broadcast('syncBefore', html);\r\n        html = this.cleaner.output(html);\r\n\r\n        if (this._isSync(html))\r\n        {\r\n            if (this.timeout) clearTimeout(this.timeout);\r\n            this.timeout = setTimeout(function() { self._syncing(html); }, 200);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n        var $element = this.element.getElement();\r\n\r\n        $source.hide();\r\n\r\n        if (!this.opts.grammarly)\r\n        {\r\n            $source.attr('data-gramm_editor', false);\r\n        }\r\n\r\n        if (!this.element.isType('textarea'))\r\n        {\r\n            $element.after($source);\r\n        }\r\n    },\r\n    _buildClasses: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n\r\n        $source.addClass('redactor-source');\r\n    },\r\n    _syncing: function(html)\r\n    {\r\n        html = this.app.broadcast('syncing', html);\r\n\r\n        var $source = this.source.getElement();\r\n        $source.val(html);\r\n\r\n        this.app.broadcast('synced', html);\r\n        this.app.broadcast('changed', html);\r\n    },\r\n    _isSync: function(html)\r\n    {\r\n        if (this.syncedHtml !== html)\r\n        {\r\n            this.syncedHtml = html;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _onChangedSource: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n        var html = $source.val();\r\n\r\n        this.app.broadcast('changed', html);\r\n        this.app.broadcast('source.changed', html);\r\n    },\r\n    _onTabKey: function(e)\r\n    {\r\n        if (e.keyCode !== 9) return true;\r\n\r\n        e.preventDefault();\r\n\r\n        var $source = this.source.getElement();\r\n        var el = $source.get();\r\n        var start = el.selectionStart;\r\n\r\n        $source.val($source.val().substring(0, start) + \"    \" + $source.val().substring(el.selectionEnd));\r\n        el.selectionStart = el.selectionEnd = start + 4;\r\n    },\r\n    _onFocus: function()\r\n    {\r\n        this.app.broadcast('sourcefocus');\r\n    },\r\n    _disableButtons: function()\r\n    {\r\n        this.toolbar.disableButtons();\r\n    },\r\n    _enableButtons: function()\r\n    {\r\n        this.toolbar.enableButtons();\r\n    },\r\n    _setActiveSourceButton: function()\r\n    {\r\n        var $btn = this.toolbar.getButton('html');\r\n        $btn.enable();\r\n        $btn.setActive();\r\n    },\r\n    _setInactiveSourceButton: function()\r\n    {\r\n        var $btn = this.toolbar.getButton('html');\r\n        $btn.setInactive();\r\n    }\r\n});\r\n$R.add('module', 'observer', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.editor = app.editor;\r\n\r\n        // local\r\n        this.observerUnit = false;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        if (window.MutationObserver)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var el = $editor.get();\r\n            this.observerUnit = this._build(el);\r\n            this.observerUnit.observe(el, {\r\n                 attributes: true,\r\n                 subtree: true,\r\n                 childList: true,\r\n                 characterData: true,\r\n                 characterDataOldValue: true\r\n            });\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.observerUnit) this.observerUnit.disconnect();\r\n    },\r\n\r\n    // private\r\n    _build: function(el)\r\n    {\r\n        var self = this;\r\n        return new MutationObserver(function(mutations)\r\n        {\r\n            self._observe(mutations[mutations.length-1], el);\r\n        });\r\n    },\r\n    _observe: function(mutation, el)\r\n    {\r\n        if (this.app.isReadOnly() || (mutation.type === 'attributes' && mutation.target === el))\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.app.broadcast('observe');\r\n        this.app.broadcast('trytosync');\r\n        this.app.broadcast('placeholder.toggle');\r\n    }\r\n});\r\n$R.add('module', 'clicktoedit', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.source = app.source;\r\n        this.editor = app.editor;\r\n        this.container = app.container;\r\n        this.selection = app.selection;\r\n    },\r\n    // messages\r\n    onstartclicktoedit: function()\r\n    {\r\n        this.start();\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        if (!this.opts.clickToEdit) return;\r\n        if (!this._isEnabled()) this.stop();\r\n    },\r\n    ondisablereadonly: function()\r\n    {\r\n        if (!this.opts.clickToEdit) return;\r\n        if (!this._isEnabled()) this.start();\r\n    },\r\n    onstop: function()\r\n    {\r\n        this.stop();\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.buttonSave) this.buttonSave.stop();\r\n        if (this.buttonCancel) this.buttonCancel.stop();\r\n\r\n        this._destroy();\r\n        this.app.broadcast('disable');\r\n    },\r\n    enable: function()\r\n    {\r\n        this.app.broadcast('clickStart');\r\n\r\n        var isEmpty = this.editor.isEmpty();\r\n        if (!isEmpty) this.selection.saveMarkers();\r\n\r\n        this._setFocus();\r\n        this._destroy();\r\n        this.app.broadcast('enable');\r\n        this.buttonSave.enable();\r\n        this.buttonCancel.enable();\r\n\r\n        if (!isEmpty) this.selection.restoreMarkers();\r\n        if (isEmpty) this.editor.focus();\r\n\r\n        var $container = this.container.getElement();\r\n        $container.addClass('redactor-clicktoedit-enabled');\r\n\r\n        this.source.rebuildStartedContent();\r\n\r\n        this.app.broadcast('startcode');\r\n        this.app.broadcast('image.observe');\r\n    },\r\n    save: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n\r\n        var html = this.source.getCode();\r\n\r\n        this.app.broadcast('disable');\r\n        this.app.broadcast('clickSave', html);\r\n        this.app.broadcast('clickStop');\r\n        this.app.broadcast('toolbar.removeexternal');\r\n        this._build();\r\n    },\r\n    cancel: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n\r\n        var html = this.saved;\r\n        var $editor = this.editor.getElement();\r\n        $editor.html(html);\r\n\r\n        this.saved = '';\r\n\r\n        this.app.broadcast('disable');\r\n        this.app.broadcast('clickCancel', html);\r\n        this.app.broadcast('clickStop');\r\n        this.app.broadcast('toolbar.removeexternal');\r\n        this._build();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        // buttons\r\n        this.buttonSave = $R.create('clicktoedit.button', 'save', this.app, this);\r\n        this.buttonCancel = $R.create('clicktoedit.button', 'cancel', this.app, this);\r\n\r\n        this.buttonSave.stop();\r\n        this.buttonCancel.stop();\r\n\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.on('click.redactor-click-to-edit mouseup.redactor-click-to-edit', this.enable.bind(this));\r\n        $container.addClass('redactor-over');\r\n        $container.removeClass('redactor-clicktoedit-enabled');\r\n    },\r\n    _isEnabled: function()\r\n    {\r\n        return this.container.getElement().hasClass('redactor-clicktoedit-enabled');\r\n    },\r\n    _destroy: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.off('.redactor-click-to-edit');\r\n        $container.removeClass('redactor-over redactor-clicktoedit-enabled');\r\n    },\r\n    _setFocus: function()\r\n    {\r\n        this.saved = this.source.getCode();\r\n\r\n        this.buttonSave.start();\r\n        this.buttonCancel.start();\r\n    }\r\n});\r\n$R.add('class', 'clicktoedit.button', {\r\n    init: function(type, app, context)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.toolbar = app.toolbar;\r\n        this.context = context;\r\n\r\n        // local\r\n        this.type = type;\r\n        this.name = (type === 'save') ? 'clickToSave' : 'clickToCancel';\r\n        this.objected = false;\r\n        this.enabled = false;\r\n        this.namespace = '.redactor-click-to-edit';\r\n\r\n        // build\r\n        this._build();\r\n    },\r\n    enable: function()\r\n    {\r\n        if (!this.objected) return;\r\n\r\n        var data = this.opts[this.name];\r\n        data.api = 'module.clicktoedit.' + this.type;\r\n\r\n        this.toolbar.addButton(this.type, data);\r\n        this.enabled = true;\r\n    },\r\n    start: function()\r\n    {\r\n        if (this.objected) return;\r\n\r\n        this.$button.off(this.namespace);\r\n        this.$button.show();\r\n        this.$button.on('click' + this.namespace, this.context[this.type].bind(this.context));\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.objected || !this.enabled) return;\r\n\r\n        this.$button.hide();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.objected = (typeof this.opts[this.name] === 'object');\r\n\r\n        if (!this.objected)\r\n        {\r\n            this.$button = $R.dom(this.opts[this.name]);\r\n            this.enabled = true;\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'statusbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.element = app.element;\r\n        this.statusbar = app.statusbar;\r\n        this.container = app.container;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        if (!this.element.isType('inline'))\r\n        {\r\n            var $statusbar = this.statusbar.getElement();\r\n            var $container = this.container.getElement();\r\n\r\n            $statusbar.addClass('redactor-statusbar');\r\n            $container.append($statusbar);\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'contextbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.uuid = app.uuid;\r\n        this.$win = app.$win;\r\n        this.$doc = app.$doc;\r\n        this.$body = app.$body;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n\r\n        // local\r\n        this.$target = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$body;\r\n    },\r\n    // messages\r\n    onstop: function() {\r\n        this.stop();\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        this.stop();\r\n    },\r\n    ondisablereadonly: function()\r\n    {\r\n        this.start();\r\n    },\r\n    oncontextbar: {\r\n        close: function()\r\n        {\r\n            this.close();\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        if (this.opts.toolbarContext)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n\r\n            this._build();\r\n            $editor.on('click.redactor-context mouseup.redactor-context', this.open.bind(this));\r\n\r\n            if (this.opts.scrollTarget)\r\n            {\r\n                $R.dom(this.opts.scrollTarget).on('scroll.redactor-context', this.close.bind(this));\r\n            }\r\n            else if (this.opts.maxHeight !== false)\r\n            {\r\n                $editor.on('scroll.redactor-context', this.close.bind(this));\r\n            }\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.off('.redactor-context');\r\n\r\n        this.$doc.off('.redactor-context');\r\n        this.$win.off('.redactor-context');\r\n\r\n        if (this.$contextbar) this.$contextbar.remove();\r\n        if (this.opts.scrollTarget)\r\n        {\r\n            $R.dom(this.opts.scrollTarget).off('.redactor-context');\r\n        }\r\n    },\r\n    is: function()\r\n    {\r\n        return (this.$contextbar && this.$contextbar.hasClass('open'));\r\n    },\r\n    set: function(e, node, buttons, position)\r\n    {\r\n        this.$contextbar.html('');\r\n        this.$el = $R.dom(node);\r\n\r\n        // buttons\r\n        for (var key in buttons)\r\n        {\r\n            var $btn = $R.create('contextbar.button', this.app, buttons[key]);\r\n            if ($btn.html() !== '')\r\n            {\r\n                this.$contextbar.append($btn);\r\n            }\r\n        }\r\n\r\n        // show\r\n        var pos = this._buildPosition(e, this.$el, position);\r\n\r\n        this.$contextbar.css(pos);\r\n        this.$contextbar.show();\r\n        this.$contextbar.addClass('open');\r\n        this.$doc.on('click.redactor-context mouseup.redactor-context', this.close.bind(this));\r\n        this.$win.on('resize.redactor-context', this.close.bind(this));\r\n    },\r\n    open: function(e)\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            this.app.broadcast('contextbar', e, this);\r\n        }.bind(this), 0);\r\n    },\r\n    close: function(e)\r\n    {\r\n        if (!this.$contextbar) return;\r\n        if (e)\r\n        {\r\n            var $target = $R.dom(e.target);\r\n            if (this.$el && $target.closest(this.$el).length !== 0)\r\n            {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.$contextbar.hide();\r\n        this.$contextbar.removeClass('open');\r\n        this.$doc.off('.redactor.context');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.$contextbar = $R.dom('<div>');\r\n        this.$contextbar.attr('id', 'redactor-context-toolbar-' + this.uuid);\r\n        this.$contextbar.attr('dir', this.opts.direction);\r\n        this.$contextbar.addClass('redactor-context-toolbar');\r\n        this.$contextbar.hide();\r\n\r\n        this.$target.append(this.$contextbar);\r\n    },\r\n    _buildPosition: function(e, $el, position)\r\n    {\r\n        var top, left;\r\n        var isTarget = this.toolbar.isTarget();\r\n        var offset = (isTarget) ? $el.position() : $el.offset();\r\n\r\n        var width = $el.width();\r\n        var height = $el.height();\r\n\r\n        var barWidth = this.$contextbar.width();\r\n        var barHeight = this.$contextbar.height();\r\n        var docScrollTop = (isTarget) ? (this.$target.scrollTop() + this.$doc.scrollTop()) : this.$doc.scrollTop();\r\n\r\n        var targetOffset = this.$target.offset();\r\n        var leftFix = (isTarget) ? targetOffset.left : 0;\r\n        var topFix = (isTarget) ? targetOffset.top : 0;\r\n\r\n        if (!position)\r\n        {\r\n            top = (e.clientY + docScrollTop - barHeight);\r\n            left = (e.clientX - barWidth/2);\r\n        }\r\n        else if (position === 'top')\r\n        {\r\n            top = (offset.top - barHeight);\r\n            left = (offset.left + width/2 - barWidth/2);\r\n        }\r\n        else if (position === 'bottom')\r\n        {\r\n            top = (offset.top + height);\r\n            left = (offset.left + width/2 - barWidth/2);\r\n        }\r\n\r\n        if (left < 0) left = 0;\r\n\r\n        return { top: (top - topFix) + 'px', left: (left - leftFix) + 'px' };\r\n    }\r\n});\r\n$R.add('class', 'contextbar.button', {\r\n    mixins: ['dom'],\r\n    init: function(app, obj)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.obj = obj;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.parse('<a>');\r\n\r\n        if (typeof this.obj.title !== 'string')\r\n        {\r\n            var url = this.obj.title.attr('href');\r\n            this.attr('href', url);\r\n\r\n            if (url.search(/^#/) === -1) {\r\n                this.attr('target', '_blank');\r\n            }\r\n\r\n            this.text(this.obj.html || url);\r\n        }\r\n        else\r\n        {\r\n            this.attr('href', '#');\r\n\r\n            this._buildTitle();\r\n            this._buildMessage();\r\n        }\r\n    },\r\n    _buildTitle: function()\r\n    {\r\n        this.html(this.obj.title);\r\n    },\r\n    _buildMessage: function()\r\n    {\r\n        if (typeof this.obj.message !== 'undefined' || typeof this.obj.api !== 'undefined')\r\n        {\r\n            this.on('click', this._toggle.bind(this));\r\n        }\r\n    },\r\n    _toggle: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (this.obj.message)\r\n        {\r\n            this.app.broadcast(this.obj.message, this.obj.args);\r\n        }\r\n        else if (this.obj.api)\r\n        {\r\n            this.app.api(this.obj.api, this.obj.args);\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'toolbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n\r\n        // local\r\n        this.buttons = [];\r\n        this.toolbarModule = false;\r\n    },\r\n    // messages\r\n    onsource: {\r\n        open: function()\r\n        {\r\n            if (!this.toolbar.isAir() && this.toolbar.isFixed())\r\n            {\r\n                this.toolbarModule.resetPosition();\r\n            }\r\n        },\r\n        opened: function()\r\n        {\r\n            if (this.toolbar.isAir() && this.toolbarModule)\r\n            {\r\n                this.toolbarModule.createSourceHelper();\r\n            }\r\n\r\n            // hide tooltips\r\n            setTimeout(function()\r\n            {\r\n                $R.dom('.re-button-tooltip-' + this.uuid).remove();\r\n            }.bind(this), 100)\r\n\r\n        },\r\n        close: function()\r\n        {\r\n            if (this.toolbar.isAir() && this.toolbarModule)\r\n            {\r\n                this.toolbarModule.destroySourceHelper();\r\n            }\r\n        },\r\n        closed: function()\r\n        {\r\n            if (this.toolbar.is() && this.opts.air)\r\n            {\r\n                this.toolbarModule.openSelected();\r\n            }\r\n        }\r\n    },\r\n    ontoolbar: {\r\n        removeexternal: function() {\r\n            if (!this.opts.air && this.opts.toolbarExternal && this.opts.clickToEdit) {\r\n                $R.dom(this.opts.toolbarExternal).html('');\r\n            }\r\n        }\r\n    },\r\n    onobserve: function()\r\n    {\r\n        if (this.toolbar.is())\r\n        {\r\n            this.toolbar.observe();\r\n        }\r\n    },\r\n    onfocus: function()\r\n    {\r\n        this._setExternalOnFocus();\r\n    },\r\n    onsourcefocus: function()\r\n    {\r\n        this._setExternalOnFocus();\r\n    },\r\n    onempty: function()\r\n    {\r\n        if (this.toolbar.isFixed())\r\n        {\r\n            this.toolbarModule.resetPosition();\r\n        }\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        if (this.toolbar.isAir())\r\n        {\r\n            this.toolbarModule.close();\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        if (this.toolbar.is())\r\n        {\r\n            this._buildButtons();\r\n            this._initToolbar();\r\n            this._initButtons();\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.toolbarModule)\r\n        {\r\n            this.toolbarModule.stop();\r\n        }\r\n\r\n        // stop dropdowns & tooltips\r\n        $R.dom('.re-button-tooltip-' + this.uuid).remove();\r\n        $R.dom('.redactor-dropdown-' + this.uuid).remove();\r\n    },\r\n\r\n    // private\r\n    _buildButtons: function()\r\n    {\r\n        this.buttons = this.opts.buttons.concat();\r\n\r\n        this._buildImageButton();\r\n        this._buildFileButton();\r\n        this._buildSourceButton();\r\n        this._buildAdditionalButtons();\r\n        this._buildHiddenButtons();\r\n    },\r\n    _buildImageButton: function()\r\n    {\r\n        if (!this.opts.imageUpload && !this.opts.imageManagerJson) this.utils.removeFromArrayByValue(this.buttons, 'image');\r\n    },\r\n    _buildFileButton: function()\r\n    {\r\n        if (!this.opts.fileUpload) this.utils.removeFromArrayByValue(this.buttons, 'file');\r\n    },\r\n    _buildSourceButton: function()\r\n    {\r\n        if (!this.opts.source) this.utils.removeFromArrayByValue(this.buttons, 'html');\r\n    },\r\n    _buildAdditionalButtons: function()\r\n    {\r\n        // end\r\n        if (this.opts.buttonsAdd.length !== 0)\r\n        {\r\n            this.opts.buttonsAdd = this._removeExistButtons(this.opts.buttonsAdd);\r\n            this.buttons = this.buttons.concat(this.opts.buttonsAdd);\r\n        }\r\n\r\n        // beginning\r\n        if (this.opts.buttonsAddFirst.length !== 0)\r\n        {\r\n            this.opts.buttonsAddFirst = this._removeExistButtons(this.opts.buttonsAddFirst);\r\n            this.buttons.unshift(this.opts.buttonsAddFirst);\r\n        }\r\n\r\n        var index, btns;\r\n\r\n        // after\r\n        if (this.opts.buttonsAddAfter !== false)\r\n        {\r\n            index = this.buttons.indexOf(this.opts.buttonsAddAfter.after) + 1;\r\n            btns = this.opts.buttonsAddAfter.buttons;\r\n            for (var i = 0; i < btns.length; i++)\r\n            {\r\n                this.buttons.splice(index+i, 0, btns[i]);\r\n            }\r\n        }\r\n\r\n        // before\r\n        if (this.opts.buttonsAddBefore !== false)\r\n        {\r\n            index = this.buttons.indexOf(this.opts.buttonsAddBefore.before)+1;\r\n            btns = this.opts.buttonsAddBefore.buttons;\r\n            for (var i = 0; i < btns.length; i++)\r\n            {\r\n                this.buttons.splice(index-(1-i), 0, btns[i]);\r\n            }\r\n        }\r\n    },\r\n    _buildHiddenButtons: function()\r\n    {\r\n        if (this.opts.buttonsHide.length !== 0) {\r\n            var buttons = this.opts.buttonsHide;\r\n            for (var i = 0; i < buttons.length; i++) {\r\n                this.utils.removeFromArrayByValue(this.buttons, buttons[i]);\r\n            }\r\n        }\r\n\r\n        if (this.detector.isMobile() && this.opts.buttonsHideOnMobile.length !== 0) {\r\n            var buttons = this.opts.buttonsHideOnMobile;\r\n            for (var i = 0; i < buttons.length; i++) {\r\n                this.utils.removeFromArrayByValue(this.buttons, buttons[i]);\r\n            }\r\n        }\r\n    },\r\n    _removeExistButtons: function(buttons)\r\n    {\r\n        for (var i = 0; i < buttons.length; i++)\r\n        {\r\n            if (this.opts.buttons.indexOf(buttons[i]) !== -1)\r\n            {\r\n                this.utils.removeFromArrayByValue(buttons, buttons[i]);\r\n            }\r\n        }\r\n\r\n        return buttons;\r\n    },\r\n    _setExternalOnFocus: function()\r\n    {\r\n        if (!this.opts.air && this.opts.toolbarExternal)\r\n        {\r\n            this.toolbarModule.setExternal();\r\n        }\r\n    },\r\n    _initToolbar: function()\r\n    {\r\n        this.toolbarModule = (this.opts.air) ? $R.create('toolbar.air', this.app) : $R.create('toolbar.standard', this.app);\r\n    },\r\n    _initButtons: function()\r\n    {\r\n        this.toolbar.setButtons(this.buttons);\r\n\r\n        for (var i = 0; i < this.buttons.length; i++)\r\n        {\r\n            var name = this.buttons[i];\r\n            if ($R.buttons[name])\r\n            {\r\n                this.toolbar.addButton(name, $R.extend(true, {}, $R.buttons[name]), false, false, true);\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.air', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.animate = app.animate;\r\n        this.toolbar = app.toolbar;\r\n        this.container = app.container;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.clicks = 0;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // public\r\n    stop: function()\r\n    {\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        $wrapper.remove();\r\n\r\n        var $editor = this.editor.getElement();\r\n        $editor.off('.redactor-air-trigger-' + this.uuid);\r\n\r\n        this.$doc.off('.redactor-air-' + this.uuid);\r\n        this.$doc.off('.redactor-air-trigger-' + this.uuid);\r\n\r\n        this.toolbar.stopObservers();\r\n    },\r\n    createSourceHelper: function()\r\n    {\r\n        this.$airHelper = $R.dom('<span>');\r\n        this.$airHelper.addClass('redactor-air-helper');\r\n        this.$airHelper.html('<i class=\"re-icon-html\"></i>');\r\n        this.$airHelper.on('click', function(e)\r\n        {\r\n            e.preventDefault();\r\n            this.app.api('module.source.hide');\r\n\r\n        }.bind(this));\r\n\r\n        var $container = this.container.getElement();\r\n        $container.append(this.$airHelper);\r\n    },\r\n    destroySourceHelper: function()\r\n    {\r\n        if (this.$airHelper) this.$airHelper.remove();\r\n    },\r\n    openSelected: function()\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            if (this._isSelection()) this._open(false);\r\n\r\n        }.bind(this), 0);\r\n    },\r\n    close: function()\r\n    {\r\n        this.$doc.off('.redactor-air-' + this.uuid);\r\n\r\n        var $toolbar = this.toolbar.getElement();\r\n        $toolbar.removeClass('open');\r\n        $toolbar.hide();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.toolbar.create();\r\n\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $wrapper.addClass('redactor-toolbar-wrapper-air');\r\n        $toolbar.addClass('redactor-air');\r\n        //$toolbar.addClass('redactor-animate-hide');\r\n        $toolbar.hide();\r\n\r\n        $wrapper.append($toolbar);\r\n        $container.prepend($wrapper);\r\n\r\n        // open selected\r\n        this.openSelected();\r\n\r\n        // events\r\n        this.$doc.on('mouseup.redactor-air-trigger-' + this.uuid, this._open.bind(this));\r\n        $editor.on('keyup.redactor-air-trigger-' + this.uuid, this._openCmd.bind(this));\r\n    },\r\n    _isSelection: function()\r\n    {\r\n        return (this.selection.is() && !this.selection.isCollapsed());\r\n    },\r\n    _isOpened: function()\r\n    {\r\n        var $toolbar = this.toolbar.getElement();\r\n\r\n        return $toolbar.hasClass('open');\r\n    },\r\n    _open: function(e)\r\n    {\r\n        var target = (e) ? e.target : false;\r\n        var $el = (e) ? $R.dom(e.target) : false;\r\n        var dataTarget = this.inspector.parse(target);\r\n        var isComponent = (dataTarget.isComponent() && !dataTarget.isComponentType('table'));\r\n        var isFigcaption = (dataTarget.isFigcaption());\r\n        var isModalTarget = ($el && $el.closest('.redactor-modal').length !== 0);\r\n        var isButtonCall = (e && $el.closest('.re-button').length !== 0);\r\n        var isDropdownCall = (e && $el.closest('.redactor-dropdown').length !== 0);\r\n\r\n        if (isDropdownCall || isButtonCall || isModalTarget || isFigcaption || isComponent || this.toolbar.isContextBar() || !this._isSelection())\r\n        {\r\n            return;\r\n        }\r\n\r\n        var pos = this.selection.getPosition();\r\n\r\n        setTimeout(function()\r\n        {\r\n            if (this.app.isReadOnly()) return;\r\n            if (this._isSelection()) this._doOpen(pos);\r\n\r\n        }.bind(this), 1);\r\n\r\n    },\r\n    _openCmd: function()\r\n    {\r\n        if (this.selection.isAll())\r\n        {\r\n            var $toolbar = this.toolbar.getElement();\r\n            var pos = this.selection.getPosition();\r\n\r\n            pos.top = (pos.top < 20) ? 0 : pos.top - $toolbar.height();\r\n            pos.height = 0;\r\n\r\n            this._doOpen(pos);\r\n        }\r\n    },\r\n    _doOpen: function(pos)\r\n    {\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $container = this.container.getElement();\r\n        var containerOffset = $container.offset();\r\n        var leftFix = 0;\r\n        var winWidth = this.$win.width();\r\n        var toolbarWidth = $toolbar.width();\r\n\r\n        if (winWidth < (pos.left + toolbarWidth))\r\n        {\r\n            var selPos = this.selection.getPosition();\r\n            leftFix = toolbarWidth - selPos.width;\r\n        }\r\n\r\n        $wrapper.css({\r\n            left: (pos.left - containerOffset.left - leftFix) + 'px',\r\n            top: (pos.top - containerOffset.top + pos.height + this.$doc.scrollTop()) + 'px'\r\n        });\r\n\r\n        this.app.broadcast('airOpen');\r\n        $toolbar.addClass('open');\r\n        $toolbar.show();\r\n\r\n        this.$doc.on('click.redactor-air-' + this.uuid, this._close.bind(this));\r\n        this.$doc.on('keydown.redactor-air-' + this.uuid, this._close.bind(this));\r\n        this.app.broadcast('airOpened');\r\n    },\r\n    _close: function(e)\r\n    {\r\n        var $el = (e) ? $R.dom(e.target) : false;\r\n        var isDropdownCall = (e && $el.closest('[data-dropdown], .redactor-dropdown-not-close').length !== 0);\r\n        var isButtonCall = (!isDropdownCall && e && $el.closest('.re-button').length !== 0);\r\n\r\n        if (!isButtonCall && (isDropdownCall || !this._isOpened()))\r\n        {\r\n            return;\r\n        }\r\n\r\n        // close\r\n        this.app.broadcast('airClose');\r\n\r\n        this.close();\r\n        this.app.broadcast('airClosed');\r\n    }\r\n});\r\n$R.add('class', 'toolbar.fixed', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n        this.container = app.container;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // public\r\n    stop: function()\r\n    {\r\n        this.$fixedTarget.off('.redactor-toolbar-' + this.uuid);\r\n        this.$win.off('.redactor-toolbar-' + this.uuid);\r\n    },\r\n    reset: function()\r\n    {\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $wrapper = this.toolbar.getWrapper();\r\n\r\n        $wrapper.css('height', '');\r\n        $toolbar.removeClass('redactor-toolbar-fixed');\r\n        $toolbar.css({ position: '', top: '', left: '', width: '' });\r\n\r\n        var dropdown = this.toolbar.getDropdown();\r\n        if (dropdown) dropdown.updatePosition();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.$fixedTarget = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$win;\r\n        this._doFixed();\r\n\r\n        if (this.toolbar.isTarget())\r\n        {\r\n            this.$win.on('scroll.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n            this.$win.on('resize.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n        }\r\n\r\n        this.$fixedTarget.on('scroll.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n        this.$fixedTarget.on('resize.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n    },\r\n    _doFixed: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $wrapper = this.toolbar.getWrapper();\r\n\r\n        if (this.editor.isSourceMode())\r\n        {\r\n            return;\r\n        }\r\n\r\n        var $targets = $container.parents().filter(function(node)\r\n        {\r\n            return (getComputedStyle(node, null).display === 'none') ? node : false;\r\n        });\r\n\r\n        // has hidden parent\r\n        if ($targets.length !== 0) return;\r\n\r\n        var isHeight = ($editor.height() < 100);\r\n        var isEmpty = this.editor.isEmpty();\r\n\r\n        if (isHeight || isEmpty) {\r\n            this.reset();\r\n            return;\r\n        }\r\n\r\n        if (this.editor.isSourceMode()) {\r\n            return;\r\n        }\r\n\r\n        var toolbarHeight = $toolbar.height();\r\n        var toleranceEnd = 60;\r\n        var containerOffset = (this.toolbar.isTarget()) ? $container.position() : $container.offset();\r\n        var boxOffset = containerOffset.top;\r\n        var boxEnd = boxOffset + $container.height() - toleranceEnd;\r\n        var scrollOffset = this.$fixedTarget.scrollTop() + this.opts.toolbarFixedTopOffset;\r\n        var top = (!this.toolbar.isTarget()) ? 0 : this.$fixedTarget.offset().top - this.$win.scrollTop();\r\n        if (this.toolbar.isTarget() && this.$fixedTarget.css('position') === 'fixed') {\r\n            var bs = (this.$fixedTarget.hasClass('modal') && this.$fixedTarget.hasClass('fade'));\r\n            var bsFix = (bs) ? $container.closest('.modal-dialog').position().top : 0;\r\n            top = this.$fixedTarget.scrollTop() - bsFix;\r\n        }\r\n\r\n\r\n        if (scrollOffset > boxOffset && scrollOffset < boxEnd)\r\n        {\r\n            var position = (this.detector.isDesktop()) ? 'fixed' : 'absolute';\r\n            top = (this.detector.isDesktop()) ? top : (scrollOffset - boxOffset);\r\n\r\n            if (this.detector.isMobile())\r\n            {\r\n                if (this.fixedScrollTimeout)\r\n                {\r\n                    clearTimeout(this.fixedScrollTimeout);\r\n                }\r\n\r\n                $toolbar.hide();\r\n                this.fixedScrollTimeout = setTimeout(function()\r\n                {\r\n                    $toolbar.show();\r\n                }, 250);\r\n            }\r\n\r\n            $wrapper.height(toolbarHeight);\r\n            $toolbar.addClass('redactor-toolbar-fixed');\r\n\r\n            if ($container.hasClass('redactor-box-fullscreen'))\r\n            {\r\n                $toolbar.css({\r\n                    position: position,\r\n                    top: '0px',\r\n                    width: $container.width() + 'px'\r\n                });\r\n            }\r\n            else\r\n            {\r\n                $toolbar.css({\r\n                    position: position,\r\n                    top: (top + this.opts.toolbarFixedTopOffset) + 'px',\r\n                    width: $container.width() + 'px'\r\n                });\r\n            }\r\n\r\n            var dropdown = this.toolbar.getDropdown();\r\n            if (dropdown) dropdown.updatePosition();\r\n\r\n            this.app.broadcast('toolbar.fixed');\r\n        }\r\n        else\r\n        {\r\n            this.reset();\r\n            this.app.broadcast('toolbar.unfixed');\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.standard', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.uuid = app.uuid;\r\n        this.$body = app.$body;\r\n        this.toolbar = app.toolbar;\r\n        this.container = app.container;\r\n\r\n        // local\r\n        this.isExternalMultiple = false;\r\n        this.toolbarFixed = false;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // public\r\n    stop: function()\r\n    {\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        $wrapper.remove();\r\n\r\n        if (this.toolbarFixed) this.toolbarFixed.stop();\r\n        if (this.opts.toolbarExternal) this._findToolbars();\r\n\r\n        this.toolbar.stopObservers();\r\n        this.$body.find('.re-button-tooltip-' + this.uuid).remove();\r\n    },\r\n    setExternal: function()\r\n    {\r\n        this._findToolbars();\r\n        if (this.isExternalMultiple)\r\n        {\r\n            this.$toolbars.hide();\r\n            var $current = this.$external.find('.redactor-toolbar-external-' + this.uuid);\r\n            $current.show();\r\n        }\r\n    },\r\n    resetPosition: function()\r\n    {\r\n        if (this.toolbarFixed) this.toolbarFixed.reset();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this._build();\r\n\r\n        if (this.opts.toolbarExternal)\r\n        {\r\n            this._buildExternal();\r\n        }\r\n        else\r\n        {\r\n            this._buildFixed();\r\n\r\n            var $toolbar = this.toolbar.getElement();\r\n            $toolbar.show();\r\n        }\r\n    },\r\n    _build: function()\r\n    {\r\n        this.toolbar.create();\r\n\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        var $toolbar = this.toolbar.getElement();\r\n\r\n        $wrapper.addClass('redactor-toolbar-wrapper');\r\n        $toolbar.addClass('redactor-toolbar');\r\n        $toolbar.hide();\r\n        $wrapper.append($toolbar);\r\n\r\n        if (!this.opts.toolbarExternal)\r\n        {\r\n            var $container = this.container.getElement();\r\n            $container.prepend($wrapper);\r\n        }\r\n    },\r\n    _buildExternal: function()\r\n    {\r\n        this._initExternal();\r\n        this._findToolbars();\r\n\r\n        if (this.isExternalMultiple)\r\n        {\r\n            this._hideToolbarsExceptFirst();\r\n        }\r\n        else\r\n        {\r\n            var $toolbar = this.toolbar.getElement();\r\n            $toolbar.show();\r\n        }\r\n    },\r\n    _buildFixed: function()\r\n    {\r\n        if (this.opts.toolbarFixed)\r\n        {\r\n            this.toolbarFixed = $R.create('toolbar.fixed', this.app);\r\n        }\r\n    },\r\n    _initExternal: function()\r\n    {\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $wrapper = this.toolbar.getElement();\r\n\r\n        $toolbar.addClass('redactor-toolbar-external redactor-toolbar-external-' + this.uuid);\r\n\r\n        this.$external = $R.dom(this.opts.toolbarExternal);\r\n        this.$external.append($wrapper);\r\n\r\n    },\r\n    _findToolbars: function()\r\n    {\r\n        this.$toolbars = this.$external.find('.redactor-toolbar-external');\r\n        this.isExternalMultiple = (this.$toolbars.length > 1);\r\n    },\r\n    _hideToolbarsExceptFirst: function()\r\n    {\r\n        this.$toolbars.hide();\r\n        var $first = this.$toolbars.first();\r\n        $first.show();\r\n    }\r\n});\r\n$R.add('module', 'line', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.lang = app.lang;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n    },\r\n    // messages\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isComponentType('line'))\r\n        {\r\n            var node = data.getComponent();\r\n            var buttons = {\r\n                \"remove\": {\r\n                    title: this.lang.get('delete'),\r\n                    api: 'module.line.remove',\r\n                    args: node\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons, 'bottom');\r\n        }\r\n\r\n    },\r\n\r\n    // public\r\n    insert: function()\r\n    {\r\n        var line = this.component.create('line');\r\n        this.insertion.insertRaw(line);\r\n    },\r\n    remove: function(node)\r\n    {\r\n        this.component.remove(node);\r\n    }\r\n});\r\n$R.add('class', 'line.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        var wrapper, element;\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var node = $node.get();\r\n\r\n            if (node.tagName === 'HR') element = node;\r\n            else if (node.tagName === 'FIGURE')\r\n            {\r\n                wrapper = node;\r\n                element = $node.find('hr').get();\r\n            }\r\n        }\r\n\r\n        this._buildWrapper(wrapper);\r\n        this._buildElement(element);\r\n        this._initWrapper();\r\n    },\r\n    _buildElement: function(node)\r\n    {\r\n        if (node)\r\n        {\r\n            this.$element = $R.dom(node);\r\n        }\r\n        else\r\n        {\r\n            this.$element = $R.dom('<hr>');\r\n            this.append(this.$element);\r\n        }\r\n    },\r\n    _buildWrapper: function(node)\r\n    {\r\n        node = node || '<figure>';\r\n\r\n        this.parse(node);\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'line',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n$R.add('module', 'link', {\r\n    modals: {\r\n        'link':\r\n            '<form action=\"\"> \\\r\n                <div class=\"form-item\"> \\\r\n                    <label for=\"modal-link-url\">URL <span class=\"req\">*</span></label> \\\r\n                    <input type=\"text\" id=\"modal-link-url\" name=\"url\"> \\\r\n                </div> \\\r\n                <div class=\"form-item\"> \\\r\n                    <label for=\"modal-link-text\">## text ##</label> \\\r\n                    <input type=\"text\" id=\"modal-link-text\" name=\"text\"> \\\r\n                </div> \\\r\n                <div class=\"form-item form-item-title\"> \\\r\n                    <label for=\"modal-link-title\">## title ##</label> \\\r\n                    <input type=\"text\" id=\"modal-link-title\" name=\"title\"> \\\r\n                </div> \\\r\n                <div class=\"form-item form-item-target\"> \\\r\n                    <label class=\"checkbox-label\"> \\\r\n                        <div class=\"checkbox-label__text\" style=\"padding-left: 20px;\">## link-in-new-tab ##</div> \\\r\n                        <input type=\"checkbox\" class=\"checkbox\" name=\"target\"> \\\r\n                    </label> \\\r\n                </div> \\\r\n            </form>'\r\n    },\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.inline = app.inline;\r\n        this.editor = app.editor;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.isCurrentLink = false;\r\n        this.currentText = false;\r\n    },\r\n    // messages\r\n    onmodal: {\r\n        link: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setFormData($form, $modal);\r\n            },\r\n            opened: function($modal, $form)\r\n            {\r\n                this._setFormFocus($form);\r\n            },\r\n            update: function($modal, $form)\r\n            {\r\n                var data = $form.getData();\r\n                if (this._validateData($form, data))\r\n                {\r\n                    this._update(data);\r\n                }\r\n            },\r\n            insert: function($modal, $form)\r\n            {\r\n                var data = $form.getData();\r\n                if (this._validateData($form, data))\r\n                {\r\n                    this._insert(data);\r\n                }\r\n            },\r\n            unlink: function()\r\n            {\r\n                this._unlink();\r\n            }\r\n        }\r\n    },\r\n    onbutton: {\r\n        link: {\r\n            observe: function(button)\r\n            {\r\n                this._observeButton(button);\r\n            }\r\n        }\r\n    },\r\n    ondropdown: {\r\n        link: {\r\n            observe: function(dropdown)\r\n            {\r\n                this._observeUnlink(dropdown);\r\n                this._observeEdit(dropdown);\r\n            }\r\n        }\r\n    },\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        var current = this._getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        if (data.isLink() || data.isFile())\r\n        {\r\n            var node = (data.isFile()) ? data.getFile() : data.getLink();\r\n            var $el = $R.dom(node);\r\n\r\n            var $point = $R.dom('<a>');\r\n            var url = $el.attr('href');\r\n\r\n            $point.text(this._truncateText(url));\r\n            $point.attr('href', url);\r\n            $point.attr('target', '_blank');\r\n\r\n            var buttons = {\r\n                \"link\": {\r\n                    title: $point,\r\n                    html: this._truncateText(url)\r\n                },\r\n                \"edit\": {\r\n                    title: this.lang.get('edit'),\r\n                    api: 'module.link.open'\r\n                },\r\n                \"unlink\": {\r\n                    title: this.lang.get('unlink'),\r\n                    api: 'module.link.unlink'\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons, 'bottom');\r\n        }\r\n    },\r\n\r\n    // public\r\n    open: function()\r\n    {\r\n        this.$link = this._buildCurrent();\r\n        this.app.api('module.modal.build', this._getModalData());\r\n    },\r\n    insert: function(data)\r\n    {\r\n        this._insert(data);\r\n    },\r\n    update: function(data)\r\n    {\r\n        this._update(data);\r\n    },\r\n    unlink: function()\r\n    {\r\n        this._unlink();\r\n    },\r\n\r\n    // private\r\n    _observeButton: function(button)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        if (data.isPre() || data.isCode())\r\n        {\r\n            button.disable();\r\n        }\r\n        else\r\n        {\r\n            button.enable();\r\n        }\r\n    },\r\n    _observeUnlink: function(dropdown)\r\n    {\r\n        var $item = dropdown.getItem('unlink');\r\n        var links = this._getLinks();\r\n\r\n        if (links.length === 0) $item.disable();\r\n        else                    $item.enable();\r\n    },\r\n    _observeEdit: function(dropdown)\r\n    {\r\n        var current = this._getCurrent();\r\n        var $item = dropdown.getItem('link');\r\n\r\n        var data = this.inspector.parse(current);\r\n        var title = (data.isLink() || data.isFile()) ? this.lang.get('link-edit') : this.lang.get('link-insert');\r\n\r\n        $item.setTitle(title);\r\n    },\r\n    _unlink: function()\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        var elms = [];\r\n        var nodes = this._getLinks();\r\n\r\n        this.selection.save();\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $link = $R.create('link.component', this.app, nodes[i]);\r\n            elms.push(this.selection.getElement(nodes[i]));\r\n\r\n            $link.unwrap();\r\n\r\n            // callback\r\n            this.app.broadcast('link.deleted', $link);\r\n        }\r\n        this.selection.restore();\r\n\r\n        // normalize\r\n        for (var i = 0; i < elms.length; i++)\r\n        {\r\n            var el = (elms[i]) ? elms[i] : this.editor.getElement();\r\n            this.utils.normalizeTextNodes(el);\r\n        }\r\n\r\n        this._resetCurrent();\r\n    },\r\n    _update: function(data)\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        var nodes = this._getLinks();\r\n        this._setLinkData(nodes, data, 'updated');\r\n        this._resetCurrent();\r\n\r\n        // callback\r\n        this.app.broadcast('link.changed', nodes);\r\n    },\r\n    _insert: function(data)\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        var links = this._getLinks();\r\n\r\n        if (!this._insertSingle(links, data))\r\n        {\r\n            this._removeInSelection(links);\r\n            this._insertMultiple(data);\r\n        }\r\n\r\n        this._resetCurrent();\r\n    },\r\n    _removeInSelection: function(links)\r\n    {\r\n        this.selection.save();\r\n        for (var i = 0; i < links.length; i++)\r\n        {\r\n            var $link = $R.create('link.component', this.app, links[i]);\r\n            var $clonedLink = $link.clone();\r\n            $link.unwrap();\r\n\r\n            // callback\r\n            this.app.broadcast('link.deleted', $clonedLink);\r\n        }\r\n        this.selection.restore();\r\n    },\r\n    _insertMultiple: function(data)\r\n    {\r\n        var range = this.selection.getRange();\r\n        if (range && this._isCurrentTextChanged(data))\r\n        {\r\n            this._deleteContents(range);\r\n        }\r\n\r\n        var nodes = this.inline.format({ tag: 'a' });\r\n\r\n        this._setLinkData(nodes, data, 'inserted');\r\n    },\r\n    _insertSingle: function(links, data)\r\n    {\r\n        var inline = this.selection.getInline();\r\n        if (links.length === 1 && ((links[0].textContext === this.selection.getText()) || (inline && inline.tagName === 'A')))\r\n        {\r\n            var $link = $R.create('link.component', this.app, links[0]);\r\n\r\n            $link.setData(data);\r\n            this.caret.setAfter($link);\r\n\r\n            // callback\r\n            this.app.broadcast('link.inserted', $link);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _setLinkData: function(nodes, data, type)\r\n    {\r\n        data.text = (data.text.trim() === '') ? this._truncateText(data.url) : data.text;\r\n\r\n        var isTextChanged = (!this.currentText || this.currentText !== data.text);\r\n\r\n        this.selection.save();\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $link = $R.create('link.component', this.app, nodes[i]);\r\n            var linkData = {};\r\n\r\n            if (data.text && isTextChanged) linkData.text = data.text;\r\n            if (data.url) linkData.url = data.url;\r\n            if (data.title !== undefined) linkData.title = data.title;\r\n            if (data.target !== undefined) linkData.target = data.target;\r\n\r\n            $link.setData(linkData);\r\n\r\n            // callback\r\n            this.app.broadcast('link.' + type, $link);\r\n        }\r\n\r\n        setTimeout(this.selection.restore.bind(this.selection), 0);\r\n    },\r\n    _deleteContents: function(range)\r\n    {\r\n        var html = this.selection.getHtml();\r\n        var parsed = this.utils.parseHtml(html);\r\n        var first = parsed.nodes[0];\r\n\r\n        if (first && first.nodeType !== 3)\r\n        {\r\n            var tag = first.tagName.toLowerCase();\r\n            var container = document.createElement(tag);\r\n\r\n            this.insertion.insertNode(container, 'start');\r\n        }\r\n        else\r\n        {\r\n            range.deleteContents();\r\n        }\r\n    },\r\n    _getModalData: function()\r\n    {\r\n        var commands;\r\n        if (this._isLink())\r\n        {\r\n           commands = {\r\n                update: { title: this.lang.get('save') },\r\n                unlink: { title: this.lang.get('unlink'), type: 'danger' },\r\n                cancel: { title: this.lang.get('cancel') }\r\n            };\r\n        }\r\n        else\r\n        {\r\n            commands = {\r\n                insert: { title: this.lang.get('insert') },\r\n                cancel: { title: this.lang.get('cancel') }\r\n            };\r\n        }\r\n\r\n        var modalData = {\r\n            name: 'link',\r\n            title: (this._isLink()) ? this.lang.get('link-edit') : this.lang.get('link-insert'),\r\n            handle: (this._isLink()) ? 'update' : 'insert',\r\n            commands: commands\r\n        };\r\n\r\n\r\n        return modalData;\r\n    },\r\n    _isLink: function()\r\n    {\r\n        return this.currentLink;\r\n    },\r\n    _isCurrentTextChanged: function(data)\r\n    {\r\n        return (this.currentText && this.currentText !== data.text);\r\n    },\r\n    _buildCurrent: function()\r\n    {\r\n        var current = this._getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $link;\r\n\r\n        if (data.isLink() || data.isFile())\r\n        {\r\n            this.currentLink = true;\r\n\r\n            $link = (data.isFile()) ? data.getFile() : data.getLink();\r\n            $link = $R.create('link.component', this.app, $link);\r\n        }\r\n        else\r\n        {\r\n            this.currentLink = false;\r\n\r\n            $link = $R.create('link.component', this.app);\r\n            var linkData = {\r\n                text: this.selection.getText()\r\n            };\r\n\r\n            $link.setData(linkData);\r\n        }\r\n\r\n        return $link;\r\n    },\r\n    _getCurrent: function()\r\n    {\r\n        return this.selection.getInlinesAllSelected({ tags: ['a'] })[0];\r\n    },\r\n    _getLinks: function()\r\n    {\r\n        var links = this.selection.getInlines({ all: true, tags: ['a'] });\r\n        var arr = [];\r\n        for (var i = 0; i < links.length; i++)\r\n        {\r\n            var data = this.inspector.parse(links[i]);\r\n            if (data.isLink() || data.isFile())\r\n            {\r\n                arr.push(links[i]);\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    },\r\n    _resetCurrent: function()\r\n    {\r\n        this.isCurrentLink = false;\r\n        this.currentText = false;\r\n    },\r\n    _truncateText: function(url)\r\n    {\r\n        return (url && url.length > this.opts.linkSize) ? url.substring(0, this.opts.linkSize) + '...' : url;\r\n    },\r\n    _validateData: function($form, data)\r\n    {\r\n        return (data.url.trim() === '') ? $form.setError('url') : true;\r\n    },\r\n    _setFormFocus: function($form)\r\n    {\r\n        $form.getField('url').focus();\r\n    },\r\n    _setFormData: function($form, $modal)\r\n    {\r\n        var linkData = this.$link.getData();\r\n        var data = {\r\n            url: linkData.url,\r\n            text: linkData.text,\r\n            title: linkData.title,\r\n            target: (this.opts.linkTarget || linkData.target)\r\n        };\r\n\r\n        if (!this.opts.linkNewTab) $modal.find('.form-item-target').hide();\r\n        if (!this.opts.linkTitle) $modal.find('.form-item-title').hide();\r\n\r\n        $form.setData(data);\r\n        this.currentText = $form.getField('text').val();\r\n    }\r\n});\r\n$R.add('class', 'link.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.reUrl = /^(?:(?:(?:https?|ftp):)?\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el :  this._init(el);\r\n    },\r\n\r\n    // public\r\n    setData: function(data)\r\n    {\r\n        for (var name in data)\r\n        {\r\n            this._set(name, data[name]);\r\n        }\r\n    },\r\n    getData: function()\r\n    {\r\n        var names = ['url', 'text', 'target', 'title'];\r\n        var data = {};\r\n\r\n        for (var i = 0; i < names.length; i++)\r\n        {\r\n            data[names[i]] = this._get(names[i]);\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        var $el = $R.dom(el);\r\n        if (el === undefined)\r\n        {\r\n            this.parse('<a>');\r\n        }\r\n        else\r\n        {\r\n            this.parse($el);\r\n        }\r\n    },\r\n    _set: function(name, value)\r\n    {\r\n        this['_set_' + name](value);\r\n    },\r\n    _get: function(name)\r\n    {\r\n        return this['_get_' + name]();\r\n    },\r\n    _get_target: function()\r\n    {\r\n        return (this.attr('target')) ? this.attr('target') : false;\r\n    },\r\n    _get_url: function()\r\n    {\r\n        return this.attr('href');\r\n    },\r\n    _get_title: function()\r\n    {\r\n        return this.attr('title');\r\n    },\r\n    _get_text: function()\r\n    {\r\n        return this._getContext().text();\r\n    },\r\n    _getContext: function()\r\n    {\r\n        return this._findDeepestChild(this).element;\r\n    },\r\n    _set_target: function(target)\r\n    {\r\n        if (target === false) this.removeAttr('target');\r\n        else if (target)\r\n        {\r\n            this.attr('target', (target === true) ? '_blank' : target);\r\n        }\r\n    },\r\n    _set_text: function(text)\r\n    {\r\n        text = this._escapeHtml(text);\r\n        this._getContext().html(text);\r\n    },\r\n    _set_title: function(title)\r\n    {\r\n        if (!title || title === '') this.removeAttr('title');\r\n        else this.attr('title', title);\r\n    },\r\n    _set_url: function(url)\r\n    {\r\n        if (this.opts.linkValidation)\r\n        {\r\n            url = this._cleanUrl(url);\r\n\r\n            if (this._isMailto(url))\r\n            {\r\n                url = 'mailto:' + url.replace('mailto:', '');\r\n            }\r\n            else if (this._isUrl(url) && url.search(/^(ftp|https?)/i) === -1)\r\n            {\r\n                url = 'http://' + url.replace(/(ftp|https?):\\/\\//i, '');\r\n            }\r\n        }\r\n\r\n        this.attr('href', url);\r\n    },\r\n    _isMailto: function(url)\r\n    {\r\n        return (url.search('@') !== -1 && /(ftp|https?):\\/\\//i.test(url) === false);\r\n    },\r\n    _isUrl: function(url)\r\n    {\r\n        return this.reUrl.test(url);\r\n    },\r\n    _cleanUrl: function(url)\r\n    {\r\n        url = this._escapeHtml(url);\r\n\r\n        return url.trim().replace(/[^\\W\\w\\D\\d+&\\'@#/%?=~_|!:,.;\\(\\)]/gi, '');\r\n    },\r\n    _escapeHtml: function(html) {\r\n        return html.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\r\n    },\r\n    _findDeepestChild: function(parent)\r\n    {\r\n        var result = {depth: 0, element: parent };\r\n\r\n        parent.children().each(function(node)\r\n        {\r\n            var child = $R.dom(node);\r\n\r\n            if (node.outerHTML !== parent.html())\r\n            {\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                var childResult = this._findDeepestChild(child);\r\n                if (childResult.depth + 1 > result.depth)\r\n                {\r\n                    result = {\r\n                        depth: 1 + childResult.depth,\r\n                        element: childResult.element\r\n                    };\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n        return result;\r\n    }\r\n});\r\n$R.add('module', 'modal', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.lang = app.lang;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.$body = app.$body;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.animate = app.animate;\r\n        this.detector = app.detector;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.$box = false;\r\n        this.$modal = false;\r\n        this.selectionMarkers = false;\r\n\r\n        // defaults\r\n        this.defaults = {\r\n            name: false,\r\n            url: false,\r\n            title: false,\r\n            width: '600px',\r\n            height: false,\r\n            handle: false,\r\n            commands: false\r\n        };\r\n    },\r\n    // public\r\n    build: function(data)\r\n    {\r\n        this._open(data);\r\n    },\r\n    close: function()\r\n    {\r\n        this._close();\r\n    },\r\n    onstop: function() {\r\n        this.$body.find('#redactor-modal-' + this.uuid).remove();\r\n        this.$body.find('#redactor-overlay-' + this.uuid).remove();\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.$box)\r\n        {\r\n            this.$box.remove();\r\n            this.$box = false;\r\n            this.$modal = false;\r\n        }\r\n\r\n        if (this.$overlay) {\r\n            this.$overlay.remove();\r\n        }\r\n\r\n        this.$doc.off('.redactor.modal');\r\n        this.$win.off('.redactor.modal');\r\n    },\r\n    resize: function()\r\n    {\r\n        this.$modal.setWidth(this.p.width);\r\n        this.$modal.updatePosition();\r\n    },\r\n\r\n    // private\r\n    _isOpened: function()\r\n    {\r\n        return (this.$modal && this.$modal.hasClass('redactor-modal-open'));\r\n    },\r\n    _open: function(data)\r\n    {\r\n        this._buildDefaults(data);\r\n\r\n        if (this.p.url) this._openUrl();\r\n        else this._openTemplate();\r\n    },\r\n    _openUrl: function()\r\n    {\r\n        $R.ajax.post({\r\n            url: this.p.url,\r\n            success: this._doOpen.bind(this)\r\n        });\r\n    },\r\n    _openTemplate: function()\r\n    {\r\n        if (typeof $R.modals[this.p.name] !== 'undefined')\r\n        {\r\n            var template = this.lang.parse($R.modals[this.p.name]);\r\n            this._doOpen(template);\r\n        }\r\n    },\r\n    _doOpen: function(template)\r\n    {\r\n        this.stop();\r\n\r\n        if (this.selection.isCollapsed())\r\n        {\r\n            this.selection.save();\r\n            this.selectionMarkers = false;\r\n        }\r\n        else\r\n        {\r\n            this.selection.saveMarkers();\r\n            this.selectionMarkers = true;\r\n        }\r\n\r\n        if (!this.detector.isDesktop())\r\n        {\r\n            document.activeElement.blur();\r\n        }\r\n\r\n        this._createModal(template);\r\n\r\n        this._buildModalBox();\r\n        this._buildOverlay();\r\n        this._buildModal();\r\n        this._buildModalForm();\r\n        this._buildModalCommands();\r\n\r\n        this._broadcast('open');\r\n\r\n        this.$modal.updatePosition();\r\n        this._buildModalTabs();\r\n\r\n        this.animate.start(this.$box, 'fadeIn', this._opened.bind(this));\r\n        this.animate.start(this.$overlay, 'fadeIn');\r\n\r\n    },\r\n    _opened: function()\r\n    {\r\n        this.$modal.addClass('open').addClass('redactor-modal-open');\r\n        this.$box.on('mousedown.redactor.modal', this._close.bind(this));\r\n        this.$doc.on('keyup.redactor.modal', this._handleEscape.bind(this));\r\n        this.$win.on('resize.redactor.modal', this.resize.bind(this));\r\n        this.$modal.getBody().find('input[type=text],input[type=url],input[type=email]').on('keydown.redactor.modal', this._handleEnter.bind(this));\r\n\r\n        // fix bootstrap modal focus\r\n        if (window.jQuery) window.jQuery(document).off('focusin.modal');\r\n\r\n        this._broadcast('opened');\r\n    },\r\n    _close: function(e)\r\n    {\r\n        if (!this.$box || !this._isOpened()) return;\r\n\r\n        if (e)\r\n        {\r\n            if (!this._needToClose(e.target))\r\n            {\r\n                return;\r\n            }\r\n\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (this.selectionMarkers) this.selection.restoreMarkers();\r\n        else this.selection.restore();\r\n\r\n\r\n        this.selectionMarkers = false;\r\n\r\n        this._broadcast('close');\r\n\r\n        this.animate.start(this.$box, 'fadeOut', this._closed.bind(this));\r\n        this.animate.start(this.$overlay, 'fadeOut');\r\n    },\r\n    _closed: function()\r\n    {\r\n        this.$modal.removeClass('open').removeClass('redactor-modal-open');\r\n        this.$box.off('.redactor.modal');\r\n        this.$doc.off('.redactor.modal');\r\n        this.$win.off('.redactor.modal');\r\n\r\n        this._broadcast('closed');\r\n    },\r\n    _createModal: function(template)\r\n    {\r\n        this.$modal = $R.create('modal.element', this.app, template);\r\n    },\r\n    _broadcast: function(message)\r\n    {\r\n        this.app.broadcast('modal.' + message, this.$modal, this.$modalForm);\r\n        this.app.broadcast('modal.' + this.p.name + '.' + message, this.$modal, this.$modalForm);\r\n    },\r\n    _buildDefaults: function(data)\r\n    {\r\n         this.p = $R.extend({}, this.defaults, data);\r\n    },\r\n    _buildModalBox: function()\r\n    {\r\n        this.$box = $R.dom('<div>');\r\n        this.$box.attr('id', 'redactor-modal-' + this.uuid);\r\n        this.$box.addClass('redactor-modal-box redactor-animate-hide');\r\n        this.$box.html('');\r\n        this.$body.append(this.$box);\r\n    },\r\n    _buildOverlay: function()\r\n    {\r\n        this.$overlay = $R.dom('#redactor-overlay-' + this.uuid);\r\n        if (this.$overlay.length === 0)\r\n        {\r\n            this.$overlay = $R.dom('<div>');\r\n            this.$overlay.attr('id', 'redactor-overlay-' + this.uuid);\r\n            this.$overlay.addClass('redactor-overlay redactor-animate-hide');\r\n            this.$body.prepend(this.$overlay);\r\n        }\r\n    },\r\n    _buildModal: function()\r\n    {\r\n        this.$box.append(this.$modal);\r\n\r\n        this.$modal.setTitle(this.p.title);\r\n        this.$modal.setHeight(this.p.height);\r\n        this.$modal.setWidth(this.p.width);\r\n    },\r\n    _buildModalCommands: function()\r\n    {\r\n        if (this.p.commands)\r\n        {\r\n            var commands = this.p.commands;\r\n            var $footer = this.$modal.getFooter();\r\n            for (var key in commands)\r\n            {\r\n                var $btn = $R.dom('<button>');\r\n\r\n                $btn.html(commands[key].title);\r\n                $btn.attr('data-command', key);\r\n\r\n                // cancel\r\n                if (key === 'cancel')\r\n                {\r\n                    $btn.attr('data-action', 'close');\r\n                    $btn.addClass('redactor-button-unstyled');\r\n                }\r\n\r\n                // danger\r\n                if (typeof commands[key].type !== 'undefined' && commands[key].type === 'danger')\r\n                {\r\n                    $btn.addClass('redactor-button-danger');\r\n                }\r\n\r\n                $btn.on('click', this._handleCommand.bind(this));\r\n\r\n                $footer.append($btn);\r\n            }\r\n        }\r\n    },\r\n    _buildModalTabs: function()\r\n    {\r\n        var $body = this.$modal.getBody();\r\n        var $tabs = $body.find('.redactor-modal-tab');\r\n        var $box = $body.find('.redactor-modal-tabs');\r\n\r\n\r\n        if ($tabs.length > 1)\r\n        {\r\n            $box = ($box.length === 0) ? $R.dom('<div>') : $box.html('');\r\n            $box.addClass('redactor-modal-tabs');\r\n\r\n            $tabs.each(function(node, i)\r\n            {\r\n                var $node = $R.dom(node);\r\n                var $item = $R.dom('<a>');\r\n                $item.attr('href', '#');\r\n                $item.attr('rel', i);\r\n                $item.text($node.attr('data-title'));\r\n                $item.on('click', this._showTab.bind(this));\r\n\r\n                if (i === 0)\r\n                {\r\n                    $item.addClass('active');\r\n                }\r\n\r\n                $box.append($item);\r\n\r\n            }.bind(this));\r\n\r\n            $body.prepend($box);\r\n        }\r\n\r\n        if ($tabs.length === 1) {\r\n            $tabs.show();\r\n        }\r\n    },\r\n    _buildModalForm: function()\r\n    {\r\n        this.$modalForm = $R.create('modal.form', this.app, this.$modal.getForm());\r\n    },\r\n    _showTab: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var $el = $R.dom(e.target);\r\n        var index = $el.attr('rel');\r\n        var $body = this.$modal.getBody();\r\n        var $tabs = $body.find('.redactor-modal-tab');\r\n\r\n        $tabs.hide();\r\n        $tabs.eq(index).show();\r\n\r\n        $body.find('.redactor-modal-tabs a').removeClass('active');\r\n        $el.addClass('active');\r\n\r\n    },\r\n    _needToClose: function(el)\r\n    {\r\n        var $target = $R.dom(el);\r\n        if ($target.attr('data-action') === 'close' || this.$modal.isCloseNode(el) || $target.closest('.redactor-modal').length === 0)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _handleCommand: function(e)\r\n    {\r\n        var $btn = $R.dom(e.target).closest('button');\r\n        var command = $btn.attr('data-command');\r\n\r\n        if (command !== 'cancel') e.preventDefault();\r\n\r\n        this._broadcast(command);\r\n    },\r\n    _handleEnter: function(e)\r\n    {\r\n        if (e.which === 13)\r\n        {\r\n            if (this.p.handle)\r\n            {\r\n                e.preventDefault();\r\n                this._broadcast(this.p.handle);\r\n            }\r\n        }\r\n    },\r\n    _handleEscape: function(e)\r\n    {\r\n        if (e.which === 27) this._close();\r\n    }\r\n});\r\n$R.add('class', 'modal.element', {\r\n    mixins: ['dom'],\r\n    init: function(app, template)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.$win = app.$win;\r\n\r\n        // init\r\n        this._init(template);\r\n    },\r\n\r\n    // get\r\n    getForm: function()\r\n    {\r\n        return this.find('form');\r\n    },\r\n    getHeader: function()\r\n    {\r\n        return this.$modalHeader;\r\n    },\r\n    getBody: function()\r\n    {\r\n        return this.$modalBody;\r\n    },\r\n    getFooter: function()\r\n    {\r\n        return this.$modalFooter;\r\n    },\r\n\r\n    // set\r\n    setTitle: function(title)\r\n    {\r\n        if (title) this.$modalHeader.html(title);\r\n    },\r\n    setWidth: function(width)\r\n    {\r\n        width = (parseInt(width) >= this.$win.width()) ? '96%' : width;\r\n\r\n        this.css('max-width', width);\r\n    },\r\n    setHeight: function(height)\r\n    {\r\n        if (height !== false) this.$modalBody.css('height', height);\r\n    },\r\n\r\n    // update\r\n    updatePosition: function()\r\n    {\r\n        var width = this.width();\r\n        this.css({ 'left': '50%', 'margin-left': '-' + (width/2) + 'px' });\r\n\r\n        var windowHeight = this.$win.height();\r\n        var height = this.height();\r\n        var marginTop = (windowHeight/2 - height/2);\r\n\r\n        if (height < windowHeight && marginTop !== 0)\r\n        {\r\n            this.css('margin-top', marginTop + 'px');\r\n        }\r\n    },\r\n\r\n    // is\r\n    isCloseNode: function(el)\r\n    {\r\n        return (el === this.$modalClose.get());\r\n    },\r\n\r\n    // private\r\n    _init: function(template)\r\n    {\r\n        this._build();\r\n        this._buildClose();\r\n        this._buildHeader();\r\n        this._buildBody();\r\n        this._buildFooter();\r\n        this._buildTemplate(template);\r\n    },\r\n    _build: function()\r\n    {\r\n        this.parse('<div>');\r\n        this.addClass('redactor-modal');\r\n        this.attr('dir', this.opts.direction);\r\n    },\r\n    _buildClose: function()\r\n    {\r\n        this.$modalClose = $R.dom('<span>');\r\n        this.$modalClose.addClass('redactor-close');\r\n\r\n        this.append(this.$modalClose);\r\n    },\r\n    _buildHeader: function()\r\n    {\r\n        this.$modalHeader = $R.dom('<div>');\r\n        this.$modalHeader.addClass('redactor-modal-header');\r\n\r\n        this.append(this.$modalHeader);\r\n    },\r\n    _buildBody: function()\r\n    {\r\n        this.$modalBody = $R.dom('<div>');\r\n        this.$modalBody.addClass('redactor-modal-body');\r\n\r\n        this.append(this.$modalBody);\r\n    },\r\n    _buildFooter: function()\r\n    {\r\n        this.$modalFooter = $R.dom('<div>');\r\n        this.$modalFooter.addClass('redactor-modal-footer');\r\n\r\n        this.append(this.$modalFooter);\r\n    },\r\n    _buildTemplate: function(template)\r\n    {\r\n        this.$modalBody.html(template);\r\n    }\r\n});\r\n$R.add('class', 'modal.form', {\r\n    mixins: ['dom'],\r\n    init: function(app, element)\r\n    {\r\n        this.app = app;\r\n\r\n        // build\r\n        this.build(element);\r\n    },\r\n\r\n    // public\r\n    build: function(element)\r\n    {\r\n        this.parse(element);\r\n    },\r\n    getData: function()\r\n    {\r\n        var data = {};\r\n        this.find('[name]').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            data[$node.attr('name')] = $node.val();\r\n        });\r\n\r\n        return data;\r\n    },\r\n    setData: function(data)\r\n    {\r\n        this.find('[name]').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var name = $node.attr('name');\r\n            if (data.hasOwnProperty(name))\r\n            {\r\n                if (node.type && node.type === 'checkbox') node.checked = data[name];\r\n                else $node.val(data[name]);\r\n            }\r\n        });\r\n    },\r\n    getField: function(name)\r\n    {\r\n        return this.find('[name=' + name + ']');\r\n    },\r\n    setError: function(name)\r\n    {\r\n        var $el = this.getField(name);\r\n\r\n        $el.addClass('error');\r\n        $el.one(this._getFieldEventName($el.get()), this._clearError);\r\n\r\n        return false;\r\n    },\r\n\r\n    // private\r\n    _clearError: function()\r\n    {\r\n        return $R.dom(this).removeClass('error');\r\n    },\r\n    _getFieldEventName: function(el)\r\n    {\r\n        return (el.tagName === 'SELECT' || el.type === 'checkbox' || el.type === 'radio') ? 'change' : 'keyup';\r\n    }\r\n});\r\n$R.add('module', 'block', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.block = app.block;\r\n    },\r\n    // public\r\n    format: function(args)\r\n    {\r\n        var nodes = this.block.format(args);\r\n\r\n        // callback\r\n        this.app.broadcast('format', 'block', nodes);\r\n    },\r\n    clearformat: function()\r\n    {\r\n        this.block.clearFormat();\r\n    },\r\n    clearstyle: function()\r\n    {\r\n        this.block.clearStyle();\r\n    },\r\n    clearclass: function()\r\n    {\r\n        this.block.clearClass();\r\n    },\r\n    clearattr: function()\r\n    {\r\n        this.block.clearAttr();\r\n    },\r\n    add: function(args, tags)\r\n    {\r\n        this.block.add(args, tags);\r\n    },\r\n    toggle: function(args, tags)\r\n    {\r\n        this.block.toggle(args, tags);\r\n    },\r\n    set: function(args, tags)\r\n    {\r\n        this.block.set(args, tags);\r\n    },\r\n    remove: function(args, tags)\r\n    {\r\n        this.block.remove(args, tags);\r\n    }\r\n});\r\n$R.add('module', 'inline', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.inline = app.inline;\r\n    },\r\n    format: function(args)\r\n    {\r\n        var nodes = this.inline.format(args);\r\n\r\n        // callback\r\n        this.app.broadcast('format', 'inline', nodes);\r\n    },\r\n    clearformat: function()\r\n    {\r\n        this.inline.clearFormat();\r\n    },\r\n    clearstyle: function()\r\n    {\r\n        this.inline.clearStyle();\r\n    },\r\n    clearclass: function()\r\n    {\r\n        this.inline.clearClass();\r\n    },\r\n    clearattr: function()\r\n    {\r\n        this.inline.clearAttr();\r\n    },\r\n    add: function(args, tags)\r\n    {\r\n        this.inline.add(args, tags);\r\n    },\r\n    toggle: function(args, tags)\r\n    {\r\n        this.inline.toggle(args, tags);\r\n    },\r\n    set: function(args, tags)\r\n    {\r\n        this.inline.set(args, tags);\r\n    },\r\n    remove: function(args, tags)\r\n    {\r\n        this.inline.remove(args, tags);\r\n    }\r\n});\r\n$R.add('module', 'autosave', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.source = app.source;\r\n    },\r\n    // messages\r\n    onsynced: function()\r\n    {\r\n        if (this.opts.autosave)\r\n        {\r\n            this._send();\r\n        }\r\n    },\r\n\r\n    // private\r\n    _send: function()\r\n    {\r\n        var name = (this.opts.autosaveName) ? this.opts.autosaveName : this.source.getName();\r\n\r\n        var data = {};\r\n        data[name] = this.source.getCode();\r\n        data = this.utils.extendData(data, this.opts.autosaveData);\r\n        $R.ajax.request(this.opts.autosaveMethod, {\r\n            url: this.opts.autosave,\r\n            data: data,\r\n            success: function(response)\r\n            {\r\n                this._complete(response, name, data);\r\n            }.bind(this)\r\n        });\r\n    },\r\n    _complete: function(response, name, data)\r\n    {\r\n        var callback = (response && response.error) ? 'autosaveError' : 'autosave';\r\n        this.app.broadcast(callback, name, data, response);\r\n    }\r\n});\r\n$R.add('module', 'input', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.keycodes = app.keycodes;\r\n        this.element = app.element;\r\n        this.selection = app.selection;\r\n        this.insertion = app.insertion;\r\n        this.inspector = app.inspector;\r\n        this.autoparser = app.autoparser;\r\n\r\n        // local\r\n        this.lastShiftKey = false;\r\n    },\r\n    // messages\r\n    onpaste: function(e, dataTransfer)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        return $R.create('input.paste', this.app, e, dataTransfer);\r\n    },\r\n    onkeydown: function(e)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        // key\r\n        var key = e.which;\r\n\r\n        // shortcuts\r\n        var shortcut = $R.create('input.shortcut', this.app, e);\r\n        if (shortcut.is()) return;\r\n\r\n        // select all\r\n        if ((e.ctrlKey || e.metaKey) && !e.altKey && key === 65)\r\n        {\r\n            e.preventDefault();\r\n            return this._selectAll();\r\n        }\r\n\r\n        // set empty if all selected\r\n        var keys = [this.keycodes.ENTER, this.keycodes.SPACE, this.keycodes.BACKSPACE, this.keycodes.DELETE];\r\n        var arrowKeys = [this.keycodes.UP, this.keycodes.DOWN, this.keycodes.LEFT, this.keycodes.RIGHT];\r\n        var isKeys = (keys.indexOf(key) !== -1);\r\n        var isArrowKeys = (arrowKeys.indexOf(key) !== -1);\r\n        var isXKey = ((e.ctrlKey || e.metaKey) && key === 88); // x\r\n        var isAlphaKeys = ((!e.ctrlKey && !e.metaKey) && ((key >= 48 && key <= 57) || (key >= 65 && key <= 90)));\r\n\r\n        if (this.selection.isAll() && isArrowKeys && (isXKey || (!e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey)))\r\n        {\r\n            if (isXKey)\r\n            {\r\n                this.editor.disableNonEditables();\r\n                this.app.broadcast('empty');\r\n                return;\r\n            }\r\n\r\n            if (this._isArrowKey(key)) return true;\r\n            if (isKeys) e.preventDefault();\r\n\r\n            if (this.element.isType('inline'))\r\n            {\r\n                var $editor = this.editor.getElement();\r\n                $editor.html('');\r\n\r\n                this.editor.startFocus();\r\n            }\r\n            else\r\n            {\r\n                this.insertion.set(this.opts.emptyHtml);\r\n            }\r\n\r\n            if (isKeys) return;\r\n            else this.app.broadcast('empty');\r\n        }\r\n\r\n        // autoparse\r\n        if (this.opts.autoparse)\r\n        {\r\n            this.autoparser.format(e, key);\r\n        }\r\n\r\n        // a-z, 0-9 - non editable\r\n        if (isAlphaKeys)\r\n        {\r\n            // has non-editable\r\n            if (this.selection.hasNonEditable())\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        // enter, shift/ctrl + enter\r\n        if (key === this.keycodes.ENTER)\r\n        {\r\n            return $R.create('input.enter', this.app, e, key);\r\n        }\r\n        // cmd + [\r\n        else if (e.metaKey && key === 219)\r\n        {\r\n            e.preventDefault();\r\n            this.app.api('module.list.outdent');\r\n            return;\r\n        }\r\n        // tab or cmd + ]\r\n        else if (key === this.keycodes.TAB || (e.metaKey && key === 221))\r\n        {\r\n            return $R.create('input.tab', this.app, e, key);\r\n        }\r\n        // space\r\n        else if (key === this.keycodes.SPACE)\r\n        {\r\n            return $R.create('input.space', this.app, e, key, this.lastShiftKey);\r\n        }\r\n        // backspace or delete\r\n        else if (this._isDeleteKey(key))\r\n        {\r\n            return $R.create('input.delete', this.app, e, key);\r\n        }\r\n        else if (this._isArrowKey(key))\r\n        {\r\n            return $R.create('input.arrow', this.app, e, key);\r\n        }\r\n    },\r\n    onkeyup: function(e)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        // key\r\n        var key = e.which;\r\n\r\n        // shift key\r\n        this.lastShiftKey = e.shiftKey;\r\n\r\n        // hide context toolbar\r\n        this.app.broadcast('contextbar.close');\r\n\r\n        // shortcode\r\n        var shortcode = $R.create('input.shortcode', this.app, e, key);\r\n        if (shortcode.is()) return;\r\n\r\n        // is empty\r\n        if (key === this.keycodes.BACKSPACE)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var html = this.utils.trimSpaces($editor.html());\r\n            html = html.replace(/<br\\s?\\/?>/g, '');\r\n            html = html.replace(/<div><\\/div>/, '');\r\n\r\n            if (html === '')\r\n            {\r\n                e.preventDefault();\r\n                this.editor.setEmpty();\r\n                this.editor.startFocus();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.editor.isEmpty())\r\n        {\r\n            this.app.broadcast('empty');\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        // extend shortcuts\r\n        if (this.opts.shortcutsAdd)\r\n        {\r\n            this.opts.shortcuts = $R.extend({}, true, this.opts.shortcuts, this.opts.shortcutsAdd);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _selectAll: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var el;\r\n\r\n        if (data.isComponentType('table'))\r\n        {\r\n            el = data.getTable();\r\n            this.selection.setAll(el);\r\n            return;\r\n        }\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            el = data.getComponentCodeElement();\r\n            this.selection.setAll(el);\r\n            return;\r\n        }\r\n\r\n        this.selection.setAll();\r\n    },\r\n    _isArrowKey: function(key)\r\n    {\r\n        return ([this.keycodes.UP, this.keycodes.DOWN, this.keycodes.RIGHT, this.keycodes.LEFT].indexOf(key) !== -1);\r\n    },\r\n    _isDeleteKey: function(key)\r\n    {\r\n        return (key === this.keycodes.BACKSPACE || key === this.keycodes.DELETE);\r\n    }\r\n});\r\n$R.add('class', 'input.arrow', {\r\n    init: function(app, e, key)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.caret = app.caret;\r\n        this.offset = app.offset;\r\n        this.marker = app.marker;\r\n        this.editor = app.editor;\r\n        this.keycodes = app.keycodes;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.key = key;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        if (this._isRightLeftKey() && this._isExitVariable(e)) return;\r\n\r\n        if (this._isRightDownKey())\r\n        {\r\n            if (this._isExitOnDownRight(e)) return;\r\n            if (this._selectComponent(e, 'End', 'next')) return;\r\n        }\r\n\r\n        if (this._isLeftUpKey())\r\n        {\r\n            if (this._isExitOnUpLeft(e)) return;\r\n            if (this._selectComponent(e, 'Start', 'prev')) return;\r\n        }\r\n\r\n        if (this.key === this.keycodes.LEFT) this.utils.trimInvisibleChars('left');\r\n        else if (this.key === this.keycodes.RIGHT) this.utils.trimInvisibleChars('right');\r\n\r\n    },\r\n    _isRightDownKey: function()\r\n    {\r\n        return ([this.keycodes.DOWN, this.keycodes.RIGHT].indexOf(this.key) !== -1);\r\n    },\r\n    _isLeftUpKey: function()\r\n    {\r\n        return ([this.keycodes.UP, this.keycodes.LEFT].indexOf(this.key) !== -1);\r\n    },\r\n    _isRightLeftKey: function()\r\n    {\r\n        return ([this.keycodes.RIGHT, this.keycodes.LEFT].indexOf(this.key) !== -1);\r\n    },\r\n    _isExitVariable: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var component = data.getComponent();\r\n        if (data.isComponentType('variable') && data.isComponentActive())\r\n        {\r\n            e.preventDefault();\r\n            var func = (this.key === this.keycodes.LEFT) ? 'setBefore' : 'setAfter';\r\n            this.caret[func](component);\r\n            return;\r\n        }\r\n    },\r\n    _isExitOnUpLeft: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock(current);\r\n        var data = this.inspector.parse(current);\r\n        var prev = block.previousElementSibling;\r\n        var isStart = this.caret.isStart(block);\r\n\r\n        // prev table\r\n        if (isStart && prev && prev.tagName === 'TABLE')\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setEnd(prev);\r\n            return true;\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isStart = this.caret.isStart(block);\r\n\r\n            var $component = $R.dom(block).closest('.redactor-component');\r\n            if (isStart && $component.length !== 0)\r\n            {\r\n                e.preventDefault();\r\n                this.caret.setEnd($component);\r\n                return true;\r\n            }\r\n        }\r\n        // exit table\r\n        else if (data.isTable() && isStart)\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setEnd(block.previousElementSibling);\r\n            return true;\r\n        }\r\n        // component\r\n        else if (!data.isComponentEditable() && data.isComponent() && !data.isComponentType('variable'))\r\n        {\r\n            var component = data.getComponent();\r\n            if (!component.previousElementSibling)\r\n            {\r\n                e.preventDefault();\r\n                this.component.clearActive();\r\n\r\n                return this._exitPrevElement(e, data.getComponent());\r\n            }\r\n            else if (component.previousElementSibling)\r\n            {\r\n                e.preventDefault();\r\n                this.component.clearActive();\r\n                this.caret.setEnd(component.previousElementSibling);\r\n                return true;\r\n            }\r\n        }\r\n    },\r\n    _isExitOnDownRight: function(e)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var isEndEditor = this.caret.isEnd();\r\n        var block, isEnd;\r\n\r\n        // table\r\n        if (data.isTable())\r\n        {\r\n            block = data.getTable();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, data.getComponent());\r\n            }\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, data.getComponent());\r\n            }\r\n        }\r\n        // figure/code\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            var component = data.getComponent();\r\n            var pre = $R.dom(data.getComponentCodeElement()).closest('pre');\r\n\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            var isNext = (pre && pre.get().nextElementSibling);\r\n            if (isEnd && !isNext)\r\n            {\r\n                return this._exitNextElement(e, component);\r\n            }\r\n        }\r\n        // pre & blockquote & dl\r\n        else if (data.isPre() || data.isBlockquote() || data.isDl())\r\n        {\r\n            if (isEndEditor)\r\n            {\r\n                if (data.isPre()) return this._exitNextElement(e, data.getPre());\r\n                else if (data.isBlockquote()) return this._exitNextElement(e, data.getBlockquote());\r\n                else if (data.isDl()) return this._exitNextElement(e, data.getDl());\r\n            }\r\n        }\r\n        // li\r\n        else if (data.isList())\r\n        {\r\n            var $list = $R.dom(current).parents('ul, ol', $editor).last();\r\n            isEnd = this.caret.isEnd($list);\r\n\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, $list.get());\r\n            }\r\n        }\r\n        // component\r\n        else if (data.isComponent() && !data.isComponentType('variable') && data.getTag() !== 'span')\r\n        {\r\n            this.component.clearActive();\r\n            return this._exitNextElement(e, data.getComponent());\r\n        }\r\n    },\r\n    _exitPrevElement: function(e, node)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (node.previousElementSibling) this.caret.setEnd(node.previousElementSibling);\r\n        else this.utils.createMarkupBefore(node);\r\n\r\n        return true;\r\n    },\r\n    _exitNextElement: function(e, node)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (node.nextElementSibling) this.caret.setStart(node.nextElementSibling);\r\n        else this.utils.createMarkup(node);\r\n\r\n        return true;\r\n    },\r\n    _selectComponent: function(e, caret, type)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock(current);\r\n        var sibling = this.utils.findSiblings(current, type);\r\n        var siblingBlock = this.utils.findSiblings(block, type);\r\n\r\n        if (sibling && this.caret['is' + caret](current))\r\n        {\r\n            this._selectComponentItem(e, sibling, caret);\r\n        }\r\n        else if (siblingBlock && this.caret['is' + caret](block))\r\n        {\r\n            this._selectComponentItem(e, siblingBlock, caret);\r\n        }\r\n    },\r\n    _selectComponentItem: function(e, item, caret)\r\n    {\r\n        if (this.component.isNonEditable(item))\r\n        {\r\n            e.preventDefault();\r\n            this.caret['set' + caret](item);\r\n            return true;\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'input.delete', {\r\n    init: function(app, e, key)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.marker = app.marker;\r\n        this.keycodes = app.keycodes;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n        this.insertion = app.insertion;\r\n\r\n        // local\r\n        this.key = key;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        if (this._removeActiveComponent(e)) return;\r\n        if (this._removeAllSelectedTable(e)) return;\r\n\r\n        // is empty\r\n        if (this.key === this.keycodes.BACKSPACE)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var html = this.utils.trimSpaces($editor.html());\r\n\r\n            if (html === this.opts.emptyHtml)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        // variable or non editable prev/next or selection\r\n        if (this._detectVariableOrNonEditable() || this.selection.hasNonEditable())\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // all selected\r\n        if (this.selection.isAll())\r\n        {\r\n            e.preventDefault();\r\n            this.insertion.set(this.opts.emptyHtml);\r\n            return;\r\n        }\r\n\r\n        // collapsed\r\n        if (this.selection.isCollapsed())\r\n        {\r\n            // next / prev\r\n            if (this.key === this.keycodes.BACKSPACE) this._traverseBackspace(e);\r\n            else if (this.key === this.keycodes.DELETE) this._traverseDelete(e);\r\n        }\r\n\r\n        if (this.key === this.keycodes.BACKSPACE) this.utils.trimInvisibleChars('left');\r\n\r\n        this._removeUnwantedStyles();\r\n        this._removeEmptySpans();\r\n        this._removeSpanTagsInHeadings();\r\n        this._removeInlineTagsInPre();\r\n    },\r\n    _detectVariableOrNonEditable: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var isBlockStart = this.caret.isStart(block);\r\n        var isBlockEnd = this.caret.isEnd(block);\r\n        var el;\r\n\r\n        // backspace\r\n        if (this.key === this.keycodes.BACKSPACE && isBlockStart)\r\n        {\r\n            el = block.previousSibling;\r\n            if (this._isNonEditable(el)) return true;\r\n        }\r\n        // delete\r\n        else if (this.key === this.keycodes.DELETE && isBlockEnd)\r\n        {\r\n            el = block.nextSibling;\r\n            if (this._isNonEditable(el)) return true;\r\n        }\r\n\r\n        var current = this.selection.getCurrent();\r\n        var isCurrentStart = this.caret.isStart(current);\r\n        var isCurrentEnd = this.caret.isEnd(current);\r\n        var isCurrentStartSpace = (this.selection.getTextBeforeCaret().trim() === '');\r\n        var isCurrentEndSpace = (this.selection.getTextAfterCaret().trim() === '');\r\n\r\n        // backspace\r\n        if (this.key === this.keycodes.BACKSPACE && isCurrentStart && !isCurrentStartSpace)\r\n        {\r\n            el = current.previousSibling;\r\n            if (this._isVariable(el))\r\n            {\r\n                this.caret.setEnd(el);\r\n                return true;\r\n            }\r\n            else if (this._isNonEditable(el)) return true;\r\n        }\r\n        // delete\r\n        else if (this.key === this.keycodes.DELETE && isCurrentEnd && !isCurrentEndSpace)\r\n        {\r\n            el = current.nextSibling;\r\n            if (this._isVariable(el))\r\n            {\r\n                this.caret.setStart(el);\r\n                return true;\r\n            }\r\n            else if (this._isNonEditable(el)) return true;\r\n        }\r\n    },\r\n    _isVariable: function(node)\r\n    {\r\n        return ($R.dom(node).closest('[data-redactor-type=\"variable\"]').length !== 0);\r\n    },\r\n    _isNonEditable: function(node)\r\n    {\r\n        return ($R.dom(node).closest('.non-editable').length !== 0);\r\n    },\r\n    _getBlock: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(block);\r\n\r\n        block = (data.isList()) ? $R.dom(block).parents('ul, ol', $editor).last().get() : block;\r\n        block = (data.isDl()) ? data.getDl() : block;\r\n        block = (data.isTable()) ? data.getTable() : block;\r\n\r\n        return block;\r\n    },\r\n    _traverseDelete: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var block, isEnd, $next;\r\n\r\n        // figcaption\r\n        if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n        // figure/code\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            block = data.getComponent();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        // next\r\n        block = this._getBlock();\r\n        var next = this.utils.findSiblings(block, 'next');\r\n        if (!next) return;\r\n\r\n        isEnd = this.caret.isEnd(block);\r\n        var dataNext = this.inspector.parse(next);\r\n        var isNextBlock = (next.tagName === 'P' || next.tagName === 'DIV');\r\n\r\n        // table\r\n        if (isEnd && dataNext.isComponentType('table'))\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setStart(next);\r\n            return;\r\n        }\r\n        // figure/code\r\n        else if (isEnd && dataNext.isComponentEditable())\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(next, false);\r\n            return;\r\n        }\r\n        // component\r\n        else if (isEnd && dataNext.isComponent())\r\n        {\r\n            e.preventDefault();\r\n\r\n            // select component\r\n            this.caret.setStart(next);\r\n\r\n            // remove current if empty\r\n            if (this.utils.isEmptyHtml(block.innerHTML))\r\n            {\r\n                $R.dom(block).remove();\r\n            }\r\n\r\n            return;\r\n        }\r\n        // combine list\r\n        else if (isEnd && dataNext.isList())\r\n        {\r\n            var $currentList = $R.dom(block);\r\n            $next = $R.dom(next);\r\n\r\n            // current list\r\n            if (data.isList())\r\n            {\r\n                e.preventDefault();\r\n\r\n                $currentList.append($next);\r\n                $next.unwrap();\r\n\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                var $first = $next.children('li').first();\r\n                var $lists = $first.find('ul, ol');\r\n\r\n                if ($lists.length !== 0)\r\n                {\r\n                    e.preventDefault();\r\n\r\n                    $next.prepend($lists);\r\n                    $lists.unwrap();\r\n\r\n                    $currentList.append($first);\r\n                    $first.unwrap();\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        // block\r\n        else if (isEnd && !data.isList() && !data.isTable() && isNextBlock && !this.utils.isEmptyHtml(block.innerHTML))\r\n        {\r\n            e.preventDefault();\r\n\r\n            var $current = $R.dom(block);\r\n            $next = $R.dom(next);\r\n\r\n            $current.append($next);\r\n            $next.unwrap();\r\n\r\n            return;\r\n        }\r\n    },\r\n    _traverseBackspace: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var block, isStart, $prev, $currentList;\r\n\r\n        // figcaption\r\n        if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isStart = this.caret.isStart(block);\r\n\r\n            if (isStart)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n        // figure/code\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            block = data.getComponent();\r\n            isStart = this.caret.isStart(block);\r\n\r\n            if (isStart && block.previousElementSibling)\r\n            {\r\n                e.preventDefault();\r\n                this.caret.setEnd(block.previousElementSibling);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // prev\r\n        block = this._getBlock();\r\n        var prev = this.utils.findSiblings(block, 'prev');\r\n\r\n        if (!prev)\r\n        {\r\n            setTimeout(this._replaceBlock.bind(this), 1);\r\n            return;\r\n        }\r\n\r\n        isStart = this.caret.isStart(block);\r\n        var dataPrev = this.inspector.parse(prev);\r\n        var isPrevBlock = (prev.tagName === 'P' || prev.tagName === 'DIV');\r\n\r\n        // figure/code\r\n        if (isStart && dataPrev.isComponentType('code'))\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(prev, false);\r\n            return;\r\n        }\r\n        // table\r\n        else if (isStart && dataPrev.isComponentType('table'))\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setEnd(prev);\r\n            return;\r\n        }\r\n        // component\r\n        else if (isStart && dataPrev.isComponent())\r\n        {\r\n            e.preventDefault();\r\n\r\n            // select component\r\n            this.caret.setStart(prev);\r\n\r\n\r\n            // remove current if empty\r\n            if (this.utils.isEmptyHtml(block.innerHTML))\r\n            {\r\n                $R.dom(block).remove();\r\n            }\r\n\r\n            return;\r\n        }\r\n        // lists\r\n        else if (isStart && data.isList())\r\n        {\r\n            e.preventDefault();\r\n\r\n            $currentList = $R.dom(block);\r\n            $prev = $R.dom(prev);\r\n\r\n            if (dataPrev.isList())\r\n            {\r\n                $currentList.children('li').first().prepend(this.marker.build('start'));\r\n                $prev.append($currentList);\r\n                $currentList.unwrap();\r\n\r\n                this.selection.restoreMarkers();\r\n            }\r\n            else\r\n            {\r\n                var $first = $currentList.children('li').first();\r\n                var first = $first.get();\r\n                var $lists = $first.find('ul, ol');\r\n\r\n                var $newnode = this.utils.replaceToTag(first, this.opts.markup);\r\n                if (this.opts.breakline) $newnode.attr('data-redactor-tag', 'br');\r\n                $currentList.before($newnode);\r\n                this.caret.setStart($newnode);\r\n\r\n                if ($lists.length !== 0)\r\n                {\r\n                    $currentList.prepend($lists);\r\n                    $lists.unwrap();\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n        // block\r\n        else if (isStart && isPrevBlock)\r\n        {\r\n            e.preventDefault();\r\n\r\n            if (this.utils.isEmpty(prev)) {\r\n                $prev = $R.dom(prev);\r\n                $prev.remove();\r\n                return;\r\n            }\r\n\r\n            var textNode = this.utils.createInvisibleChar();\r\n            var $current = $R.dom(block);\r\n            $prev = $R.dom(prev);\r\n\r\n            this.caret.setEnd($prev);\r\n\r\n            $current.prepend(textNode);\r\n            $prev.append($current.contents());\r\n            $current.remove();\r\n\r\n            return;\r\n        }\r\n\r\n    },\r\n    _replaceBlock: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var $block = $R.dom(block);\r\n\r\n        if (this.opts.markup === 'p' && block && this._isNeedToReplaceBlock(block))\r\n        {\r\n            var markup = document.createElement(this.opts.markup);\r\n\r\n            $block.replaceWith(markup);\r\n            this.caret.setStart(markup);\r\n        }\r\n\r\n        if (this.opts.breakline && block && block.tagName === 'DIV')\r\n        {\r\n            $block.attr('data-redactor-tag', 'br');\r\n        }\r\n    },\r\n    _isNeedToReplaceBlock: function(block)\r\n    {\r\n        return (block.tagName === 'DIV' && this.utils.isEmptyHtml(block.innerHTML));\r\n    },\r\n    _removeActiveComponent: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var component = data.getComponent();\r\n        if (data.isComponent() && this.component.isActive(component))\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(component);\r\n            return true;\r\n        }\r\n    },\r\n    _removeAllSelectedTable: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var table = data.getTable();\r\n        if (table && this.selection.isAll(table))\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(table);\r\n            return true;\r\n        }\r\n    },\r\n    _removeUnwantedStyles: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        setTimeout(function()\r\n        {\r\n            var $tags = $editor.find('*[style]');\r\n            $tags.not('img, figure, figcaption, iframe, [data-redactor-style-cache], [data-redactor-span]').removeAttr('style');\r\n\r\n        }, 0);\r\n    },\r\n    _removeEmptySpans: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        setTimeout(function()\r\n        {\r\n            $editor.find('span').each(function(node)\r\n            {\r\n                if (node.attributes.length === 0)\r\n                {\r\n                    $R.dom(node).replaceWith(node.childNodes);\r\n                }\r\n            });\r\n\r\n        }, 0);\r\n    },\r\n    _removeSpanTagsInHeadings: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        setTimeout(function()\r\n        {\r\n            $editor.find('h1, h2, h3, h4, h5, h6').each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                if ($node.closest('figure').length === 0)\r\n                {\r\n                    $node.find('span').not('.redactor-component, .non-editable, .redactor-selection-marker, [data-redactor-style-cache], [data-redactor-span]').unwrap();\r\n                }\r\n            });\r\n\r\n        }, 1);\r\n    },\r\n    _removeInlineTagsInPre: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var tags = this.opts.inlineTags;\r\n\r\n        setTimeout(function()\r\n        {\r\n            $editor.find('pre').each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                if ($node.closest('figure').length === 0)\r\n                {\r\n                    $node.find(tags.join(',')).not('code, .redactor-selection-marker').unwrap();\r\n                }\r\n            });\r\n\r\n        }, 1);\r\n    }\r\n});\r\n$R.add('class', 'input.enter', {\r\n    init: function(app, e)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.caret = app.caret;\r\n        this.editor = app.editor;\r\n        this.keycodes = app.keycodes;\r\n        this.detector = app.detector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n        this.inspector = app.inspector;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // turn off\r\n        if (!this.opts.enterKey) return this._disable(e);\r\n\r\n        // callback\r\n        var stop = this.app.broadcast('enter', e);\r\n        if (stop === false) return e.preventDefault();\r\n\r\n        // has non-editable\r\n        if (this.selection.hasNonEditable())\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // shift enter\r\n        if (e.ctrlKey || e.shiftKey) {\r\n            return this._insertBreak(e);\r\n        }\r\n\r\n        // enter & exit\r\n        if (this._isExit(e)) return;\r\n\r\n        // traverse\r\n        this._traverse(e);\r\n    },\r\n    _disable: function(e)\r\n    {\r\n        e.preventDefault();\r\n        var range = this.selection.getRange();\r\n        if (range && !range.collapsed) range.deleteContents();\r\n    },\r\n    _insertBreak: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(current);\r\n\r\n        if (data.isHeading() && this.caret.isStart(block)) {\r\n            var $block = $R.dom(block);\r\n            var $newBlock = $block.clone().html('');\r\n            $block.before($newBlock);\r\n            this.caret.setStart($block);\r\n        }\r\n        else if ((data.isComponent() && !data.isComponentEditable()) || data.isCode()) return;\r\n        else if (data.isPre()) this.insertion.insertNewline();\r\n        else this.insertion.insertBreakLine();\r\n    },\r\n    _isExit: function(e)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(block);\r\n        var isEnd = this.caret.isEnd(block);\r\n        var current = this.selection.getCurrent();\r\n        var prev = current.previousSibling;\r\n\r\n        // blockquote\r\n        if (data.isBlockquote())\r\n        {\r\n            var isParagraphExit = (isEnd && this._isExitableBlock(block, 'P'));\r\n            var isBreaklineExit = (isEnd && this._isExitableDblBreak(prev));\r\n\r\n            if (isParagraphExit || isBreaklineExit)\r\n            {\r\n                return this._exitFromElement(e, ((isBreaklineExit) ? prev : block), data.getBlockquote());\r\n            }\r\n        }\r\n        // pre\r\n        else if (!data.isComponentType('code') && data.isPre())\r\n        {\r\n            if (isEnd)\r\n            {\r\n                var html = block.innerHTML;\r\n                html = this.utils.removeInvisibleChars(html);\r\n                if (html.match(/(\\n\\n\\n)$/) !== null)\r\n                {\r\n                    $R.dom(prev.previousSibling.previousSibling).remove();\r\n                    return this._exitFromElement(e, prev, block);\r\n                }\r\n            }\r\n        }\r\n        // dl\r\n        else if (data.isDl())\r\n        {\r\n            if (isEnd && this._isExitableBlock(block, 'DT'))\r\n            {\r\n                return this._exitFromElement(e, block, data.getDl());\r\n            }\r\n        }\r\n        // li\r\n        else if (data.isList())\r\n        {\r\n            var list = $R.dom(current).parents('ul, ol', $editor).last();\r\n\r\n            isEnd = this.caret.isEnd(list);\r\n            if (isEnd && this._isExitableBlock(block, 'LI'))\r\n            {\r\n                return this._exitFromElement(e, block, list);\r\n            }\r\n        }\r\n        else if (data.isComponent() && data.isComponentActive() && !data.isFigcaption() && !data.isComponentEditable())\r\n        {\r\n            return this._exitFromElement(e, false, data.getComponent());\r\n        }\r\n    },\r\n    _isExitableDblBreak: function(prev)\r\n    {\r\n        var next = (prev) ? prev.nextSibling : false;\r\n        if (next)\r\n        {\r\n            var text = this.utils.removeInvisibleChars(next.textContent);\r\n\r\n            return (next.nodeType === 3 && text.trim() === '');\r\n        }\r\n    },\r\n    _isExitableBlock: function(block, tag)\r\n    {\r\n        return (block && block.tagName === tag && this.utils.isEmptyHtml(block.innerHTML));\r\n    },\r\n    _exitFromElement: function(e, prev, el)\r\n    {\r\n        e.preventDefault();\r\n        if (prev) $R.dom(prev).remove();\r\n        this.utils.createMarkup(el);\r\n\r\n        return true;\r\n    },\r\n    _exitNextElement: function(e, node)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (node.nextSibling) this.caret.setStart(node.nextSibling);\r\n        else this.utils.createMarkup(node);\r\n\r\n        return true;\r\n    },\r\n    _traverse: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var isText = this.selection.isText();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(current);\r\n        var blockTag = (block) ? block.tagName.toLowerCase() : false;\r\n        var $variable = $R.dom(current).closest('[data-redactor-type=variable]');\r\n        // variable parent\r\n        if ($variable.length !== 0) {\r\n            this.caret.setAfter($variable);\r\n        }\r\n\r\n        // pre\r\n        if (data.isPre())\r\n        {\r\n            e.preventDefault();\r\n            return this.insertion.insertNewline();\r\n        }\r\n        // blockquote\r\n        else if (data.isBlockquote())\r\n        {\r\n            block = this.selection.getBlock(current);\r\n            if (block && block.tagName === 'BLOCKQUOTE')\r\n            {\r\n                e.preventDefault();\r\n                return this.insertion.insertBreakLine();\r\n            }\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            var isEnd = this.caret.isEnd(block);\r\n            var isEndEditor = this.caret.isEnd();\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, data.getComponent());\r\n            }\r\n            else\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n        // dl\r\n        else if (data.isDl())\r\n        {\r\n            e.preventDefault();\r\n            return this._traverseDl(current);\r\n        }\r\n        // breakline\r\n        else if (this.opts.breakline && blockTag === 'div') {\r\n            setTimeout(this._replaceBlock.bind(this), 1);\r\n            return;\r\n        }\r\n        // text\r\n        else if (isText)\r\n        {\r\n            e.preventDefault();\r\n            return this.insertion.insertBreakLine();\r\n        }\r\n        // list\r\n        else if (data.isList()) {\r\n            return;\r\n        }\r\n        // div / p\r\n        else\r\n        {\r\n            var delay = (!this.detector.isDesktop()) ? 1 : 50;\r\n            setTimeout(this._replaceBlock.bind(this), delay);\r\n            return;\r\n        }\r\n\r\n    },\r\n    _traverseDl: function(current)\r\n    {\r\n        var block = this.selection.getBlock(current);\r\n        var data = this.inspector.parse(block);\r\n        var tag = data.getTag();\r\n        var $el = $R.dom(block);\r\n        var next = $el.get().nextSibling || false;\r\n        var $next = $R.dom(next);\r\n        var nextDd = (next && $next.is('dd'));\r\n        var nextDt = (next && $next.is('dt'));\r\n        var isEnd = this.caret.isEnd(block);\r\n\r\n        if (tag === 'dt' && !nextDd && isEnd)\r\n        {\r\n            var dd = document.createElement('dd');\r\n            $el.after(dd);\r\n\r\n            this.caret.setStart(dd);\r\n            return;\r\n        }\r\n        else if (tag === 'dd' && !nextDt && isEnd)\r\n        {\r\n            var dt = document.createElement('dt');\r\n            $el.after(dt);\r\n\r\n            this.caret.setStart(dt);\r\n            return;\r\n        }\r\n\r\n        return this.insertion.insertBreakLine();\r\n    },\r\n    _replaceBlock: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var $block = $R.dom(block);\r\n\r\n        if (this.opts.markup === 'p' && block && this._isNeedToReplaceBlock(block))\r\n        {\r\n            var markup = document.createElement(this.opts.markup);\r\n            $block.replaceWith(markup);\r\n            this.caret.setStart(markup);\r\n        }\r\n        else\r\n        {\r\n            if (block)\r\n            {\r\n                if (this.utils.isEmptyHtml(block.innerHTML))\r\n                {\r\n                    this._clearBlock($block, block);\r\n                }\r\n                else\r\n                {\r\n                    var first = this.utils.getFirstNode(block);\r\n                    if (first && first.tagName === 'BR')\r\n                    {\r\n                        $R.dom(first).remove();\r\n                        this.caret.setStart(block);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove id\r\n        $block.removeAttr('id');\r\n\r\n        if (block && this._isNeedToCleanBlockStyle(block) && this.opts.cleanOnEnter)\r\n        {\r\n            $block.removeAttr('class style');\r\n        }\r\n\r\n        if (this.opts.breakline && block && block.tagName === 'DIV')\r\n        {\r\n            //$block.append(document.createElement('br'));\r\n            //$block.attr('data-redactor-tag', 'br');\r\n        }\r\n    },\r\n    _clearBlock: function($block, block)\r\n    {\r\n        if (block.tagName === 'DIV') {\r\n            $block.find('br').remove();\r\n        }\r\n\r\n        if (this.opts.cleanInlineOnEnter || block.innerHTML === '<br>')\r\n        {\r\n            $block.html('');\r\n        }\r\n\r\n        this.caret.setStart(block);\r\n    },\r\n    _isNeedToReplaceBlock: function(block)\r\n    {\r\n        return (block.tagName === 'DIV' && this.utils.isEmptyHtml(block.innerHTML));\r\n    },\r\n    _isNeedToCleanBlockStyle: function(block)\r\n    {\r\n        return (block.tagName === 'P' && this.utils.isEmptyHtml(block.innerHTML));\r\n    }\r\n});\r\n$R.add('class', 'input.paste', {\r\n    init: function(app, e, dataTransfer, html, point)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.cleaner = app.cleaner;\r\n        this.container = app.container;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n        this.autoparser = app.autoparser;\r\n\r\n        // local\r\n        this.pasteHtml = html;\r\n        this.pointInserted = point;\r\n        this.dataTransfer = dataTransfer;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        var clipboard = this.dataTransfer || e.clipboardData;\r\n        var current = this.selection.getCurrent();\r\n        var dataCurrent = this.inspector.parse(current);\r\n\r\n        this.dropPasted = this.dataTransfer;\r\n        //this.isRawCode = (this.dropPasted) ? (dataCurrent.isPre() || dataCurrent.isCode()) : this._isPlainText(clipboard);\r\n        this.isRawCode = (dataCurrent.isPre() || dataCurrent.isCode());\r\n\r\n        this.editor.enablePasting();\r\n        this.editor.saveScroll();\r\n\r\n        if (!this.dropPasted)\r\n        {\r\n            this.selection.saveMarkers();\r\n        }\r\n\r\n        if (this.isRawCode || !clipboard)\r\n        {\r\n\r\n            var text;\r\n            if (!this.isRawCode && !clipboard && window.clipboardData)\r\n            {\r\n                text = window.clipboardData.getData(\"text\");\r\n            }\r\n            else\r\n            {\r\n                text = clipboard.getData(\"text/plain\");\r\n            }\r\n\r\n            e.preventDefault();\r\n            this._insert(e, text);\r\n            return;\r\n        }\r\n        else if (this.pasteHtml)\r\n        {\r\n            e.preventDefault();\r\n            this._insert(e, this.pasteHtml);\r\n        }\r\n        else\r\n        {\r\n            // html / text\r\n            var url = clipboard.getData('URL');\r\n            var html = (this._isPlainText(clipboard)) ? this.cleaner.encodeEntities(clipboard.getData(\"text/plain\")) : clipboard.getData(\"text/html\");\r\n\r\n            // safari anchor links\r\n            html = (!url || url === '') ? html : url;\r\n\r\n            // file\r\n            if (clipboard.files !== null && clipboard.files.length > 0 && html === '')\r\n            {\r\n                var files = [];\r\n                for (var i = 0; i < clipboard.files.length; i++)\r\n                {\r\n                    var file = clipboard.files[i] || clipboard.items[i].getAsFile();\r\n                    if (file) files.push(file);\r\n                }\r\n\r\n                if (files.length > 0)\r\n                {\r\n                    e.preventDefault();\r\n                    this._insertFiles(e, files);\r\n                    return;\r\n                }\r\n            }\r\n\r\n\r\n            e.preventDefault();\r\n            this._insert(e, html);\r\n        }\r\n    },\r\n    _isPlainText: function(clipboard)\r\n    {\r\n        var text = clipboard.getData(\"text/plain\");\r\n        var html = clipboard.getData(\"text/html\");\r\n\r\n        if (text && html)\r\n        {\r\n            var element = document.createElement(\"div\");\r\n            element.innerHTML = html;\r\n\r\n            if (element.textContent === text)\r\n            {\r\n                return !element.querySelector(\":not(meta)\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return (text !== null);\r\n        }\r\n    },\r\n    _restoreSelection: function()\r\n    {\r\n        this.editor.restoreScroll();\r\n        this.editor.disablePasting();\r\n        if (!this.dropPasted)\r\n        {\r\n            this.selection.restoreMarkers();\r\n        }\r\n    },\r\n    _insert: function(e, html)\r\n    {\r\n        // pasteBefore callback\r\n        var returned = this.app.broadcast('pasteBefore', html);\r\n        html = (returned === undefined) ? html : returned;\r\n\r\n        // clean\r\n        html = html.trim();\r\n        html = (this.isRawCode) ? html : this.cleaner.paste(html);\r\n        html = html.trim();\r\n        html = (this.isRawCode) ? this.cleaner.encodePhpCode(html) : html;\r\n\r\n        // paste callback\r\n        returned = this.app.broadcast('pasting', html);\r\n        html = (returned === undefined) ? html : returned;\r\n\r\n        this._restoreSelection();\r\n\r\n        // stop input\r\n        if (!this.opts.input) return;\r\n\r\n        this.app.broadcast('state', false);\r\n\r\n        // insert\r\n        var nodes = [];\r\n        if (this.isRawCode) {\r\n            html = html.replace('&lt;?php', '<?php');\r\n\r\n            var textNode = document.createTextNode(html);\r\n            nodes = this.insertion.insertNode(textNode, 'after');\r\n\r\n            this.app.broadcast('pasted', nodes);\r\n        }\r\n        else {\r\n\r\n            // autoparse\r\n            if (this.opts.autoparse && this.opts.autoparsePaste)\r\n            {\r\n                html = this.autoparser.parse(html);\r\n            }\r\n\r\n            nodes = (this.dropPasted) ? this.insertion.insertToPoint(e, html, this.pointInserted) : this.insertion.insertHtml(html);\r\n\r\n            // pasted callback\r\n            this.app.broadcast('pasted', nodes);\r\n            this.app.broadcast('autoparseobserve');\r\n        }\r\n\r\n    },\r\n    _insertFiles: function(e, files)\r\n    {\r\n        this._restoreSelection();\r\n\r\n        // drop or clipboard\r\n        var isImage = (this.opts.imageTypes.indexOf(files[0].type) !== -1);\r\n        var isClipboard = (typeof this.dropPasted === 'undefined');\r\n\r\n        if (isImage) this.app.broadcast('dropimage', e, files, isClipboard);\r\n        else this.app.broadcast('dropfile', e, files, isClipboard);\r\n    }\r\n});\r\n$R.add('class', 'input.shortcode', {\r\n    init: function(app, e, key)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.marker = app.marker;\r\n        this.keycodes = app.keycodes;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.worked = false;\r\n\r\n        // init\r\n        if (key === this.keycodes.SPACE) this._init();\r\n    },\r\n    // public\r\n    is: function()\r\n    {\r\n        return this.worked;\r\n    },\r\n    // private\r\n    _init: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        if (current && current.nodeType === 3)\r\n        {\r\n            var text = this.utils.removeInvisibleChars(current.textContent);\r\n            var shortcodes = this.opts.shortcodes;\r\n            for (var name in shortcodes)\r\n            {\r\n                var re = new RegExp('^' + this.utils.escapeRegExp(name));\r\n                var match = text.match(re);\r\n                if (match !== null)\r\n                {\r\n                    if (typeof shortcodes[name].format !== 'undefined')\r\n                    {\r\n                        return this._format(shortcodes[name].format, current, re);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _format: function(tag, current, re)\r\n    {\r\n        var marker = this.marker.insert('start');\r\n        current = marker.previousSibling;\r\n\r\n        var text = current.textContent;\r\n        text = this.utils.trimSpaces(text);\r\n        text = text.replace(re, '');\r\n        current.textContent = text;\r\n\r\n        var api = (tag === 'ul' || tag === 'ol') ? 'module.list.toggle' : 'module.block.format';\r\n\r\n        this.app.api(api, tag);\r\n        this.selection.restoreMarkers();\r\n\r\n        this.worked = true;\r\n    }\r\n});\r\n$R.add('class', 'input.shortcut', {\r\n    init: function(app, e)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.worked = false;\r\n\r\n        // based on https://github.com/jeresig/jquery.hotkeys\r\n        this.hotkeys = {\r\n            8: \"backspace\", 9: \"tab\", 10: \"return\", 13: \"return\", 16: \"shift\", 17: \"ctrl\", 18: \"alt\", 19: \"pause\",\r\n            20: \"capslock\", 27: \"esc\", 32: \"space\", 33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",\r\n            37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\", 45: \"insert\", 46: \"del\", 59: \";\", 61: \"=\",\r\n            96: \"0\", 97: \"1\", 98: \"2\", 99: \"3\", 100: \"4\", 101: \"5\", 102: \"6\", 103: \"7\",\r\n            104: \"8\", 105: \"9\", 106: \"*\", 107: \"+\", 109: \"-\", 110: \".\", 111 : \"/\",\r\n            112: \"f1\", 113: \"f2\", 114: \"f3\", 115: \"f4\", 116: \"f5\", 117: \"f6\", 118: \"f7\", 119: \"f8\",\r\n            120: \"f9\", 121: \"f10\", 122: \"f11\", 123: \"f12\", 144: \"numlock\", 145: \"scroll\", 173: \"-\", 186: \";\", 187: \"=\",\r\n            188: \",\", 189: \"-\", 190: \".\", 191: \"/\", 192: \"`\", 219: \"[\", 220: \"\\\\\", 221: \"]\", 222: \"'\"\r\n        };\r\n\r\n        this.hotkeysShiftNums = {\r\n            \"`\": \"~\", \"1\": \"!\", \"2\": \"@\", \"3\": \"#\", \"4\": \"$\", \"5\": \"%\", \"6\": \"^\", \"7\": \"&\",\r\n            \"8\": \"*\", \"9\": \"(\", \"0\": \")\", \"-\": \"_\", \"=\": \"+\", \";\": \": \", \"'\": \"\\\"\", \",\": \"<\",\r\n            \".\": \">\",  \"/\": \"?\",  \"\\\\\": \"|\"\r\n        };\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // public\r\n    is: function()\r\n    {\r\n        return this.worked;\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // disable browser's hot keys for bold and italic if shortcuts off\r\n        if (this.opts.shortcuts === false)\r\n        {\r\n            if ((e.ctrlKey || e.metaKey) && (e.which === 66 || e.which === 73)) e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // build\r\n        for (var key in this.opts.shortcuts)\r\n        {\r\n            this._build(e, key, this.opts.shortcuts[key]);\r\n        }\r\n    },\r\n    _build: function(e, str, command)\r\n    {\r\n        var keys = str.split(',');\r\n        var len = keys.length;\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            if (typeof keys[i] === 'string')\r\n            {\r\n                this._handler(e, keys[i].trim(), command);\r\n            }\r\n        }\r\n    },\r\n    _handler: function(e, keys, command)\r\n    {\r\n        keys = keys.toLowerCase().split(\" \");\r\n\r\n        var special = this.hotkeys[e.keyCode];\r\n        var character = String.fromCharCode(e.which).toLowerCase();\r\n        var modif = \"\", possible = {};\r\n        var cmdKeys = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\r\n\r\n        for (var i = 0; i < cmdKeys.length; i++)\r\n        {\r\n            var specialKey = cmdKeys[i];\r\n            if (e[specialKey + 'Key'] && special !== specialKey)\r\n            {\r\n                modif += specialKey + '+';\r\n            }\r\n        }\r\n\r\n        if (special) possible[modif + special] = true;\r\n        if (character)\r\n        {\r\n            possible[modif + character] = true;\r\n            possible[modif + this.hotkeysShiftNums[character]] = true;\r\n\r\n            // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\r\n            if (modif === \"shift+\")\r\n            {\r\n                possible[this.hotkeysShiftNums[character]] = true;\r\n            }\r\n        }\r\n\r\n        var len = keys.length;\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            if (possible[keys[i]])\r\n            {\r\n\r\n                e.preventDefault();\r\n                this.worked = true;\r\n\r\n                if (command.message)\r\n                {\r\n                    this.app.broadcast(command.message, command.args);\r\n                    this.app.broadcast('buffer.trigger');\r\n                }\r\n                else if (command.api)\r\n                {\r\n                    this.app.api(command.api, command.args);\r\n                    this.app.broadcast('buffer.trigger');\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'input.space', {\r\n    init: function(app, e, key, lastShiftKey)\r\n    {\r\n        this.app = app;\r\n        this.keycodes = app.keycodes;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.key = key;\r\n        this.lastShiftKey = lastShiftKey;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // has non-editable\r\n        if (this.selection.hasNonEditable())\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // shift/ctrl + space\r\n        if (!this.lastShiftKey && this.key === this.keycodes.SPACE && (e.ctrlKey || e.shiftKey) && !e.metaKey)\r\n        {\r\n            e.preventDefault();\r\n            this.insertion.insertChar('&nbsp;');\r\n            return;\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'input.tab', {\r\n    init: function(app, e)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // turn off tab\r\n        if (!this.opts.tabKey) return;\r\n\r\n        // callback\r\n        var stop = this.app.broadcast('tab', e);\r\n        if (stop === false) return e.preventDefault();\r\n\r\n        // traverse\r\n        this._traverse(e);\r\n    },\r\n    _traverse: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        // hard tab\r\n        if (!data.isComponent() && e.shiftKey)\r\n        {\r\n            return this._insertHardTab(e, 4);\r\n        }\r\n\r\n        // list\r\n        if (data.isList())\r\n        {\r\n            e.preventDefault();\r\n            return this.app.api('module.list.indent');\r\n        }\r\n        // pre\r\n        if (data.isPre() || (data.isComponentType('code') && !data.isFigcaption()))\r\n        {\r\n            return this._tabCode(e);\r\n        }\r\n\r\n        // tab as spaces\r\n        if (this.opts.tabAsSpaces !== false)\r\n        {\r\n            return this._insertHardTab(e, this.opts.tabAsSpaces);\r\n        }\r\n    },\r\n    _insertHardTab: function(e, num)\r\n    {\r\n        e.preventDefault();\r\n        var node = document.createTextNode(Array(num + 1).join('\\u00a0'));\r\n        return this.insertion.insertNode(node, 'end');\r\n    },\r\n    _tabCode: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var node = (this.opts.preSpaces) ? document.createTextNode(Array(this.opts.preSpaces + 1).join('\\u00a0')) : document.createTextNode('\\t');\r\n\r\n        return this.insertion.insertNode(node, 'end');\r\n    }\r\n});\r\n$R.add('module', 'upload', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.progress = app.progress;\r\n\r\n        // local\r\n        this.defaults = {\r\n            event: false,\r\n            element: false,\r\n            name: false,\r\n            files: false,\r\n            url: false,\r\n            data: false,\r\n            paramName: false\r\n        };\r\n    },\r\n    // public\r\n    build: function(options)\r\n    {\r\n        this.p = $R.extend(this.defaults, options);\r\n        this.$el = $R.dom(this.p.element);\r\n\r\n        if (this.$el.get().tagName === 'INPUT') this._buildInput();\r\n        else                                    this._buildBox();\r\n    },\r\n    send: function(options)\r\n    {\r\n        this.p = $R.extend(this.defaults, options);\r\n        this.$uploadbox = this.editor.getElement();\r\n        this._send(this.p.event, this.p.files);\r\n    },\r\n    complete: function(response, e)\r\n    {\r\n        this._complete(response, e);\r\n    },\r\n\r\n    // private\r\n    _buildInput: function()\r\n    {\r\n        this.box = false;\r\n        this.prefix = '';\r\n\r\n        this.$uploadbox = $R.dom('<div class=\"upload-redactor-box\" />');\r\n\r\n        this.$el.hide();\r\n        this.$el.after(this.$uploadbox);\r\n\r\n        if (this.opts.multipleUpload) this.$el.attr('multiple', 'multiple');\r\n        else this.$el.removeAttr('multiple');\r\n\r\n        if (this.p.name !== 'file')\r\n        {\r\n            this.$el.attr('accept', 'image/*');\r\n        }\r\n\r\n        this._buildPlaceholder();\r\n        this._buildEvents();\r\n    },\r\n    _buildBox: function()\r\n    {\r\n        this.box = true;\r\n        this.prefix = 'box-';\r\n\r\n        this.$uploadbox = this.$el;\r\n        this.$uploadbox.attr('ondragstart', 'return false;');\r\n\r\n        // events\r\n        this.$uploadbox.on('drop.redactor.upload', this._onDropBox.bind(this));\r\n        this.$uploadbox.on('dragover.redactor.upload', this._onDragOver.bind(this));\r\n        this.$uploadbox.on('dragleave.redactor.upload', this._onDragLeave.bind(this));\r\n    },\r\n    _buildPlaceholder: function()\r\n    {\r\n        this.$placeholder = $R.dom('<div class=\"upload-redactor-placeholder\" />');\r\n        this.$placeholder.html(this.lang.get('upload-label'));\r\n        this.$uploadbox.append(this.$placeholder);\r\n    },\r\n    _buildEvents: function()\r\n    {\r\n        this.$el.on('change.redactor.upload', this._onChange.bind(this));\r\n        this.$uploadbox.on('click.redactor.upload', this._onClick.bind(this));\r\n        this.$uploadbox.on('drop.redactor.upload', this._onDrop.bind(this));\r\n        this.$uploadbox.on('dragover.redactor.upload', this._onDragOver.bind(this));\r\n        this.$uploadbox.on('dragleave.redactor.upload', this._onDragLeave.bind(this));\r\n    },\r\n    _onClick: function(e)\r\n    {\r\n        e.preventDefault();\r\n        this.$el.click();\r\n    },\r\n    _onChange: function(e)\r\n    {\r\n        this._send(e, this.$el.get().files);\r\n    },\r\n    _onDrop: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        this._clear();\r\n        this._setStatusDrop();\r\n        this._send(e);\r\n    },\r\n    _onDragOver: function(e)\r\n    {\r\n        e.preventDefault();\r\n        this._setStatusHover();\r\n\r\n        return false;\r\n    },\r\n    _onDragLeave: function(e)\r\n    {\r\n        e.preventDefault();\r\n        this._removeStatusHover();\r\n\r\n        return false;\r\n    },\r\n    _onDropBox: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        this._clear();\r\n        this._setStatusDrop();\r\n        this._send(e);\r\n    },\r\n    _removeStatusHover: function()\r\n    {\r\n        this.$uploadbox.removeClass('upload-redactor-' + this.prefix + 'hover');\r\n    },\r\n    _setStatusDrop: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'drop');\r\n    },\r\n    _setStatusHover: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'hover');\r\n    },\r\n    _setStatusError: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'error');\r\n    },\r\n    _setStatusSuccess: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'success');\r\n    },\r\n    _clear: function()\r\n    {\r\n        var classes = ['drop', 'hover', 'error', 'success'];\r\n        for (var i = 0; i < classes.length; i++)\r\n        {\r\n            this.$uploadbox.removeClass('upload-redactor-' + this.prefix + classes[i]);\r\n        }\r\n\r\n        this.$uploadbox.removeAttr('ondragstart');\r\n    },\r\n    _send: function(e, files)\r\n    {\r\n        e = e.originalEvent || e;\r\n\r\n        files = (files) ? files : e.dataTransfer.files;\r\n\r\n        var data = new FormData();\r\n        var name = this._getUploadParam();\r\n\r\n        data = this._buildData(name, files, data);\r\n        data = this.utils.extendData(data, this.p.data);\r\n\r\n        var stop = this.app.broadcast('upload.start', e, data, files);\r\n        if (stop !== false)\r\n        {\r\n            this._sendData(data, files, e);\r\n        }\r\n    },\r\n    _sendData: function(data, files, e)\r\n    {\r\n        this.progress.show();\r\n        if (typeof this.p.url === 'function')\r\n        {\r\n            var res = this.p.url(data, files, e, this);\r\n            if (!(res instanceof Promise))\r\n            {\r\n                this._complete(res, e);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            $R.ajax.post({\r\n                url: this.p.url,\r\n                data: data,\r\n                before: function(xhr)\r\n                {\r\n                    return this.app.broadcast('upload.beforeSend', xhr);\r\n\r\n                }.bind(this),\r\n                success: function(response)\r\n                {\r\n                    this._complete(response, e);\r\n                }.bind(this),\r\n                error: function(response, xhr, status)\r\n                {\r\n                    this._complete(response, e, status);\r\n                }.bind(this)\r\n            });\r\n        }\r\n    },\r\n    _getUploadParam: function()\r\n    {\r\n        return (this.p.paramName) ? this.p.paramName : 'file';\r\n    },\r\n    _buildData: function(name, files, data)\r\n    {\r\n        if (files.length === 1)\r\n        {\r\n            data.append(name, files[0]);\r\n        }\r\n        else if (files.length > 1 && this.opts.multipleUpload !== false)\r\n        {\r\n            for (var i = 0; i < files.length; i++)\r\n            {\r\n                data.append(name + '[]', files[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    _complete: function(response, e, status)\r\n    {\r\n        this._clear();\r\n        this.progress.hide();\r\n\r\n        if (response && response.error)\r\n        {\r\n            this._setStatusError();\r\n\r\n            this.app.broadcast('upload.' + this.p.name + '.error', response, e, status);\r\n            this.app.broadcast('upload.error', response, status);\r\n        }\r\n        else\r\n        {\r\n            this._setStatusSuccess();\r\n\r\n            this.app.broadcast('upload.' + this.p.name + '.complete', response, e);\r\n            this.app.broadcast('upload.complete', response);\r\n\r\n            setTimeout(this._clear.bind(this), 500);\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'code.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n\r\n    // private\r\n   _init: function(el)\r\n    {\r\n        var $pre;\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $wrapper = $node.closest('figure');\r\n            if ($wrapper.length !== 0)\r\n            {\r\n                this.parse($wrapper);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.append(el);\r\n            }\r\n\r\n            $pre = this.find('pre code, pre').last();\r\n        }\r\n        else\r\n        {\r\n            $pre = $R.dom('<pre>');\r\n\r\n            this.parse('<figure>');\r\n            this.append($pre);\r\n        }\r\n\r\n        this._initElement($pre);\r\n        this._initWrapper();\r\n    },\r\n    _initElement: function($pre)\r\n    {\r\n        $pre.attr({\r\n            'tabindex': '-1',\r\n            'contenteditable': true\r\n        });\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'code',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n$R.add('module', 'form', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.lang = app.lang;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n    },\r\n    // messages\r\n    onform: {\r\n        remove: function(node)\r\n        {\r\n            this._remove(node);\r\n        }\r\n    },\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isComponentType('form'))\r\n        {\r\n            var node = data.getComponent();\r\n            var buttons = {\r\n                \"remove\": {\r\n                    title: this.lang.get('delete'),\r\n                    api: 'module.form.remove',\r\n                    args: node\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons, 'top');\r\n        }\r\n\r\n    },\r\n\r\n    // private\r\n    _remove: function(node)\r\n    {\r\n        this.component.remove(node);\r\n    }\r\n});\r\n$R.add('class', 'form.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.utils = app.utils;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $wrapper = $node.closest('form');\r\n            if ($wrapper.length !== 0)\r\n            {\r\n                var $figure = this.utils.replaceToTag(el, 'figure');\r\n                this.parse($figure);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.append(el);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.parse('<figure>');\r\n        }\r\n\r\n        this._initWrapper();\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'form',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n$R.add('module', 'image', {\r\n    modals: {\r\n        'image':\r\n            '<div class=\"redactor-modal-tab redactor-modal-tab-upload\" data-title=\"## upload ##\"><form action=\"\"> \\\r\n                <input type=\"file\" name=\"file\"> \\\r\n            </form></div>',\r\n        'imageedit':\r\n            '<div class=\"redactor-modal-group\"> \\\r\n                <div id=\"redactor-modal-image-preview\" class=\"redactor-modal-side\"></div> \\\r\n                <form action=\"\" class=\"redactor-modal-area\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label for=\"modal-image-title\"> ## title ##</label> \\\r\n                        <input type=\"text\" id=\"modal-image-title\" name=\"title\" /> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-caption\"> \\\r\n                        <label for=\"modal-image-caption\">## caption ##</label> \\\r\n                        <input type=\"text\" id=\"modal-image-caption\" name=\"caption\" aria-label=\"## caption ##\" /> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-align\"> \\\r\n                        <label>## image-position ##</label> \\\r\n                        <select name=\"align\" aria-label=\"## image-position ##\"> \\\r\n                            <option value=\"none\">## none ##</option> \\\r\n                            <option value=\"left\">## left ##</option> \\\r\n                            <option value=\"center\">## center ##</option> \\\r\n                            <option value=\"right\">## right ##</option> \\\r\n                        </select> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-link\"> \\\r\n                        <label for=\"modal-image-url\">## link ##</label> \\\r\n                        <input type=\"text\" id=\"modal-image-url\" name=\"url\" aria-label=\"## link ##\" /> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-link\"> \\\r\n                        <label class=\"checkbox-label\"> \\\r\n                            <div class=\"checkbox-label__text\" style=\"padding-left: 20px;\">## link-in-new-tab ##</div> \\\r\n                            <input type=\"checkbox\" class=\"checkbox\" name=\"target\"> \\\r\n                        </label> \\\r\n                    </div> \\\r\n                </form> \\\r\n            </div>'\r\n    },\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.storage = app.storage;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.justResized = false;\r\n    },\r\n    // messages\r\n    oninsert: function()\r\n    {\r\n        this._observeImages();\r\n    },\r\n    onstarted: function()\r\n    {\r\n        // storage observe\r\n        this.storage.observeImages();\r\n\r\n        // resize\r\n        if (this.opts.imageResizable)\r\n        {\r\n            this.resizer = $R.create('image.resize', this.app);\r\n        }\r\n\r\n        // observe\r\n        this._observeImages();\r\n    },\r\n    ondropimage: function(e, files, clipboard)\r\n    {\r\n        if (!this.opts.imageUpload) return;\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            event: (clipboard) ? false : e,\r\n            files: files,\r\n            name: 'imagedrop',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.send', options);\r\n    },\r\n    onstop: function()\r\n    {\r\n        if (this.resizer) this.resizer.stop();\r\n    },\r\n    onbottomclick: function()\r\n    {\r\n        this.insertion.insertToEnd(this.editor.getLastNode(), 'image');\r\n    },\r\n    onimageresizer: {\r\n        stop: function()\r\n        {\r\n            if (this.resizer) this.resizer.hide();\r\n        }\r\n    },\r\n    onsource: {\r\n        open: function()\r\n        {\r\n            if (this.resizer) this.resizer.hide();\r\n        },\r\n        closed: function()\r\n        {\r\n            this._observeImages();\r\n            if (this.resizer) this.resizer.rebuild();\r\n        }\r\n    },\r\n    onupload: {\r\n        complete: function()\r\n        {\r\n            this._observeImages();\r\n        },\r\n        image: {\r\n            complete: function(response)\r\n            {\r\n                this._insert(response);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        imageedit: {\r\n            complete: function(response)\r\n            {\r\n                this._change(response);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        imagedrop: {\r\n            complete: function(response, e)\r\n            {\r\n                this._insert(response, e);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        imagereplace: {\r\n            complete: function(response)\r\n            {\r\n                this._change(response, false);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        }\r\n    },\r\n    onmodal: {\r\n        image: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setUpload($modal, $form);\r\n            }\r\n        },\r\n        imageedit: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setFormData($modal, $form);\r\n            },\r\n            opened: function($modal, $form)\r\n            {\r\n                this._setFormFocus($form);\r\n            },\r\n            remove: function()\r\n            {\r\n                this._remove(this.$image);\r\n            },\r\n            save: function($modal, $form)\r\n            {\r\n                this._save($modal, $form);\r\n            }\r\n        }\r\n    },\r\n    onimage: {\r\n        observe: function()\r\n        {\r\n            this._observeImages();\r\n        },\r\n        resized: function()\r\n        {\r\n            this.justResized = true;\r\n        }\r\n    },\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        if (this.justResized)\r\n        {\r\n            this.justResized = false;\r\n            return;\r\n        }\r\n\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $img = $R.dom(current).closest('img');\r\n\r\n        if ((!data.isFigcaption() && data.isComponentType('image')) || $img.length !== 0)\r\n        {\r\n            var node = ($img.length !== 0) ? $img.get() : data.getComponent();\r\n            var buttons = {\r\n                \"edit\": {\r\n                    title: this.lang.get('edit'),\r\n                    api: 'module.image.open'\r\n                },\r\n                \"remove\": {\r\n                    title: this.lang.get('delete'),\r\n                    api: 'module.image.remove',\r\n                    args: node\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons);\r\n        }\r\n    },\r\n\r\n    // public\r\n    open: function()\r\n    {\r\n        this.$image = this._getCurrent();\r\n        this.app.api('module.modal.build', this._getModalData());\r\n    },\r\n    insert: function(data)\r\n    {\r\n        this._insert(data);\r\n    },\r\n    remove: function(node)\r\n    {\r\n        this._remove(node);\r\n    },\r\n\r\n    // private\r\n    _getModalData: function()\r\n    {\r\n        var modalData;\r\n        if (this._isImage() && this.opts.imageEditable)\r\n        {\r\n            modalData = {\r\n                name: 'imageedit',\r\n                width: '800px',\r\n                title: this.lang.get('edit'),\r\n                handle: 'save',\r\n                commands: {\r\n                    save: { title: this.lang.get('save') },\r\n                    remove: { title: this.lang.get('delete'), type: 'danger' },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n        }\r\n        else\r\n        {\r\n            modalData = {\r\n                name: 'image',\r\n                title: this.lang.get('image')\r\n            };\r\n        }\r\n\r\n        return modalData;\r\n    },\r\n    _isImage: function()\r\n    {\r\n        return this.$image;\r\n    },\r\n    _getCurrent: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $img = $R.dom(current).closest('img');\r\n\r\n        if ($img.length !== 0) {\r\n            return this.component.create('image', $img);\r\n        }\r\n        else {\r\n            return (data.isComponentType('image') && data.isComponentActive()) ? this.component.create('image', data.getComponent()) : false;\r\n        }\r\n    },\r\n    _insert: function(response, e)\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        if (Array.isArray(response))\r\n        {\r\n            var obj = {};\r\n            for (var i = 0; i < response.length; i++)\r\n            {\r\n                obj = $R.extend(obj, response[i]);\r\n            }\r\n\r\n            response = obj;\r\n        }\r\n        else if (typeof response === 'string')\r\n        {\r\n            response = { \"file\": { url: response }};\r\n        }\r\n\r\n        if (typeof response === 'object')\r\n        {\r\n\r\n            var multiple = 0;\r\n            for (var key in response)\r\n            {\r\n                if (typeof response[key] === 'object') multiple++;\r\n            }\r\n\r\n            if (multiple > 1)\r\n            {\r\n                this._insertMultiple(response, e);\r\n            }\r\n            else\r\n            {\r\n                this._insertSingle(response, e);\r\n            }\r\n        }\r\n    },\r\n    _insertSingle: function(response, e)\r\n    {\r\n        for (var key in response)\r\n        {\r\n            if (typeof response[key] === 'object')\r\n            {\r\n                var $img = this._createImageAndStore(response[key]);\r\n                var inserted = (e) ? this.insertion.insertToPoint(e, $img, false, false) : this.insertion.insertHtml($img, false);\r\n\r\n                this._removeSpaceBeforeFigure(inserted[0]);\r\n\r\n                // set is active\r\n                this.component.setActive(inserted[0]);\r\n                this.app.broadcast('image.uploaded', inserted[0], response);\r\n            }\r\n        }\r\n    },\r\n    _insertMultiple: function(response, e)\r\n    {\r\n        var z = 0;\r\n        var inserted = [];\r\n        var last;\r\n        for (var key in response)\r\n        {\r\n            if (typeof response[key] === 'object')\r\n            {\r\n                z++;\r\n\r\n                var $img = this._createImageAndStore(response[key]);\r\n\r\n                if (z === 1)\r\n                {\r\n                    inserted = (e) ? this.insertion.insertToPoint(e, $img, false, false) : this.insertion.insertHtml($img, false);\r\n                }\r\n                else\r\n                {\r\n                    var $inserted = $R.dom(inserted[0]);\r\n                    $inserted.after($img);\r\n                    inserted = [$img.get()];\r\n\r\n                    this.app.broadcast('image.inserted', $img);\r\n                }\r\n\r\n                last = inserted[0];\r\n\r\n                this._removeSpaceBeforeFigure(inserted[0]);\r\n                this.app.broadcast('image.uploaded', inserted[0], response);\r\n            }\r\n        }\r\n\r\n        // set last is active\r\n        this.component.setActive(last);\r\n    },\r\n    _createImageAndStore: function(item)\r\n    {\r\n        var $img = this.component.create('image');\r\n\r\n        $img.addClass('redactor-uploaded-figure');\r\n        $img.setData({\r\n            src: item.url,\r\n            id: (item.id) ? item.id : this.utils.getRandomId()\r\n        });\r\n\r\n        // add to storage\r\n        this.storage.add('image', $img.getElement());\r\n\r\n        return $img;\r\n    },\r\n    _removeSpaceBeforeFigure: function(img)\r\n    {\r\n        if (!img) return;\r\n\r\n        var prev = img.previousSibling;\r\n        var next = img.nextSibling;\r\n        var $prev = $R.dom(prev);\r\n        var $next = $R.dom(next);\r\n\r\n        if (this.opts.breakline) {\r\n            if (next && $next.attr('data-redactor-tag') === 'br') {\r\n                $next.find('br').first().remove();\r\n            }\r\n            if (prev && $prev.attr('data-redactor-tag') === 'br') {\r\n                $prev.find('br').last().remove();\r\n            }\r\n        }\r\n\r\n        if (prev)\r\n        {\r\n            this._removeInvisibleSpace(prev);\r\n            this._removeInvisibleSpace(prev.previousSibling);\r\n        }\r\n    },\r\n    _removeInvisibleSpace: function(el)\r\n    {\r\n        if (el && el.nodeType === 3 && this.utils.searchInvisibleChars(el.textContent) !== -1)\r\n        {\r\n            el.parentNode.removeChild(el);\r\n        }\r\n    },\r\n    _save: function($modal, $form)\r\n    {\r\n        var data = $form.getData();\r\n        var imageData = {\r\n            title: data.title\r\n        };\r\n\r\n        if (this.opts.imageLink) imageData.link = { url: data.url, target: data.target };\r\n        if (this.opts.imageCaption) imageData.caption = data.caption;\r\n        if (this.opts.imagePosition) imageData.align = data.align;\r\n\r\n        this.$image.setData(imageData);\r\n        if (this.resizer) this.resizer.rebuild();\r\n\r\n        this.app.broadcast('image.changed', this.$image);\r\n        this.app.api('module.modal.close');\r\n    },\r\n    _change: function(response, modal)\r\n    {\r\n        if (typeof response === 'string')\r\n        {\r\n            response = { \"file\": { url: response }};\r\n        }\r\n\r\n        if (typeof response === 'object')\r\n        {\r\n            var $img;\r\n            for (var key in response)\r\n            {\r\n                if (typeof response[key] === 'object')\r\n                {\r\n                    $img = $R.dom('<img>');\r\n                    $img.attr('src', response[key].url);\r\n\r\n                    this.$image.changeImage(response[key]);\r\n\r\n                    this.app.broadcast('image.changed', this.$image, response);\r\n                    this.app.broadcast('image.uploaded', this.$image, response);\r\n\r\n                    this.app.broadcast('hardsync');\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (modal !== false)\r\n            {\r\n                $img.on('load', function() { this.$previewBox.html($img); }.bind(this));\r\n            }\r\n        }\r\n    },\r\n    _uploadError: function(response)\r\n    {\r\n        this.app.broadcast('image.uploadError', response);\r\n    },\r\n    _remove: function(node)\r\n    {\r\n        this.app.api('module.modal.close');\r\n        this.component.remove(node);\r\n    },\r\n    _observeImages: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var self = this;\r\n        $editor.find('img').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n\r\n            $node.off('.drop-to-replace');\r\n            $node.on('dragover.drop-to-replace dragenter.drop-to-replace', function(e)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            });\r\n\r\n            $node.on('drop.drop-to-replace', function(e)\r\n            {\r\n                if (!self.app.isDragComponentInside())\r\n                {\r\n                    return self._setReplaceUpload(e, $node);\r\n                }\r\n            });\r\n        });\r\n    },\r\n    _setFormData: function($modal, $form)\r\n    {\r\n        this._buildPreview($modal);\r\n        this._buildPreviewUpload();\r\n\r\n        var imageData = this.$image.getData();\r\n        var data = {\r\n            title: imageData.title\r\n        };\r\n\r\n        // caption\r\n        if (this.opts.imageCaption) data.caption = imageData.caption;\r\n        else $modal.find('.form-item-caption').hide();\r\n\r\n        // position\r\n        if (this.opts.imagePosition) data.align = imageData.align;\r\n        else $modal.find('.form-item-align').hide();\r\n\r\n        // link\r\n        if (this.opts.imageLink)\r\n        {\r\n            if (imageData.link)\r\n            {\r\n                data.url = imageData.link.url;\r\n                if (imageData.link.target) data.target = true;\r\n            }\r\n        }\r\n        else $modal.find('.form-item-link').hide();\r\n\r\n        $form.setData(data);\r\n    },\r\n    _setFormFocus: function($form)\r\n    {\r\n        $form.getField('title').focus();\r\n    },\r\n    _setReplaceUpload: function(e, $node)\r\n    {\r\n        e = e.originalEvent || e;\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (!this.opts.imageUpload) return;\r\n\r\n        this.$image = this.component.create('image', $node);\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            files: e.dataTransfer.files,\r\n            name: 'imagereplace',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.send', options);\r\n\r\n        return;\r\n    },\r\n    _setUpload: function($modal, $form)\r\n    {\r\n        if (!this.opts.imageUpload) {\r\n            var $body = $modal.getBody();\r\n            var $tab = $body.find('.redactor-modal-tab-upload');\r\n            $tab.remove();\r\n        }\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            element: $form.getField('file'),\r\n            name: 'image',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.build', options);\r\n    },\r\n    _buildPreview: function($modal)\r\n    {\r\n        this.$preview = $modal.find('#redactor-modal-image-preview');\r\n\r\n        var imageData = this.$image.getData();\r\n        var $previewImg = $R.dom('<img>');\r\n        $previewImg.attr('src', imageData.src);\r\n\r\n        this.$previewBox = $R.dom('<div>');\r\n        this.$previewBox.append($previewImg);\r\n\r\n        this.$preview.html('');\r\n        this.$preview.append(this.$previewBox);\r\n    },\r\n    _buildPreviewUpload: function()\r\n    {\r\n        if (!this.opts.imageUpload) return;\r\n\r\n        var $desc = $R.dom('<div class=\"desc\">');\r\n        $desc.html(this.lang.get('upload-change-label'));\r\n\r\n        this.$preview.append($desc);\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            element: this.$previewBox,\r\n            name: 'imageedit',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.build', options);\r\n    }\r\n});\r\n$R.add('class', 'image.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.selection = app.selection;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    setData: function(data)\r\n    {\r\n        for (var name in data)\r\n        {\r\n            this._set(name, data[name]);\r\n        }\r\n    },\r\n    getData: function()\r\n    {\r\n        var names = ['src', 'title', 'caption', 'align', 'link', 'id'];\r\n        var data = {};\r\n\r\n        for (var i = 0; i < names.length; i++)\r\n        {\r\n            data[names[i]] = this._get(names[i]);\r\n        }\r\n\r\n        return data;\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$element;\r\n    },\r\n    changeImage: function(data)\r\n    {\r\n        this.$element.attr('src', data.url);\r\n    },\r\n\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        var $el = $R.dom(el);\r\n        var $figure = $el.closest('figure');\r\n\r\n        if (el === undefined)\r\n        {\r\n            this.$element = $R.dom('<img>');\r\n            this.parse('<figure>');\r\n            this.append(this.$element);\r\n        }\r\n        else if ($figure.length === 0)\r\n        {\r\n            this.parse('<figure>');\r\n            this.$element = $el;\r\n            this.$element.wrap(this);\r\n        }\r\n        else\r\n        {\r\n            this.parse($figure);\r\n            this.$element = this.find('img');\r\n        }\r\n\r\n        this._initWrapper();\r\n    },\r\n    _set: function(name, value)\r\n    {\r\n        this['_set_' + name](value);\r\n    },\r\n    _get: function(name)\r\n    {\r\n        return this['_get_' + name]();\r\n    },\r\n    _set_src: function(src)\r\n    {\r\n       this.$element.attr('src', src);\r\n    },\r\n    _set_id: function(id)\r\n    {\r\n        if (this.opts.imageObserve) {\r\n            this.$element.attr('data-image', id);\r\n        }\r\n    },\r\n    _set_title: function(title)\r\n    {\r\n        title = title.trim().replace(/(<([^>]+)>)/ig,\"\");\r\n\r\n        if (title === '')\r\n        {\r\n            this.$element.removeAttr('alt');\r\n        }\r\n        else\r\n        {\r\n            this.$element.attr('alt', title);\r\n        }\r\n\r\n    },\r\n    _set_caption: function(caption)\r\n    {\r\n        var $figcaption = this.find('figcaption');\r\n        if ($figcaption.length === 0)\r\n        {\r\n            $figcaption = $R.dom('<figcaption>');\r\n            $figcaption.attr('contenteditable', 'true');\r\n\r\n            this.append($figcaption);\r\n        }\r\n\r\n        if (caption === '') $figcaption.remove();\r\n        else $figcaption.html(caption);\r\n\r\n        return $figcaption;\r\n    },\r\n    _set_align: function(align)\r\n    {\r\n        var imageFloat = '';\r\n        var imageMargin = '';\r\n        var textAlign = '';\r\n        var $el = this;\r\n        var $img = this.find('img');\r\n        var $figcaption = this.find('figcaption');\r\n\r\n        if (typeof this.opts.imagePosition === 'object')\r\n        {\r\n            var positions = this.opts.imagePosition;\r\n            for (var key in positions)\r\n            {\r\n                $el.removeClass(positions[key]);\r\n            }\r\n\r\n            var alignClass = (typeof positions[align] !== 'undefined') ? positions[align] : false;\r\n            if (alignClass)\r\n            {\r\n                $el.addClass(alignClass);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var width = $img.width();\r\n\r\n            switch (align)\r\n            {\r\n\r\n                case 'left':\r\n                    imageFloat = 'left';\r\n                    imageMargin = this.opts.imageFloatMargin;\r\n                break;\r\n                case 'right':\r\n                    imageFloat = 'right';\r\n                    imageMargin = this.opts.imageFloatMargin;\r\n                break;\r\n                case 'center':\r\n                    textAlign = 'center';\r\n                    imageMargin = 'auto';\r\n                break;\r\n            }\r\n\r\n            $el.css({ 'float': imageFloat, width: width + 'px', maxWidth: width + 'px', 'margin-left': imageMargin, 'margin-right': imageMargin, 'text-align': textAlign });\r\n            $el.attr('rel', $el.attr('style'));\r\n\r\n            if (align === 'none') {\r\n                $el.css('max-width', '');\r\n                $el.css('width', '');\r\n            }\r\n\r\n            if (align === 'center')\r\n            {\r\n                $el.css('max-width', '');\r\n                $el.css('width', '');\r\n                $figcaption.css('text-align', 'center');\r\n            }\r\n            else\r\n            {\r\n                $figcaption.css('text-align', '');\r\n            }\r\n        }\r\n    },\r\n    _set_link: function(data)\r\n    {\r\n        var $link = this._findLink();\r\n        if (data.url === '')\r\n        {\r\n            if ($link) $link.unwrap();\r\n\r\n            return;\r\n        }\r\n\r\n        if (!$link)\r\n        {\r\n            $link = $R.dom('<a>');\r\n            this.$element.wrap($link);\r\n        }\r\n\r\n        $link.attr('href', data.url);\r\n\r\n        if (data.target) $link.attr('target', (data.target === true) ? '_blank' : data.target);\r\n        else $link.removeAttr('target');\r\n\r\n        return $link;\r\n    },\r\n    _get_src: function()\r\n    {\r\n        return this.$element.attr('src');\r\n    },\r\n    _get_id: function()\r\n    {\r\n        return this.$element.attr('data-image');\r\n    },\r\n    _get_title: function()\r\n    {\r\n        var alt = this.$element.attr('alt');\r\n\r\n        return (alt) ? alt : '';\r\n    },\r\n    _get_caption: function()\r\n    {\r\n        var $figcaption = this.find('figcaption');\r\n\r\n        if ($figcaption.length === 0)\r\n        {\r\n            return '';\r\n        }\r\n        else\r\n        {\r\n            return $figcaption.html();\r\n        }\r\n    },\r\n    _get_align: function()\r\n    {\r\n        var align = '';\r\n        if (typeof this.opts.imagePosition === 'object')\r\n        {\r\n            align = 'none';\r\n            var positions = this.opts.imagePosition;\r\n            for (var key in positions)\r\n            {\r\n                if (this.hasClass(positions[key]))\r\n                {\r\n                    align = key;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            align = (this.css('text-align') === 'center') ? 'center' : this.css('float');\r\n        }\r\n\r\n        return align;\r\n    },\r\n    _get_link: function()\r\n    {\r\n        var $link = this._findLink();\r\n        if ($link)\r\n        {\r\n            var target = ($link.attr('target')) ? true : false;\r\n\r\n            return {\r\n                url: $link.attr('href'),\r\n                target: target\r\n            };\r\n        }\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'image',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    },\r\n    _findLink: function()\r\n    {\r\n        var $link = this.find('a').filter(function(node)\r\n        {\r\n            return ($R.dom(node).closest('figcaption').length === 0);\r\n        });\r\n\r\n        if ($link.length !== 0)\r\n        {\r\n            return $link;\r\n        }\r\n\r\n        return false;\r\n    }\r\n});\r\n$R.add('class', 'image.resize', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.$body = app.$body;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.inspector = app.inspector;\r\n\r\n        // init\r\n        this.$target = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$body;\r\n        this._init();\r\n    },\r\n    // public\r\n    rebuild: function()\r\n    {\r\n        this._setResizerPosition();\r\n    },\r\n    hide: function()\r\n    {\r\n        this.$target.find('#redactor-image-resizer').remove();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.off('.redactor.image-resize');\r\n\r\n        this.$doc.off('.redactor.image-resize');\r\n        this.$win.off('resize.redactor.image-resize');\r\n        this.hide();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.on('click.redactor.image-resize', this._build.bind(this));\r\n\r\n        this.$win.on('resize.redactor.image-resize', this._setResizerPosition.bind(this));\r\n    },\r\n    _build: function(e)\r\n    {\r\n        this.$target.find('#redactor-image-resizer').remove();\r\n\r\n        if (this.app.isReadOnly()) return;\r\n\r\n        var data = this.inspector.parse(e.target);\r\n        var $editor = this.editor.getElement();\r\n\r\n        if (data.isComponentType('image'))\r\n        {\r\n            this.$resizableBox = $editor;\r\n            this.$resizableImage = $R.dom(data.getImageElement());\r\n\r\n            this.$resizer = $R.dom('<span>');\r\n            this.$resizer.attr('id', 'redactor-image-resizer');\r\n\r\n            this.$target.append(this.$resizer);\r\n\r\n            this._setResizerPosition();\r\n            this.$resizer.on('mousedown touchstart', this._set.bind(this));\r\n        }\r\n    },\r\n    _setResizerPosition: function()\r\n    {\r\n        if (this.$resizer)\r\n        {\r\n            var isTarget = this.toolbar.isTarget();\r\n            var targetOffset = this.$target.offset();\r\n            var offsetFix = 7;\r\n            var topOffset = (isTarget) ? (offsetFix - targetOffset.top + this.$target.scrollTop()) : offsetFix;\r\n            var leftOffset = (isTarget) ? (offsetFix - targetOffset.left) : offsetFix;\r\n            var pos = this.$resizableImage.offset();\r\n            var width = this.$resizableImage.width();\r\n            var height = this.$resizableImage.height();\r\n            var resizerWidth =  this.$resizer.width();\r\n            var resizerHeight =  this.$resizer.height();\r\n\r\n            this.$resizer.css({ top: Math.round(pos.top + height - resizerHeight + topOffset) + 'px', left: Math.round(pos.left + width - resizerWidth + leftOffset) + 'px' });\r\n        }\r\n    },\r\n    _set: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        this.resizeHandle = {\r\n            x : e.pageX,\r\n            y : e.pageY,\r\n            el : this.$resizableImage,\r\n            $figure: this.$resizableImage.closest('figure'),\r\n            ratio: this.$resizableImage.width() / this.$resizableImage.height(),\r\n            h: this.$resizableImage.height()\r\n        };\r\n\r\n        e = e.originalEvent || e;\r\n\r\n        if (e.targetTouches)\r\n        {\r\n             this.resizeHandle.x = e.targetTouches[0].pageX;\r\n             this.resizeHandle.y = e.targetTouches[0].pageY;\r\n        }\r\n\r\n        this.app.broadcast('contextbar.close');\r\n        this.app.broadcast('image.resize', this.$resizableImage);\r\n        this._start();\r\n    },\r\n    _start: function()\r\n    {\r\n        this.$doc.on('mousemove.redactor.image-resize touchmove.redactor.image-resize', this._move.bind(this));\r\n        this.$doc.on('mouseup.redactor.image-resize touchend.redactor.image-resize', this._stop.bind(this));\r\n    },\r\n    _stop: function()\r\n    {\r\n        this.$doc.off('.redactor.image-resize');\r\n        this.app.broadcast('image.resized', this.$resizableImage);\r\n    },\r\n    _move: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        e = e.originalEvent || e;\r\n\r\n        var height = this.resizeHandle.h;\r\n\r\n        if (e.targetTouches) height += (e.targetTouches[0].pageY -  this.resizeHandle.y);\r\n        else height += (e.pageY -  this.resizeHandle.y);\r\n\r\n        var width = height * this.resizeHandle.ratio;\r\n\r\n        width = Math.round(width);\r\n        height = Math.round(height);\r\n\r\n        if (height < 20 || width < 100) return;\r\n        if (this._getResizableBoxWidth() <= width) return;\r\n\r\n        if (this.resizeHandle.$figure.length !== 0 && this.resizeHandle.$figure.css('max-width') !== '') {\r\n            this.resizeHandle.$figure.css({ width: width + 'px' , 'max-width': width + 'px' });\r\n        }\r\n\r\n        this.resizeHandle.el.attr({ width: width, height: height });\r\n        this.resizeHandle.el.width(width);\r\n        this.resizeHandle.el.css('max-width', width + 'px');\r\n        this.resizeHandle.el.height(height);\r\n        this._setResizerPosition();\r\n    },\r\n    _getResizableBoxWidth: function()\r\n    {\r\n        var width = this.$resizableBox.width();\r\n        return width - parseInt(this.$resizableBox.css('padding-left')) - parseInt(this.$resizableBox.css('padding-right'));\r\n    }\r\n});\r\n$R.add('module', 'file', {\r\n    modals: {\r\n        'file':\r\n            '<div class=\"redactor-modal-tab\" data-title=\"## upload ##\"><form action=\"\"> \\\r\n                <div class=\"form-item form-item-title\"> \\\r\n                    <label for=\"modal-file-title\"> ## filename ## <span class=\"desc\">(## optional ##)</span></label> \\\r\n                    <input type=\"text\" id=\"modal-file-title\" name=\"title\" /> \\\r\n                </div> \\\r\n                <input type=\"file\" name=\"file\"> \\\r\n            </form></div>'\r\n    },\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.storage = app.storage;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n    },\r\n    // messages\r\n    onstarted: function()\r\n    {\r\n        // storage observe\r\n        this.storage.observeFiles();\r\n    },\r\n    ondropfile: function(e, files, clipboard)\r\n    {\r\n        if (!this.opts.fileUpload) return;\r\n\r\n        var options = {\r\n            url: this.opts.fileUpload,\r\n            event: (clipboard) ? false : e,\r\n            files: files,\r\n            name: 'filedrop',\r\n            data: this.opts.fileData\r\n        };\r\n\r\n        this.app.api('module.upload.send', options);\r\n    },\r\n    onmodal: {\r\n        file: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setFormData($modal, $form);\r\n                this._setUpload($form);\r\n            },\r\n            opened: function($modal, $form)\r\n            {\r\n                this._setFormFocus($form);\r\n\r\n                this.$form = $form;\r\n            }\r\n        }\r\n    },\r\n    onupload: {\r\n        file: {\r\n            complete: function(response)\r\n            {\r\n                this._insert(response);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        filedrop: {\r\n            complete: function(response, e)\r\n            {\r\n                this._insert(response, e);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        }\r\n    },\r\n\r\n    // public\r\n    open: function()\r\n    {\r\n        this._open();\r\n    },\r\n    insert: function(data)\r\n    {\r\n        this._insert(data);\r\n    },\r\n    remove: function(node)\r\n    {\r\n        this._remove(node);\r\n    },\r\n\r\n    // private\r\n    _open: function()\r\n    {\r\n        this.app.api('module.modal.build', this._getModalData());\r\n    },\r\n    _getModalData: function()\r\n    {\r\n        var modalData = {\r\n            name: 'file',\r\n            title: this.lang.get('file')\r\n        };\r\n\r\n        return modalData;\r\n    },\r\n    _insert: function(response, e)\r\n    {\r\n        this.app.api('module.modal.close');\r\n        if (typeof response !== 'object') return;\r\n\r\n        if (Array.isArray(response))\r\n        {\r\n            var obj = {};\r\n            for (var i = 0; i < response.length; i++)\r\n            {\r\n                obj = $R.extend(obj, response[i]);\r\n            }\r\n\r\n            response = obj;\r\n        }\r\n\r\n        var multiple = (Object.keys(response).length  > 1);\r\n\r\n        if (multiple)\r\n        {\r\n            this._insertMultiple(response, e);\r\n        }\r\n        else\r\n        {\r\n            this._insertSingle(response, e);\r\n        }\r\n\r\n        this.$form = false;\r\n    },\r\n    _insertSingle: function(response, e)\r\n    {\r\n        var inserted = [];\r\n        for (var key in response)\r\n        {\r\n            var $file = this._createFileAndStore(response[key]);\r\n\r\n            if (this.opts.fileAttachment)\r\n            {\r\n                inserted = this._insertAsAttachment($file);\r\n            }\r\n            else\r\n            {\r\n                inserted = (e) ? this.insertion.insertToPoint(e, $file) : this.insertion.insertRaw($file);\r\n            }\r\n\r\n            this.app.broadcast('file.uploaded', inserted[0], response);\r\n        }\r\n    },\r\n    _insertMultiple: function(response, e)\r\n    {\r\n        var z = 0;\r\n        var inserted = [];\r\n        var $last;\r\n        for (var key in response)\r\n        {\r\n            z++;\r\n\r\n            var $file = this._createFileAndStore(response[key]);\r\n\r\n            if (this.opts.fileAttachment)\r\n            {\r\n                inserted = this._insertAsAttachment($file, response);\r\n            }\r\n            else\r\n            {\r\n                if (z === 1)\r\n                {\r\n                    inserted = (e) ? this.insertion.insertToPoint(e, $file) : this.insertion.insertRaw($file);\r\n                }\r\n                else\r\n                {\r\n                    var $inserted = $R.dom(inserted[0]);\r\n                    $inserted.after($file).after(' ');\r\n                    inserted = [$file.get()];\r\n\r\n                    this.app.broadcast('file.inserted', $file);\r\n                }\r\n            }\r\n\r\n            $last = $file;\r\n            this.app.broadcast('file.uploaded', inserted[0], response);\r\n        }\r\n\r\n        // set caret after last\r\n        if (!this.opts.fileAttachment)\r\n        {\r\n            this.caret.setAfter($last);\r\n        }\r\n    },\r\n    _insertAsAttachment: function($file, response)\r\n    {\r\n        var $box = $R.dom(this.opts.fileAttachment);\r\n        var $wrapper = $file.wrapAttachment();\r\n        $box.append($wrapper);\r\n\r\n        var inserted = [$wrapper.get()];\r\n        this.app.broadcast('file.appended', inserted[0], response);\r\n\r\n        return inserted;\r\n    },\r\n    _createFileAndStore: function(item)\r\n    {\r\n        var modalFormData = (this.$form) ? this.$form.getData() : false;\r\n        var name = (item.name) ? item.name : item.url;\r\n        var title = (!this.opts.fileAttachment && modalFormData && modalFormData.title !== '') ? modalFormData.title : this._truncateUrl(name);\r\n\r\n        var $file = this.component.create('file');\r\n        $file.attr('href', item.url);\r\n        $file.attr('data-file', (item.id) ? item.id : this.utils.getRandomId());\r\n        $file.attr('data-name', item.name);\r\n        $file.html(title);\r\n\r\n        // add to storage\r\n        this.storage.add('file', $file);\r\n\r\n        return $file;\r\n    },\r\n    _remove: function(node)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $file = this.component.create('file', node);\r\n        var stop = this.app.broadcast('file.delete', $file);\r\n        if (stop !== false)\r\n        {\r\n            $file.unwrap();\r\n\r\n            this.selection.restore();\r\n\r\n            // callback\r\n            this.app.broadcast('file.deleted', $file);\r\n        }\r\n        else\r\n        {\r\n            this.selection.restore();\r\n        }\r\n    },\r\n    _truncateUrl: function(url)\r\n    {\r\n        return (url.search(/^http/) !== -1 && url.length > 20) ? url.substring(0, 20) + '...' : url;\r\n    },\r\n    _setUpload: function($form)\r\n    {\r\n        var options = {\r\n            url: this.opts.fileUpload,\r\n            element: $form.getField('file'),\r\n            name: 'file',\r\n            data: this.opts.fileData,\r\n            paramName: this.opts.fileUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.build', options);\r\n    },\r\n    _setFormData: function($modal, $form)\r\n    {\r\n        if (this.opts.fileAttachment)\r\n        {\r\n            $modal.find('.form-item-title').hide();\r\n        }\r\n        else\r\n        {\r\n            $form.setData({ title: this.selection.getText() });\r\n        }\r\n    },\r\n    _setFormFocus: function($form)\r\n    {\r\n        $form.getField('title').focus();\r\n    },\r\n    _uploadError: function(response)\r\n    {\r\n        this.app.broadcast('file.uploadError', response);\r\n    }\r\n});\r\n$R.add('class', 'file.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    wrapAttachment: function()\r\n    {\r\n        this.$wrapper = $R.dom('<span class=\"redactor-file-item\">');\r\n        this.$remover = $R.dom('<span class=\"redactor-file-remover\">');\r\n        this.$remover.html('&times;');\r\n        this.$remover.on('click', this.removeAttachment.bind(this));\r\n\r\n        this.$wrapper.append(this);\r\n        this.$wrapper.append(this.$remover);\r\n\r\n        return this.$wrapper;\r\n    },\r\n    removeAttachment: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var stop = this.app.broadcast('file.delete', this, this.$wrapper);\r\n        if (stop !== false)\r\n        {\r\n            this.$wrapper.remove();\r\n            this.app.broadcast('file.deleted', this);\r\n            this.app.broadcast('file.removeAttachment', this);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (el === undefined)\r\n        {\r\n            this.parse('<a>');\r\n        }\r\n        else\r\n        {\r\n            var $a = $R.dom(el).closest('a');\r\n            this.parse($a);\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'buffer', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.offset = app.offset;\r\n        this.keycodes = app.keycodes;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.state = false;\r\n        this.passed = false;\r\n        this.keyPressed = false;\r\n        this.undoStorage = [];\r\n        this.redoStorage = [];\r\n    },\r\n    // messages\r\n    onkeydown: function(e)\r\n    {\r\n        this._listen(e);\r\n    },\r\n    onsyncing: function()\r\n    {\r\n        if (!this.keyPressed)\r\n        {\r\n            this.trigger();\r\n        }\r\n\r\n        this.keyPressed = false;\r\n    },\r\n    onbuffer: {\r\n        trigger: function()\r\n        {\r\n            this.trigger();\r\n        }\r\n    },\r\n    onstate: function(e, html, offset)\r\n    {\r\n        if ((e && (e.ctrlKey || e.metaKey)) || (e && (this._isUndo(e) || this._isRedo(e))))\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.passed = false;\r\n        this._saveState(html, offset);\r\n\r\n        if (e === false) {\r\n            this._setUndo();\r\n        }\r\n    },\r\n    onenable: function()\r\n    {\r\n        this.clear();\r\n    },\r\n\r\n    // public\r\n    clear: function()\r\n    {\r\n        this.state = false;\r\n        this.undoStorage = [];\r\n        this.redoStorage = [];\r\n    },\r\n    undo: function()\r\n    {\r\n        this._getUndo();\r\n    },\r\n    redo: function()\r\n    {\r\n        this._getRedo();\r\n    },\r\n    trigger: function()\r\n    {\r\n        if (this.state && this.passed === false) this._setUndo();\r\n    },\r\n\r\n    // private\r\n    _saveState: function(html, offset)\r\n    {\r\n\r\n        var $editor = this.editor.getElement();\r\n\r\n        this.state = {\r\n            html: html || $editor.html(),\r\n            offset: offset || this.offset.get()\r\n        };\r\n    },\r\n    _listen: function(e)\r\n    {\r\n        var key = e.which;\r\n        var ctrl = e.ctrlKey || e.metaKey;\r\n        var cmd = ctrl || e.shiftKey || e.altKey;\r\n        var keys = [this.keycodes.SPACE, this.keycodes.ENTER, this.keycodes.BACKSPACE, this.keycodes.DELETE, this.keycodes.TAB,\r\n                    this.keycodes.LEFT, this.keycodes.RIGHT, this.keycodes.UP, this.keycodes.DOWN];\r\n        // undo\r\n        if (this._isUndo(e)) // z key\r\n        {\r\n            e.preventDefault();\r\n            this.undo();\r\n            return;\r\n        }\r\n        // redo\r\n        else if (this._isRedo(e))\r\n        {\r\n            e.preventDefault();\r\n            this.redo();\r\n            return;\r\n        }\r\n        // spec keys\r\n        else if (!ctrl && keys.indexOf(key) !== -1)\r\n        {\r\n            cmd = true;\r\n            this.trigger();\r\n        }\r\n        // cut & copy\r\n        else if (ctrl && (key === 88 || key === 67))\r\n        {\r\n            cmd = true;\r\n            this.trigger();\r\n        }\r\n\r\n\r\n        // empty buffer\r\n        if (!cmd && !this._hasUndo())\r\n        {\r\n            this.trigger();\r\n        }\r\n\r\n        this.keyPressed = true;\r\n    },\r\n    _isUndo: function(e)\r\n    {\r\n        var key = e.which;\r\n        var ctrl = e.ctrlKey || e.metaKey;\r\n\r\n        return (ctrl && key === 90 && !e.shiftKey && !e.altKey);\r\n    },\r\n    _isRedo: function(e)\r\n    {\r\n        var key = e.which;\r\n        var ctrl = e.ctrlKey || e.metaKey;\r\n\r\n        return (ctrl && ((key === 90 && e.shiftKey) || (key === 89 && !e.shiftKey)) && !e.altKey);\r\n    },\r\n    _setUndo: function()\r\n    {\r\n        var last = this.undoStorage[this.undoStorage.length-1];\r\n        if (typeof last === 'undefined' || last[0] !== this.state.html)\r\n        {\r\n            this.undoStorage.push([this.state.html, this.state.offset]);\r\n            this._removeOverStorage();\r\n        }\r\n    },\r\n    _setRedo: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var offset = this.offset.get();\r\n        var html = $editor.html();\r\n\r\n        this.redoStorage.push([html, offset]);\r\n        this.redoStorage = this.redoStorage.slice(0, this.opts.bufferLimit);\r\n    },\r\n    _getUndo: function()\r\n    {\r\n        if (!this._hasUndo()) return;\r\n\r\n        this.passed = true;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var buffer = this.undoStorage.pop();\r\n\r\n        this._setRedo();\r\n\r\n        $editor.html(buffer[0]);\r\n        this.offset.set(buffer[1]);\r\n        this._saveState(buffer[0], buffer[1]);\r\n        this.selection.restore();\r\n\r\n        this.app.broadcast('undo', buffer[0], buffer[1]);\r\n\r\n    },\r\n    _getRedo: function()\r\n    {\r\n        if (!this._hasRedo()) return;\r\n\r\n        this.passed = true;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var buffer = this.redoStorage.pop();\r\n\r\n        this._setUndo();\r\n        $editor.html(buffer[0]);\r\n        this.offset.set(buffer[1]);\r\n        this._saveState(buffer[0], buffer[1]);\r\n\r\n        this.app.broadcast('redo', buffer[0], buffer[1]);\r\n    },\r\n    _removeOverStorage: function()\r\n    {\r\n        if (this.undoStorage.length > this.opts.bufferLimit)\r\n        {\r\n            this.undoStorage = this.undoStorage.slice(0, (this.undoStorage.length - this.opts.bufferLimit));\r\n        }\r\n    },\r\n    _hasUndo: function()\r\n    {\r\n        return (this.undoStorage.length !== 0);\r\n    },\r\n    _hasRedo: function()\r\n    {\r\n        return (this.redoStorage.length !== 0);\r\n    }\r\n});\r\n$R.add('module', 'list', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.block = app.block;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n    },\r\n    // messages\r\n    onbutton: {\r\n        list: {\r\n            observe: function(button)\r\n            {\r\n                this._observeButton(button);\r\n            }\r\n        }\r\n    },\r\n    ondropdown: {\r\n        list: {\r\n            observe: function(dropdown)\r\n            {\r\n                this._observeDropdown(dropdown);\r\n            }\r\n        }\r\n    },\r\n\r\n    // public\r\n    toggle: function(type)\r\n    {\r\n        var nodes = this._getBlocks();\r\n        var block = this.selection.getBlock();\r\n        var $list = $R.dom(block).parents('ul, ol',  this.editor.getElement()).last();\r\n        if (nodes.length === 0 && $list.length !== 0)\r\n        {\r\n            nodes = [$list.get()];\r\n        }\r\n\r\n        if (block && (block.tagName === 'TD' || block.tagName === 'TH'))\r\n        {\r\n            nodes = this.block.format('div');\r\n        }\r\n\r\n        this.selection.saveMarkers();\r\n\r\n        nodes = (nodes.length !== 0 && this._isUnformat(type, nodes)) ? this._unformat(type, nodes) : this._format(type, nodes);\r\n\r\n        this.selection.restoreMarkers();\r\n\r\n        return nodes;\r\n    },\r\n    indent: function()\r\n    {\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var item = (data.isList()) ? data.getListItem() : false;\r\n        var $item = $R.dom(item);\r\n        var $prev = $item.prevElement();\r\n        var prev = $prev.get();\r\n        var isIndent = (isCollapsed && item && prev && prev.tagName === 'LI');\r\n\r\n        if (isIndent)\r\n        {\r\n            this.selection.saveMarkers();\r\n\r\n            $prev = $R.dom(prev);\r\n            var $prevChild = $prev.children('ul, ol');\r\n            var $list = $item.closest('ul, ol');\r\n\r\n            if ($prevChild.length !== 0)\r\n            {\r\n                $prevChild.append($item);\r\n            }\r\n            else\r\n            {\r\n                var listTag = $list.get().tagName.toLowerCase();\r\n                var $newList = $R.dom('<' + listTag + '>');\r\n\r\n                $newList.append($item);\r\n                $prev.append($newList);\r\n            }\r\n\r\n            this.selection.restoreMarkers();\r\n\r\n            // empty list item\r\n            if (this.utils.isEmptyHtml($item.html())) {\r\n                this.app.caret.setStart($item);\r\n            }\r\n        }\r\n    },\r\n    outdent: function()\r\n    {\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var item = (data.isList()) ? data.getListItem() : false;\r\n        var $item = $R.dom(item);\r\n\r\n        if (isCollapsed && item)\r\n        {\r\n\r\n            var $listItem = $item.parent();\r\n            var $liItem = $listItem.closest('li', '.redactor-in-' + this.uuid);\r\n            var $prev = $item.prevElement();\r\n            var $next = $item.nextElement();\r\n            var prev = $prev.get();\r\n            var next = $next.get();\r\n            var nextItems, nextList, $newList, $nextList;\r\n            var isTop = (prev === false);\r\n            var isMiddle = (prev !== false && next !== false);\r\n            var isBottom = (!isTop && next === false);\r\n\r\n            this.selection.saveMarkers();\r\n\r\n            // out\r\n            if ($liItem.length !== 0)\r\n            {\r\n                if (isMiddle)\r\n                {\r\n                    nextItems = this._getAllNext($item.get());\r\n                    $newList = $R.dom('<' + $listItem.get().tagName.toLowerCase() + '>');\r\n\r\n                    for (var i = 0; i < nextItems.length; i++)\r\n                    {\r\n                        $newList.append(nextItems[i]);\r\n                    }\r\n\r\n                    $liItem.after($item);\r\n                    $item.append($newList);\r\n                }\r\n                else\r\n                {\r\n                    $liItem.after($item);\r\n\r\n                    if ($listItem.children().length === 0)\r\n                    {\r\n                        $listItem.remove();\r\n                    }\r\n                    else\r\n                    {\r\n                        if (isTop) $item.append($listItem);\r\n                    }\r\n                }\r\n            }\r\n            // unformat\r\n            else\r\n            {\r\n                var $container =  this._createUnformatContainer($item);\r\n                var $childList = $container.find('ul, ol').first();\r\n\r\n                if (isTop) $listItem.before($container);\r\n                else if (isBottom) $listItem.after($container);\r\n                else if (isMiddle)\r\n                {\r\n                    $newList = $R.dom('<' + $listItem.get().tagName.toLowerCase() + '>');\r\n                    nextItems = this._getAllNext($item.get());\r\n\r\n                    for (var i = 0; i < nextItems.length; i++)\r\n                    {\r\n                        $newList.append(nextItems[i]);\r\n                    }\r\n\r\n                    $listItem.after($container);\r\n                    $container.after($newList);\r\n                }\r\n\r\n                if ($childList.length !== 0)\r\n                {\r\n                    $nextList = $container.nextElement();\r\n                    nextList = $nextList.get();\r\n                    if (nextList && nextList.tagName === $listItem.get().tagName)\r\n                    {\r\n                        $R.dom(nextList).prepend($childList);\r\n                        $childList.unwrap();\r\n                    }\r\n                    else\r\n                    {\r\n                        $container.after($childList);\r\n                    }\r\n                }\r\n\r\n                $item.remove();\r\n            }\r\n\r\n            this.selection.restoreMarkers();\r\n        }\r\n    },\r\n\r\n    // private\r\n    _getAllNext: function(next)\r\n    {\r\n        var nodes = [];\r\n\r\n        while (next)\r\n        {\r\n            var $next = $R.dom(next).nextElement();\r\n            next = $next.get();\r\n\r\n            if (next) nodes.push(next);\r\n            else return nodes;\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _isUnformat: function(type, nodes)\r\n    {\r\n        var countLists = 0;\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (nodes[i].nodeType !== 3)\r\n            {\r\n                var tag = nodes[i].tagName.toLowerCase();\r\n                if (tag === type || tag === 'figure')\r\n                {\r\n                    countLists++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (countLists === nodes.length);\r\n    },\r\n    _format: function(type, nodes)\r\n    {\r\n        var tags = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol'];\r\n        var blocks = this._uniteBlocks(nodes, tags);\r\n        var lists = [];\r\n\r\n        for (var key in blocks)\r\n        {\r\n            var items = blocks[key];\r\n            var $list = this._createList(type, blocks[key]);\r\n\r\n            for (var i = 0; i < items.length; i++)\r\n            {\r\n                var $item;\r\n\r\n                // lists\r\n                if (items[i].nodeType !== 3 && (items[i].tagName === 'UL' || items[i].tagName === 'OL'))\r\n                {\r\n                    var $oldList = $R.dom(items[i]);\r\n\r\n                    $item = $oldList.contents();\r\n                    $list.append($item);\r\n\r\n                    // old is empty\r\n                    if (this.utils.isEmpty($oldList)) $oldList.remove();\r\n                }\r\n                // other blocks or texts\r\n                else\r\n                {\r\n                    $item = this._createListItem(items[i]);\r\n                    var last = $item.get().lastChild;\r\n                    if (last && last.tagName === 'BR') {\r\n                        $R.dom(last).remove();\r\n                    }\r\n\r\n                    this.utils.normalizeTextNodes($item);\r\n                    $list.append($item);\r\n                }\r\n            }\r\n\r\n            lists.push($list.get());\r\n        }\r\n\r\n        return lists;\r\n    },\r\n    _uniteBlocks: function(nodes, tags)\r\n    {\r\n        var z = 0;\r\n        var blocks = { 0: [] };\r\n        var lastcell = false;\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $node = $R.dom(nodes[i]);\r\n            var $cell = $node.closest('th, td');\r\n\r\n            if ($cell.length !== 0)\r\n            {\r\n                if ($cell.get() !== lastcell)\r\n                {\r\n                    // create block\r\n                    z++;\r\n                    blocks[z] = [];\r\n                }\r\n\r\n                if (this._isUniteBlock(nodes[i], tags))\r\n                {\r\n                    blocks[z].push(nodes[i]);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (this._isUniteBlock(nodes[i], tags))\r\n                {\r\n                    blocks[z].push(nodes[i]);\r\n                }\r\n                else\r\n                {\r\n                    // create block\r\n                    z++;\r\n                    blocks[z] = [];\r\n                }\r\n            }\r\n\r\n            lastcell = $cell.get();\r\n        }\r\n\r\n        return blocks;\r\n    },\r\n    _isUniteBlock: function(node, tags)\r\n    {\r\n        return (node.nodeType === 3 || tags.indexOf(node.tagName.toLowerCase()) !== -1);\r\n    },\r\n    _createList: function(type, blocks)\r\n    {\r\n        var last = blocks[blocks.length-1];\r\n        var $last = $R.dom(last);\r\n        var $list = $R.dom('<' + type + '>');\r\n        $last.after($list);\r\n\r\n        return $list;\r\n    },\r\n    _createListItem: function(item)\r\n    {\r\n        var $item = $R.dom('<li>');\r\n        if (item.nodeType === 3)\r\n        {\r\n            $item.append(item);\r\n        }\r\n        else\r\n        {\r\n            var $el = $R.dom(item);\r\n            $item.append($el.contents());\r\n            $el.remove();\r\n        }\r\n\r\n        return $item;\r\n    },\r\n    _unformat: function(type, nodes)\r\n    {\r\n        if (nodes.length === 1)\r\n        {\r\n            // one list\r\n            var $list = $R.dom(nodes[0]);\r\n            var $items = $list.find('li');\r\n\r\n            var selectedItems = this.selection.getNodes({ tags: ['li'] });\r\n            var block = this.selection.getBlock();\r\n            var $li = $R.dom(block).closest('li');\r\n            if (selectedItems.length === 0 && $li.length !== 0)\r\n            {\r\n                selectedItems = [$li.get()];\r\n            }\r\n\r\n\r\n            // 1) entire\r\n            if (selectedItems.length === $items.length)\r\n            {\r\n                return this._unformatEntire(nodes[0]);\r\n            }\r\n\r\n            var pos = this._getItemsPosition($items, selectedItems);\r\n\r\n            // 2) top\r\n            if (pos === 'Top')\r\n            {\r\n                return this._unformatAtSide('before', selectedItems, $list);\r\n            }\r\n\r\n            // 3) bottom\r\n            else if (pos === 'Bottom')\r\n            {\r\n                selectedItems.reverse();\r\n                return this._unformatAtSide('after', selectedItems, $list);\r\n            }\r\n\r\n            // 4) middle\r\n            else if (pos === 'Middle')\r\n            {\r\n                var $last = $R.dom(selectedItems[selectedItems.length-1]);\r\n\r\n                var ci = false;\r\n\r\n                var $parent = false;\r\n                var $secondList = $R.dom('<' + $list.get().tagName.toLowerCase() + '>');\r\n                $items.each(function(node)\r\n                {\r\n                    if (ci)\r\n                    {\r\n                        var $node = $R.dom(node);\r\n                        if ($node.closest('.redactor-split-item').length === 0 && ($parent === false || $node.closest($parent).length === 0))\r\n                        {\r\n                            $node.addClass('redactor-split-item');\r\n                        }\r\n\r\n                        $parent = $node;\r\n                    }\r\n\r\n                    if (node === $last.get())\r\n                    {\r\n                        ci = true;\r\n                    }\r\n                });\r\n\r\n                $items.filter('.redactor-split-item').each(function(node)\r\n                {\r\n                    var $node = $R.dom(node);\r\n                    $node.removeClass('redactor-split-item');\r\n                    $secondList.append(node);\r\n                });\r\n\r\n                $list.after($secondList);\r\n\r\n                selectedItems.reverse();\r\n                for (var i = 0; i < selectedItems.length; i++)\r\n                {\r\n                    var $item = $R.dom(selectedItems[i]);\r\n                    var $container = this._createUnformatContainer($item);\r\n\r\n                    $list.after($container);\r\n                    $container.find('ul, ol').remove();\r\n                    $item.remove();\r\n                }\r\n\r\n\r\n                return;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            // unformat all\r\n            for (var i = 0; i < nodes.length; i++)\r\n            {\r\n                if (nodes[i].nodeType !== 3 && nodes[i].tagName.toLowerCase() === type)\r\n                {\r\n                    this._unformatEntire(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _unformatEntire: function(list)\r\n    {\r\n        var $list = $R.dom(list);\r\n        var $items = $list.find('li');\r\n        $items.each(function(node)\r\n        {\r\n            var $item = $R.dom(node);\r\n            var $container = this._createUnformatContainer($item);\r\n\r\n            $item.remove();\r\n            $list.before($container);\r\n\r\n        }.bind(this));\r\n\r\n        $list.remove();\r\n    },\r\n    _unformatAtSide: function(type, selectedItems, $list)\r\n    {\r\n        for (var i = 0; i < selectedItems.length; i++)\r\n        {\r\n            var $item = $R.dom(selectedItems[i]);\r\n            var $container = this._createUnformatContainer($item);\r\n\r\n            $list[type]($container);\r\n\r\n            var $innerLists = $container.find('ul, ol').first();\r\n            $item.append($innerLists);\r\n\r\n            $innerLists.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                var $parent = $node.closest('li');\r\n\r\n                if ($parent.get() === selectedItems[i])\r\n                {\r\n                    $node.unwrap();\r\n                    $parent.addClass('r-unwrapped');\r\n                }\r\n\r\n            });\r\n\r\n            if (this.utils.isEmptyHtml($item.html())) $item.remove();\r\n        }\r\n\r\n        // clear empty\r\n        $list.find('.r-unwrapped').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            if ($node.html().trim() === '') $node.remove();\r\n            else $node.removeClass('r-unwrapped');\r\n        });\r\n    },\r\n    _getItemsPosition: function($items, selectedItems)\r\n    {\r\n        var pos = 'Middle';\r\n\r\n        var sFirst = selectedItems[0];\r\n        var sLast = selectedItems[selectedItems.length-1];\r\n\r\n        var first = $items.first().get();\r\n        var last = $items.last().get();\r\n\r\n        if (first === sFirst && last !== sLast)\r\n        {\r\n            pos = 'Top';\r\n        }\r\n        else if (first !== sFirst && last === sLast)\r\n        {\r\n            pos = 'Bottom';\r\n        }\r\n\r\n        return pos;\r\n    },\r\n    _createUnformatContainer: function($item)\r\n    {\r\n        var $container = $R.dom('<' + this.opts.markup + '>');\r\n        if (this.opts.breakline) $container.attr('data-redactor-tag', 'br');\r\n\r\n        $container.append($item.contents());\r\n\r\n        return $container;\r\n    },\r\n    _getBlocks: function()\r\n    {\r\n        return this.selection.getBlocks({ first: true });\r\n    },\r\n    _observeButton: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var isDisabled = (data.isPre() || data.isCode() || data.isFigcaption());\r\n\r\n        this._observeButtonsList(isDisabled, ['lists', 'ul', 'ol', 'outdent', 'indent']);\r\n\r\n        var itemOutdent = this.toolbar.getButton('outdent');\r\n        var itemIndent = this.toolbar.getButton('indent');\r\n\r\n        this._observeIndent(itemIndent, itemOutdent);\r\n    },\r\n    _observeDropdown: function(dropdown)\r\n    {\r\n        var itemOutdent = dropdown.getItem('outdent');\r\n        var itemIndent = dropdown.getItem('indent');\r\n\r\n        this._observeIndent(itemIndent, itemOutdent);\r\n    },\r\n    _observeIndent: function(itemIndent, itemOutdent)\r\n    {\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var item = (data.isList()) ? data.getListItem() : false;\r\n        var $item = $R.dom(item);\r\n        var $prev = $item.prevElement();\r\n        var prev = $prev.get();\r\n        var isIndent = (isCollapsed && item && prev && prev.tagName === 'LI');\r\n\r\n        if (itemOutdent)\r\n        {\r\n            if (item && isCollapsed) itemOutdent.enable();\r\n            else itemOutdent.disable();\r\n        }\r\n\r\n        if (itemIndent)\r\n        {\r\n            if (item && isIndent) itemIndent.enable();\r\n            else itemIndent.disable();\r\n        }\r\n    },\r\n    _observeButtonsList: function(param, buttons)\r\n    {\r\n        for (var i = 0; i < buttons.length; i++)\r\n        {\r\n            var button = this.toolbar.getButton(buttons[i]);\r\n            if (button)\r\n            {\r\n                if (param) button.disable();\r\n                else button.enable();\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'video.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $wrapper = $node.closest('figure');\r\n            if ($wrapper.length !== 0)\r\n            {\r\n                this.parse($wrapper);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.append(el);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.parse('<figure>');\r\n        }\r\n\r\n\r\n        this._initWrapper();\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'video',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n\r\n$R.add('class', 'widget.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    getData: function()\r\n    {\r\n        return {\r\n            html: this._getHtml()\r\n        };\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $figure = $node.closest('figure');\r\n            if ($figure.length !== 0)\r\n            {\r\n                this.parse($figure);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.html(el);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.parse('<figure>');\r\n        }\r\n\r\n\r\n        this._initWrapper();\r\n    },\r\n    _getHtml: function()\r\n    {\r\n        var $wrapper = $R.dom('<div>');\r\n        $wrapper.html(this.html());\r\n        $wrapper.find('.redactor-component-caret').remove();\r\n\r\n        return $wrapper.html();\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'widget',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n\r\n    var Redactor = $R;\r\n    window.Redactor = window.$R = $R;\r\n\r\n    // Data attribute load\r\n    window.addEventListener('load', function()\r\n    {\r\n        $R('[data-redactor]');\r\n    });\r\n\r\n    // Export for webpack\r\n    if (typeof module === 'object' && module.exports) {\r\n        module.exports = Redactor;\r\n        module.exports.Redactor = Redactor;\r\n    }\r\n}());\r\n","(function($R)\r\n{\r\n    $R.add('plugin', 'alignment', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"align\": \"Align\",\r\n    \t\t\t\"align-left\": \"Align Left\",\r\n    \t\t\t\"align-center\": \"Align Center\",\r\n    \t\t\t\"align-right\": \"Align Right\",\r\n    \t\t\t\"align-justify\": \"Align Justify\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.block = app.block;\r\n            this.toolbar = app.toolbar;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var dropdown = {};\r\n\r\n    \t\tdropdown.left = { title: this.lang.get('align-left'), api: 'plugin.alignment.set', args: 'left' };\r\n    \t\tdropdown.center = { title: this.lang.get('align-center'), api: 'plugin.alignment.set', args: 'center' };\r\n    \t\tdropdown.right = { title: this.lang.get('align-right'), api: 'plugin.alignment.set', args: 'right' };\r\n    \t\tdropdown.justify = { title: this.lang.get('align-justify'), api: 'plugin.alignment.set', args: 'justify' };\r\n\r\n            var $button = this.toolbar.addButton('alignment', { title: this.lang.get('align') });\r\n            $button.setIcon('<i class=\"re-icon-alignment\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        },\r\n        set: function(type)\r\n\t\t{\r\n    \t\tif (type === 'left' && this.opts.direction === 'ltr')\r\n    \t\t{\r\n        \t\treturn this._remove();\r\n    \t\t}\r\n\r\n    \t\tvar args = {\r\n        \t    style: { 'text-align': type }\r\n    \t\t};\r\n\r\n\t\t\tthis.block.toggle(args);\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_remove: function()\r\n\t\t{\r\n\t\t    this.block.remove({ style: 'text-align' });\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'counter', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"words\": \"words\",\r\n    \t\t\t\"chars\": \"chars\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.utils = app.utils;\r\n            this.editor = app.editor;\r\n            this.statusbar = app.statusbar;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            $editor.on('keyup.redactor-plugin-counter paste.redactor-plugin-counter', this.count.bind(this));\r\n            this.count();\r\n        },\r\n        stop: function()\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            $editor.off('.redactor-plugin-counter');\r\n\r\n            this.statusbar.remove('words');\r\n            this.statusbar.remove('chars');\r\n        },\r\n\t\tcount: function()\r\n\t\t{\r\n\t\t\tvar words = 0, characters = 0, spaces = 0;\r\n\t\t\tvar $editor = this.editor.getElement();\r\n\t\t\tvar html = $editor.html();\r\n\r\n\t\t\thtml = this._clean(html)\r\n\t\t\tif (html !== '')\r\n\t\t\t{\r\n\t\t\t\tvar arrWords = html.split(/\\s+/);\r\n\t\t\t\tvar arrSpaces = html.match(/\\s/g);\r\n\r\n\t\t\t\twords = (arrWords) ? arrWords.length : 0;\r\n\t\t\t\tspaces = (arrSpaces) ? arrSpaces.length : 0;\r\n\r\n\t\t\t\tcharacters = html.length;\r\n\t\t\t}\r\n\r\n            var data = { words: words, characters: characters, spaces: spaces };\r\n\r\n            // callback\r\n\t\t\tthis.app.broadcast('counter', data);\r\n\r\n            // statusbar\r\n            this.statusbar.add('words', this.lang.get('words') + ': ' + data.words);\r\n            this.statusbar.add('chars', this.lang.get('chars') + ': ' + data.characters);\r\n\t\t},\r\n\r\n        // private\r\n        _clean: function(html)\r\n        {\r\n\t\t\thtml = html.replace(/<\\/(.*?)>/gi, ' ');\r\n\t\t\thtml = html.replace(/<(.*?)>/gi, '');\r\n\t\t\thtml = html.replace(/\\t/gi, '');\r\n\t\t\thtml = html.replace(/\\n/gi, ' ');\r\n\t\t\thtml = html.replace(/\\r/gi, ' ');\r\n\t\t\thtml = html.replace(/&nbsp;/g, '1');\r\n\t\t\thtml = html.trim();\r\n\t\t\thtml = this.utils.removeInvisibleChars(html);\r\n\r\n\t\t\treturn html;\r\n        }\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'filebrowser', {\r\n        init: function(app)\r\n        {\r\n            // define app\r\n            this.app = app;\r\n\r\n            // define services\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n            this.insertion = app.insertion;\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            // create the button data\r\n            var buttonData = {\r\n                title: this.lang.get('file'),\r\n                api: 'plugin.filebrowser.open'\r\n            };\r\n\r\n            // create the button\r\n            this.$button = this.toolbar.addButton('filebrowser', buttonData);\r\n            this.$button.setIcon('<i class=\"re-icon-filebrowser\"></i>');\r\n        },\r\n        open: function()\r\n        {\r\n            function pickFile(that) {\r\n                that.app.selection.save();\r\n                return function insertFile(evt) {\r\n                    that.app.selection.restore();\r\n                    window.document.removeEventListener( 'filepicker:pick', insertFile );\r\n                    const file = evt.detail;\r\n                    if (Object.prototype.toString.call(file) === '[object String]') {\r\n                        that.app.api('module.image.insert', file);\r\n                    } else if (file.file_id) {\r\n                        const file_url = EE.Rte.filedirUrls[file.upload_location_id] + file.file_name;\r\n                        if (!file.isImage && !file.isSVG) {\r\n                            that.app.api('module.link.insert', {text: file.path, url: file.path});\r\n                        } else {\r\n                            that.app.api('module.image.insert', file.path);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            window.document.addEventListener( 'filepicker:pick', pickFile(this) );\r\n            window.Rte_browseImages(this.insertion, {});\r\n        },\r\n    });\r\n})(Redactor);\r\n","(function($R)\r\n{\r\n    $R.add('plugin', 'fontcolor', {\r\n        translations: {\r\n            en: {\r\n                \"fontcolor\": \"Text Color\",\r\n                \"text\": \"Text\",\r\n                \"highlight\": \"Highlight\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.inline = app.inline;\r\n            this.toolbar = app.toolbar;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n    \t\tthis.colors = (this.opts.fontcolors) ? this.opts.fontcolors : [\r\n    \t\t\t'#ffffff', '#000000', '#eeece1', '#1f497d', '#4f81bd', '#c0504d', '#9bbb59', '#8064a2', '#4bacc6', '#f79646', '#ffff00',\r\n    \t\t\t'#f2f2f2', '#7f7f7f', '#ddd9c3', '#c6d9f0', '#dbe5f1', '#f2dcdb', '#ebf1dd', '#e5e0ec', '#dbeef3', '#fdeada', '#fff2ca',\r\n    \t\t\t'#d8d8d8', '#595959', '#c4bd97', '#8db3e2', '#b8cce4', '#e5b9b7', '#d7e3bc', '#ccc1d9', '#b7dde8', '#fbd5b5', '#ffe694',\r\n    \t\t\t'#bfbfbf', '#3f3f3f', '#938953', '#548dd4', '#95b3d7', '#d99694', '#c3d69b', '#b2a2c7', '#b7dde8', '#fac08f', '#f2c314',\r\n    \t\t\t'#a5a5a5', '#262626', '#494429', '#17365d', '#366092', '#953734', '#76923c', '#5f497a', '#92cddc', '#e36c09', '#c09100',\r\n    \t\t\t'#7f7f7f', '#0c0c0c', '#1d1b10', '#0f243e', '#244061', '#632423', '#4f6128', '#3f3151', '#31859b',  '#974806', '#7f6000'\r\n    \t\t];\r\n        },\r\n        // messages\r\n        onfontcolor: {\r\n            set: function(rule, value)\r\n            {\r\n                this._set(rule, value);\r\n            },\r\n            remove: function(rule)\r\n            {\r\n                this._remove(rule);\r\n            }\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var btnObj = {\r\n                title: this.lang.get('fontcolor')\r\n            };\r\n\r\n            var $dropdown = this._buildDropdown();\r\n\r\n            this.$button = this.toolbar.addButton('fontcolor', btnObj);\r\n\t\t\tthis.$button.setIcon('<i class=\"re-icon-fontcolor\"></i>');\r\n\t\t\tthis.$button.setDropdown($dropdown);\r\n        },\r\n\r\n        // private\r\n        _buildDropdown: function()\r\n        {\r\n            var $dropdown = $R.dom('<div class=\"redactor-dropdown-cells\">');\r\n\r\n            this.$selector = this._buildSelector();\r\n\r\n            this.$selectorText = this._buildSelectorItem('text', this.lang.get('text'));\r\n            this.$selectorText.addClass('active');\r\n\r\n            this.$selectorBack = this._buildSelectorItem('back', this.lang.get('highlight'));\r\n\r\n            this.$selector.append(this.$selectorText);\r\n            this.$selector.append(this.$selectorBack);\r\n\r\n            this.$pickerText = this._buildPicker('textcolor');\r\n            this.$pickerBack = this._buildPicker('backcolor');\r\n\r\n            $dropdown.append(this.$selector);\r\n            $dropdown.append(this.$pickerText);\r\n            $dropdown.append(this.$pickerBack);\r\n\r\n            this._buildSelectorEvents();\r\n\r\n            $dropdown.width(242);\r\n\r\n            return $dropdown;\r\n        },\r\n        _buildSelector: function()\r\n        {\r\n            var $selector = $R.dom('<div>');\r\n            $selector.addClass('redactor-dropdown-selector');\r\n\r\n\t\t\treturn $selector;\r\n        },\r\n        _buildSelectorItem: function(name, title)\r\n        {\r\n            var $item = $R.dom('<span>');\r\n            $item.attr('rel', name).html(title);\r\n            $item.addClass('redactor-dropdown-not-close');\r\n\r\n            return $item;\r\n        },\r\n        _buildSelectorEvents: function()\r\n        {\r\n\t\t\tthis.$selectorText.on('mousedown', function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n                this.$selector.find('span').removeClass('active');\r\n\t\t\t\tthis.$pickerBack.hide();\r\n\t\t\t\tthis.$pickerText.show();\r\n\t\t\t\tthis.$selectorText.addClass('active');\r\n\r\n\t\t\t}.bind(this));\r\n\r\n\t\t\tthis.$selectorBack.on('mousedown', function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n                this.$selector.find('span').removeClass('active');\r\n\t\t\t\tthis.$pickerText.hide();\r\n\t\t\t\tthis.$pickerBack.show();\r\n\t\t\t\tthis.$selectorBack.addClass('active');\r\n\r\n\t\t\t}.bind(this));\r\n        },\r\n        _buildPicker: function(name)\r\n\t\t{\r\n\t\t\tvar $box = $R.dom('<div class=\"re-dropdown-box-' + name + '\">');\r\n\t\t\tvar rule = (name == 'backcolor') ? 'background-color' : 'color';\r\n\t\t\tvar len = this.colors.length;\r\n\t\t\tvar self = this;\r\n\t\t\tvar func = function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar $el = $R.dom(e.target);\r\n\t\t\t\tself._set($el.data('rule'), $el.attr('rel'));\r\n\t\t\t};\r\n\r\n\t\t\tfor (var z = 0; z < len; z++)\r\n\t\t\t{\r\n\t\t\t\tvar color = this.colors[z];\r\n\r\n\t\t\t\tvar $swatch = $R.dom('<span>');\r\n\t\t\t\t$swatch.attr({ 'rel': color, 'data-rule': rule });\r\n\t\t\t\t$swatch.css({ 'background-color': color, 'font-size': 0, 'border': '2px solid #fff', 'width': '22px', 'height': '22px' });\r\n\t\t\t\t$swatch.on('mousedown', func);\r\n\r\n\t\t\t\t$box.append($swatch);\r\n\t\t\t}\r\n\r\n\t\t\tvar $el = $R.dom('<a>');\r\n\t\t\t$el.attr({ 'href': '#' });\r\n\t\t\t$el.css({ 'display': 'block', 'clear': 'both', 'padding': '8px 5px', 'font-size': '12px', 'line-height': 1 });\r\n\t\t\t$el.html(this.lang.get('none'));\r\n\r\n\t\t\t$el.on('click', function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tself._remove(rule);\r\n\t\t\t});\r\n\r\n\t\t\t$box.append($el);\r\n\r\n\t\t\tif (name == 'backcolor') $box.hide();\r\n\r\n            return $box;\r\n\t\t},\r\n\t\t_set: function(rule, value)\r\n\t\t{\r\n    \t\tvar style = {};\r\n    \t\tstyle[rule] = value;\r\n\r\n    \t\tvar args = {\r\n        \t    tag: 'span',\r\n        \t    style: style,\r\n        \t    type: 'toggle'\r\n    \t\t};\r\n\r\n\t\t\tthis.inline.format(args);\r\n\t\t},\r\n\t\t_remove: function(rule)\r\n\t\t{\r\n\t\t\tthis.inline.remove({ style: rule });\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'fullscreen', {\r\n        translations: {\r\n            en: {\r\n    \t\t\t\"fullscreen\": \"Fullscreen\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.$win = app.$win;\r\n            this.$doc = app.$doc;\r\n            this.$body = app.$body;\r\n            this.editor = app.editor;\r\n            this.toolbar = app.toolbar;\r\n            this.container = app.container;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n            this.isOpen = false;\r\n            this.docScroll = 0;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var data = {\r\n                title: this.lang.get('fullscreen'),\r\n                api: 'plugin.fullscreen.toggle'\r\n            };\r\n\r\n            var button = this.toolbar.addButton('fullscreen', data);\r\n            button.setIcon('<i class=\"re-icon-expand\"></i>');\r\n\r\n            this.$target = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$body;\r\n\r\n\t\t\tif (this.opts.fullscreen) this.toggle();\r\n\r\n        },\r\n        toggle: function()\r\n\t\t{\r\n\t\t\treturn (this.isOpen) ? this.close() : this.open();\r\n\t\t},\r\n\t\topen: function()\r\n\t\t{\r\n    \t\tthis.docScroll = this.$doc.scrollTop();\r\n\r\n            this._createPlacemarker();\r\n            this.selection.save();\r\n\r\n            var $container = this.container.getElement();\r\n            var $editor = this.editor.getElement();\r\n            var $html = (this.toolbar.isTarget()) ? $R.dom('body, html') : this.$target;\r\n\r\n            if (this.opts.toolbarExternal) this._buildInternalToolbar();\r\n\r\n            this.$target.prepend($container);\r\n\t\t\tthis.$target.addClass('redactor-body-fullscreen');\r\n\r\n            $container.addClass('redactor-box-fullscreen');\r\n            if (this.isTarget) $container.addClass('redactor-box-fullscreen-target');\r\n\r\n            $html.css('overflow', 'hidden');\r\n\r\n            if (this.opts.maxHeight) $editor.css('max-height', '');\r\n            if (this.opts.minHeight) $editor.css('min-height', '');\r\n\r\n            this._resize();\r\n            this.$win.on('resize.redactor-plugin-fullscreen', this._resize.bind(this));\r\n\t\t\tthis.$doc.scrollTop(0);\r\n\r\n            var button = this.toolbar.getButton('fullscreen');\r\n            button.setIcon('<i class=\"re-icon-retract\"></i>');\r\n\r\n            this.selection.restore();\r\n\t\t\tthis.isOpen = true;\r\n\t\t\tthis.opts.zindex = 1051;\r\n\t\t\t// fix bootstrap modal focus\r\n            if (window.jQuery) window.jQuery(document).off('focusin.modal');\r\n\t\t},\r\n\t\tclose: function()\r\n\t\t{\r\n    \t\tthis.isOpen = false;\r\n\t\t\tthis.opts.zindex = false;\r\n            this.selection.save();\r\n\r\n            var $container = this.container.getElement();\r\n            var $editor = this.editor.getElement();\r\n            var $html = $R.dom('body, html');\r\n\r\n            if (this.opts.toolbarExternal) this._buildExternalToolbar();\r\n\r\n            this.$target.removeClass('redactor-body-fullscreen');\r\n    \t\tthis.$win.off('resize.redactor-plugin-fullscreen');\r\n            $html.css('overflow', '');\r\n\r\n\t\t\t$container.removeClass('redactor-box-fullscreen redactor-box-fullscreen-target');\r\n\t\t\t$editor.css('height', 'auto');\r\n\r\n\t\t\tif (this.opts.minHeight) $editor.css('minHeight', this.opts.minHeight);\r\n\t\t\tif (this.opts.maxHeight) $editor.css('maxHeight', this.opts.maxHeight);\r\n\r\n            var button = this.toolbar.getButton('fullscreen');\r\n            button.setIcon('<i class=\"re-icon-expand\"></i>');\r\n\r\n    \t\tthis._removePlacemarker($container);\r\n            this.selection.restore();\r\n            this.$doc.scrollTop(this.docScroll);\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_resize: function()\r\n\t\t{\r\n    \t\tvar $toolbar = this.toolbar.getElement();\r\n            var $editor = this.editor.getElement();\r\n    \t\tvar height = this.$win.height() - $toolbar.height();\r\n\r\n    \t\t$editor.height(height);\r\n\t\t},\r\n\t\t_buildInternalToolbar: function()\r\n\t\t{\r\n\t\t\tvar $wrapper = this.toolbar.getWrapper();\r\n\t\t\tvar $toolbar = this.toolbar.getElement();\r\n\r\n\t\t\t$wrapper.addClass('redactor-toolbar-wrapper');\r\n\t\t\t$wrapper.append($toolbar);\r\n\r\n\t\t\t$toolbar.removeClass('redactor-toolbar-external');\r\n\t\t\t$container.prepend($wrapper);\r\n\t\t},\r\n\t\t_buildExternalToolbar: function()\r\n\t\t{\r\n\t\t\tvar $wrapper = this.toolbar.getWrapper();\r\n\t\t\tvar $toolbar = this.toolbar.getElement();\r\n\r\n            this.$external = $R.dom(this.opts.toolbarExternal);\r\n\r\n            $toolbar.addClass('redactor-toolbar-external');\r\n            this.$external.append($toolbar);\r\n\r\n            $wrapper.remove();\r\n\t\t},\r\n\t\t_createPlacemarker: function()\r\n\t\t{\r\n    \t\tvar $container = this.container.getElement();\r\n\r\n    \t\tthis.$placemarker = $R.dom('<span />');\r\n    \t\t$container.after(this.$placemarker);\r\n\t\t},\r\n\t\t_removePlacemarker: function($container)\r\n\t\t{\r\n    \t\tthis.$placemarker.before($container);\r\n            this.$placemarker.remove();\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'inlinestyle', {\r\n        translations: {\r\n            en: {\r\n                \"style\": \"Style\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n\r\n            // local\r\n    \t\tthis.styles = {\r\n    \t\t\t\"marked\": {\r\n    \t\t\t\ttitle: \"Marked\",\r\n    \t\t\t\targs: 'mark'\r\n    \t\t\t},\r\n    \t\t\t\"code\": {\r\n    \t\t\t\ttitle: \"Code\",\r\n    \t\t\t\targs: 'code'\r\n    \t\t\t},\r\n    \t\t\t\"variable\": {\r\n    \t\t\t\ttitle: \"Variable\",\r\n    \t\t\t\targs: 'var'\r\n    \t\t\t},\r\n    \t\t\t\"shortcut\": {\r\n    \t\t\t\ttitle: \"Shortcut\",\r\n    \t\t\t\targs: 'kbd'\r\n    \t\t\t},\r\n    \t\t\t\"sup\": {\r\n    \t\t\t\ttitle: \"Superscript\",\r\n    \t\t\t\targs: 'sup'\r\n    \t\t\t},\r\n    \t\t\t\"sub\": {\r\n    \t\t\t\ttitle: \"Subscript\",\r\n    \t\t\t\targs: 'sub'\r\n    \t\t\t}\r\n    \t\t};\r\n        },\r\n        start: function()\r\n        {\r\n            var dropdown = {};\r\n\t\t\tfor (var key in this.styles)\r\n\t\t\t{\r\n    \t\t\tvar style = this.styles[key];\r\n\t\t\t\tdropdown[key] = {\r\n    \t\t\t\ttitle: style.title,\r\n    \t\t\t\tapi: 'module.inline.format',\r\n    \t\t\t\targs: style.args\r\n                };\r\n\t\t\t}\r\n\r\n            var $button = this.toolbar.addButtonAfter('format', 'inline', { title: this.lang.get('style') });\r\n\r\n            $button.setIcon('<i class=\"re-icon-inline\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        }\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'limiter', {\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.utils = app.utils;\r\n            this.opts = app.opts;\r\n            this.editor = app.editor;\r\n            this.keycodes = app.keycodes;\r\n        },\r\n        // events\r\n        onpasting: function(html)\r\n        {\r\n            if (!this.opts.limiter) return;\r\n\r\n            html = this.utils.removeInvisibleChars(html);\r\n\r\n            var text = this._getText();\r\n            var len = html.length + text.length;\r\n\r\n\t\t\tthis.opts.input = !(len >= this.opts.limiter);\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n\t\t\tif (!this.opts.limiter) return;\r\n            this._count();\r\n\r\n            var $editor = this.editor.getElement();\r\n            $editor.on('keydown.redactor-plugin-limiter', this._limit.bind(this));\r\n\t\t},\r\n\t\tstop: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n            $editor.off('.redactor-plugin-limiter');\r\n\r\n            this.opts.input = true;\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_limit: function(e)\r\n\t\t{\r\n    \t\tvar key = e.which;\r\n\t\t\tvar ctrl = e.ctrlKey || e.metaKey;\r\n\t\t\tvar arrows = [37, 38, 39, 40];\r\n\r\n\t\t\tif (key === this.keycodes.BACKSPACE\r\n\t\t\t   \t|| key === this.keycodes.DELETE\r\n\t\t\t    || key === this.keycodes.ESC\r\n\t\t\t    || key === this.keycodes.SHIFT\r\n\t\t\t    || (ctrl && key === 65)\r\n\t\t\t    || (ctrl && key === 88)\r\n\t\t\t    || (ctrl && key === 82)\r\n\t\t\t    || (ctrl && key === 116)\r\n\t\t\t    || (arrows.indexOf(key) !== -1)\r\n\t\t\t)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            this._count(e);\r\n\t\t},\r\n\t\t_count: function(e)\r\n\t\t{\r\n            var text = this._getText();\r\n\t\t\tvar count = text.length;\r\n\t\t\tif (count >= this.opts.limiter)\r\n\t\t\t{\r\n                if (e) e.preventDefault();\r\n                this.opts.input = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n    \t\t\tthis.opts.input = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t_getText: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n\t\t\tvar text = $editor.text();\r\n\r\n\t\t\treturn this.utils.removeInvisibleChars(text);\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'pages', {\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.$doc = app.$doc;\r\n            this.$body = app.$body;\r\n            this.editor = app.editor;\r\n            this.marker = app.marker;\r\n            this.keycodes = app.keycodes;\r\n            this.container = app.container;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n            this.handleTrigger = (typeof this.opts.handleTrigger !== 'undefined') ? this.opts.handleTrigger : '@';\r\n            this.handleStart = (typeof this.opts.handleStart !== 'undefined') ? this.opts.handleStart : 3;\r\n            this.handleStr = '';\r\n            this.handleLen = this.handleStart;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            if (!this.opts.handle) return;\r\n\r\n            var $editor = this.editor.getElement();\r\n\t\t\t$editor.on('keyup.redactor-plugin-handle', this._handle.bind(this));\r\n            $editor.on('keydown.redactor-plugin-handle', this._listen.bind(this));\r\n\t\t},\r\n\t\tstop: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n\r\n\t\t\t$editor.off('.redactor-plugin-handle');\r\n            this.$doc.off('.redactor-plugin-handle');\r\n\r\n            var $list = $R.dom('#redactor-handle-list');\r\n            $list.remove();\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_handle: function(e)\r\n\t\t{\r\n    \t\tvar key = e.which;\r\n\t\t\tvar ctrl = e.ctrlKey || e.metaKey;\r\n\t\t\tvar arrows = [37, 38, 39, 40];\r\n\r\n            if (key === this.keycodes.BACKSPACE)\r\n            {\r\n                if (this._isShown() && (this.handleLen > this.handleStart))\r\n                {\r\n                    this.handleLen = this.handleLen - 2;\r\n                    if (this.handleLen <= this.handleStart)\r\n                    {\r\n                        this._hide();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n\r\n\t\t\tif (key === this.keycodes.DELETE\r\n\t\t\t    || key === this.keycodes.ESC\r\n\t\t\t    || key === this.keycodes.SHIFT\r\n\t\t\t    || ctrl\r\n\t\t\t    || (arrows.indexOf(key) !== -1)\r\n\t\t\t)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            var re = new RegExp('^' + this.handleTrigger);\r\n            this.handleStr = this.selection.getTextBeforeCaret(this.handleLen + 1);\r\n\r\n            // detect\r\n            if (re.test(this.handleStr))\r\n            {\r\n                this.handleStr = this.handleStr.replace(this.handleTrigger, '');\r\n                this.handleLen++;\r\n\r\n                this._load();\r\n            }\r\n\t\t},\r\n        _listen: function(e) {\r\n            var key = e.which;\r\n            var ks = this.keycodes;\r\n\r\n            // listen enter\r\n            if (this._isShown() && key === ks.ENTER) {\r\n                var $item = this._getActiveItem();\r\n                if ($item.length === 0) {\r\n                    this._hideForce();\r\n                    return;\r\n                }\r\n                else {\r\n                    e.preventDefault();\r\n                    this._replace(e, $item);\r\n                    this._hideForce();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // listen down / up\r\n            if (this._isShown() && (key === 40 || key === 38)) {\r\n                e.preventDefault();\r\n\r\n                var $item = this._getActiveItem();\r\n                if ($item.length === 0) {\r\n                    var $first = this._getFirstItem();\r\n                    this._setActive($first);\r\n                }\r\n                // down\r\n                else if (key === 40) {\r\n                    this._setNextActive($item);\r\n                }\r\n                // up\r\n                else if (key === 38) {\r\n                    this._setPrevActive($item);\r\n                }\r\n\r\n                return;\r\n            }\r\n        },\r\n        _getItems: function() {\r\n            return this.$list.find('a');\r\n        },\r\n        _getActiveItem: function() {\r\n            return this._getItems().filter(function(node) {\r\n                return $R.dom(node).hasClass('active');\r\n            });\r\n        },\r\n        _getFirstItem: function() {\r\n            return this._getItems().first();\r\n        },\r\n        _getLastItem: function() {\r\n            return this._getItems().last();\r\n        },\r\n        _setActive: function($el) {\r\n            this._getItems().removeClass('active');\r\n            $el.addClass('active');\r\n\r\n            var itemHeight = $el.outerHeight();\r\n            var itemTop = $el.position().top;\r\n            var itemsScrollTop = this.$list.scrollTop();\r\n            var scrollTop = itemTop + itemHeight * 2;\r\n            var itemsHeight = this.$list.outerHeight();\r\n\r\n            this.$list.scrollTop(\r\n                scrollTop > itemsScrollTop + itemsHeight ? scrollTop - itemsHeight :\r\n                    itemTop - itemHeight < itemsScrollTop ? itemTop - itemHeight :\r\n                    itemsScrollTop\r\n            );\r\n        },\r\n        _setNextActive: function($el) {\r\n            var $next = $el.next();\r\n            if ($next.length !== 0) {\r\n                this._setActive($next);\r\n            }\r\n            else {\r\n                var $first = this._getFirstItem();\r\n                this._setActive($first);\r\n            }\r\n        },\r\n        _setPrevActive: function($el) {\r\n            var $prev = $el.prev();\r\n            if ($prev.length !== 0) {\r\n                this._setActive($prev);\r\n            }\r\n            else {\r\n                var $last = this._getLastItem();\r\n                this._setActive($last);\r\n            }\r\n        },\r\n\t\t_load: function()\r\n\t\t{\r\n    \t\t$R.ajax.get({\r\n        \t\turl: this.opts.handle + '&search=' + this.handleStr,\r\n        \t\tsuccess: this._parse.bind(this)\r\n    \t\t});\r\n\t\t},\r\n\t\t_parse: function(json)\r\n\t\t{\r\n    \t\tif (json === '') return;\r\n\r\n            var data = (typeof json === 'object') ? json : JSON.parse(json);\r\n\r\n            this._build();\r\n            this._buildData(data);\r\n\t\t},\r\n\t\t_build: function()\r\n\t\t{\r\n            this.$list = $R.dom('#redactor-handle-list');\r\n            if (this.$list.length === 0)\r\n            {\r\n                this.$list = $R.dom('<div id=\"redactor-handle-list\">');\r\n                this.$body.append(this.$list);\r\n            }\r\n        },\r\n        _buildData: function(data)\r\n        {\r\n            this.data = data;\r\n\r\n            this._update();\r\n            this._show();\r\n        },\r\n        _update: function()\r\n        {\r\n            this.$list.html('');\r\n\r\n            for (var key in this.data)\r\n            {\r\n                var $item = $R.dom('<a href=\"#\">');\r\n                $item.html(this.data[key].text);\r\n                $item.attr('data-href', this.data[key].href);\r\n                $item.attr('data-text', this.data[key].text);\r\n                $item.on('click', this._replace.bind(this));\r\n\r\n                this.$list.append($item);\r\n                \r\n            }\r\n\r\n            // position\r\n    \t\tvar $container = this.container.getElement();\r\n            var containerOffset = $container.offset();\r\n            var pos = this.selection.getPosition();\r\n\r\n            this.$list.addClass('open');\r\n            this.$list.css({\r\n                top: (pos.top + pos.height + this.$doc.scrollTop()) + 'px',\r\n                left: pos.left + 'px'\r\n            });\r\n        },\r\n        _isShown: function()\r\n        {\r\n            return (this.$list && this.$list.hasClass('open'));\r\n        },\r\n        _show: function()\r\n        {\r\n            this.$list.addClass('open');\r\n            this.$list.show();\r\n\r\n            this.$doc.off('.redactor-plugin-handle');\r\n            this.$doc.on('click.redactor-plugin-handle keydown.redactor-plugin-handle', this._hide.bind(this));\r\n        },\r\n        _hide: function(e)\r\n        {\r\n            var hidable = false;\r\n            var key = (e && e.which);\r\n\r\n            if (!e) hidable = true;\r\n            else if (e.type === 'click' || key === this.keycodes.ESC) hidable = true;\r\n\r\n            if (hidable) {\r\n               this._hideForce();\r\n            }\r\n        },\r\n        _hideForce: function() {\r\n            this.$list.removeClass('open');\r\n            this.$list.hide();\r\n            this._reset();\r\n        },\r\n        _reset: function()\r\n        {\r\n            this.handleStr = '';\r\n            this.handleLen = this.handleStart;\r\n        },\r\n\t\t_replace: function(e, $el)\r\n\t\t{\r\n    \t\te.preventDefault();\r\n\r\n    \t\tvar $item = ($el) ? $el : $R.dom(e.target);\r\n            var replacement = document.createElement('a');\r\n            replacement.setAttribute('href', $item.attr('data-href'));\r\n            replacement.innerHTML = $item.attr('data-text');\r\n\r\n    \t\tvar marker = this.marker.insert('start');\r\n    \t\tvar $marker = $R.dom(marker);\r\n            var current = marker.previousSibling;\r\n            var currentText = current.textContent;\r\n            var re = new RegExp('@' + this.handleStr + '$');\r\n\r\n        \tcurrentText = currentText.replace(re, '');\r\n        \tcurrent.textContent = currentText;\r\n\r\n            $marker.before(replacement);\r\n\r\n \t\t\tthis.selection.restoreMarkers();\r\n\r\n            return;\r\n\t\t}\r\n    });\r\n})(Redactor);\r\n","(function($R)\r\n{\r\n    $R.add('plugin', 'properties', {\r\n        modals: {\r\n            'properties':\r\n                '<form action=\"\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label>Id</label> \\\r\n                        <input type=\"text\" name=\"id\"> \\\r\n                    </div> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label>Class</label> \\\r\n                        <input type=\"text\" name=\"classname\"> \\\r\n                    </div> \\\r\n                </form>'\r\n        },\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"properties\": \"Properties\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.$body = app.$body;\r\n            this.toolbar = app.toolbar;\r\n            this.inspector = app.inspector;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n    \t\tthis.labelStyle = {\r\n        \t\t'font-family': 'monospace',\r\n    \t\t\t'position': 'absolute',\r\n    \t\t\t'padding': '2px 5px',\r\n    \t\t\t'line-height': 1,\r\n    \t\t\t'border-radius': '3px',\r\n    \t\t\t'font-size': '11px',\r\n    \t\t\t'color': 'rgba(255, 255, 255, .9)'\r\n    \t\t};\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            properties: {\r\n                open: function($modal, $form)\r\n                {\r\n                    if (this.$block)\r\n                    {\r\n                        var blockData = this._getData(this.$block);\r\n                        $form.setData(blockData);\r\n                    }\r\n                },\r\n                opened: function($modal, $form)\r\n                {\r\n                    $form.getField('id').focus();\r\n                },\r\n                save: function($modal, $form)\r\n                {\r\n                    var data = $form.getData();\r\n                    this._save(data);\r\n                }\r\n            }\r\n        },\r\n        onbutton: {\r\n            properties: {\r\n                observe: function(button)\r\n                {\r\n                    this._observeButton(button);\r\n                }\r\n            }\r\n        },\r\n        onclick: function() {\r\n            //this._observeButton();\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var data = {\r\n                title: this.lang.get('properties'),\r\n                api: 'plugin.properties.open',\r\n                observe: 'properties'\r\n            };\r\n\r\n            var $button = this.toolbar.addButton('properties', data);\r\n            $button.setIcon('<i class=\"re-icon-properties\"></i>');\r\n\r\n            this._createLabel();\r\n        },\r\n        stop: function()\r\n        {\r\n            this._removeLabel();\r\n        },\r\n        open: function()\r\n\t\t{\r\n           var block = this.selection.getBlock();\r\n           if (!block) return;\r\n\r\n           this.$block = $R.dom(block);\r\n\r\n           var options = {\r\n                title: this.lang.get('properties'),\r\n                width: '500px',\r\n                name: 'properties',\r\n                handle: 'save',\r\n                commands: {\r\n                    save: { title: this.lang.get('save') },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n\r\n            this.app.api('module.modal.build', options);\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_save: function(data)\r\n\t\t{\r\n    \t\tthis.app.api('module.modal.close');\r\n\r\n    \t\tif (data.id === '') this.$block.removeAttr('id');\r\n    \t\telse this.$block.attr('id', data.id);\r\n\r\n    \t\tif (data.classname === '') this.$block.removeAttr('class');\r\n    \t\telse this.$block.attr('class', data.classname);\r\n\t\t},\r\n\t\t_getData: function(block)\r\n\t\t{\r\n    \t    var $block = $R.dom(block);\r\n    \t    var data = {\r\n        \t    id: $block.attr('id'),\r\n        \t    classname: $block.attr('class')\r\n    \t    };\r\n\r\n    \t    return data;\r\n\t\t},\r\n\t\t_showData: function(block, data)\r\n\t\t{\r\n    \t\tvar str = '';\r\n    \t\tif (data.id) str += '#' + data.id + ' ';\r\n    \t\tif (data.classname) str += '.' + data.classname;\r\n\r\n\r\n            if (str !== '')\r\n            {\r\n                var $block = $R.dom(block);\r\n                var pos = $block.offset();\r\n\r\n                this.$label.css({\r\n                    top: (pos.top - 12) + 'px',\r\n                    left: pos.left + 'px',\r\n                    'z-index': (this.opts.zindex) ? (this.opts.zindex + 3) : 'auto'\r\n                });\r\n                this.$label.html(str);\r\n                this.$label.show();\r\n            }\r\n            else\r\n            {\r\n                this.$label.hide();\r\n            }\r\n\t\t},\r\n\t\t_createLabel: function()\r\n\t\t{\r\n            this.$label = $R.dom('<span />');\r\n            this.$label.hide();\r\n\t\t\tthis.$label.css(this.labelStyle).css('background', 'rgba(229, 57, 143, .7)');\r\n\r\n\t\t\tthis.$body.append(this.$label);\r\n\t\t},\r\n\t\t_removeLabel: function()\r\n\t\t{\r\n            if (this.$label) this.$label.remove();\r\n\t\t},\r\n\t\t_observeButton: function(button)\r\n\t\t{\r\n    \t\tvar block = this.selection.getBlock();\r\n    \t\tvar data = this.inspector.parse(block);\r\n\r\n    \t\tif (block && !data.isComponent())\r\n    \t\t{\r\n        \t\tvar blockData = this._getData(block);\r\n\r\n                this._showData(block, blockData);\r\n        \t    button.enable();\r\n    \t\t}\r\n    \t\telse\r\n    \t\t{\r\n        \t    button.disable();\r\n        \t    if (this.$label) this.$label.hide();\r\n    \t\t}\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'readmore', {\r\n        translations: {\r\n            en: {\r\n                \"readmore\": \"Read more\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.insertion = app.insertion;\r\n            this.inspector = app.inspector;\r\n        },\r\n        // messages\r\n\r\n        oncontextbar: function(e, contextbar)\r\n        {\r\n            var data = this.inspector.parse(e.target)\r\n            if (typeof(data.$el) !== 'undefined' && data.$el.find('div.readmore').length == 1)\r\n            {\r\n                var node = data.getComponent();\r\n                if (typeof(node) !== 'undefined' && node !== false) {\r\n                    var buttons = {\r\n                        \"remove\": {\r\n                            title: this.lang.get('delete'),\r\n                            api: 'plugin.widget.remove',\r\n                            args: node\r\n                        }\r\n                    };\r\n\r\n                    contextbar.set(e, node, buttons, 'bottom');\r\n                }\r\n            }\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var obj = {\r\n                title: this.lang.get('readmore'),\r\n                api: 'plugin.readmore.open'\r\n            };\r\n\r\n            var $button = this.toolbar.addButton('readmore', obj);\r\n            $button.setIcon('<i class=\"re-icon-readmore\"></i>');\r\n        },\r\n        open: function()\r\n\t\t{\r\n            this._insert();\r\n\t\t},\r\n        remove: function(node)\r\n        {\r\n            this.component.remove(node);\r\n        },\r\n\r\n        // private\r\n\t\t_insert: function(data)\r\n\t\t{\r\n\r\n    \t\tvar html = '<div class=\"readmore\"><span class=\"readmore__label\">' + this.lang.get('readmore') + '</span></div>';\r\n            var $component = this.component.create('widget', html);\r\n            $component.attr('data-widget-code', encodeURI(html));\r\n    \t\tthis.insertion.insertHtml($component);\r\n\t\t}\r\n    });\r\n})(Redactor);\r\n","(function($R)\r\n{\r\n    $R.add('plugin', 'rte_definedlinks', {\r\n        translations: {\r\n            en: {\r\n                \"pages\": \"Pages\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n\r\n            this.component = app.component;\r\n\r\n            // local\r\n            this.links = [];\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            link: {\r\n                open: function($modal, $form)\r\n                {\r\n                    if (!this.opts.definedlinks) return;\r\n\r\n                    this.$modal = $modal;\r\n                    this.$form = $form;\r\n\r\n                    this._load();\r\n                }\r\n            }\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_load: function()\r\n\t\t{\r\n    \t\tif (typeof this.opts.definedlinks === 'object')\r\n    \t\t{\r\n                this._build(this.opts.definedlinks);\r\n    \t\t}\r\n            else\r\n            {\r\n        \t\t$R.ajax.get({\r\n            \t\turl: this.opts.definedlinks,\r\n            \t\tsuccess: this._build.bind(this)\r\n        \t\t});\r\n    \t\t}\r\n\t\t},\r\n\t\t_build: function(data)\r\n\t\t{\r\n            var $selector = this.$modal.find('#redactor-defined-links');\r\n            if ($selector.length === 0)\r\n            {\r\n                var $body = this.$modal.getBody();\r\n                var $item = $R.dom('<div class=\"form-item\" />');\r\n                var $label = $R.dom('<label for=\"redactor-defined-links\">' + $R.lang[$R.opts.lang]['pages'] + '</label>');\r\n                var $selector = $R.dom('<select id=\"redactor-defined-links\" />');\r\n\r\n                $item.append($label);\r\n                $item.append($selector);\r\n                $body.prepend($item);\r\n            }\r\n\r\n            this.links = [];\r\n\r\n            $selector.html('');\r\n            $selector.off('change');\r\n\r\n            $selector.append($R.dom('<option>'));\r\n\r\n            for (var key in data)\r\n            {\r\n                if (!data.hasOwnProperty(key) || typeof data[key] !== 'object')\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                this.links[key] = data[key];\r\n\r\n                var $option = $R.dom('<option>');\r\n                $option.val(key);\r\n                $option.html(data[key].text);\r\n\r\n                $selector.append($option);\r\n            }\r\n\r\n            $selector.on('change', this._select.bind(this));\r\n\t\t},\r\n\t\t_select: function(e)\r\n\t\t{\r\n\t\t\tvar formData = this.$form.getData();\r\n\t\t\tvar key = $R.dom(e.target).val();\r\n\t\t\tvar data = { text: '', url: '' };\r\n\r\n\t\t\tif (key !== '')\r\n\t\t\t{\r\n\t\t\t\tdata.text = this.links[key].text;\r\n\t\t\t\tdata.url = this.links[key].href;\r\n\t\t\t}\r\n\r\n\t\t\tif (formData.text !== '')\r\n\t\t\t{\r\n    \t\t\tdata = { url: data.url };\r\n\t\t\t}\r\n\r\n\t\t\tthis.$form.setData(data);\r\n\t\t}\r\n    });\r\n})(Redactor);\r\n","(function($R)\r\n{\r\n    $R.add('plugin', 'specialchars', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"specialchars\": \"Special Characters\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n            this.insertion = app.insertion;\r\n\r\n            // local\r\n            this.chars = [\r\n\r\n                '&lsquo;', '&rsquo;', '&ldquo;', '&rdquo;', '&ndash;', '&mdash;', '&divide;', '&hellip;', '&trade;', '&bull;',\r\n            \t'&rarr;', '&asymp;', '$', '&euro;', '&cent;', '&pound;', '&yen;', '&iexcl;',\r\n            \t'&curren;', '&brvbar;', '&sect;', '&uml;', '&copy;', '&ordf;', '&laquo;', '&raquo;', '&not;', '&reg;', '&macr;',\r\n            \t'&deg;', '&sup1;', '&sup2;', '&sup3;', '&acute;', '&micro;', '&para;', '&middot;', '&cedil;',  '&ordm;',\r\n            \t'&frac14;', '&frac12;', '&frac34;', '&iquest;', '&Agrave;', '&Aacute;', '&Acirc;', '&Atilde;', '&Auml;', '&Aring;',\r\n            \t'&AElig;', '&Ccedil;', '&Egrave;', '&Eacute;', '&Ecirc;', '&Euml;', '&Igrave;', '&Iacute;', '&Icirc;', '&Iuml;',\r\n            \t'&ETH;', '&Ntilde;', '&Ograve;', '&Oacute;', '&Ocirc;', '&Otilde;', '&Ouml;', '&times;', '&Oslash;', '&Ugrave;',\r\n            \t'&Uacute;', '&Ucirc;', '&Uuml;', '&Yacute;', '&THORN;', '&szlig;', '&agrave;', '&aacute;', '&acirc;', '&atilde;',\r\n            \t'&auml;', '&aring;', '&aelig;', '&ccedil;', '&egrave;', '&eacute;', '&ecirc;', '&euml;', '&igrave;', '&iacute;',\r\n            \t'&icirc;', '&iuml;', '&eth;', '&ntilde;', '&ograve;', '&oacute;', '&ocirc;', '&otilde;', '&ouml;',\r\n            \t'&oslash;', '&ugrave;', '&uacute;', '&ucirc;', '&uuml;', '&yacute;', '&thorn;', '&yuml;', '&OElig;', '&oelig;',\r\n            \t'&#372;', '&#374', '&#373', '&#375;'\r\n            ];\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var btnObj = {\r\n                title: this.lang.get('specialchars')\r\n            };\r\n\r\n            var $dropdown = this._buildDropdown();\r\n\r\n            this.$button = this.toolbar.addButton('specialchars', btnObj);\r\n\t\t\tthis.$button.setIcon('<i class=\"re-icon-specialcharacters\"></i>');\r\n\t\t\tthis.$button.setDropdown($dropdown);\r\n        },\r\n\r\n        // private\r\n        _set: function(character)\r\n        {\r\n            this.insertion.insertChar(character);\r\n        },\r\n        _buildDropdown: function()\r\n\t\t{\r\n    \t\tvar self = this;\r\n            var $dropdown = $R.dom('<div class=\"redactor-dropdown-cells\">');\r\n            var func = function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar $el = $R.dom(e.target);\r\n\t\t\t\tself._set($el.data('char'));\r\n\t\t\t};\r\n\r\n            for (var i = 0; i < this.chars.length; i++)\r\n            {\r\n                var $el = $R.dom('<a>');\r\n                $el.attr({ 'href': '#', 'data-char': this.chars[i] });\r\n                $el.css({ 'line-height': '32px', 'width': '32px', 'height': '32px' });\r\n                $el.html(this.chars[i]);\r\n                $el.on('click', func);\r\n\r\n                $dropdown.append($el);\r\n            }\r\n\r\n            return $dropdown;\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'table', {\r\n        translations: {\r\n            en: {\r\n        \t\t\"table\": \"Table\",\r\n        \t\t\"insert-table\": \"Insert table\",\r\n        \t\t\"insert-row-above\": \"Insert row above\",\r\n        \t\t\"insert-row-below\": \"Insert row below\",\r\n        \t\t\"insert-column-left\": \"Insert column left\",\r\n        \t\t\"insert-column-right\": \"Insert column right\",\r\n        \t\t\"add-head\": \"Add head\",\r\n        \t\t\"delete-head\": \"Delete head\",\r\n        \t\t\"delete-column\": \"Delete column\",\r\n        \t\t\"delete-row\": \"Delete row\",\r\n        \t\t\"delete-table\": \"Delete table\"\r\n        \t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.opts = app.opts;\r\n            this.caret = app.caret;\r\n            this.editor = app.editor;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.inspector = app.inspector;\r\n            this.insertion = app.insertion;\r\n            this.selection = app.selection;\r\n        },\r\n        // messages\r\n        ondropdown: {\r\n            table: {\r\n                observe: function(dropdown)\r\n                {\r\n                    this._observeDropdown(dropdown);\r\n                }\r\n            }\r\n        },\r\n        onbottomclick: function()\r\n        {\r\n            this.insertion.insertToEnd(this.editor.getLastNode(), 'table');\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n\t\t\tvar dropdown = {\r\n    \t\t\tobserve: 'table',\r\n    \t\t\t'insert-table': {\r\n    \t\t\t\ttitle: this.lang.get('insert-table'),\r\n    \t\t\t\tapi: 'plugin.table.insert'\r\n    \t\t\t},\r\n    \t\t\t'insert-row-above': {\r\n                    title: this.lang.get('insert-row-above'),\r\n    \t\t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addRowAbove'\r\n    \t\t\t},\r\n    \t\t\t'insert-row-below': {\r\n        \t\t\ttitle: this.lang.get('insert-row-below'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addRowBelow'\r\n    \t\t\t},\r\n    \t\t\t'insert-column-left': {\r\n        \t\t\ttitle: this.lang.get('insert-column-left'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addColumnLeft'\r\n    \t\t\t},\r\n    \t\t\t'insert-column-right': {\r\n        \t\t\ttitle: this.lang.get('insert-column-right'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addColumnRight'\r\n    \t\t\t},\r\n    \t\t\t'add-head': {\r\n        \t\t\ttitle: this.lang.get('add-head'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addHead'\r\n    \t\t\t},\r\n    \t\t\t'delete-head': {\r\n        \t\t\ttitle: this.lang.get('delete-head'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteHead'\r\n    \t\t\t},\r\n    \t\t\t'delete-column': {\r\n        \t\t\ttitle: this.lang.get('delete-column'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteColumn'\r\n    \t\t\t},\r\n    \t\t\t'delete-row': {\r\n        \t\t\ttitle: this.lang.get('delete-row'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteRow'\r\n    \t\t\t},\r\n    \t\t\t'delete-table': {\r\n        \t\t\ttitle: this.lang.get('delete-table'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteTable'\r\n    \t\t\t}\r\n\t\t\t};\r\n            var obj = {\r\n                title: this.lang.get('table')\r\n            };\r\n\r\n\t\t\tvar $button = this.toolbar.addButtonBefore('link', 'table', obj);\r\n\t\t\t$button.setIcon('<i class=\"re-icon-table\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        },\r\n\t\tinsert: function()\r\n\t\t{\r\n            var rows = 2;\r\n\t\t\tvar columns = 3;\r\n\t\t\tvar $component = this.component.create('table');\r\n\r\n\t\t\tfor (var i = 0; i < rows; i++)\r\n\t\t\t{\r\n\t\t\t    $component.addRow(columns);\r\n\t\t\t}\r\n\r\n\t\t\t$component =  this.insertion.insertHtml($component);\r\n\t\t\tthis.caret.setStart($component);\r\n\t\t},\r\n        addRowAbove: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n                var $row = $component.addRowTo(current, 'before');\r\n\r\n                this.caret.setStart($row);\r\n            }\r\n        },\r\n        addRowBelow: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n                var $row = $component.addRowTo(current, 'after');\r\n\r\n                this.caret.setStart($row);\r\n            }\r\n        },\r\n        addColumnLeft: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                this.selection.save();\r\n                $component.addColumnTo(current, 'left');\r\n                this.selection.restore();\r\n            }\r\n        },\r\n        addColumnRight: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                this.selection.save();\r\n                $component.addColumnTo(current, 'right');\r\n                this.selection.restore();\r\n            }\r\n        },\r\n        addHead: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                this.selection.save();\r\n                $component.addHead();\r\n                this.selection.restore();\r\n            }\r\n        },\r\n        deleteHead: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n                var $head = $R.dom(current).closest('thead');\r\n                if ($head.length !== 0)\r\n                {\r\n                    $component.removeHead();\r\n                    this.caret.setStart($component);\r\n                }\r\n                else\r\n                {\r\n                    this.selection.save();\r\n                    $component.removeHead();\r\n                    this.selection.restore();\r\n                }\r\n            }\r\n        },\r\n        deleteColumn: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                var $currentCell = $R.dom(current).closest('td, th');\r\n                var nextCell = $currentCell.nextElement().get();\r\n                var prevCell = $currentCell.prevElement().get();\r\n\r\n                $component.removeColumn(current);\r\n\r\n                if (nextCell) this.caret.setStart(nextCell);\r\n                else if (prevCell) this.caret.setEnd(prevCell);\r\n                else this.deleteTable();\r\n            }\r\n        },\r\n        deleteRow: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                var $currentRow = $R.dom(current).closest('tr');\r\n                var nextRow = $currentRow.nextElement().get();\r\n                var prevRow = $currentRow.prevElement().get();\r\n                var $head = $R.dom(current).closest('thead');\r\n\r\n                $component.removeRow(current);\r\n\r\n                if (nextRow) this.caret.setStart(nextRow);\r\n                else if (prevRow) this.caret.setEnd(prevRow);\r\n                else if ($head.length !== 0) {\r\n                    $component.removeHead();\r\n                    this.caret.setStart($component);\r\n                }\r\n                else this.deleteTable();\r\n            }\r\n        },\r\n        deleteTable: function()\r\n        {\r\n            var table = this._getTable();\r\n            if (table)\r\n            {\r\n                this.component.remove(table);\r\n            }\r\n        },\r\n\r\n        // private\r\n        _getTable: function()\r\n        {\r\n            var current = this.selection.getCurrent();\r\n            var data = this.inspector.parse(current);\r\n            if (data.isTable())\r\n            {\r\n                return data.getTable();\r\n            }\r\n        },\r\n        _getComponent: function()\r\n        {\r\n            var current = this.selection.getCurrent();\r\n            var data = this.inspector.parse(current);\r\n            if (data.isTable())\r\n            {\r\n                var table = data.getTable();\r\n\r\n                return this.component.create('table', table);\r\n            }\r\n        },\r\n        _observeDropdown: function(dropdown)\r\n        {\r\n            var table = this._getTable();\r\n            var items = dropdown.getItemsByClass('redactor-table-item-observable');\r\n            var tableItem = dropdown.getItem('insert-table');\r\n            if (table)\r\n            {\r\n                this._observeItems(items, 'enable');\r\n                tableItem.disable();\r\n            }\r\n            else\r\n            {\r\n                this._observeItems(items, 'disable');\r\n                tableItem.enable();\r\n            }\r\n        },\r\n        _observeItems: function(items, type)\r\n        {\r\n            for (var i = 0; i < items.length; i++)\r\n            {\r\n                items[i][type]();\r\n            }\r\n        }\r\n    });\r\n})(Redactor);\r\n(function($R)\r\n{\r\n    $R.add('class', 'table.component', {\r\n        mixins: ['dom', 'component'],\r\n        init: function(app, el)\r\n        {\r\n            this.app = app;\r\n\r\n            // init\r\n            return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n        },\r\n\r\n        // public\r\n        addHead: function()\r\n        {\r\n\t\t\tthis.removeHead();\r\n\r\n\t\t\tvar columns = this.$element.find('tr').first().children('td, th').length;\r\n\t\t\tvar $head = $R.dom('<thead>');\r\n            var $row = this._buildRow(columns, '<th>');\r\n\r\n            $head.append($row);\r\n            this.$element.prepend($head);\r\n        },\r\n        addRow: function(columns)\r\n        {\r\n            var $row = this._buildRow(columns);\r\n            this.$element.append($row);\r\n\r\n            return $row;\r\n        },\r\n        addRowTo: function(current, type)\r\n        {\r\n            return this._addRowTo(current, type);\r\n        },\r\n        addColumnTo: function(current, type)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n            var $currentCell = $current.closest('td, th');\r\n\r\n            var index = 0;\r\n            $currentRow.find('td, th').each(function(node, i)\r\n\t\t\t{\r\n\t\t\t\tif (node === $currentCell.get()) index = i;\r\n\t\t\t});\r\n\r\n\t\t\tthis.$element.find('tr').each(function(node)\r\n\t\t\t{\r\n    \t\t\tvar $node = $R.dom(node);\r\n\t\t\t\tvar origCell = $node.find('td, th').get(index);\r\n\t\t\t\tvar $origCell = $R.dom(origCell);\r\n\r\n\t\t\t\tvar $td = $origCell.clone();\r\n\t\t\t\t$td.html('<div data-redactor-tag=\"tbr\"></div>');\r\n\r\n\t\t\t\tif (type === 'right') $origCell.after($td);\r\n\t\t\t\telse                  $origCell.before($td);\r\n\t\t\t});\r\n        },\r\n        removeHead: function()\r\n        {\r\n\t\t\tvar $head = this.$element.find('thead');\r\n\t\t\tif ($head.length !== 0) $head.remove();\r\n        },\r\n        removeRow: function(current)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n\r\n            $currentRow.remove();\r\n        },\r\n        removeColumn: function(current)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n            var $currentCell = $current.closest('td, th');\r\n\r\n            var index = 0;\r\n            $currentRow.find('td, th').each(function(node, i)\r\n\t\t\t{\r\n\t\t\t\tif (node === $currentCell.get()) index = i;\r\n\t\t\t});\r\n\r\n\t\t\tthis.$element.find('tr').each(function(node)\r\n\t\t\t{\r\n    \t\t\tvar $node = $R.dom(node);\r\n\t\t\t\tvar origCell = $node.find('td, th').get(index);\r\n\t\t\t\tvar $origCell = $R.dom(origCell);\r\n\r\n\t\t\t\t$origCell.remove();\r\n\t\t\t});\r\n        },\r\n\r\n        // private\r\n        _init: function(el)\r\n        {\r\n            var wrapper, element;\r\n            if (typeof el !== 'undefined')\r\n            {\r\n                var $node = $R.dom(el);\r\n                var node = $node.get();\r\n                var $figure = $node.closest('figure');\r\n                if ($figure.length !== 0)\r\n                {\r\n                    wrapper = $figure;\r\n                    element = $figure.find('table').get();\r\n                }\r\n                else if (node.tagName === 'TABLE')\r\n                {\r\n                    element = node;\r\n                }\r\n            }\r\n\r\n            this._buildWrapper(wrapper);\r\n            this._buildElement(element);\r\n            this._initWrapper();\r\n        },\r\n        _addRowTo: function(current, position)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n            if ($currentRow.length !== 0)\r\n            {\r\n                var columns = $currentRow.children('td, th').length;\r\n                var $newRow = this._buildRow(columns);\r\n\r\n                $currentRow[position]($newRow);\r\n\r\n                return $newRow;\r\n            }\r\n        },\r\n        _buildRow: function(columns, tag)\r\n        {\r\n            tag = tag || '<td>';\r\n\r\n            var $row = $R.dom('<tr>');\r\n            for (var i = 0; i < columns; i++)\r\n            {\r\n                var $cell = $R.dom(tag);\r\n                $cell.attr('contenteditable', true);\r\n                $cell.html('<div data-redactor-tag=\"tbr\"></div>');\r\n\r\n                $row.append($cell);\r\n            }\r\n\r\n            return $row;\r\n        },\r\n        _buildElement: function(node)\r\n        {\r\n            if (node)\r\n            {\r\n                this.$element = $R.dom(node);\r\n            }\r\n            else\r\n            {\r\n                this.$element = $R.dom('<table>');\r\n                this.append(this.$element);\r\n            }\r\n        },\r\n        _buildWrapper: function(node)\r\n        {\r\n            node = node || '<figure>';\r\n\r\n            this.parse(node);\r\n        },\r\n        _initWrapper: function()\r\n        {\r\n            this.addClass('redactor-component');\r\n            this.attr({\r\n                'data-redactor-type': 'table',\r\n                'tabindex': '-1',\r\n                'contenteditable': false\r\n            });\r\n\r\n            if (this.app.detector.isIe())\r\n            {\r\n                this.removeAttr('contenteditable');\r\n            }\r\n        }\r\n    });\r\n\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'textdirection', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"change-text-direction\": \"RTL-LTR\",\r\n    \t\t\t\"left-to-right\": \"Left to Right\",\r\n    \t\t\t\"right-to-left\": \"Right to Left\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.block = app.block;\r\n            this.editor = app.editor;\r\n            this.toolbar = app.toolbar;\r\n            this.selection = app.selection;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var dropdown = {};\r\n\r\n    \t\tdropdown.ltr = { title: this.lang.get('left-to-right'), api: 'plugin.textdirection.set', args: 'ltr' };\r\n    \t\tdropdown.rtl = { title: this.lang.get('right-to-left'), api: 'plugin.textdirection.set', args: 'rtl' };\r\n\r\n            var $button = this.toolbar.addButton('textdirection', { title: this.lang.get('change-text-direction') });\r\n            $button.setIcon('<i class=\"re-icon-textdirection\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        },\r\n        set: function(type)\r\n\t\t{\r\n    \t\tvar block = this.selection.getBlock();\r\n    \t\tif (block && block.tagName === 'LI') {\r\n        \t\tvar list = $R.dom(block).parents('ul, ol', this.editor.getElement()).last();\r\n        \t\tthis.block.add({ attr: { dir: type }}, false, list);\r\n    \t\t}\r\n            else {\r\n                this.block.add({ attr: { dir: type }});\r\n            }\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'textexpander', {\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.utils = app.utils;\r\n            this.editor = app.editor;\r\n            this.marker = app.marker;\r\n            this.keycodes = app.keycodes;\r\n            this.selection = app.selection;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            if (!this.opts.textexpander) return;\r\n\r\n            var $editor = this.editor.getElement();\r\n\t\t\t$editor.on('keyup.redactor-plugin-textexpander', this._expand.bind(this));\r\n\t\t},\r\n\t\tstop: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n\t\t\t$editor.off('.redactor-plugin-textexpander');\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_expand: function(e)\r\n\t\t{\r\n            var key = e.which;\r\n\t\t\tif (key === this.keycodes.SPACE)\r\n\t\t\t{\r\n    \t\t\tvar len = this.opts.textexpander.length;\r\n                for (var i = 0; i < len; i++)\r\n                {\r\n                    var str = this.opts.textexpander[i];\r\n    \t\t\t    var re = new RegExp(this.utils.escapeRegExp(str[0]) + '\\\\s$');\r\n                    var rangeText = this.selection.getTextBeforeCaret(str[0].length + 1).replace(/\\s$/, '');\r\n\r\n    \t\t\t    if (str[0] === rangeText)\r\n    \t\t\t    {\r\n        \t\t\t    return this._replaceSelection(re, str[1]);\r\n    \t\t\t    }\r\n\r\n                }\r\n\t\t\t}\r\n\t\t},\r\n\t\t_replaceSelection: function(re, replacement)\r\n\t\t{\r\n    \t\tvar marker = this.marker.insert('start');\r\n            var current = marker.previousSibling;\r\n            var currentText = current.textContent;\r\n\r\n            currentText = currentText.replace(/&nbsp;/, ' ');\r\n        \tcurrentText = currentText.replace(re, replacement);\r\n        \tcurrent.textContent = currentText;\r\n\r\n \t\t\tthis.selection.restoreMarkers();\r\n\r\n            return;\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'video', {\r\n        translations: {\r\n            en: {\r\n                \"video\": \"Video\",\r\n                \"video-html-code\": \"Video Embed Code or Youtube/Vimeo Link\"\r\n            }\r\n        },\r\n        modals: {\r\n            'video':\r\n                '<form action=\"\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label for=\"modal-video-input\">## video-html-code ##</label> \\\r\n                        <textarea id=\"modal-video-input\" name=\"video\" style=\"height: 160px;\"></textarea> \\\r\n                    </div> \\\r\n                </form>'\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.opts = app.opts;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.insertion = app.insertion;\r\n            this.inspector = app.inspector;\r\n            this.selection = app.selection;\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            video: {\r\n                opened: function($modal, $form)\r\n                {\r\n                    $video = $form.getField('video');\r\n                    $video.focus();\r\n                },\r\n                insert: function($modal, $form)\r\n                {\r\n                    var data = $form.getData();\r\n                    this._insert(data);\r\n                }\r\n            }\r\n        },\r\n        oncontextbar: function(e, contextbar)\r\n        {\r\n            var data = this.inspector.parse(e.target)\r\n            if (data.isComponentType('video'))\r\n            {\r\n                var node = data.getComponent();\r\n                var buttons = {\r\n                    \"remove\": {\r\n                        title: this.lang.get('delete'),\r\n                        api: 'plugin.video.remove',\r\n                        args: node\r\n                    }\r\n                };\r\n\r\n                contextbar.set(e, node, buttons, 'bottom');\r\n            }\r\n\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var obj = {\r\n                title: this.lang.get('video'),\r\n                api: 'plugin.video.open'\r\n            };\r\n\r\n            var $button = this.toolbar.addButtonAfter('image', 'video', obj);\r\n            $button.setIcon('<i class=\"re-icon-video\"></i>');\r\n        },\r\n        open: function()\r\n\t\t{\r\n            var options = {\r\n                title: this.lang.get('video'),\r\n                width: '600px',\r\n                name: 'video',\r\n                handle: 'insert',\r\n                commands: {\r\n                    insert: { title: this.lang.get('insert') },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n\r\n            this.app.api('module.modal.build', options);\r\n\t\t},\r\n        remove: function(node)\r\n        {\r\n            this.component.remove(node);\r\n        },\r\n\r\n        // private\r\n\t\t_insert: function(data)\r\n\t\t{\r\n    \t\tthis.app.api('module.modal.close');\r\n\r\n    \t\tif (data.video.trim() === '')\r\n    \t\t{\r\n        \t    return;\r\n    \t\t}\r\n\r\n            // parsing\r\n            data.video = this._matchData(data.video);\r\n\r\n            // inserting\r\n            if (this._isVideoIframe(data.video))\r\n            {\r\n                var $video = this.component.create('video', data.video);\r\n                this.insertion.insertHtml($video);\r\n            }\r\n\t\t},\r\n\r\n\t\t_isVideoIframe: function(data)\r\n\t\t{\r\n            return (data.match(/<iframe|<video/gi) !== null);\r\n\t\t},\r\n\t\t_matchData: function(data)\r\n\t\t{\r\n\t\t\tvar iframeStart = '<iframe style=\"width: 500px; height: 281px;\" src=\"';\r\n\t\t\tvar iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\r\n\r\n            if (this._isVideoIframe(data))\r\n\t\t\t{\r\n\t\t\t\tvar allowed = ['iframe', 'video', 'source'];\r\n\t\t\t\tvar tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\r\n\r\n                data = data.replace(/<p(.*?[^>]?)>([\\w\\W]*?)<\\/p>/gi, '');\r\n\t\t\t    data = data.replace(tags, function ($0, $1)\r\n\t\t\t    {\r\n\t\t\t        return (allowed.indexOf($1.toLowerCase()) === -1) ? '' : $0;\r\n\t\t\t    });\r\n\t\t\t}\r\n            else\r\n            {\r\n    \t\t\tif (data.match(this.opts.regex.youtube))\r\n    \t\t\t{\r\n                    var yturl = '//www.youtube.com';\r\n                    if (data.search('youtube-nocookie.com') !== -1) {\r\n                        yturl = '//www.youtube-nocookie.com';\r\n                    }\r\n    \t\t\t\tdata = data.replace(this.opts.regex.youtube, iframeStart + yturl + '/embed/$1' + iframeEnd);\r\n    \t\t\t}\r\n    \t\t\telse if (data.match(this.opts.regex.vimeo))\r\n    \t\t\t{\r\n\r\n    \t\t\t\tdata = data.replace(this.opts.regex.vimeo, iframeStart + '//player.vimeo.com/video/$2' + iframeEnd);\r\n    \t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n    });\r\n})(Redactor);","(function($R)\r\n{\r\n    $R.add('plugin', 'widget', {\r\n        translations: {\r\n            en: {\r\n                \"widget\": \"Widget\",\r\n                \"widget-html-code\": \"Widget HTML Code\"\r\n            }\r\n        },\r\n        modals: {\r\n            'widget':\r\n                '<form action=\"\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label for=\"modal-widget-input\">## widget-html-code ##</label> \\\r\n                        <textarea id=\"modal-widget-input\" name=\"widget\" style=\"height: 200px;\"></textarea> \\\r\n                    </div> \\\r\n                </form>'\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.opts = app.opts;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.insertion = app.insertion;\r\n            this.inspector = app.inspector;\r\n            this.selection = app.selection;\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            widget: {\r\n                opened: function($modal, $form)\r\n                {\r\n                    $form.getField('widget').focus();\r\n\r\n                    if (this.$currentItem)\r\n                    {\r\n                        var code = decodeURI(this.$currentItem.attr('data-widget-code'));\r\n                        $form.getField('widget').val(code);\r\n                    }\r\n                },\r\n                insert: function($modal, $form)\r\n                {\r\n                    var data = $form.getData();\r\n                    this._insert(data);\r\n                }\r\n            }\r\n        },\r\n        oncontextbar: function(e, contextbar)\r\n        {\r\n            var data = this.inspector.parse(e.target)\r\n            if (!data.isFigcaption() && data.isComponentType('widget'))\r\n            {\r\n                var node = data.getComponent();\r\n                var buttons = {\r\n                    \"edit\": {\r\n                        title: this.lang.get('edit'),\r\n                        api: 'plugin.widget.open',\r\n                        args: node\r\n                    },\r\n                    \"remove\": {\r\n                        title: this.lang.get('delete'),\r\n                        api: 'plugin.widget.remove',\r\n                        args: node\r\n                    }\r\n                };\r\n\r\n                contextbar.set(e, node, buttons, 'bottom');\r\n            }\r\n        },\r\n        onbutton: {\r\n            widget: {\r\n                observe: function(button)\r\n                {\r\n                    this._observeButton(button);\r\n                }\r\n            }\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var obj = {\r\n                title: this.lang.get('widget'),\r\n                api: 'plugin.widget.open',\r\n                observe: 'widget'\r\n            };\r\n\r\n            var $button = this.toolbar.addButton('widget', obj);\r\n            $button.setIcon('<i class=\"re-icon-widget\"></i>');\r\n        },\r\n        open: function()\r\n\t\t{\r\n            this.$currentItem = this._getCurrent();\r\n\r\n            var options = {\r\n                title: this.lang.get('widget'),\r\n                width: '600px',\r\n                name: 'widget',\r\n                handle: 'insert',\r\n                commands: {\r\n                    insert: { title: (this.$currentItem) ? this.lang.get('save') : this.lang.get('insert') },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n\r\n            this.app.api('module.modal.build', options);\r\n\t\t},\r\n        remove: function(node)\r\n        {\r\n            this.component.remove(node);\r\n        },\r\n\r\n        // private\r\n\t\t_getCurrent: function()\r\n\t\t{\r\n    \t\tvar current = this.selection.getCurrent();\r\n    \t\tvar data = this.inspector.parse(current);\r\n    \t\tif (data.isComponentType('widget'))\r\n    \t\t{\r\n        \t\treturn this.component.build(data.getComponent());\r\n    \t\t}\r\n\t\t},\r\n\t\t_insert: function(data)\r\n\t\t{\r\n    \t\tthis.app.api('module.modal.close');\r\n\r\n    \t\tif (data.widget.trim() === '')\r\n    \t\t{\r\n        \t    return;\r\n    \t\t}\r\n\r\n    \t\tvar html = (this._isHtmlString(data.widget)) ? data.widget : document.createTextNode(data.widget);\r\n            var $component = this.component.create('widget', html);\r\n            $component.attr('data-widget-code', encodeURI(data.widget.trim()));\r\n    \t\tthis.insertion.insertHtml($component);\r\n\r\n\t\t},\r\n        _isHtmlString: function(html)\r\n        {\r\n            return !(typeof html === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(html));\r\n        },\r\n\t\t_observeButton: function(button)\r\n\t\t{\r\n    \t\tvar current = this.selection.getCurrent();\r\n    \t\tvar data = this.inspector.parse(current);\r\n\r\n    \t\tif (data.isComponentType('table')) button.disable();\r\n    \t\telse button.enable();\r\n\t\t}\r\n    });\r\n})(Redactor);","/*\r\n    Redactor\r\n    Version 3.5.0\r\n    Updated: June 29, 2021\r\n\r\n    http://imperavi.com/redactor/\r\n\r\n    Copyright (c) 2009-2021, Imperavi Ltd.\r\n    License: http://imperavi.com/redactor/license/\r\n*/\r\nif (typeof CodeMirror === 'undefined') { var CodeMirror = undefined; }\r\nif (typeof jQuery === 'undefined') { var jQuery = undefined; }\r\n(function() {\r\nvar Ajax = {};\r\n\r\nAjax.settings = {};\r\nAjax.post = function(options) { return new AjaxRequest('post', options); };\r\nAjax.get = function(options) { return new AjaxRequest('get', options); };\r\nAjax.request = function(method, options) { return new AjaxRequest(method, options); };\r\n\r\nvar AjaxRequest = function(method, options)\r\n{\r\n    var defaults = {\r\n        method: method,\r\n        url: '',\r\n        before: function() {},\r\n        success: function() {},\r\n        error: function() {},\r\n        data: false,\r\n        async: true,\r\n        headers: {}\r\n    };\r\n\r\n    this.p = this.extend(defaults, options);\r\n    this.p = this.extend(this.p, Ajax.settings);\r\n    this.p.method = this.p.method.toUpperCase();\r\n\r\n    this.prepareData();\r\n\r\n    this.xhr = new XMLHttpRequest();\r\n    this.xhr.open(this.p.method, this.p.url, this.p.async);\r\n\r\n    this.setHeaders();\r\n\r\n    var before = (typeof this.p.before === 'function') ? this.p.before(this.xhr) : true;\r\n    if (before !== false)\r\n    {\r\n        this.send();\r\n    }\r\n};\r\n\r\nAjaxRequest.prototype = {\r\n    extend: function(obj1, obj2)\r\n    {\r\n        if (obj2) for (var name in obj2) { obj1[name] = obj2[name]; }\r\n        return obj1;\r\n    },\r\n    prepareData: function()\r\n    {\r\n        if (['POST', 'PUT'].indexOf(this.p.method) !== -1 && !this.isFormData()) this.p.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n        if (typeof this.p.data === 'object' && !this.isFormData()) this.p.data = this.toParams(this.p.data);\r\n        if (this.p.method === 'GET') this.p.url = (this.p.data) ? this.p.url + '?' + this.p.data : this.p.url;\r\n    },\r\n    setHeaders: function()\r\n    {\r\n        this.xhr.setRequestHeader('X-Requested-With', this.p.headers['X-Requested-With'] || 'XMLHttpRequest');\r\n        for (var name in this.p.headers)\r\n        {\r\n            this.xhr.setRequestHeader(name, this.p.headers[name]);\r\n        }\r\n    },\r\n    isFormData: function()\r\n    {\r\n        return (typeof window.FormData !== 'undefined' && this.p.data instanceof window.FormData);\r\n    },\r\n    isComplete: function()\r\n    {\r\n        return !(this.xhr.status < 200 || (this.xhr.status >= 300 && this.xhr.status !== 304));\r\n    },\r\n    send: function()\r\n    {\r\n        if (this.p.async)\r\n        {\r\n            this.xhr.onload = this.loaded.bind(this);\r\n            this.xhr.send(this.p.data);\r\n        }\r\n        else\r\n        {\r\n            this.xhr.send(this.p.data);\r\n            this.loaded.call(this);\r\n        }\r\n    },\r\n    loaded: function()\r\n    {\r\n        if (this.isComplete())\r\n        {\r\n            var response = this.parseResponse();\r\n            if (typeof this.p.success === 'function') this.p.success(response, this.xhr);\r\n        }\r\n        else\r\n        {\r\n            var response = this.parseResponse();\r\n            if (typeof this.p.error === 'function') this.p.error(response, this.xhr, this.xhr.status);\r\n        }\r\n    },\r\n    parseResponse: function() {\r\n        var response = this.xhr.response;\r\n        var json = this.parseJson(response);\r\n        return (json) ? json : response;\r\n    },\r\n    parseJson: function(str)\r\n    {\r\n        try {\r\n            var o = JSON.parse(str);\r\n            if (o && typeof o === 'object')\r\n            {\r\n                return o;\r\n            }\r\n\r\n        } catch (e) {}\r\n\r\n        return false;\r\n    },\r\n    toParams: function (obj)\r\n    {\r\n        return Object.keys(obj).map(\r\n            function(k){ return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]); }\r\n        ).join('&');\r\n    }\r\n};\r\nvar DomCache = [0];\r\nvar DomExpando = 'data' + new Date().getTime();\r\nvar DomHClass = 'is-hidden';\r\nvar DomHMClass = 'is-hidden-mobile';\r\n\r\nvar Dom = function(selector, context)\r\n{\r\n    return this.parse(selector, context);\r\n};\r\n\r\nDom.ready = function(fn)\r\n{\r\n    if (document.readyState !== 'loading') fn();\r\n    else document.addEventListener('DOMContentLoaded', fn);\r\n};\r\n\r\nDom.prototype = {\r\n    get sdom()\r\n    {\r\n        return true;\r\n    },\r\n    get length()\r\n    {\r\n        return this.nodes.length;\r\n    },\r\n    parse: function(selector, context)\r\n    {\r\n        var nodes;\r\n        var reHtmlTest = /^\\s*<(\\w+|!)[^>]*>/;\r\n\r\n        if (!selector)\r\n        {\r\n            nodes = [];\r\n        }\r\n        else if (selector.sdom)\r\n        {\r\n            this.nodes = selector.nodes;\r\n            return selector;\r\n        }\r\n        else if (typeof selector !== 'string')\r\n        {\r\n            if (selector.nodeType && selector.nodeType === 11)\r\n            {\r\n                nodes = selector.childNodes;\r\n            }\r\n            else\r\n            {\r\n                nodes = (selector.nodeType || selector === window) ? [selector] : selector;\r\n            }\r\n        }\r\n        else if (reHtmlTest.test(selector))\r\n        {\r\n            nodes = this.create(selector);\r\n        }\r\n        else\r\n        {\r\n            nodes = this._query(selector, context);\r\n        }\r\n\r\n        this.nodes = this._slice(nodes);\r\n    },\r\n    create: function(html)\r\n    {\r\n        if (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/.test(html))\r\n        {\r\n            return [document.createElement(RegExp.$1)];\r\n        }\r\n\r\n        var elements = [];\r\n        var container = document.createElement('div');\r\n        var children = container.childNodes;\r\n\r\n        container.innerHTML = html;\r\n\r\n        for (var i = 0, l = children.length; i < l; i++)\r\n        {\r\n            elements.push(children[i]);\r\n        }\r\n\r\n        return elements;\r\n    },\r\n\r\n    // add\r\n    add: function(nodes)\r\n    {\r\n        this.nodes = this.nodes.concat(this._toArray(nodes));\r\n    },\r\n\r\n    // get\r\n    get: function(index)\r\n    {\r\n        return this.nodes[(index || 0)] || false;\r\n    },\r\n    getAll: function()\r\n    {\r\n        return this.nodes;\r\n    },\r\n    eq: function(index)\r\n    {\r\n        return new Dom(this.nodes[index]);\r\n    },\r\n    first: function()\r\n    {\r\n        return new Dom(this.nodes[0]);\r\n    },\r\n    last: function()\r\n    {\r\n        return new Dom(this.nodes[this.nodes.length - 1]);\r\n    },\r\n    contents: function()\r\n    {\r\n        return this.get().childNodes;\r\n    },\r\n\r\n    // loop\r\n    each: function(callback)\r\n    {\r\n        var len = this.nodes.length;\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            callback.call(this, (this.nodes[i].sdom) ? this.nodes[i].get() : this.nodes[i], i);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    // traversing\r\n    is: function(selector)\r\n    {\r\n        return (this.filter(selector).length > 0);\r\n    },\r\n    filter: function (selector)\r\n    {\r\n        var callback;\r\n        if (selector === undefined)\r\n        {\r\n            return this;\r\n        }\r\n        else if (typeof selector === 'function')\r\n        {\r\n            callback = selector;\r\n        }\r\n        else\r\n        {\r\n            callback = function(node)\r\n            {\r\n                if (selector instanceof Node)\r\n                {\r\n                    return (selector === node);\r\n                }\r\n                else if (selector && selector.sdom)\r\n                {\r\n                    return ((selector.nodes).indexOf(node) !== -1);\r\n                }\r\n                else\r\n                {\r\n                    node.matches = node.matches || node.msMatchesSelector || node.webkitMatchesSelector;\r\n                    return (node.nodeType === 1) ? node.matches(selector || '*') : false;\r\n                }\r\n            };\r\n        }\r\n\r\n        return new Dom(this.nodes.filter(callback));\r\n    },\r\n    not: function(filter)\r\n    {\r\n        return this.filter(function(node)\r\n        {\r\n            return !new Dom(node).is(filter || true);\r\n        });\r\n    },\r\n    find: function(selector)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            var ns = this._query(selector || '*', node);\r\n            for (var i = 0; i < ns.length; i++)\r\n            {\r\n                nodes.push(ns[i]);\r\n            }\r\n        });\r\n\r\n        return new Dom(nodes);\r\n    },\r\n    children: function(selector)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            if (node.children)\r\n            {\r\n                var ns = node.children;\r\n                for (var i = 0; i < ns.length; i++)\r\n                {\r\n                    nodes.push(ns[i]);\r\n                }\r\n            }\r\n        });\r\n\r\n        return new Dom(nodes).filter(selector);\r\n    },\r\n    parent: function(selector)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            if (node.parentNode) nodes.push(node.parentNode);\r\n        });\r\n\r\n        return new Dom(nodes).filter(selector);\r\n    },\r\n    parents: function(selector, context)\r\n    {\r\n        context = this._getContext(context);\r\n\r\n        var nodes = [];\r\n        this.each(function(node) {\r\n            var parent = node.parentNode;\r\n            while (parent && parent !== context) {\r\n                if (selector) {\r\n                    if (new Dom(parent).is(selector)) { nodes.push(parent); }\r\n                }\r\n                else {\r\n                    nodes.push(parent);\r\n                }\r\n                parent = parent.parentNode;\r\n            }\r\n        });\r\n\r\n        return new Dom(nodes);\r\n\r\n    },\r\n    closest: function(selector, context)\r\n    {\r\n        context = this._getContext(context);\r\n        selector = (selector.sdom) ? selector.get() : selector;\r\n\r\n        var nodes = [];\r\n        var isNode = (selector && selector.nodeType);\r\n        this.each(function(node)\r\n        {\r\n            do {\r\n                if ((isNode && node === selector) || new Dom(node).is(selector)) return nodes.push(node);\r\n            } while ((node = node.parentNode) && node !== context);\r\n        });\r\n\r\n        return new Dom(nodes);\r\n    },\r\n    next: function(selector)\r\n    {\r\n         return this._getSibling(selector, 'nextSibling');\r\n    },\r\n    nextElement: function(selector)\r\n    {\r\n        return this._getSibling(selector, 'nextElementSibling');\r\n    },\r\n    prev: function(selector)\r\n    {\r\n        return this._getSibling(selector, 'previousSibling');\r\n    },\r\n    prevElement: function(selector)\r\n    {\r\n        return this._getSibling(selector, 'previousElementSibling');\r\n    },\r\n\r\n    // css\r\n    css: function(name, value)\r\n    {\r\n        if (value === undefined && (typeof name !== 'object'))\r\n        {\r\n            var node = this.get();\r\n            if (name === 'width' || name === 'height')\r\n            {\r\n                return (node.style) ? this._getHeightOrWidth(name, node, false) + 'px' : undefined;\r\n            }\r\n            else\r\n            {\r\n                return (node.style) ? getComputedStyle(node, null)[name] : undefined;\r\n            }\r\n        }\r\n\r\n        // set\r\n        return this.each(function(node)\r\n        {\r\n            var obj = {};\r\n            if (typeof name === 'object') obj = name;\r\n            else obj[name] = value;\r\n\r\n            for (var key in obj)\r\n            {\r\n                if (node.style) node.style[key] = obj[key];\r\n            }\r\n        });\r\n    },\r\n\r\n    // attr\r\n    attr: function(name, value, data)\r\n    {\r\n        data = (data) ? 'data-' : '';\r\n\r\n        if (value === undefined && (typeof name !== 'object'))\r\n        {\r\n            var node = this.get();\r\n            if (node && node.nodeType !== 3)\r\n            {\r\n                return (name === 'checked') ? node.checked : this._getBooleanFromStr(node.getAttribute(data + name));\r\n            }\r\n            else return;\r\n        }\r\n\r\n        // set\r\n        return this.each(function(node)\r\n        {\r\n            var obj = {};\r\n            if (typeof name === 'object') obj = name;\r\n            else obj[name] = value;\r\n\r\n            for (var key in obj)\r\n            {\r\n                if (node.nodeType !== 3)\r\n                {\r\n                    if (key === 'checked') node.checked = obj[key];\r\n                    else node.setAttribute(data + key, obj[key]);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    data: function(name, value)\r\n    {\r\n        if (name === undefined)\r\n        {\r\n            var reDataAttr = /^data-(.+)$/;\r\n            var attrs = this.get().attributes;\r\n\r\n            var data = {};\r\n            var replacer = function (g) { return g[1].toUpperCase(); };\r\n\r\n            for (var key in attrs)\r\n            {\r\n                if (attrs[key] && reDataAttr.test(attrs[key].nodeName))\r\n                {\r\n                    var dataName = attrs[key].nodeName.match(reDataAttr)[1];\r\n                    var val = attrs[key].value;\r\n                    dataName = dataName.replace(/-([a-z])/g, replacer);\r\n\r\n                    if (this._isObjectString(val)) val = this._toObject(val);\r\n                    else val = (this._isNumber(val)) ? parseFloat(val) : this._getBooleanFromStr(val);\r\n\r\n                    data[dataName] = val;\r\n                }\r\n            }\r\n\r\n            return data;\r\n        }\r\n\r\n        return this.attr(name, value, true);\r\n    },\r\n    val: function(value)\r\n    {\r\n        if (value === undefined)\r\n        {\r\n            var el = this.get();\r\n            if (el.type && el.type === 'checkbox') return el.checked;\r\n            else return el.value;\r\n        }\r\n\r\n        return this.each(function(node)\r\n        {\r\n            node.value = value;\r\n        });\r\n    },\r\n    removeAttr: function(value)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var rmAttr = function(name) { if (node.nodeType !== 3) node.removeAttribute(name); };\r\n            value.split(' ').forEach(rmAttr);\r\n        });\r\n    },\r\n    removeData: function(value)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var rmData = function(name) { if (node.nodeType !== 3) node.removeAttribute('data-' + name); };\r\n            value.split(' ').forEach(rmData);\r\n        });\r\n    },\r\n\r\n    // dataset/dataget\r\n    dataset: function(key, value)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            DomCache[this.dataindex(node)][key] = value;\r\n        });\r\n    },\r\n    dataget: function(key)\r\n    {\r\n        return DomCache[this.dataindex(this.get())][key];\r\n    },\r\n    dataindex: function(el)\r\n    {\r\n        var cacheIndex = el[DomExpando];\r\n        var nextCacheIndex = DomCache.length;\r\n\r\n        if (!cacheIndex)\r\n        {\r\n            cacheIndex = el[DomExpando] = nextCacheIndex;\r\n            DomCache[cacheIndex] = {};\r\n        }\r\n\r\n        return cacheIndex;\r\n    },\r\n\r\n\r\n    // class\r\n    addClass: function(value)\r\n    {\r\n        return this._eachClass(value, 'add');\r\n    },\r\n    removeClass: function(value)\r\n    {\r\n        return this._eachClass(value, 'remove');\r\n    },\r\n    toggleClass: function(value)\r\n    {\r\n        return this._eachClass(value, 'toggle');\r\n    },\r\n    hasClass: function(value)\r\n    {\r\n        return this.nodes.some(function(node)\r\n        {\r\n            return (node.classList) ? node.classList.contains(value) : false;\r\n        });\r\n    },\r\n\r\n    // html & text\r\n    empty: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            node.innerHTML = '';\r\n        });\r\n    },\r\n    html: function(html)\r\n    {\r\n        return (html === undefined) ? (this.get().innerHTML || '') : this.empty().append(html);\r\n    },\r\n    text: function(text)\r\n    {\r\n        return (text === undefined) ? (this.get().textContent || '') : this.each(function(node) { node.textContent = text; });\r\n    },\r\n\r\n    // manipulation\r\n    after: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string')\r\n            {\r\n                node.insertAdjacentHTML('afterend', frag);\r\n            }\r\n            else\r\n            {\r\n                if (node.parentNode !== null) {\r\n                    for (var i = frag instanceof Node ? [frag] : this._toArray(frag).reverse(), s = 0; s < i.length; s++) {\r\n                        node.parentNode.insertBefore(i[s], node.nextSibling);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return node;\r\n\r\n        });\r\n    },\r\n    before: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string')\r\n            {\r\n                node.insertAdjacentHTML('beforebegin', frag);\r\n            }\r\n            else\r\n            {\r\n                var elms = (frag instanceof Node) ? [frag] : this._toArray(frag);\r\n                for (var i = 0; i < elms.length; i++)\r\n                {\r\n                    node.parentNode.insertBefore(elms[i], node);\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n    },\r\n    append: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string' || typeof frag === 'number')\r\n            {\r\n                node.insertAdjacentHTML('beforeend', frag);\r\n            }\r\n            else\r\n            {\r\n                var elms = (frag instanceof Node) ? [frag] : this._toArray(frag);\r\n                for (var i = 0; i < elms.length; i++)\r\n                {\r\n                    node.appendChild(elms[i]);\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n    },\r\n    prepend: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            if (typeof frag === 'string' || typeof frag === 'number')\r\n            {\r\n                node.insertAdjacentHTML('afterbegin', frag);\r\n            }\r\n            else\r\n            {\r\n                var elms = (frag instanceof Node) ? [frag] : this._toArray(frag).reverse();\r\n                for (var i = 0; i < elms.length; i++)\r\n                {\r\n                    node.insertBefore(elms[i], node.firstChild);\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n    },\r\n    wrap: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            var wrapper = (typeof frag === 'string' || typeof frag === 'number') ? this.create(frag)[0] : (frag instanceof Node) ? frag : this._toArray(frag)[0];\r\n\r\n            if (node.parentNode)\r\n            {\r\n                node.parentNode.insertBefore(wrapper, node);\r\n            }\r\n\r\n            wrapper.appendChild(node);\r\n\r\n            return new Dom(wrapper);\r\n\r\n        });\r\n    },\r\n    unwrap: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var $node = new Dom(node);\r\n\r\n            return $node.replaceWith($node.contents());\r\n        });\r\n    },\r\n    replaceWith: function(html)\r\n    {\r\n        return this._inject(html, function(frag, node)\r\n        {\r\n            var docFrag = document.createDocumentFragment();\r\n            var elms = (typeof frag === 'string' || typeof frag === 'number') ? this.create(frag) : (frag instanceof Node) ? [frag] : this._toArray(frag);\r\n\r\n            for (var i = 0; i < elms.length; i++)\r\n            {\r\n                docFrag.appendChild(elms[i]);\r\n            }\r\n\r\n            var result = docFrag.childNodes[0];\r\n            if (node.parentNode) {\r\n                node.parentNode.replaceChild(docFrag, node);\r\n            }\r\n\r\n            return result;\r\n\r\n        });\r\n    },\r\n    remove: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (node.parentNode) node.parentNode.removeChild(node);\r\n        });\r\n    },\r\n    clone: function(events)\r\n    {\r\n        var nodes = [];\r\n        this.each(function(node)\r\n        {\r\n            var copy = this._clone(node);\r\n            if (events) copy = this._cloneEvents(node, copy);\r\n            nodes.push(copy);\r\n        });\r\n\r\n        return new Dom(nodes);\r\n    },\r\n\r\n    // show/hide\r\n    show: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (!node.style || !this._hasDisplayNone(node)) return;\r\n\r\n            var target = node.getAttribute('domTargetShow');\r\n            var isHidden = (node.classList) ? node.classList.contains(DomHClass) : false;\r\n            var isHiddenMobile = (node.classList) ? node.classList.contains(DomHMClass) : false;\r\n            var type;\r\n\r\n            if (isHidden)\r\n            {\r\n                type = DomHClass;\r\n                node.classList.remove(DomHClass);\r\n            }\r\n            else if (isHiddenMobile)\r\n            {\r\n                type = DomHMClass;\r\n                node.classList.remove(DomHMClass);\r\n            }\r\n            else\r\n            {\r\n                node.style.display = (target) ? target : 'block';\r\n            }\r\n\r\n            if (type) node.setAttribute('domTargetHide', type);\r\n            node.removeAttribute('domTargetShow');\r\n\r\n        }.bind(this));\r\n    },\r\n    hide: function()\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (!node.style || this._hasDisplayNone(node)) return;\r\n\r\n            var display = node.style.display;\r\n            var target = node.getAttribute('domTargetHide');\r\n\r\n            if (target === DomHClass)\r\n            {\r\n                node.classList.add(DomHClass);\r\n            }\r\n            else if (target === DomHMClass)\r\n            {\r\n                node.classList.add(DomHMClass);\r\n            }\r\n            else\r\n            {\r\n                if (display !== 'block') node.setAttribute('domTargetShow', display);\r\n                node.style.display = 'none';\r\n            }\r\n\r\n            node.removeAttribute('domTargetHide');\r\n\r\n        });\r\n    },\r\n\r\n    // dimensions\r\n    scrollTop: function(value)\r\n    {\r\n        var node = this.get();\r\n        var isWindow = (node === window);\r\n        var isDocument = (node.nodeType === 9);\r\n        var el = (isDocument) ? (document.scrollingElement || document.body.parentNode || document.body || document.documentElement) : node;\r\n\r\n        if (value !== undefined)\r\n        {\r\n            if (isWindow) window.scrollTo(0, value);\r\n            else el.scrollTop = value;\r\n            return;\r\n        }\r\n\r\n        if (isDocument)\r\n        {\r\n            return (typeof window.pageYOffset != 'undefined') ? window.pageYOffset : ((document.documentElement.scrollTop) ? document.documentElement.scrollTop : ((document.body.scrollTop) ? document.body.scrollTop : 0));\r\n        }\r\n        else\r\n        {\r\n            return (isWindow) ? window.pageYOffset : el.scrollTop;\r\n        }\r\n    },\r\n    offset: function()\r\n    {\r\n        return this._getDim('Offset');\r\n    },\r\n    position: function()\r\n    {\r\n        return this._getDim('Position');\r\n    },\r\n    width: function(value, adjust)\r\n    {\r\n        return this._getSize('width', 'Width', value, adjust);\r\n    },\r\n    height: function(value, adjust)\r\n    {\r\n        return this._getSize('height', 'Height', value, adjust);\r\n    },\r\n    outerWidth: function()\r\n    {\r\n        return this._getInnerOrOuter('width', 'outer');\r\n    },\r\n    outerHeight: function()\r\n    {\r\n        return this._getInnerOrOuter('height', 'outer');\r\n    },\r\n    innerWidth: function()\r\n    {\r\n        return this._getInnerOrOuter('width', 'inner');\r\n    },\r\n    innerHeight: function()\r\n    {\r\n        return this._getInnerOrOuter('height', 'inner');\r\n    },\r\n\r\n    // events\r\n    click: function()\r\n    {\r\n        return this._triggerEvent('click');\r\n    },\r\n    focus: function()\r\n    {\r\n        return this._triggerEvent('focus');\r\n    },\r\n    trigger: function(names)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var events = names.split(' ');\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                var ev;\r\n                var opts = { bubbles: true, cancelable: true };\r\n\r\n                try {\r\n                    ev = new window.CustomEvent(events[i], opts);\r\n                } catch(e) {\r\n                    ev = document.createEvent('CustomEvent');\r\n                    ev.initCustomEvent(events[i], true, true);\r\n                }\r\n\r\n                node.dispatchEvent(ev);\r\n            }\r\n        });\r\n    },\r\n    on: function(names, handler, one)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            var events = names.split(' ');\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                var event = this._getEventName(events[i]);\r\n                var namespace = this._getEventNamespace(events[i]);\r\n\r\n                handler = (one) ? this._getOneHandler(handler, names) : handler;\r\n                node.addEventListener(event, handler);\r\n\r\n                node._e = node._e || {};\r\n                node._e[namespace] = node._e[namespace] || {};\r\n                node._e[namespace][event] = node._e[namespace][event] || [];\r\n                node._e[namespace][event].push(handler);\r\n            }\r\n\r\n        });\r\n    },\r\n    one: function(events, handler)\r\n    {\r\n        return this.on(events, handler, true);\r\n    },\r\n    off: function(names, handler)\r\n    {\r\n        var testEvent = function(name, key, event) { return (name === event); };\r\n        var testNamespace = function(name, key, event, namespace) { return (key === namespace); };\r\n        var testEventNamespace = function(name, key, event, namespace) { return (name === event && key === namespace); };\r\n        var testPositive = function() { return true; };\r\n\r\n        if (names === undefined)\r\n        {\r\n            // ALL\r\n            return this.each(function(node)\r\n            {\r\n                this._offEvent(node, false, false, handler, testPositive);\r\n            });\r\n        }\r\n\r\n        return this.each(function(node)\r\n        {\r\n            var events = names.split(' ');\r\n\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                var event = this._getEventName(events[i]);\r\n                var namespace = this._getEventNamespace(events[i]);\r\n\r\n                // 1) event without namespace\r\n                if (namespace === '_events') this._offEvent(node, event, namespace, handler, testEvent);\r\n                // 2) only namespace\r\n                else if (!event && namespace !== '_events') this._offEvent(node, event, namespace, handler, testNamespace);\r\n                // 3) event + namespace\r\n                else this._offEvent(node, event, namespace, handler, testEventNamespace);\r\n            }\r\n        });\r\n    },\r\n\r\n    // form\r\n    serialize: function(asObject)\r\n    {\r\n        var obj = {};\r\n        var elms = this.get().elements;\r\n        for (var i = 0; i < elms.length; i++)\r\n        {\r\n            var el = elms[i];\r\n            if (/(checkbox|radio)/.test(el.type) && !el.checked) continue;\r\n            if (!el.name || el.disabled || el.type === 'file') continue;\r\n\r\n            if (el.type === 'select-multiple')\r\n            {\r\n                for (var z = 0; z < el.options.length; z++)\r\n                {\r\n                    var opt = el.options[z];\r\n                    if (opt.selected) obj[el.name] = opt.value;\r\n                }\r\n            }\r\n\r\n            obj[el.name] = (this._isNumber(el.value)) ? parseFloat(el.value) : this._getBooleanFromStr(el.value);\r\n        }\r\n\r\n        return (asObject) ? obj : this._toParams(obj);\r\n    },\r\n    ajax: function(success, error)\r\n    {\r\n        if (typeof AjaxRequest !== 'undefined')\r\n        {\r\n            var method = this.attr('method') || 'post';\r\n            var options = {\r\n                url: this.attr('action'),\r\n                data: this.serialize(),\r\n                success: success,\r\n                error: error\r\n            };\r\n\r\n            return new AjaxRequest(method, options);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _queryContext: function(selector, context)\r\n    {\r\n        context = this._getContext(context);\r\n\r\n        return (context.nodeType !== 3 && typeof context.querySelectorAll === 'function') ? context.querySelectorAll(selector) : [];\r\n    },\r\n    _query: function(selector, context)\r\n    {\r\n        if (context)\r\n        {\r\n            return this._queryContext(selector, context);\r\n        }\r\n        else if (/^[.#]?[\\w-]*$/.test(selector))\r\n        {\r\n            if (selector[0] === '#')\r\n            {\r\n                var element = document.getElementById(selector.slice(1));\r\n                return element ? [element] : [];\r\n            }\r\n\r\n            if (selector[0] === '.')\r\n            {\r\n                return document.getElementsByClassName(selector.slice(1));\r\n            }\r\n\r\n            return document.getElementsByTagName(selector);\r\n        }\r\n\r\n        return document.querySelectorAll(selector);\r\n    },\r\n    _getContext: function(context)\r\n    {\r\n        context = (typeof context === 'string') ? document.querySelector(context) : context;\r\n\r\n        return (context && context.sdom) ? context.get() : (context || document);\r\n    },\r\n    _inject: function(html, fn)\r\n    {\r\n        var len = this.nodes.length;\r\n        var nodes = [];\r\n        while (len--)\r\n        {\r\n            var res = (typeof html === 'function') ? html.call(this, this.nodes[len]) : html;\r\n            var el = (len === 0) ? res : this._clone(res);\r\n            var node = fn.call(this, el, this.nodes[len]);\r\n\r\n            if (node)\r\n            {\r\n                if (node.sdom) nodes.push(node.get());\r\n                else nodes.push(node);\r\n            }\r\n        }\r\n\r\n        return new Dom(nodes);\r\n    },\r\n    _cloneEvents: function(node, copy)\r\n    {\r\n        var events = node._e;\r\n        if (events)\r\n        {\r\n            copy._e = events;\r\n            for (var name in events._events)\r\n            {\r\n                for (var i = 0; i < events._events[name].length; i++)\r\n                {\r\n                    copy.addEventListener(name, events._events[name][i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return copy;\r\n    },\r\n    _clone: function(node)\r\n    {\r\n        if (typeof node === 'undefined') return;\r\n        if (typeof node === 'string') return node;\r\n        else if (node instanceof Node || node.nodeType) return node.cloneNode(true);\r\n        else if ('length' in node)\r\n        {\r\n            return [].map.call(this._toArray(node), function(el) { return el.cloneNode(true); });\r\n        }\r\n    },\r\n    _slice: function(obj)\r\n    {\r\n        return (!obj || obj.length === 0) ? [] : (obj.length) ? [].slice.call(obj.nodes || obj) : [obj];\r\n    },\r\n    _eachClass: function(value, type)\r\n    {\r\n        return this.each(function(node)\r\n        {\r\n            if (value)\r\n            {\r\n                var setClass = function(name) { if (node.classList) node.classList[type](name); };\r\n                value.split(' ').forEach(setClass);\r\n            }\r\n        });\r\n    },\r\n    _triggerEvent: function(name)\r\n    {\r\n        var node = this.get();\r\n        if (node && node.nodeType !== 3) node[name]();\r\n        return this;\r\n    },\r\n    _getOneHandler: function(handler, events)\r\n    {\r\n        var self = this;\r\n        return function()\r\n        {\r\n            handler.apply(this, arguments);\r\n            self.off(events);\r\n        };\r\n    },\r\n    _getEventNamespace: function(event)\r\n    {\r\n        var arr = event.split('.');\r\n        var namespace = (arr[1]) ? arr[1] : '_events';\r\n        return (arr[2]) ? namespace + arr[2] : namespace;\r\n    },\r\n    _getEventName: function(event)\r\n    {\r\n        return event.split('.')[0];\r\n    },\r\n    _offEvent: function(node, event, namespace, handler, condition)\r\n    {\r\n        for (var key in node._e)\r\n        {\r\n            for (var name in node._e[key])\r\n            {\r\n                if (condition(name, key, event, namespace))\r\n                {\r\n                    var handlers = node._e[key][name];\r\n                    for (var i = 0; i < handlers.length; i++)\r\n                    {\r\n                        if (typeof handler !== 'undefined' && handlers[i].toString() !== handler.toString())\r\n                        {\r\n                            continue;\r\n                        }\r\n\r\n                        node.removeEventListener(name, handlers[i]);\r\n                        node._e[key][name].splice(i, 1);\r\n\r\n                        if (node._e[key][name].length === 0) delete node._e[key][name];\r\n                        if (Object.keys(node._e[key]).length === 0) delete node._e[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getInnerOrOuter: function(method, type)\r\n    {\r\n        return this[method](undefined, type);\r\n    },\r\n    _getDocSize: function(node, type)\r\n    {\r\n        var body = node.body, html = node.documentElement;\r\n        return Math.max(body['scroll' + type], body['offset' + type], html['client' + type], html['scroll' + type], html['offset' + type]);\r\n    },\r\n    _getSize: function(type, captype, value, adjust)\r\n    {\r\n        if (value === undefined)\r\n        {\r\n            var el = this.get();\r\n            if (el.nodeType === 3)      value = 0;\r\n            else if (el.nodeType === 9) value = this._getDocSize(el, captype);\r\n            else if (el === window)     value = window['inner' + captype];\r\n            else                        value = this._getHeightOrWidth(type, el, adjust || 'normal');\r\n\r\n            return Math.round(value);\r\n        }\r\n\r\n        return this.each(function(node)\r\n        {\r\n            value = parseFloat(value);\r\n            value = value + this._adjustResultHeightOrWidth(type, node, adjust || 'normal');\r\n\r\n            new Dom(node).css(type, value + 'px');\r\n\r\n        }.bind(this));\r\n    },\r\n    _getHeightOrWidth: function(type, el, adjust)\r\n    {\r\n        if (!el) return 0;\r\n\r\n        var name = type.charAt(0).toUpperCase() + type.slice(1);\r\n        var result = 0;\r\n        var style = getComputedStyle(el, null);\r\n        var $el = new Dom(el);\r\n        var $targets = $el.parents().filter(function(node)\r\n        {\r\n            return (node.nodeType === 1 && getComputedStyle(node, null).display === 'none') ? node : false;\r\n        });\r\n\r\n        if (style.display === 'none') $targets.add(el);\r\n        if ($targets.length !== 0)\r\n        {\r\n            var fixStyle = 'visibility: hidden !important; display: block !important;';\r\n            var tmp = [];\r\n\r\n            $targets.each(function(node)\r\n            {\r\n                var $node = new Dom(node);\r\n                var thisStyle = $node.attr('style');\r\n                if (thisStyle !== null) tmp.push(thisStyle);\r\n                $node.attr('style', (thisStyle !== null) ? thisStyle + ';' + fixStyle : fixStyle);\r\n            });\r\n\r\n            result = $el.get()['offset' + name] - this._adjustResultHeightOrWidth(type, el, adjust);\r\n\r\n            $targets.each(function(node, i)\r\n            {\r\n                var $node = new Dom(node);\r\n                if (tmp[i] === undefined) $node.removeAttr('style');\r\n                else $node.attr('style', tmp[i]);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            result = el['offset' + name] - this._adjustResultHeightOrWidth(type, el, adjust);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _adjustResultHeightOrWidth: function(type, el, adjust)\r\n    {\r\n        if (!el || adjust === false) return 0;\r\n\r\n        var fix = 0;\r\n        var style = getComputedStyle(el, null);\r\n        var isBorderBox = (style.boxSizing === \"border-box\");\r\n\r\n        if (type === 'height')\r\n        {\r\n            if (adjust === 'inner' || (adjust === 'normal' && isBorderBox))\r\n            {\r\n                fix += (parseFloat(style.borderTopWidth) || 0) + (parseFloat(style.borderBottomWidth) || 0);\r\n            }\r\n\r\n            if (adjust === 'outer') fix -= (parseFloat(style.marginTop) || 0) + (parseFloat(style.marginBottom) || 0);\r\n        }\r\n        else\r\n        {\r\n            if (adjust === 'inner' || (adjust === 'normal' && isBorderBox))\r\n            {\r\n                fix += (parseFloat(style.borderLeftWidth) || 0) + (parseFloat(style.borderRightWidth) || 0);\r\n            }\r\n\r\n            if (adjust === 'outer') fix -= (parseFloat(style.marginLeft) || 0) + (parseFloat(style.marginRight) || 0);\r\n        }\r\n\r\n        return fix;\r\n    },\r\n    _getDim: function(type)\r\n    {\r\n        var node = this.get();\r\n        return (node.nodeType === 3) ? { top: 0, left: 0 } : this['_get' + type](node);\r\n    },\r\n    _getPosition: function(node)\r\n    {\r\n        return { top: node.offsetTop, left: node.offsetLeft };\r\n    },\r\n    _getOffset: function(node)\r\n    {\r\n        if (typeof(node) === 'undefined' || node === false) {\r\n            return;\r\n        }\r\n        var rect = node.getBoundingClientRect();\r\n        var doc = node.ownerDocument;\r\n\t\tvar docElem = doc.documentElement;\r\n\t\tvar win = doc.defaultView;\r\n\r\n\t\treturn {\r\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\r\n\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\r\n\t\t};\r\n    },\r\n    _getSibling: function(selector, method)\r\n    {\r\n        selector = (selector && selector.sdom) ? selector.get() : selector;\r\n\r\n        var isNode = (selector && selector.nodeType);\r\n        var sibling;\r\n\r\n        this.each(function(node)\r\n        {\r\n            while (node = node[method])\r\n            {\r\n                if ((isNode && node === selector) || new Dom(node).is(selector))\r\n                {\r\n                    sibling = node;\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n\r\n        return new Dom(sibling);\r\n    },\r\n    _toArray: function(obj)\r\n    {\r\n        if (obj instanceof NodeList)\r\n        {\r\n            var arr = [];\r\n            for (var i = 0; i < obj.length; i++)\r\n            {\r\n                arr[i] = obj[i];\r\n            }\r\n\r\n            return arr;\r\n        }\r\n        else if (obj === undefined) return [];\r\n        else\r\n        {\r\n            return (obj.sdom) ? obj.nodes : obj;\r\n        }\r\n    },\r\n    _toParams: function(obj)\r\n    {\r\n        var params = '';\r\n        for (var key in obj)\r\n        {\r\n            params += '&' + this._encodeUri(key) + '=' + this._encodeUri(obj[key]);\r\n        }\r\n\r\n        return params.replace(/^&/, '');\r\n    },\r\n    _toObject: function(str)\r\n    {\r\n        return (new Function(\"return \" + str))();\r\n    },\r\n    _encodeUri: function(str)\r\n    {\r\n        return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\r\n    },\r\n    _isNumber: function(str)\r\n    {\r\n        return !isNaN(str) && !isNaN(parseFloat(str));\r\n    },\r\n    _isObjectString: function(str)\r\n    {\r\n        return (str.search(/^{/) !== -1);\r\n    },\r\n    _getBooleanFromStr: function(str)\r\n    {\r\n        if (str === 'true') return true;\r\n        else if (str === 'false') return false;\r\n\r\n        return str;\r\n    },\r\n    _hasDisplayNone: function(el)\r\n    {\r\n        return (el.style.display === 'none') || ((el.currentStyle) ? el.currentStyle.display : getComputedStyle(el, null).display) === 'none';\r\n    }\r\n};\r\n// Unique ID\r\nvar uuid = 0;\r\n\r\n// Wrapper\r\nvar $R = function(selector, options)\r\n{\r\n    return RedactorApp(selector, options, [].slice.call(arguments, 2));\r\n};\r\n\r\n// Globals\r\n$R.app = [];\r\n$R.version = '3.5.0';\r\n$R.options = {};\r\n$R.modules = {};\r\n$R.services = {};\r\n$R.classes = {};\r\n$R.plugins = {};\r\n$R.mixins = {};\r\n$R.modals = {};\r\n$R.lang = {};\r\n$R.dom = function(selector, context) { return new Dom(selector, context); };\r\n$R.ajax = Ajax;\r\n$R.Dom = Dom;\r\n$R.keycodes = {\r\n\tBACKSPACE: 8,\r\n\tDELETE: 46,\r\n\tUP: 38,\r\n\tDOWN: 40,\r\n\tENTER: 13,\r\n\tSPACE: 32,\r\n\tESC: 27,\r\n\tTAB: 9,\r\n\tCTRL: 17,\r\n\tMETA: 91,\r\n\tSHIFT: 16,\r\n\tALT: 18,\r\n\tRIGHT: 39,\r\n\tLEFT: 37\r\n};\r\n$R.env = {\r\n    'plugin': 'plugins',\r\n    'module': 'modules',\r\n    'service': 'services',\r\n    'class': 'classes',\r\n    'mixin': 'mixins'\r\n};\r\n\r\n// jQuery Wrapper\r\n/*eslint-env jquery*/\r\nif (typeof jQuery !== 'undefined')\r\n{\r\n    (function($) { $.fn.redactor = function(options) { return RedactorApp(this.toArray(), options, [].slice.call(arguments, 1)); }; })(jQuery);\r\n}\r\n\r\n// Class\r\nvar RedactorApp = function(selector, options, args)\r\n{\r\n    var namespace = 'redactor';\r\n    var nodes = (Array.isArray(selector)) ? selector : (selector && selector.nodeType) ? [selector] : document.querySelectorAll(selector);\r\n    var isApi = (typeof options === 'string' || typeof options === 'function');\r\n    var value = [];\r\n    var instance;\r\n\r\n    for (var i = 0; i < nodes.length; i++)\r\n    {\r\n        var el = nodes[i];\r\n        var $el = $R.dom(el);\r\n\r\n        instance = $el.dataget(namespace);\r\n        if (!instance && !isApi)\r\n        {\r\n            // Initialization\r\n            instance = new App(el, options, uuid);\r\n            $el.dataset(namespace, instance);\r\n            $R.app[uuid] = instance;\r\n            uuid++;\r\n        }\r\n\r\n        // API\r\n        if (instance && isApi)\r\n        {\r\n            var isDestroy = (options === 'destroy');\r\n            options = (isDestroy) ? 'stop' : options;\r\n\r\n            var methodValue;\r\n            if (typeof options === 'function')\r\n            {\r\n                methodValue = options.apply(instance, args);\r\n            }\r\n            else\r\n            {\r\n                args.unshift(options);\r\n                methodValue = instance.api.apply(instance, args);\r\n            }\r\n            if (methodValue !== undefined) value.push(methodValue);\r\n\r\n            if (isDestroy) $el.dataset(namespace, false);\r\n        }\r\n    }\r\n\r\n    return (value.length === 0 || value.length === 1) ? ((value.length === 0) ? instance : value[0]) : value;\r\n};\r\n\r\n// add\r\n$R.add = function(type, name, obj)\r\n{\r\n    if (typeof $R.env[type] === 'undefined') return;\r\n\r\n    // translations\r\n    if (obj.translations)\r\n    {\r\n        $R.lang = $R.extend(true, {}, $R.lang, obj.translations);\r\n    }\r\n\r\n    // modals\r\n    if (obj.modals)\r\n    {\r\n        $R.modals = $R.extend(true, {}, $R.modals, obj.modals);\r\n    }\r\n\r\n    // mixin\r\n    if (type === 'mixin')\r\n    {\r\n        $R[$R.env[type]][name] = obj;\r\n    }\r\n    else\r\n    {\r\n        // prototype\r\n        var F = function() {};\r\n        F.prototype = obj;\r\n\r\n        // mixins\r\n        if (obj.mixins)\r\n        {\r\n            for (var i = 0; i < obj.mixins.length; i++)\r\n            {\r\n                $R.inherit(F, $R.mixins[obj.mixins[i]]);\r\n            }\r\n        }\r\n\r\n        $R[$R.env[type]][name] = F;\r\n    }\r\n};\r\n\r\n// add lang\r\n$R.addLang = function(lang, obj)\r\n{\r\n    if (typeof $R.lang[lang] === 'undefined')\r\n    {\r\n        $R.lang[lang] = {};\r\n    }\r\n\r\n    $R.lang[lang] = $R.extend($R.lang[lang], obj);\r\n};\r\n\r\n// create\r\n$R.create = function(name)\r\n{\r\n    var arr = name.split('.');\r\n    var args = [].slice.call(arguments, 1);\r\n\r\n    var type = 'classes';\r\n    if (typeof $R.env[arr[0]] !== 'undefined')\r\n    {\r\n        type = $R.env[arr[0]];\r\n        name = arr.slice(1).join('.');\r\n    }\r\n\r\n    // construct\r\n    var instance = new $R[type][name]();\r\n\r\n    // init\r\n    if (instance.init)\r\n    {\r\n        var res = instance.init.apply(instance, args);\r\n\r\n        return (res) ? res : instance;\r\n    }\r\n\r\n    return instance;\r\n};\r\n\r\n// inherit\r\n$R.inherit = function(current, parent)\r\n{\r\n    var F = function () {};\r\n    F.prototype = parent;\r\n    var f = new F();\r\n\r\n    for (var prop in current.prototype)\r\n    {\r\n        if (current.prototype.__lookupGetter__(prop)) f.__defineGetter__(prop, current.prototype.__lookupGetter__(prop));\r\n        else f[prop] = current.prototype[prop];\r\n    }\r\n\r\n    current.prototype = f;\r\n    current.prototype.super = parent;\r\n\r\n    return current;\r\n};\r\n\r\n// error\r\n$R.error = function(exception)\r\n{\r\n    throw exception;\r\n};\r\n\r\n// extend\r\n$R.extend = function()\r\n{\r\n    var extended = {};\r\n    var deep = false;\r\n    var i = 0;\r\n    var length = arguments.length;\r\n\r\n    if (Object.prototype.toString.call( arguments[0] ) === '[object Boolean]')\r\n    {\r\n        deep = arguments[0];\r\n        i++;\r\n    }\r\n\r\n    var merge = function(obj)\r\n    {\r\n        for (var prop in obj)\r\n        {\r\n            if (Object.prototype.hasOwnProperty.call(obj, prop))\r\n            {\r\n                if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') extended[prop] = $R.extend(true, extended[prop], obj[prop]);\r\n                else extended[prop] = obj[prop];\r\n            }\r\n        }\r\n    };\r\n\r\n    for (; i < length; i++ )\r\n    {\r\n        var obj = arguments[i];\r\n        merge(obj);\r\n    }\r\n\r\n    return extended;\r\n};\r\n$R.opts = {\r\n    animation: true,\r\n    lang: 'en',\r\n    direction: 'ltr',\r\n    spellcheck: true,\r\n    structure: false,\r\n    scrollTarget: false,\r\n    styles: true,\r\n    stylesClass: 'redactor-styles',\r\n    placeholder: false,\r\n\r\n    source: true,\r\n    showSource: false,\r\n\r\n    inline: false,\r\n\r\n    breakline: false,\r\n    markup: 'p',\r\n    enterKey: true,\r\n\r\n    clickToEdit: false,\r\n    clickToSave: false,\r\n    clickToCancel: false,\r\n\r\n    focus: false,\r\n    focusEnd: false,\r\n\r\n    minHeight: false, // string, '100px'\r\n    maxHeight: false, // string, '100px'\r\n    maxWidth: false, // string, '700px'\r\n\r\n    plugins: [], // array\r\n    callbacks: {},\r\n\r\n    // pre & tab\r\n    preClass: false, // string\r\n    preSpaces: 4, // or false\r\n    tabindex: false, // int\r\n    tabAsSpaces: false, // true or number of spaces\r\n    tabKey: true,\r\n\r\n    // autosave\r\n    autosave: false, // false or url\r\n    autosaveName: false,\r\n    autosaveData: false,\r\n    autosaveMethod: 'post',\r\n\r\n    // toolbar\r\n    toolbar: true,\r\n    toolbarFixed: true,\r\n    toolbarFixedTarget: document,\r\n    toolbarFixedTopOffset: 0, // pixels\r\n    toolbarExternal: false, // ID selector\r\n    toolbarContext: true,\r\n\r\n    // air\r\n    air: false,\r\n\r\n    // formatting\r\n    formatting: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n    formattingAdd: false,\r\n    formattingHide: false,\r\n\r\n    // buttons\r\n    buttons: ['html', 'format', 'bold', 'italic', 'deleted', 'lists', 'image', 'file', 'link'],\r\n    // + 'line', 'redo', 'undo', 'underline', 'ol', 'ul', 'indent', 'outdent'\r\n    buttonsTextLabeled: false,\r\n    buttonsAdd: [],\r\n    buttonsAddFirst: [],\r\n    buttonsAddAfter: false,\r\n    buttonsAddBefore: false,\r\n    buttonsHide: [],\r\n    buttonsHideOnMobile: [],\r\n\r\n    // image\r\n    imageUpload: false,\r\n    imageUploadParam: 'file',\r\n    imageData: false,\r\n    imageEditable: true,\r\n    imageCaption: true,\r\n    imageLink: true,\r\n    imagePosition: false,\r\n    imageResizable: false,\r\n    imageFloatMargin: '10px',\r\n    imageFigure: true,\r\n    imageObserve: true,\r\n    imageSrcData: false,\r\n\r\n    // file\r\n    fileUpload: false,\r\n    fileUploadParam: 'file',\r\n    fileData: false,\r\n    fileAttachment: false,\r\n\r\n    // upload opts\r\n    uploadData: false,\r\n    dragUpload: true,\r\n    multipleUpload: false,\r\n    clipboardUpload: true,\r\n    uploadBase64: false,\r\n\r\n    // link\r\n    linkTarget: false,\r\n    linkTitle: false,\r\n    linkNewTab: true,\r\n    linkNofollow: false,\r\n    linkSize: 30,\r\n    linkValidation: true,\r\n\r\n    // clean\r\n    cleanOnEnter: true,\r\n    cleanInlineOnEnter: false,\r\n    paragraphize: true,\r\n    removeScript: true,\r\n    removeNewLines: false,\r\n    removeComments: true,\r\n    replaceTags: {\r\n        'b': 'strong',\r\n        'i': 'em',\r\n        'strike': 'del'\r\n    },\r\n\r\n    // paste\r\n    pastePlainText: false,\r\n    pasteLinkTarget: false,\r\n    pasteImages: true,\r\n    pasteLinks: true,\r\n    pasteClean: true,\r\n    pasteKeepStyle: [],\r\n    pasteKeepClass: [],\r\n    pasteKeepAttrs: ['td', 'th'],\r\n    pasteBlockTags: ['pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'table', 'tbody', 'thead', 'tfoot', 'th', 'tr', 'td', 'ul', 'ol', 'li', 'blockquote', 'p', 'figure', 'figcaption'],\r\n    pasteInlineTags: ['a', 'img', 'br', 'strong', 'ins', 'code', 'del', 'span', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'b', 'u', 'em', 'i', 'abbr'],\r\n\r\n    // active buttons\r\n    activeButtons: {\r\n        b: 'bold',\r\n        strong: 'bold',\r\n        i: 'italic',\r\n        em: 'italic',\r\n        del: 'deleted',\r\n        strike: 'deleted',\r\n        u: 'underline'\r\n    },\r\n    activeButtonsAdd: {},\r\n    activeButtonsObservers: {},\r\n\r\n    // autoparser\r\n    autoparse: true,\r\n    autoparseStart: true,\r\n    autoparsePaste: true,\r\n    autoparseLinks: true,\r\n    autoparseImages: true,\r\n    autoparseVideo: true,\r\n    autoparseHttps: false,\r\n\r\n    // shortcodes\r\n    shortcodes: {\r\n        'p.': { format: 'p' },\r\n        'quote.': { format: 'blockquote' },\r\n        'pre.': { format: 'pre' },\r\n        'h1.': { format: 'h1' },\r\n        'h2.': { format: 'h2' },\r\n        'h3.': { format: 'h3' },\r\n        'h4.': { format: 'h4' },\r\n        'h5.': { format: 'h5' },\r\n        'h6.': { format: 'h6' },\r\n        //'1.': { format: 'ol' },\r\n        '*.': { format: 'ul' }\r\n    },\r\n    shortcodesAdd: false, // object\r\n\r\n    // shortcuts\r\n    shortcuts: {\r\n        'ctrl+shift+m, meta+shift+m': { api: 'module.inline.clearformat' },\r\n        'ctrl+b, meta+b': { api: 'module.inline.format', args: 'b' },\r\n        'ctrl+i, meta+i': { api: 'module.inline.format', args: 'i' },\r\n        'ctrl+u, meta+u': { api: 'module.inline.format', args: 'u' },\r\n        'ctrl+h, meta+h': { api: 'module.inline.format', args: 'sup' },\r\n        'ctrl+l, meta+l': { api: 'module.inline.format', args: 'sub' },\r\n        'ctrl+k, meta+k': { api: 'module.link.open' },\r\n        'ctrl+alt+0, meta+alt+0': { api: 'module.block.format', args: 'p' },\r\n        'ctrl+alt+1, meta+alt+1': { api: 'module.block.format', args: 'h1' },\r\n        'ctrl+alt+2, meta+alt+2': { api: 'module.block.format', args: 'h2' },\r\n        'ctrl+alt+3, meta+alt+3': { api: 'module.block.format', args: 'h3' },\r\n        'ctrl+alt+4, meta+alt+4': { api: 'module.block.format', args: 'h4' },\r\n        'ctrl+alt+5, meta+alt+5': { api: 'module.block.format', args: 'h5' },\r\n        'ctrl+alt+6, meta+alt+6': { api: 'module.block.format', args: 'h6' },\r\n        'ctrl+shift+7, meta+shift+7': { api: 'module.list.toggle', args: 'ol' },\r\n        'ctrl+shift+8, meta+shift+8': { api: 'module.list.toggle', args: 'ul' }\r\n    },\r\n    shortcutsAdd: false, // object\r\n\r\n    // misc\r\n    grammarly: true,\r\n    notranslate: false,\r\n\r\n    // private\r\n    bufferLimit: 100,\r\n    emptyHtml: '<p></p>',\r\n    markerChar: '\\ufeff',\r\n    imageTypes: ['image/png', 'image/jpeg', 'image/gif'],\r\n    imageAttrs: ['alt', 'title', 'src', 'class', 'width', 'height', 'srcset'],\r\n    inlineTags: ['a', 'span', 'strong', 'strike', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'abbr'],\r\n    blockTags: ['pre', 'ul', 'ol', 'li', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',  'dl', 'dt', 'dd', 'div', 'table', 'tbody', 'thead', 'tfoot', 'tr', 'th', 'td', 'blockquote', 'output', 'figcaption', 'figure', 'address', 'section', 'header', 'footer', 'aside', 'article', 'iframe'],\r\n    regex: {\r\n        youtube: /^https?\\:\\/\\/(?:www\\.youtube(?:\\-nocookie)?\\.com\\/|m\\.youtube\\.com\\/|youtube\\.com\\/)?(?:ytscreeningroom\\?vi?=|youtu\\.be\\/|vi?\\/|user\\/.+\\/u\\/\\w{1,2}\\/|embed\\/|watch\\?(?:.*\\&)?vi?=|\\&vi?=|\\?(?:.*\\&)?vi?=)([^#\\&\\?\\n\\/<>\"']*)/gi,\r\n        vimeo: /(http|https)?:\\/\\/(?:www.|player.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:\\/[a-zA-Z0-9_-]+)?/gi,\r\n        imageurl: /((https?|www)[^\\s]+\\.)(jpe?g|png|gif)(\\?[^\\s-]+)?/gi,\r\n        url: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z\\u00F0-\\u02AF0-9()!@:%_+.~#?&//=]*)/gi,\r\n        aurl1: /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim,\r\n        aurl2: /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim\r\n    },\r\n    input: true,\r\n    zindex: false,\r\n    modes: {\r\n        \"inline\": {\r\n            pastePlainText: true,\r\n            pasteImages: false,\r\n            enterKey: false,\r\n            toolbar: false,\r\n            autoparse: false,\r\n            source: false,\r\n            showSource: false,\r\n            styles: false,\r\n            air: false\r\n        },\r\n        \"original\": {\r\n            styles: false\r\n        }\r\n    }\r\n};\r\n$R.lang['en'] = {\r\n    \"format\": \"Format\",\r\n    \"image\": \"Image\",\r\n    \"file\": \"File\",\r\n    \"link\": \"Link\",\r\n    \"bold\": \"Bold\",\r\n    \"italic\": \"Italic\",\r\n    \"deleted\": \"Strikethrough\",\r\n    \"underline\": \"Underline\",\r\n    \"superscript\": \"Superscript\",\r\n    \"subscript\": \"Subscript\",\r\n    \"bold-abbr\": \"B\",\r\n    \"italic-abbr\": \"I\",\r\n    \"deleted-abbr\": \"S\",\r\n    \"underline-abbr\": \"U\",\r\n    \"superscript-abbr\": \"Sup\",\r\n    \"subscript-abbr\": \"Sub\",\r\n    \"lists\": \"Lists\",\r\n    \"link-insert\": \"Insert Link\",\r\n    \"link-edit\": \"Edit Link\",\r\n    \"link-in-new-tab\": \"Open link in new tab\",\r\n    \"unlink\": \"Unlink\",\r\n    \"cancel\": \"Cancel\",\r\n    \"close\": \"Close\",\r\n    \"insert\": \"Insert\",\r\n    \"save\": \"Save\",\r\n    \"delete\": \"Delete\",\r\n    \"text\": \"Text\",\r\n    \"edit\": \"Edit\",\r\n    \"title\": \"Alt\",\r\n    \"paragraph\": \"Normal text\",\r\n    \"quote\": \"Quote\",\r\n    \"code\": \"Code\",\r\n    \"heading1\": \"Heading 1\",\r\n    \"heading2\": \"Heading 2\",\r\n    \"heading3\": \"Heading 3\",\r\n    \"heading4\": \"Heading 4\",\r\n    \"heading5\": \"Heading 5\",\r\n    \"heading6\": \"Heading 6\",\r\n    \"filename\": \"Name\",\r\n    \"optional\": \"optional\",\r\n    \"unorderedlist\": \"Unordered List\",\r\n    \"orderedlist\": \"Ordered List\",\r\n    \"outdent\": \"Outdent\",\r\n    \"indent\": \"Indent\",\r\n    \"horizontalrule\": \"Line\",\r\n    \"upload\": \"Upload\",\r\n    \"upload-label\": \"Drop files here or click to upload\",\r\n    \"accessibility-help-label\": \"Rich text editor\",\r\n    \"caption\": \"Caption\",\r\n    \"bulletslist\": \"Bullets\",\r\n    \"numberslist\": \"Numbers\",\r\n    \"image-position\": \"Position\",\r\n    \"none\": \"None\",\r\n    \"left\": \"Left\",\r\n    \"right\": \"Right\",\r\n    \"center\": \"Center\",\r\n    \"undo\": \"Undo\",\r\n    \"redo\": \"Redo\"\r\n};\r\n$R.buttons = {\r\n    html: {\r\n        title: 'HTML',\r\n        icon: true,\r\n        api: 'module.source.toggle'\r\n    },\r\n    undo: {\r\n        title: '## undo ##',\r\n        icon: true,\r\n        api: 'module.buffer.undo'\r\n    },\r\n    redo: {\r\n        title: '## redo ##',\r\n        icon: true,\r\n        api: 'module.buffer.redo'\r\n    },\r\n    format: {\r\n        title: '## format ##',\r\n        icon: true,\r\n        dropdown: {\r\n            p: {\r\n                title: '## paragraph ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'p'\r\n                }\r\n            },\r\n            blockquote: {\r\n                title: '## quote ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'blockquote'\r\n                }\r\n            },\r\n            pre: {\r\n                title: '## code ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'pre'\r\n                }\r\n            },\r\n            h1: {\r\n                title: '## heading1 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h1'\r\n                }\r\n            },\r\n            h2: {\r\n                title: '## heading2 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h2'\r\n                }\r\n            },\r\n            h3: {\r\n                title: '## heading3 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h3'\r\n                }\r\n            },\r\n            h4: {\r\n                title: '## heading4 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h4'\r\n                }\r\n            },\r\n            h5: {\r\n                title: '## heading5 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h5'\r\n                }\r\n            },\r\n            h6: {\r\n                title: '## heading6 ##',\r\n                api: 'module.block.format',\r\n                args: {\r\n                    tag: 'h6'\r\n                }\r\n            }\r\n        }\r\n    },\r\n    bold: {\r\n        title: '## bold-abbr ##',\r\n        icon: true,\r\n        tooltip: '## bold ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'b'\r\n        }\r\n    },\r\n    italic: {\r\n        title: '## italic-abbr ##',\r\n        icon: true,\r\n        tooltip: '## italic ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'i'\r\n        }\r\n    },\r\n    deleted: {\r\n        title: '## deleted-abbr ##',\r\n        icon: true,\r\n        tooltip: '## deleted ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'del'\r\n        }\r\n    },\r\n    underline: {\r\n        title: '## underline-abbr ##',\r\n        icon: true,\r\n        tooltip: '## underline ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'u'\r\n        }\r\n    },\r\n    sup: {\r\n        title: '## superscript-abbr ##',\r\n        icon: true,\r\n        tooltip: '## superscript ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'sup'\r\n        }\r\n    },\r\n    sub: {\r\n        title: '## subscript-abbr ##',\r\n        icon: true,\r\n        tooltip: '## subscript ##',\r\n        api: 'module.inline.format',\r\n        args: {\r\n            tag: 'sub'\r\n        }\r\n    },\r\n    lists: {\r\n        title: '## lists ##',\r\n        icon: true,\r\n        observe: 'list',\r\n        dropdown: {\r\n            observe: 'list',\r\n            unorderedlist: {\r\n                title: '&bull; ## unorderedlist ##',\r\n                api: 'module.list.toggle',\r\n                args: 'ul'\r\n            },\r\n            orderedlist: {\r\n                title: '1. ## orderedlist ##',\r\n                api: 'module.list.toggle',\r\n                args: 'ol'\r\n            },\r\n            outdent: {\r\n                title: '< ## outdent ##',\r\n                api: 'module.list.outdent'\r\n            },\r\n            indent: {\r\n                title: '> ## indent ##',\r\n                api: 'module.list.indent'\r\n            }\r\n        }\r\n    },\r\n    ul: {\r\n        title: '&bull; ## bulletslist ##',\r\n        icon: true,\r\n        api: 'module.list.toggle',\r\n        observe: 'list',\r\n        args: 'ul'\r\n    },\r\n    ol: {\r\n        title: '1. ## numberslist ##',\r\n        icon: true,\r\n        api: 'module.list.toggle',\r\n        observe: 'list',\r\n        args: 'ol'\r\n    },\r\n    outdent: {\r\n        title: '## outdent ##',\r\n        icon: true,\r\n        api: 'module.list.outdent',\r\n        observe: 'list'\r\n    },\r\n    indent: {\r\n        title: '## indent ##',\r\n        icon: true,\r\n        api: 'module.list.indent',\r\n        observe: 'list'\r\n    },\r\n    image: {\r\n        title: '## image ##',\r\n        icon: true,\r\n        api: 'module.image.open'\r\n    },\r\n    file: {\r\n        title: '## file ##',\r\n        icon: true,\r\n        api: 'module.file.open'\r\n    },\r\n    link: {\r\n        title: '## link ##',\r\n        icon: true,\r\n        observe: 'link',\r\n        dropdown: {\r\n            observe: 'link',\r\n            link: {\r\n                title: '## link-insert ##',\r\n                api: 'module.link.open'\r\n            },\r\n            unlink: {\r\n                title: '## unlink ##',\r\n                api: 'module.link.unlink'\r\n            }\r\n        }\r\n    },\r\n    line: {\r\n        title: '## horizontalrule ##',\r\n        icon: true,\r\n        api: 'module.line.insert'\r\n    }\r\n};\r\nvar App = function(element, options, uuid)\r\n{\r\n    this.module = {};\r\n    this.plugin = {};\r\n    this.instances = {};\r\n\r\n    // start/stop\r\n    this.started = false;\r\n    this.stopped = false;\r\n\r\n    // environment\r\n    this.uuid = uuid;\r\n    this.rootElement = element;\r\n    this.rootOpts = options;\r\n    this.dragInside = false;\r\n    this.dragComponentInside = false;\r\n    this.keycodes = $R.keycodes;\r\n    this.namespace = 'redactor';\r\n    this.$win = $R.dom(window);\r\n    this.$doc = $R.dom(document);\r\n    this.$body = $R.dom('body');\r\n    this.editorReadOnly = false;\r\n\r\n    // core services\r\n    this.opts = $R.create('service.options', options, element);\r\n    this.lang = $R.create('service.lang', this);\r\n\r\n    // build\r\n    this.buildServices();\r\n    this.buildModules();\r\n    this.buildPlugins();\r\n\r\n    // start\r\n    this.start();\r\n};\r\n\r\nApp.prototype = {\r\n    start: function()\r\n    {\r\n        // start\r\n        this.stopped = false;\r\n        this.broadcast('start');\r\n        this.broadcast('startcode');\r\n\r\n        if (this.opts.clickToEdit)\r\n        {\r\n            this.broadcast('startclicktoedit');\r\n        }\r\n        else\r\n        {\r\n            this.broadcast('enable');\r\n            if (this.opts.showSource) this.broadcast('startcodeshow');\r\n            this.broadcast('enablefocus');\r\n        }\r\n\r\n        // started\r\n        this.broadcast('started');\r\n        this.started = true;\r\n    },\r\n    stop: function()\r\n    {\r\n        this.started = false;\r\n        this.stopped = true;\r\n\r\n        this.broadcast('stop');\r\n        this.broadcast('disable');\r\n        this.broadcast('stopped');\r\n    },\r\n\r\n    // started & stopped\r\n    isStarted: function()\r\n    {\r\n        return this.started;\r\n    },\r\n    isStopped: function()\r\n    {\r\n        return this.stopped;\r\n    },\r\n\r\n    // build\r\n    buildServices: function()\r\n    {\r\n        var core = ['options', 'lang'];\r\n        var bindable = ['uuid', 'keycodes', 'opts', 'lang', '$win', '$doc', '$body'];\r\n        var services = [];\r\n        for (var name in $R.services)\r\n        {\r\n            if (core.indexOf(name) === -1)\r\n            {\r\n                this[name] = $R.create('service.' + name, this);\r\n                services.push(name);\r\n                bindable.push(name);\r\n            }\r\n        }\r\n\r\n        // binding\r\n        for (var i = 0; i < services.length; i++)\r\n        {\r\n            var service = services[i];\r\n            for (var z = 0; z < bindable.length; z++)\r\n            {\r\n                var inj = bindable[z];\r\n                if (service !== inj)\r\n                {\r\n                    this[service][inj] = this[inj];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    buildModules: function()\r\n    {\r\n        for (var name in $R.modules)\r\n        {\r\n            this.module[name] = $R.create('module.' + name, this);\r\n            this.instances[name] = this.module[name];\r\n        }\r\n    },\r\n    buildPlugins: function()\r\n    {\r\n        var plugins = this.opts.plugins;\r\n        for (var i = 0; i < plugins.length; i++)\r\n        {\r\n            var name = plugins[i];\r\n            if (typeof $R.plugins[name] !== 'undefined')\r\n            {\r\n                this.plugin[name] = $R.create('plugin.' + name, this);\r\n                this.instances[name] = this.plugin[name];\r\n            }\r\n        }\r\n    },\r\n\r\n    // draginside\r\n    isDragInside: function()\r\n    {\r\n        return this.dragInside;\r\n    },\r\n    setDragInside: function(dragInside)\r\n    {\r\n        this.dragInside = dragInside;\r\n    },\r\n    isDragComponentInside: function()\r\n    {\r\n        return this.dragComponentInside;\r\n    },\r\n    setDragComponentInside: function(dragInside)\r\n    {\r\n        this.dragComponentInside = dragInside;\r\n    },\r\n    getDragComponentInside: function()\r\n    {\r\n        return this.dragComponentInside;\r\n    },\r\n\r\n    // readonly\r\n    isReadOnly: function()\r\n    {\r\n        return this.editorReadOnly;\r\n    },\r\n    enableReadOnly: function()\r\n    {\r\n        this.editorReadOnly = true;\r\n        this.broadcast('enablereadonly');\r\n        this.component.clearActive();\r\n        this.toolbar.disableButtons();\r\n    },\r\n    disableReadOnly: function()\r\n    {\r\n        this.editorReadOnly = false;\r\n        this.broadcast('disablereadonly');\r\n        this.toolbar.enableButtons();\r\n    },\r\n\r\n    // messaging\r\n    callMessageHandler: function(instance, name, args)\r\n    {\r\n        var arr = name.split('.');\r\n        var value;\r\n        if (arr.length === 1)\r\n        {\r\n            if (typeof instance['on' + name] === 'function')\r\n            {\r\n                value = instance['on' + name].apply(instance, args);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            arr[0] = 'on' + arr[0];\r\n\r\n            var func = this.utils.checkProperty(instance, arr);\r\n            if (typeof func === 'function')\r\n            {\r\n                value = func.apply(instance, args);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    },\r\n    broadcast: function(name)\r\n    {\r\n        var args = [].slice.call(arguments, 1);\r\n        var returned;\r\n        for (var moduleName in this.instances)\r\n        {\r\n            var value = this.callMessageHandler(this.instances[moduleName], name, args);\r\n            if (typeof value !== 'undefined') {\r\n                returned = value;\r\n            }\r\n        }\r\n\r\n        // callback\r\n        var cval = this.callback.trigger(name, args);\r\n\r\n        return (typeof returned !== 'undefined') ? returned : cval;\r\n    },\r\n\r\n    // callback\r\n    on: function(name, func)\r\n    {\r\n        this.callback.add(name, func);\r\n    },\r\n    off: function(name, func)\r\n    {\r\n        this.callback.remove(name, func);\r\n    },\r\n\r\n    // api\r\n    api: function(name)\r\n    {\r\n        if (!this.isStarted() && name !== 'start') return;\r\n        if (this.isReadOnly() && name !== 'disableReadOnly') return;\r\n\r\n        this.broadcast('state');\r\n\r\n        var args = [].slice.call(arguments, 1);\r\n        var arr = name.split('.');\r\n\r\n        var isApp = (arr.length === 1);\r\n        var isCallback = (arr[0] === 'on' || arr[0] === 'off');\r\n        var isService = (!isCallback && arr.length === 2);\r\n        var isPlugin = (arr[0] === 'plugin');\r\n        var isModule = (arr[0] === 'module');\r\n\r\n        // app\r\n        if (isApp)\r\n        {\r\n            if (typeof this[arr[0]] === 'function')\r\n            {\r\n                return this.callInstanceMethod(this, arr[0], args);\r\n            }\r\n        }\r\n        // callback\r\n        else if (isCallback)\r\n        {\r\n            return (arr[0] === 'on') ? this.on(arr[1], args[0]) : this.off(arr[1], args[0] || undefined);\r\n        }\r\n        // service\r\n        else if (isService)\r\n        {\r\n            if (this.isInstanceExists(this, arr[0]))\r\n            {\r\n                return this.callInstanceMethod(this[arr[0]], arr[1], args);\r\n            }\r\n            else\r\n            {\r\n                $R.error(new Error('Service \"' + arr[0] + '\" not found'));\r\n            }\r\n        }\r\n        // plugin\r\n        else if (isPlugin)\r\n        {\r\n            if (this.isInstanceExists(this.plugin, arr[1]))\r\n            {\r\n                return this.callInstanceMethod(this.plugin[arr[1]], arr[2], args);\r\n            }\r\n            else\r\n            {\r\n                $R.error(new Error('Plugin \"' + arr[1] + '\" not found'));\r\n            }\r\n        }\r\n        // module\r\n        else if (isModule)\r\n        {\r\n            if (this.isInstanceExists(this.module, arr[1]))\r\n            {\r\n                return this.callInstanceMethod(this.module[arr[1]], arr[2], args);\r\n            }\r\n            else\r\n            {\r\n                $R.error(new Error('Module \"' + arr[1] + '\" not found'));\r\n            }\r\n        }\r\n\r\n    },\r\n    isInstanceExists: function(obj, name)\r\n    {\r\n        return (typeof obj[name] !== 'undefined');\r\n    },\r\n    callInstanceMethod: function(instance, method, args)\r\n    {\r\n        if (typeof instance[method] === 'function')\r\n        {\r\n            return instance[method].apply(instance, args);\r\n        }\r\n    }\r\n};\r\n$R.add('mixin', 'formatter', {\r\n\r\n    // public\r\n    buildArgs: function(args)\r\n    {\r\n        this.args = {\r\n            'class': args['class'] || false,\r\n            'style': args['style'] || false,\r\n            'attr': args['attr'] || false\r\n        };\r\n\r\n        if (!this.args['class'] && !this.args['style'] && !this.args['attr'])\r\n        {\r\n            this.args = false;\r\n        }\r\n    },\r\n    applyArgs: function(nodes, selection)\r\n    {\r\n        if (this.args)\r\n        {\r\n            nodes = this[this.type](this.args, false, nodes, selection);\r\n        }\r\n        else\r\n        {\r\n            nodes = this._clearAll(nodes, selection);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    clearClass: function(tags, nodes)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags, true);\r\n        $elements.removeAttr('class');\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    clearStyle: function(tags, nodes)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags, true);\r\n        $elements.removeAttr('style');\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    clearAttr: function(tags, nodes)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags, true);\r\n        this._removeAllAttr($elements);\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    set: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.removeAttr('class');\r\n            $elements.addClass(args['class']);\r\n        }\r\n\r\n        if (args['style'])\r\n        {\r\n            $elements.removeAttr('style');\r\n            $elements.css(args['style']);\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n            });\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            this._removeAllAttr($elements);\r\n            $elements.attr(args['attr']);\r\n        }\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return $elements.getAll();\r\n    },\r\n    toggle: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.toggleClass(args['class']);\r\n            $elements.each(function(node)\r\n            {\r\n                if (node.className === '') node.removeAttribute('class');\r\n            });\r\n        }\r\n\r\n        var params;\r\n        if (args['style'])\r\n        {\r\n            params = args['style'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                for (var key in params)\r\n                {\r\n                    var newVal = params[key];\r\n                    var oldVal = $node.css(key);\r\n\r\n                    oldVal = (this.utils.isRgb(oldVal)) ? this.utils.rgb2hex(oldVal) : oldVal.replace(/\"/g, '');\r\n                    newVal = (this.utils.isRgb(newVal)) ? this.utils.rgb2hex(newVal) : newVal.replace(/\"/g, '');\r\n\r\n                    oldVal = this.utils.hex2long(oldVal);\r\n                    newVal = this.utils.hex2long(newVal);\r\n\r\n                    var compareNew = (typeof newVal === 'string') ? newVal.toLowerCase() : newVal;\r\n                    var compareOld = (typeof oldVal === 'string') ? oldVal.toLowerCase() : oldVal;\r\n\r\n                    if (compareNew === compareOld) $node.css(key, '');\r\n                    else $node.css(key, newVal);\r\n                }\r\n\r\n                this._convertStyleQuotes($node);\r\n                if (this.utils.removeEmptyAttr(node, 'style'))\r\n                {\r\n                    $node.removeAttr('data-redactor-style-cache');\r\n                }\r\n                else\r\n                {\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            params = args['attr'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                for (var key in params)\r\n                {\r\n                    if ($node.attr(key)) $node.removeAttr(key);\r\n                    else $node.attr(key, params[key]);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return $elements.getAll();\r\n    },\r\n    add: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.addClass(args['class']);\r\n        }\r\n\r\n        if (args['style'])\r\n        {\r\n            var params = args['style'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                $node.css(params);\r\n                $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n\r\n                this._convertStyleQuotes($node);\r\n\r\n            }.bind(this));\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            $elements.attr(args['attr']);\r\n        }\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return $elements.getAll();\r\n    },\r\n    remove: function(args, tags, nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        var $elements = (nodes) ? $R.dom(nodes) : this.getElements(tags);\r\n\r\n        if (args['class'])\r\n        {\r\n            $elements.removeClass(args['class']);\r\n            $elements.each(function(node)\r\n            {\r\n                if (node.className === '') node.removeAttribute('class');\r\n            });\r\n        }\r\n\r\n        if (args['style'])\r\n        {\r\n            var name = args['style'];\r\n            $elements.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                $node.css(name, '');\r\n\r\n                if (this.utils.removeEmptyAttr(node, 'style'))\r\n                {\r\n                    $node.removeAttr('data-redactor-style-cache');\r\n                }\r\n                else\r\n                {\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n\r\n        if (args['attr'])\r\n        {\r\n            $elements.removeAttr(args['attr']);\r\n        }\r\n\r\n        nodes = this._unwrapSpanWithoutAttr($elements.getAll());\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // private\r\n    _removeAllAttr: function($elements)\r\n    {\r\n        $elements.each(function(node)\r\n        {\r\n            for (var i = node.attributes.length; i-->0;)\r\n            {\r\n                var nodeAttr = node.attributes[i];\r\n                var name = nodeAttr.name;\r\n                if (name !== 'style' && name !== 'class')\r\n                {\r\n                    node.removeAttributeNode(nodeAttr);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    _convertStyleQuotes: function($node)\r\n    {\r\n        var style = $node.attr('style');\r\n        if (style) $node.attr('style', style.replace(/\"/g, '\\''));\r\n    },\r\n    _clearAll: function(nodes, selection)\r\n    {\r\n        if (selection !== false) this.selection.save();\r\n\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = nodes[i];\r\n            while (node.attributes.length > 0)\r\n            {\r\n                node.removeAttribute(node.attributes[0].name);\r\n            }\r\n        }\r\n\r\n        nodes = this._unwrapSpanWithoutAttr(nodes);\r\n\r\n        if (selection !== false) this.selection.restore();\r\n\r\n        return nodes;\r\n    },\r\n    _unwrapSpanWithoutAttr: function(nodes)\r\n    {\r\n        var finalNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = nodes[i];\r\n            var len = node.attributes.length;\r\n            if (len <= 0 && node.nodeType !== 3 && node.tagName === 'SPAN')\r\n            {\r\n                $R.dom(node).unwrap();\r\n            }\r\n            else\r\n            {\r\n                finalNodes.push(node);\r\n            }\r\n        }\r\n\r\n        return finalNodes;\r\n    }\r\n});\r\n$R.add('mixin', 'dom', $R.Dom.prototype);\r\n$R.add('mixin', 'component', {\r\n    get cmnt()\r\n    {\r\n        return true;\r\n    }\r\n});\r\n$R.add('service', 'options', {\r\n    init: function(options, element)\r\n    {\r\n        var $el = $R.dom(element);\r\n        var opts = $R.extend({}, $R.opts, (element) ? $el.data() : {}, $R.options);\r\n        opts = $R.extend(true, opts, options);\r\n\r\n        return opts;\r\n    }\r\n});\r\n$R.add('service', 'lang', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // build\r\n        this.vars = this._build(this.opts.lang);\r\n    },\r\n\r\n    // public\r\n    rebuild: function(lang)\r\n    {\r\n        this.opts.lang = lang;\r\n        this.vars = this._build(lang);\r\n    },\r\n    extend: function(obj)\r\n    {\r\n        this.vars = $R.extend(this.vars, obj);\r\n    },\r\n    parse: function(str)\r\n    {\r\n        if (str === undefined)\r\n        {\r\n            return '';\r\n        }\r\n\r\n        var matches = str.match(/## (.*?) ##/g);\r\n        if (matches)\r\n        {\r\n            for (var i = 0; i < matches.length; i++)\r\n            {\r\n                var key = matches[i].replace(/^##\\s/g, '').replace(/\\s##$/g, '');\r\n                str = str.replace(matches[i], this.get(key));\r\n            }\r\n        }\r\n\r\n        return str;\r\n    },\r\n    get: function(name)\r\n    {\r\n        var str = '';\r\n        if (typeof this.vars[name] !== 'undefined')\r\n        {\r\n            str = this.vars[name];\r\n        }\r\n        else if (this.opts.lang !== 'en' && typeof $R.lang['en'][name] !== 'undefined')\r\n        {\r\n            str = $R.lang['en'][name];\r\n        }\r\n\r\n        return str;\r\n    },\r\n\r\n    // private\r\n    _build: function(lang)\r\n    {\r\n        var vars = $R.lang['en'];\r\n        if (lang !== 'en')\r\n        {\r\n            vars = ($R.lang[lang] !== undefined) ? $R.lang[lang] : vars;\r\n        }\r\n\r\n        return vars;\r\n    }\r\n});\r\n$R.add('service', 'callback', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.callbacks = {};\r\n\r\n        // build\r\n        if (this.opts.callbacks)\r\n        {\r\n            this._set(this.opts.callbacks, '');\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        this.callbacks = {};\r\n    },\r\n    add: function(name, handler)\r\n    {\r\n        if (!this.callbacks[name]) this.callbacks[name] = [];\r\n        this.callbacks[name].push(handler);\r\n    },\r\n    remove: function(name, handler)\r\n    {\r\n        if (handler === undefined)\r\n        {\r\n            delete this.callbacks[name];\r\n        }\r\n        else\r\n        {\r\n            for (var i = 0; i < this.callbacks[name].length; i++)\r\n            {\r\n                this.callbacks[name].splice(i, 1);\r\n            }\r\n\r\n            if (Object.keys(this.callbacks[name]).length === 0) delete this.callbacks[name];\r\n        }\r\n    },\r\n    trigger: function(name, args)\r\n    {\r\n        var value = this._loop(name, args, this.callbacks);\r\n        return (typeof value === 'undefined' && args && args[0] !== false) ? args[0] : value;\r\n    },\r\n\r\n    // private\r\n    _set: function(obj, name)\r\n    {\r\n        for (var key in obj)\r\n        {\r\n            var path = (name === '') ? key : name + '.' + key;\r\n            if (typeof obj[key] === 'object')\r\n            {\r\n                this._set(obj[key], path);\r\n            }\r\n            else\r\n            {\r\n                this.callbacks[path] = [];\r\n                this.callbacks[path].push(obj[key]);\r\n            }\r\n        }\r\n    },\r\n    _loop: function(name, args, obj)\r\n    {\r\n        var value;\r\n        for (var key in obj)\r\n        {\r\n            if (name === key)\r\n            {\r\n                for (var i = 0; i < obj[key].length; i++)\r\n                {\r\n                    value = obj[key][i].apply(this.app, args);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n});\r\n$R.add('service', 'animate', {\r\n    init: function(app)\r\n    {\r\n        this.animationOpt = app.opts.animation;\r\n    },\r\n    start: function(element, animation, options, callback)\r\n    {\r\n        var defaults = {\r\n            duration: false,\r\n            iterate: false,\r\n            delay: false,\r\n            timing: false,\r\n            prefix: 'redactor-'\r\n        };\r\n\r\n        defaults = (typeof options === 'function') ? defaults : $R.extend(defaults, options);\r\n        callback = (typeof options === 'function') ? options : callback;\r\n\r\n        // play\r\n        return new $R.AnimatePlay(element, animation, defaults, callback, this.animationOpt);\r\n    },\r\n    stop: function(element)\r\n    {\r\n        this.$el = $R.dom(element);\r\n        this.$el.removeClass('redactor-animated');\r\n\r\n        var effect = this.$el.attr('redactor-animate-effect');\r\n        this.$el.removeClass(effect);\r\n\r\n        this.$el.removeAttr('redactor-animate-effect');\r\n        var hide = this.$el.attr('redactor-animate-hide');\r\n        if (hide)\r\n        {\r\n            this.$el.addClass(hide).removeAttr('redactor-animate-hide');\r\n        }\r\n\r\n        this.$el.off('animationend webkitAnimationEnd');\r\n    }\r\n});\r\n\r\n$R.AnimatePlay = function(element, animation, defaults, callback, animationOpt)\r\n{\r\n    this.hidableEffects = ['fadeOut', 'flipOut', 'slideUp', 'zoomOut', 'slideOutUp', 'slideOutRight', 'slideOutLeft'];\r\n    this.prefixes = ['', '-webkit-'];\r\n\r\n    this.$el = $R.dom(element);\r\n    this.$body = $R.dom('body');\r\n    this.callback = callback;\r\n    this.animation = (!animationOpt) ? this.buildAnimationOff(animation) : animation;\r\n    this.defaults = defaults;\r\n\r\n    if (this.animation === 'slideUp')\r\n    {\r\n        this.$el.height(this.$el.height());\r\n    }\r\n\r\n    // animate\r\n    return (this.isInanimate()) ? this.inanimate() : this.animate();\r\n};\r\n\r\n$R.AnimatePlay.prototype = {\r\n    buildAnimationOff: function(animation)\r\n    {\r\n        return (this.isHidable(animation)) ? 'hide' : 'show';\r\n    },\r\n    buildHideClass: function()\r\n    {\r\n        return 'redactor-animate-hide';\r\n    },\r\n    isInanimate: function()\r\n    {\r\n        return (this.animation === 'show' || this.animation === 'hide');\r\n    },\r\n    isAnimated: function()\r\n    {\r\n        return this.$el.hasClass('redactor-animated');\r\n    },\r\n    isHidable: function(effect)\r\n    {\r\n        return (this.hidableEffects.indexOf(effect) !== -1);\r\n    },\r\n    inanimate: function()\r\n    {\r\n        this.defaults.timing = 'linear';\r\n\r\n        var hide;\r\n        if (this.animation === 'show')\r\n        {\r\n            hide = this.buildHideClass();\r\n            this.$el.attr('redactor-animate-hide', hide);\r\n            this.$el.removeClass(hide);\r\n        }\r\n        else\r\n        {\r\n            hide = this.$el.attr('redactor-animate-hide');\r\n            this.$el.addClass(hide).removeAttr('redactor-animate-hide');\r\n        }\r\n\r\n        if (typeof this.callback === 'function') this.callback(this);\r\n\r\n        return this;\r\n    },\r\n    animate: function()\r\n    {\r\n        var delay = (this.defaults.delay) ? this.defaults.delay : 0;\r\n        setTimeout(function()\r\n        {\r\n            this.$body.addClass('no-scroll-x');\r\n            this.$el.addClass('redactor-animated');\r\n            if (!this.$el.attr('redactor-animate-hide'))\r\n            {\r\n                var hide = this.buildHideClass();\r\n                this.$el.attr('redactor-animate-hide', hide);\r\n                this.$el.removeClass(hide);\r\n            }\r\n\r\n            this.$el.addClass(this.defaults.prefix + this.animation);\r\n            this.$el.attr('redactor-animate-effect', this.defaults.prefix + this.animation);\r\n\r\n            this.set(this.defaults.duration + 's', this.defaults.iterate, this.defaults.timing);\r\n            this.complete();\r\n\r\n        }.bind(this), delay * 1000);\r\n\r\n        return this;\r\n    },\r\n    set: function(duration, iterate, timing)\r\n    {\r\n        var len = this.prefixes.length;\r\n\r\n        while (len--)\r\n        {\r\n            if (duration !== false || duration === '') this.$el.css(this.prefixes[len] + 'animation-duration', duration);\r\n            if (iterate !== false || iterate === '') this.$el.css(this.prefixes[len] + 'animation-iteration-count', iterate);\r\n            if (timing !== false || timing === '') this.$el.css(this.prefixes[len] + 'animation-timing-function', timing);\r\n        }\r\n    },\r\n    clean: function()\r\n    {\r\n        this.$body.removeClass('no-scroll-x');\r\n        this.$el.removeClass('redactor-animated');\r\n        this.$el.removeClass(this.defaults.prefix + this.animation);\r\n        this.$el.removeAttr('redactor-animate-effect');\r\n\r\n        this.set('', '', '');\r\n    },\r\n    complete: function()\r\n    {\r\n        this.$el.one('animationend webkitAnimationEnd', function()\r\n        {\r\n            if (this.$el.hasClass(this.defaults.prefix + this.animation)) this.clean();\r\n            if (this.isHidable(this.animation))\r\n            {\r\n                var hide = this.$el.attr('redactor-animate-hide');\r\n                this.$el.addClass(hide).removeAttr('redactor-animate-hide');\r\n            }\r\n\r\n            if (this.animation === 'slideUp') this.$el.height('');\r\n            if (typeof this.callback === 'function') this.callback(this.$el);\r\n\r\n        }.bind(this));\r\n    }\r\n};\r\n$R.add('service', 'caret', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n\r\n    // set\r\n    setStart: function(el)\r\n    {\r\n        this._setCaret('Start', el);\r\n    },\r\n    setEnd: function(el)\r\n    {\r\n        this._setCaret('End', el);\r\n    },\r\n    setBefore: function(el)\r\n    {\r\n        this._setCaret('Before', el);\r\n    },\r\n    setAfter: function(el)\r\n    {\r\n        this._setCaret('After', el);\r\n    },\r\n\r\n    // is\r\n    isStart: function(el)\r\n    {\r\n        return this._isStartOrEnd(el, 'First');\r\n    },\r\n    isEnd: function(el)\r\n    {\r\n        return this._isStartOrEnd(el, 'Last');\r\n    },\r\n\r\n    // set side\r\n    setAtEnd: function(node)\r\n    {\r\n        var data = this.inspector.parse(node);\r\n        var tag = data.getTag();\r\n        var range = document.createRange();\r\n        if (this._isInPage(node))\r\n        {\r\n            if (tag === 'a')\r\n            {\r\n                var textNode = this.utils.createInvisibleChar();\r\n                $R.dom(node).after(textNode);\r\n\r\n                range.selectNodeContents(textNode);\r\n                range.collapse(true);\r\n            }\r\n            else\r\n            {\r\n                range.selectNodeContents(node);\r\n                range.collapse(false);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtStart: function(node)\r\n    {\r\n\t\tvar range = document.createRange();\r\n\t\tvar data = this.inspector.parse(node);\r\n        if (this._isInPage(node))\r\n        {\r\n            range.setStart(node, 0);\r\n            range.collapse(true);\r\n\r\n            if (data.isInline())\r\n            {\r\n                var textNode = this.utils.createInvisibleChar();\r\n                range.insertNode(textNode);\r\n                range.selectNodeContents(textNode);\r\n                range.collapse(false);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtBefore: function(node)\r\n    {\r\n        var data = this.inspector.parse(node);\r\n        var range = document.createRange();\r\n        if (this._isInPage(node))\r\n        {\r\n            range.setStartBefore(node);\r\n            range.collapse(true);\r\n\r\n            if (data.isInline())\r\n            {\r\n                var textNode = this.utils.createInvisibleChar();\r\n                node.parentNode.insertBefore(textNode, node);\r\n                range.selectNodeContents(textNode);\r\n                range.collapse(false);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtAfter: function(node)\r\n    {\r\n\r\n        var range = document.createRange();\r\n        if (this._isInPage(node))\r\n        {\r\n            range.setStartAfter(node);\r\n            range.collapse(true);\r\n\r\n            var textNode = this.utils.createInvisibleChar();\r\n            range.insertNode(textNode);\r\n            range.selectNodeContents(textNode);\r\n            range.collapse(false);\r\n\r\n            this.selection.setRange(range);\r\n        }\r\n    },\r\n    setAtPrev: function(node)\r\n    {\r\n        var prev = node.previousSibling;\r\n        if (prev)\r\n        {\r\n            prev = (prev.nodeType === 3 && this._isEmptyTextNode(prev)) ? prev.previousElementSibling : prev;\r\n            if (prev) this.setEnd(prev);\r\n        }\r\n    },\r\n    setAtNext: function(node)\r\n    {\r\n        var next = node.nextSibling;\r\n        if (next)\r\n        {\r\n            next = (next.nodeType === 3 && this._isEmptyTextNode(next)) ? next.nextElementSibling : next;\r\n            if (next) this.setStart(next);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _setCaret: function(type, el)\r\n    {\r\n        var data = this.inspector.parse(el);\r\n        var node = data.getNode();\r\n\r\n        if (node)\r\n        {\r\n            this.component.clearActive();\r\n            this['_set' + type](node, data, data.getTag());\r\n        }\r\n    },\r\n    _setStart: function(node, data, tag)\r\n    {\r\n        // 1. text\r\n        if (data.isText())\r\n        {\r\n            this.editor.focus();\r\n            return this.setAtStart(node);\r\n        }\r\n        // 2. ul, ol\r\n        else if (tag === 'ul' || tag === 'ol')\r\n        {\r\n            node = data.findFirstNode('li');\r\n\r\n            var item = this.utils.getFirstElement(node);\r\n            var dataItem = this.inspector.parse(item);\r\n            if (item && dataItem.isComponent())\r\n            {\r\n                return this.setStart(dataItem.getComponent());\r\n            }\r\n        }\r\n        // 3. dl\r\n        else if (tag === 'dl')\r\n        {\r\n            node = data.findFirstNode('dt');\r\n        }\r\n        // 4. br / hr\r\n        else if (tag === 'br' || tag === 'hr')\r\n        {\r\n            return this.setBefore(node);\r\n        }\r\n        // 5. th, td\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            var el = data.getFirstElement(node);\r\n            if (el)\r\n            {\r\n                return this.setStart(el);\r\n            }\r\n        }\r\n        // 6. table\r\n        else if (tag === 'table' || tag === 'tr')\r\n        {\r\n            return this.setStart(data.findFirstNode('th, td'));\r\n        }\r\n        // 7. figure code\r\n        else if (data.isComponentType('code') && !data.isFigcaption())\r\n        {\r\n            var code = data.findLastNode('pre, code');\r\n\r\n            this.editor.focus();\r\n            return this.setAtStart(code);\r\n        }\r\n        // 8. table component\r\n        else if (tag === 'figure' && data.isComponentType('table'))\r\n        {\r\n            var table = data.getTable();\r\n            var tableData = this.inspector.parse(table);\r\n\r\n            return this.setStart(tableData.findFirstNode('th, td'));\r\n        }\r\n        // 9. non editable components\r\n        else if (!data.isComponentType('table') && data.isComponent() && !data.isFigcaption())\r\n        {\r\n            return this.component.setActive(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n\r\n        // set\r\n        if (!this._setInline(node, 'Start'))\r\n        {\r\n            this.setAtStart(node);\r\n        }\r\n    },\r\n    _setEnd: function(node, data, tag)\r\n    {\r\n        // 1. text\r\n        if (data.isText())\r\n        {\r\n            this.editor.focus();\r\n            return this.setAtEnd(node);\r\n        }\r\n        // 2. ul, ol\r\n        else if (tag === 'ul' || tag === 'ol')\r\n        {\r\n            node = data.findLastNode('li');\r\n\r\n            var item = this.utils.getLastElement(node);\r\n            var dataItem = this.inspector.parse(item);\r\n            if (item && dataItem.isComponent())\r\n            {\r\n                return this.setEnd(dataItem.getComponent());\r\n            }\r\n        }\r\n        // 3. dl\r\n        else if (tag === 'dl')\r\n        {\r\n            node = data.findLastNode('dd');\r\n        }\r\n        // 4. br / hr\r\n        else if (tag === 'br' || tag === 'hr')\r\n        {\r\n            return this.setAfter(node);\r\n        }\r\n        // 5. th, td\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            var el = data.getLastElement();\r\n            if (el)\r\n            {\r\n                return this.setEnd(el);\r\n            }\r\n        }\r\n        // 6. table\r\n        else if (tag === 'table' || tag === 'tr')\r\n        {\r\n            return this.setEnd(data.findLastNode('th, td'));\r\n        }\r\n        // 7. figure code\r\n        else if (data.isComponentType('code') && !data.isFigcaption())\r\n        {\r\n            var code = data.findLastNode('pre, code');\r\n\r\n            this.editor.focus();\r\n            return this.setAtEnd(code);\r\n        }\r\n        // 8. table component\r\n        else if (tag === 'figure' && data.isComponentType('table'))\r\n        {\r\n            var table = data.getTable();\r\n            var tableData = this.inspector.parse(table);\r\n\r\n            return this.setEnd(tableData.findLastNode('th, td'));\r\n        }\r\n        // 9. non editable components\r\n        else if (!data.isComponentType('table') && data.isComponent() && !data.isFigcaption())\r\n        {\r\n            return this.component.setActive(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n\r\n        // set\r\n        if (!this._setInline(node, 'End'))\r\n        {\r\n            // is element empty\r\n            if (this.utils.isEmpty(node))\r\n            {\r\n                return this.setStart(node);\r\n            }\r\n\r\n            this.setAtEnd(node);\r\n        }\r\n    },\r\n    _setBefore: function(node, data, tag)\r\n    {\r\n        // text\r\n        if (node.nodeType === 3)\r\n        {\r\n            return this.setAtBefore(node);\r\n        }\r\n        // inline\r\n        else if (data.isInline())\r\n        {\r\n            return this.setAtBefore(node);\r\n        }\r\n        // td / th\r\n        else if (data.isFirstTableCell())\r\n        {\r\n            return this.setAtPrev(data.getComponent());\r\n        }\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            return this.setAtPrev(node);\r\n        }\r\n        // li\r\n        else if (data.isFirstListItem())\r\n        {\r\n            return this.setAtPrev(data.getList());\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            return this.setStart(data.getComponent());\r\n        }\r\n        // component\r\n        else if (!data.isComponentType('table') && data.isComponent())\r\n        {\r\n            return this.setAtPrev(data.getComponent());\r\n        }\r\n        // block\r\n        else if (data.isBlock())\r\n        {\r\n            return this.setAtPrev(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n        this.setAtBefore(node);\r\n\r\n    },\r\n    _setAfter: function(node, data, tag)\r\n    {\r\n        // text\r\n        if (node.nodeType === 3)\r\n        {\r\n            return this.setAtAfter(node);\r\n        }\r\n        // inline\r\n        else if (data.isInline())\r\n        {\r\n            return this.setAtAfter(node);\r\n        }\r\n        // td / th\r\n        else if (data.isLastTableCell())\r\n        {\r\n            return this.setAtNext(data.getComponent());\r\n        }\r\n        else if (tag === 'td' || tag === 'th')\r\n        {\r\n            return this.setAtNext(node);\r\n        }\r\n        // li\r\n        else if (data.isFirstListItem())\r\n        {\r\n            return this.setAtNext(data.getList());\r\n        }\r\n        // component\r\n        else if (!data.isComponentType('table') && data.isComponent())\r\n        {\r\n            return this.setAtNext(data.getComponent());\r\n        }\r\n        // block\r\n        else if (data.isBlock())\r\n        {\r\n            return this.setAtNext(node);\r\n        }\r\n\r\n        this.editor.focus();\r\n        this.setAtAfter(node);\r\n    },\r\n    _setInline: function(node, type)\r\n    {\r\n        // is first element inline (FF only)\r\n        var inline = this._hasInlineChild(node, (type === 'Start') ? 'first' : 'last');\r\n        if (inline)\r\n        {\r\n            if (type === 'Start')\r\n            {\r\n                this.setStart(inline);\r\n            }\r\n            else\r\n            {\r\n                this.setEnd(inline);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    },\r\n    _isStartOrEnd: function(el, type)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return false;\r\n\r\n        var data = this.inspector.parse(node);\r\n        node = this._getStartEndNode(node, data, type);\r\n\r\n        if (node && (node.nodeType !== 3 && node.tagName !== 'LI'))\r\n        {\r\n            var html = (node.nodeType === 3) ? node.textContent : node.innerHTML;\r\n            html = this.utils.trimSpaces(html);\r\n            if (html === '') return true;\r\n        }\r\n\r\n        if (!data.isFigcaption() && data.isComponent() && !data.isComponentEditable())\r\n        {\r\n            return true;\r\n        }\r\n\r\n        var offset = this.offset.get(node, true);\r\n        if (offset)\r\n        {\r\n            return (type === 'First') ? (offset.start === 0) : (offset.end === this.offset.size(node, true));\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    },\r\n    _isInPage: function(node)\r\n    {\r\n        if (node && node.nodeType)\r\n        {\r\n            return (node === document.body) ? false : document.body.contains(node);\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    },\r\n    _hasInlineChild: function(el, pos)\r\n    {\r\n        var data = this.inspector.parse(el);\r\n        var node = (pos === 'first') ? data.getFirstNode() : data.getLastNode();\r\n        var $node = $R.dom(node);\r\n\r\n        if (node && node.nodeType !== 3\r\n            && this.inspector.isInlineTag(node.tagName)\r\n            && !$node.hasClass('redactor-component')\r\n             && !$node.hasClass('non-editable'))\r\n        {\r\n            return node;\r\n        }\r\n    },\r\n    _isEmptyTextNode: function(node)\r\n    {\r\n        var text = node.textContent.trim().replace(/\\n/, '');\r\n        text = this.utils.removeInvisibleChars(text);\r\n\r\n        return (text === '');\r\n    },\r\n    _getStartEndNode: function(node, data, type)\r\n    {\r\n        if (data.isFigcaption())\r\n        {\r\n            node = data.getFigcaption();\r\n        }\r\n        else if (data.isTable())\r\n        {\r\n            node = data['find' + type + 'Node']('th, td');\r\n        }\r\n        else if (data.isList())\r\n        {\r\n            node = data['find' + type + 'Node']('li');\r\n        }\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            node = data.findLastNode('pre, code');\r\n        }\r\n\r\n        return node;\r\n    }\r\n});\r\nvar containsNode = function containsNode(node) {\r\n    return document.getSelection().containsNode(node, true);\r\n};\r\n\r\nvar containsNodePolyfill = function polyfill(node) {\r\n    var selection = document.getSelection();\r\n    var start = selection.anchorNode.parentNode;\r\n    var finalnode = selection.focusNode.parentNode;\r\n    var rectSelection = selection.getRangeAt(0).getBoundingClientRect();\r\n    var rectBlock = node.getBoundingClientRect();\r\n\r\n    if ($R.dom(start).closest(node).length) {\r\n        return true;\r\n    }\r\n\r\n    if ($R.dom(finalnode).closest(node).length) {\r\n        return true;\r\n    }\r\n\r\n    if (rectSelection.top < rectBlock.top && rectSelection.height > rectBlock.height) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nif (!('containsNode' in Selection.prototype)) {\r\n    containsNode = containsNodePolyfill;\r\n}\r\n\r\n$R.add('service', 'selection', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // is\r\n    is: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel)\r\n        {\r\n            var node = sel.anchorNode;\r\n\r\n            return ($R.dom(node).closest('.redactor-in-' + this.uuid).length !== 0 || node === this.editor.getElement().get());\r\n        }\r\n\r\n        return false;\r\n    },\r\n    isCollapsed: function()\r\n    {\r\n        var sel = this.get();\r\n        var range = this.getRange();\r\n\r\n        if (sel && sel.isCollapsed) return true;\r\n        else if (range && range.toString().length === 0) return true;\r\n\r\n        return false;\r\n    },\r\n    isBackwards: function()\r\n    {\r\n        var backwards = false;\r\n        var sel = this.get();\r\n\r\n        if (sel && !sel.isCollapsed)\r\n        {\r\n            var range = document.createRange();\r\n            range.setStart(sel.anchorNode, sel.anchorOffset);\r\n            range.setEnd(sel.focusNode, sel.focusOffset);\r\n            backwards = range.collapsed;\r\n            range.detach();\r\n        }\r\n\r\n        return backwards;\r\n    },\r\n    isIn: function(el)\r\n    {\r\n        var node = $R.dom(el).get();\r\n        var current = this.getCurrent();\r\n\r\n        return (current && node) ? node.contains(current) : false;\r\n    },\r\n    isText: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel)\r\n        {\r\n            var el = sel.anchorNode;\r\n            var block = this.getBlock(el);\r\n            var blocks = this.getBlocks();\r\n\r\n            // td, th or hasn't block\r\n            if ((block && this.inspector.isTableCellTag(block.tagName)) || (block === false && blocks.length === 0))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    isAll: function(el)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return false;\r\n\r\n        var isEditor = this.editor.isEditor(node);\r\n        var data = this.inspector.parse(node);\r\n\r\n        // component\r\n        if (!data.isFigcaption() && this.component.isNonEditable(node) && this.component.isActive(node))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        if (isEditor)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var output = $editor.html().replace(/<p><\\/p>$/i, '');\r\n            var htmlLen = this.getHtml(false).length;\r\n            var outputLen = output.length;\r\n\r\n            if (htmlLen !== outputLen)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // editor empty or collapsed\r\n        if ((isEditor && this.editor.isEmpty()) || this.isCollapsed())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // all\r\n        var offset = this.offset.get(node, true);\r\n        var size = this.offset.size(node, true);\r\n\r\n        // pre, table, or pre/code in figure\r\n        if (!isEditor && data.isComponentType('code'))\r\n        {\r\n            size = this.getText().trim().length;\r\n        }\r\n\r\n        if (offset && offset.start === 0 && offset.end === size)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    // has\r\n    hasNonEditable: function()\r\n    {\r\n        var selected = this.getHtml();\r\n        var $wrapper = $R.dom('<div>').html(selected);\r\n\r\n        return (!this.isCollapsed() && $wrapper.find('.non-editable').length !== 0);\r\n    },\r\n\r\n    // set\r\n    setRange: function(range)\r\n    {\r\n        var sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    },\r\n    setAll: function(el)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return;\r\n\r\n        var data = this.inspector.parse(node);\r\n\r\n        this.component.clearActive();\r\n\r\n        this.editor.focus();\r\n        this.editor.saveScroll();\r\n        this.editor.disableNonEditables();\r\n\r\n        if (node && node.tagName === 'TABLE')\r\n        {\r\n            var first = data.findFirstNode('td, th');\r\n            var last = data.findLastNode('td, th');\r\n\r\n            $R.dom(first).prepend(this.marker.build('start'));\r\n            $R.dom(last).append(this.marker.build('end'));\r\n\r\n            this.restoreMarkers();\r\n        }\r\n        else if (!data.isFigcaption() && this.component.isNonEditable(node))\r\n        {\r\n            this.component.setActive(node);\r\n        }\r\n        else\r\n        {\r\n            if (data.isComponentType('code'))\r\n            {\r\n                node = data.getComponentCodeElement();\r\n                node.focus();\r\n            }\r\n\r\n            var range = document.createRange();\r\n            range.selectNodeContents(node);\r\n\r\n            this.setRange(range);\r\n        }\r\n\r\n        this.editor.enableNonEditables();\r\n        this.editor.restoreScroll();\r\n    },\r\n\r\n    // get\r\n    get: function()\r\n    {\r\n        var sel = window.getSelection();\r\n        return (sel.rangeCount > 0) ? sel : null;\r\n    },\r\n    getRange: function()\r\n    {\r\n        var sel = this.get();\r\n        return (sel) ? ((sel.getRangeAt(0)) ? sel.getRangeAt(0) : null) : null;\r\n    },\r\n    getTextBeforeCaret: function(num)\r\n    {\r\n        num = (typeof num === 'undefined') ? 1 : num;\r\n\r\n        var el = this.editor.getElement().get();\r\n        var range = this.getRange();\r\n        var text = false;\r\n        if (range)\r\n        {\r\n            range = range.cloneRange();\r\n            range.collapse(true);\r\n            range.setStart(el, 0);\r\n            text = range.toString().slice(-num);\r\n        }\r\n\r\n        return text;\r\n    },\r\n    getTextAfterCaret: function(num)\r\n    {\r\n        num = (typeof num === 'undefined') ? 1 : num;\r\n\r\n        var el = this.editor.getElement().get();\r\n        var range = this.getRange();\r\n        var text = false;\r\n        if (range)\r\n        {\r\n            var clonedRange = range.cloneRange();\r\n            clonedRange.selectNodeContents(el);\r\n            clonedRange.setStart(range.endContainer, range.endOffset);\r\n\r\n            text = clonedRange.toString().slice(0, num);\r\n        }\r\n\r\n        return text;\r\n    },\r\n    getPosition: function()\r\n    {\r\n        var range = this.getRange();\r\n        var pos = { top: 0, left: 0, width: 0, height: 0 };\r\n        if (window.getSelection && range.getBoundingClientRect)\r\n        {\r\n            range = range.cloneRange();\r\n            var offset = (range.startOffset-1);\r\n            range.setStart(range.startContainer, (offset < 0) ? 0 : offset);\r\n            var rect = range.getBoundingClientRect();\r\n            pos = { top: rect.top, left: rect.left, width: (rect.right - rect.left) , height: (rect.bottom - rect.top) };\r\n        }\r\n\r\n        return pos;\r\n    },\r\n    getCurrent: function()\r\n    {\r\n        var node = false;\r\n        var sel = this.get();\r\n        var component = this.component.getActive();\r\n\r\n        if (component)\r\n        {\r\n            node = component;\r\n        }\r\n        else if (sel && this.is())\r\n        {\r\n            node = (sel.anchorNode !== this.editor.getElement().get()) ? sel.anchorNode : false;\r\n        }\r\n\r\n        return node;\r\n    },\r\n    getParent: function()\r\n    {\r\n        var node = false;\r\n        var current = this.getCurrent();\r\n        if (current)\r\n        {\r\n            var parent = current.parentNode;\r\n            node = (parent !== this.editor.getElement().get()) ? parent : false;\r\n        }\r\n\r\n        return node;\r\n    },\r\n    getElement: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        while (node)\r\n        {\r\n            var data = this.inspector.parse(node);\r\n            if (data.isElement() && data.isInEditor())\r\n            {\r\n                return node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getInline: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        var inline = false;\r\n        while (node)\r\n        {\r\n            if (this._isInlineNode(node))\r\n            {\r\n                inline = node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return inline;\r\n    },\r\n    getInlineFirst: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        while (node)\r\n        {\r\n            if (this._isInlineNode(node))\r\n            {\r\n                return node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getInlineAll: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        var inlines = [];\r\n        while (node)\r\n        {\r\n            if (this._isInlineNode(node))\r\n            {\r\n                inlines.push(node);\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return inlines;\r\n    },\r\n    getBlock: function(el)\r\n    {\r\n        var node = el || this.getCurrent();\r\n        while (node)\r\n        {\r\n            var data = this.inspector.parse(node);\r\n            var isBlock = this.inspector.isBlockTag(node.tagName);\r\n\r\n            if (isBlock && data.isInEditor(node))\r\n            {\r\n                return node;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getInlinesAllSelected: function(options)\r\n    {\r\n        if (this.isAll()) return [];\r\n\r\n        var inlines = this.getInlines({ all: true, inside: true });\r\n        //var textNodes = this.getNodes({ textnodes: true, inline: false });\r\n        var selected = this.getText().replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\r\n        var finalNodes = [];\r\n\r\n        //if (textNodes.length !== 0)\r\n        // {\r\n        //     return finalNodes;\r\n        // }\r\n\r\n        if (selected === '')\r\n        {\r\n            finalNodes = inlines;\r\n        }\r\n        else if (inlines.length > 1)\r\n        {\r\n            for (var i = 0; i < inlines.length; i++)\r\n            {\r\n                if (this._isTextSelected(inlines[i], selected))\r\n                {\r\n                    finalNodes.push(inlines[i]);\r\n                }\r\n            }\r\n        }\r\n        else if (inlines.length === 1)\r\n        {\r\n            if (this._isTextSelected(inlines[0], selected))\r\n            {\r\n                finalNodes = inlines;\r\n            }\r\n        }\r\n\r\n        finalNodes = (options && options.tags) ? this._filterNodesByTags(finalNodes, options.tags) : finalNodes;\r\n\r\n        return finalNodes;\r\n    },\r\n    getInlines: function(options)\r\n    {\r\n        var nodes = this.getNodes();\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node;\r\n            if (options && options.all)\r\n            {\r\n                node = nodes[i];\r\n                while (node)\r\n                {\r\n                    if (this._isInlineNode(node) && !this._isInNodesArray(filteredNodes, node))\r\n                    {\r\n                        filteredNodes.push(node);\r\n                    }\r\n\r\n                    node = node.parentNode;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                node = this.getInline(nodes[i]);\r\n                if (node && !this._isInNodesArray(filteredNodes, node))\r\n                {\r\n                    filteredNodes.push(node);\r\n                }\r\n            }\r\n        }\r\n\r\n        // filter\r\n        filteredNodes = (options && options.tags) ? this._filterNodesByTags(filteredNodes, options.tags) : filteredNodes;\r\n        filteredNodes = (options && options.inside) ? this._filterInlinesInside(filteredNodes, options) : filteredNodes;\r\n\r\n        return filteredNodes;\r\n    },\r\n    getBlocks: function(options)\r\n    {\r\n        var nodes = this.getNodes();\r\n        var block = this.getBlock();\r\n        nodes = (nodes.length === 0 && block) ? [block] : nodes;\r\n\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = this.getBlock(nodes[i]);\r\n            var $node = $R.dom(node);\r\n            if ($node.hasClass('non-editable')) continue;\r\n\r\n            if (node && !this._isInNodesArray(filteredNodes, node))\r\n            {\r\n                filteredNodes.push(node);\r\n            }\r\n        }\r\n\r\n        // filter\r\n        filteredNodes = (options && options.tags) ? this._filterNodesByTags(filteredNodes, options.tags) : filteredNodes;\r\n        filteredNodes = (options && options.first) ? this._filterBlocksFirst(filteredNodes, options) : filteredNodes;\r\n\r\n        return filteredNodes;\r\n    },\r\n    getElements: function(options)\r\n    {\r\n        var nodes = this.getNodes({ textnodes: false });\r\n        var block = this.getBlock();\r\n        nodes = (nodes.length === 0 && block) ? [block] : nodes;\r\n\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (!this._isInNodesArray(filteredNodes, nodes[i]))\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        // filter\r\n        filteredNodes = (options && options.tags) ? this._filterNodesByTags(filteredNodes, options.tags) : filteredNodes;\r\n\r\n        return filteredNodes;\r\n    },\r\n    getNodes: function(options)\r\n    {\r\n        var nodes = [];\r\n        var activeComponent = this.component.getActive();\r\n        if (activeComponent)\r\n        {\r\n            nodes = this._getNodesComponent(activeComponent);\r\n        }\r\n        else if (this.isCollapsed())\r\n        {\r\n            var current = this.getCurrent();\r\n            nodes = (current) ? [current] : [];\r\n        }\r\n        else if (this.is() && !activeComponent)\r\n        {\r\n            nodes = this._getRangeSelectedNodes();\r\n        }\r\n\r\n        // filter\r\n        nodes = this._filterServicesNodes(nodes);\r\n        nodes = this._filterEditor(nodes);\r\n\r\n        // options\r\n        nodes = (options && options.tags) ? this._filterNodesByTags(nodes, options.tags) : nodes;\r\n        nodes = (options && options.textnodes) ? this._filterNodesTexts(nodes, options) : nodes;\r\n        nodes = (options && !options.textnodes) ? this._filterNodesElements(nodes) : nodes;\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // text & html\r\n    getText: function()\r\n    {\r\n        var sel = this.get();\r\n        return (sel) ? this.utils.removeInvisibleChars(sel.toString()) : '';\r\n    },\r\n    getHtml: function(clean)\r\n    {\r\n        var html = '';\r\n        var sel = this.get();\r\n        if (sel)\r\n        {\r\n            var container = document.createElement('div');\r\n            var len = sel.rangeCount;\r\n            for (var i = 0; i < len; ++i)\r\n            {\r\n                container.appendChild(sel.getRangeAt(i).cloneContents());\r\n            }\r\n\r\n            html = container.innerHTML;\r\n            html = (clean !== false) ? this.cleaner.output(html) : html;\r\n            html = html.replace(/<p><\\/p>$/i, '');\r\n        }\r\n\r\n        return html;\r\n    },\r\n\r\n    // clear\r\n    clear: function()\r\n    {\r\n        this.component.clearActive();\r\n        this.get().removeAllRanges();\r\n    },\r\n\r\n    // collapse\r\n    collapseToStart: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel && !sel.isCollapsed) sel.collapseToStart();\r\n    },\r\n    collapseToEnd: function()\r\n    {\r\n        var sel = this.get();\r\n        if (sel && !sel.isCollapsed) sel.collapseToEnd();\r\n    },\r\n\r\n    // save\r\n    saveActiveComponent: function()\r\n    {\r\n        var activeComponent = this.component.getActive();\r\n        if (activeComponent)\r\n        {\r\n            this.savedComponent = activeComponent;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    restoreActiveComponent: function()\r\n    {\r\n        if (this.savedComponent)\r\n        {\r\n            this.component.setActive(this.savedComponent);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    save: function()\r\n    {\r\n        this._clearSaved();\r\n\r\n        var el = this.getElement();\r\n        var tags = ['TD', 'TH', 'P', 'DIV', 'PRE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'LI', 'BLOCKQUOTE'];\r\n        if (el && (tags.indexOf(el.tagName) !== -1) && (el.innerHTML === '' || el.innerHTML === '<br>'))\r\n        {\r\n            this.savedElement = el;\r\n        }\r\n        else if (!this.saveActiveComponent())\r\n        {\r\n            this.saved = this.offset.get();\r\n        }\r\n    },\r\n    restore: function()\r\n    {\r\n        if (!this.saved && !this.savedComponent && !this.savedElement) return;\r\n\r\n        this.editor.saveScroll();\r\n\r\n        if (this.savedElement)\r\n        {\r\n            this.caret.setStart(this.savedElement);\r\n        }\r\n        else if (!this.restoreActiveComponent())\r\n        {\r\n            this.offset.set(this.saved);\r\n        }\r\n\r\n        this._clearSaved();\r\n        this.editor.restoreScroll();\r\n    },\r\n    saveMarkers: function()\r\n    {\r\n        this._clearSaved();\r\n\r\n        if (!this.saveActiveComponent())\r\n        {\r\n            this.marker.insert();\r\n        }\r\n    },\r\n    restoreMarkers: function()\r\n    {\r\n        this.editor.saveScroll();\r\n\r\n        if (!this.restoreActiveComponent())\r\n        {\r\n            this.marker.restore();\r\n        }\r\n\r\n        this._clearSaved();\r\n        this.editor.restoreScroll();\r\n    },\r\n\r\n    // private\r\n    _getNextNode: function(node)\r\n    {\r\n        if (node.hasChildNodes()) return node.firstChild;\r\n\r\n        while (node && !node.nextSibling)\r\n        {\r\n            node = node.parentNode;\r\n        }\r\n\r\n        if (!node) return null;\r\n\r\n        return node.nextSibling;\r\n    },\r\n    _getNodesComponent: function(component)\r\n    {\r\n        var current = this.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        return (data.isFigcaption()) ? [data.getFigcaption()] : [component];\r\n    },\r\n    _getRangeSelectedNodes: function()\r\n    {\r\n        var nodes = [];\r\n        var range = this.getRange();\r\n        var node = range.startContainer;\r\n        var startNode = range.startContainer;\r\n        var endNode = range.endContainer;\r\n        var $editor = this.editor.getElement();\r\n\r\n        // editor\r\n        if (startNode === $editor.get() && this.isAll())\r\n        {\r\n            nodes = this.utils.getChildNodes($editor);\r\n        }\r\n        // single node\r\n        else if (node === endNode)\r\n        {\r\n            nodes = [node];\r\n        }\r\n        else\r\n        {\r\n            while (node && node !== endNode)\r\n            {\r\n                nodes.push(node = this._getNextNode(node));\r\n            }\r\n\r\n            node = range.startContainer;\r\n            while (node && node !== range.commonAncestorContainer)\r\n            {\r\n                nodes.unshift(node);\r\n                node = node.parentNode;\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _isInNodesArray: function(nodes, node)\r\n    {\r\n        return (nodes.indexOf(node) !== -1);\r\n    },\r\n    _filterEditor: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var data = this.inspector.parse(nodes[i]);\r\n            if (data.isInEditor())\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterServicesNodes: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $el = $R.dom(nodes[i]);\r\n            var skip = false;\r\n\r\n            if (nodes[i] && nodes[i].nodeType === 3 && this.utils.isEmpty(nodes[i])) skip = true;\r\n            if ($el.hasClass('redactor-script-tag')\r\n                || $el.hasClass('redactor-component-caret')\r\n                || $el.hasClass('redactor-selection-marker')\r\n                || $el.hasClass('non-editable')) skip = true;\r\n\r\n            if (!skip)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterNodesTexts: function(nodes, options)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (nodes[i].nodeType === 3 || (options.keepbr && nodes[i].tagName === 'BR'))\r\n            {\r\n                var inline = this.getInline(nodes[i]);\r\n                var isInline = (inline && options && options.inline === false);\r\n                if (!isInline)\r\n                {\r\n                    filteredNodes.push(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterNodesElements: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (nodes[i].nodeType !== 3)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterNodesByTags: function(nodes, tags, passtexts)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (passtexts && nodes[i].nodeType === 3)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n            else if (nodes[i].nodeType !== 3)\r\n            {\r\n                var nodeTag = nodes[i].tagName.toLowerCase();\r\n                if (tags.indexOf(nodeTag.toLowerCase()) !== -1)\r\n                {\r\n                    filteredNodes.push(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterBlocksFirst: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $node = $R.dom(nodes[i]);\r\n            var parent = $node.parent().get();\r\n            var isFirst = ($node.parent().hasClass('redactor-in'));\r\n            var isCellParent = (parent && (parent.tagName === 'TD' || parent.tagName === 'TH'));\r\n            if (isFirst || isCellParent)\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _filterInlinesInside: function(nodes)\r\n    {\r\n        var filteredNodes = [];\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (containsNode(nodes[i], true))\r\n            {\r\n                filteredNodes.push(nodes[i]);\r\n            }\r\n        }\r\n\r\n        return filteredNodes;\r\n    },\r\n    _isTextSelected: function(node, selected) {\r\n        var text = (node.nodeType !== 9) ? this.utils.removeInvisibleChars(node.textContent) : '';\r\n\r\n        return (\r\n            selected === text\r\n            || text.search(selected) !== -1\r\n            || selected.search(new RegExp('^' + this.utils.escapeRegExp(text) + '$')) !== -1\r\n        );\r\n    },\r\n    _isInlineNode: function(node)\r\n    {\r\n        var data = this.inspector.parse(node);\r\n\r\n        return (this.inspector.isInlineTag(node.tagName) && data.isInEditor());\r\n    },\r\n    _clearSaved: function()\r\n    {\r\n        this.saved = false;\r\n        this.savedComponent = false;\r\n        this.savedElement = false;\r\n    }\r\n});\r\n$R.add('service', 'element', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.rootElement = app.rootElement;\r\n\r\n        // local\r\n        this.$element = {};\r\n        this.type = 'inline';\r\n    },\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildType();\r\n    },\r\n\r\n    // public\r\n    isType: function(type)\r\n    {\r\n        return (type === this.type);\r\n    },\r\n    getType: function()\r\n    {\r\n        return this.type;\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$element;\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.$element = $R.dom(this.rootElement);\r\n    },\r\n    _buildType: function()\r\n    {\r\n        var tag = this.$element.get().tagName;\r\n\r\n        this.type = (tag === 'TEXTAREA') ? 'textarea' : this.type;\r\n        this.type = (tag === 'DIV') ? 'div' : this.type;\r\n        this.type = (this.opts.inline) ? 'inline' : this.type;\r\n    }\r\n});\r\n$R.add('service', 'editor', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.scrolltop = false;\r\n        this.pasting = false;\r\n    },\r\n\r\n    // start\r\n    start: function()\r\n    {\r\n        this._build();\r\n    },\r\n\r\n    // focus\r\n    focus: function()\r\n    {\r\n        if (!this.isFocus() && !this._isContenteditableFocus())\r\n        {\r\n            this.saveScroll();\r\n            this.$editor.focus();\r\n            this.restoreScroll();\r\n        }\r\n    },\r\n    startFocus: function()\r\n    {\r\n        this.caret.setStart(this.getFirstNode());\r\n    },\r\n    endFocus: function()\r\n    {\r\n        this.caret.setEnd(this.getLastNode());\r\n    },\r\n\r\n    // pasting\r\n    isPasting: function()\r\n    {\r\n        return this.pasting;\r\n    },\r\n    enablePasting: function()\r\n    {\r\n        this.pasting = true;\r\n    },\r\n    disablePasting: function()\r\n    {\r\n        this.pasting = false;\r\n    },\r\n\r\n    // scroll\r\n    saveScroll: function()\r\n    {\r\n        this.scrolltop = this._getScrollTarget().scrollTop();\r\n        if (this.opts.maxHeight) {\r\n            this.scrolltopin = this.$editor.scrollTop();\r\n        }\r\n\r\n    },\r\n    restoreScroll: function()\r\n    {\r\n        if (this.scrolltop !== false)\r\n        {\r\n            this._getScrollTarget().scrollTop(this.scrolltop);\r\n            this.scrolltop = false;\r\n        }\r\n\r\n        if (this.scrolltopin) {\r\n            this.$editor.scrollTop(this.scrolltopin);\r\n            this.scrolltopin = false;\r\n        }\r\n    },\r\n\r\n    // non editables\r\n    disableNonEditables: function()\r\n    {\r\n        this.$noneditables = this.$editor.find('[contenteditable=false]');\r\n        this.$noneditables.attr('contenteditable', true);\r\n    },\r\n    enableNonEditables: function()\r\n    {\r\n        if (this.$noneditables)\r\n        {\r\n            setTimeout(function() { this.$noneditables.attr('contenteditable', false); }.bind(this), 1);\r\n        }\r\n    },\r\n\r\n    // nodes\r\n    getFirstNode: function()\r\n    {\r\n        return this.$editor.contents()[0];\r\n    },\r\n    getLastNode: function()\r\n    {\r\n        var nodes = this.$editor.contents();\r\n\r\n        return nodes[nodes.length-1];\r\n    },\r\n\r\n    // utils\r\n    isSourceMode: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n\r\n        return $source.hasClass('redactor-source-open');\r\n    },\r\n    isEditor: function(el)\r\n    {\r\n        var node = $R.dom(el).get();\r\n\r\n        return (node === this.$editor.get());\r\n    },\r\n    isEmpty: function(keeplists)\r\n    {\r\n        return this.utils.isEmptyHtml(this.$editor.html(), false, keeplists);\r\n    },\r\n    isFocus: function()\r\n    {\r\n        var $active = $R.dom(document.activeElement);\r\n        var isComponentSelected = (this.$editor.find('.redactor-component-active').length !== 0);\r\n\r\n        return (isComponentSelected || $active.closest('.redactor-in-' + this.uuid).length !== 0);\r\n    },\r\n    setEmpty: function()\r\n    {\r\n        this.$editor.html(this.opts.emptyHtml);\r\n    },\r\n\r\n    // element\r\n    getElement: function()\r\n    {\r\n        return this.$editor;\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var editableElement = (this.element.isType('textarea')) ? '<div>' : $element.get();\r\n\r\n        this.$editor = $R.dom(editableElement);\r\n    },\r\n    _getScrollTarget: function()\r\n    {\r\n        var $target = this.$doc;\r\n        if (this.opts.toolbarFixedTarget !== document)\r\n        {\r\n            $target = $R.dom(this.opts.toolbarFixedTarget);\r\n        }\r\n        else\r\n        {\r\n            $target = (this.opts.scrollTarget) ? $R.dom(this.opts.scrollTarget) : $target;\r\n        }\r\n\r\n        return $target;\r\n    },\r\n    _isContenteditableFocus: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var $blockParent = (block) ? $R.dom(block).closest('[contenteditable=true]').not('.redactor-in') : [];\r\n\r\n        return ($blockParent.length !== 0);\r\n    }\r\n});\r\n$R.add('service', 'container', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$container;\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var tag = (this.element.isType('inline')) ? '<span>' : '<div>';\r\n        this.$container = $R.dom(tag);\r\n    }\r\n});\r\n$R.add('service', 'source', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.$source = {};\r\n        this.content = '';\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildName();\r\n        this._buildStartedContent();\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$source;\r\n    },\r\n    getCode: function()\r\n    {\r\n        return this.$source.val();\r\n    },\r\n    getName: function()\r\n    {\r\n        return this.$source.attr('name');\r\n    },\r\n    getStartedContent: function()\r\n    {\r\n        return this.content;\r\n    },\r\n    setCode: function(html)\r\n    {\r\n        return this.insertion.set(html, true, false);\r\n    },\r\n    isNameGenerated: function()\r\n    {\r\n        return (this.name);\r\n    },\r\n    rebuildStartedContent: function()\r\n    {\r\n        this._buildStartedContent();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var isTextarea = this.element.isType('textarea');\r\n        var sourceElement = (isTextarea) ? $element.get() : '<textarea>';\r\n\r\n        this.$source = $R.dom(sourceElement);\r\n    },\r\n    _buildName: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n\r\n        this.name = $element.attr('name');\r\n        this.$source.attr('name', (this.name) ? this.name : 'content-' + this.uuid);\r\n    },\r\n    _buildStartedContent: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var content = (this.element.isType('textarea')) ? $element.val() : $element.html();\r\n\r\n        this.content = content.trim();\r\n    }\r\n});\r\n$R.add('service', 'statusbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.$statusbar = {};\r\n        this.items = [];\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this.$statusbar = $R.dom('<ul>');\r\n        this.$statusbar.attr('dir', this.opts.direction);\r\n    },\r\n    add: function(name, html)\r\n    {\r\n        return this.update(name, html);\r\n    },\r\n    update: function(name, html)\r\n    {\r\n        var $item;\r\n        if (typeof this.items[name] !== 'undefined')\r\n        {\r\n            $item = this.items[name];\r\n        }\r\n        else\r\n        {\r\n            $item = $R.dom('<li>');\r\n            this.$statusbar.append($item);\r\n            this.items[name] = $item;\r\n        }\r\n\r\n        return $item.html(html);\r\n    },\r\n    get: function(name)\r\n    {\r\n        return (this.items[name]) ? this.items[name] : false;\r\n    },\r\n    remove: function(name)\r\n    {\r\n        if (this.items[name])\r\n        {\r\n            this.items[name].remove();\r\n            delete this.items[name];\r\n        }\r\n    },\r\n    getItems: function()\r\n    {\r\n        return this.items;\r\n    },\r\n    removeItems: function()\r\n    {\r\n        this.items = {};\r\n        this.$statusbar.html('');\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$statusbar;\r\n    }\r\n});\r\n$R.add('service', 'toolbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.buttons = [];\r\n        this.dropdownOpened = false;\r\n        this.buttonsObservers = {};\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        if (this.is())\r\n        {\r\n            this.opts.activeButtons = (this.opts.activeButtonsAdd) ? this._extendActiveButtons() : this.opts.activeButtons;\r\n            this.create();\r\n        }\r\n    },\r\n    stopObservers: function()\r\n    {\r\n        this.buttonsObservers = {};\r\n    },\r\n    create: function()\r\n    {\r\n        this.$wrapper = $R.dom('<div>');\r\n        this.$toolbar = $R.dom('<div>');\r\n    },\r\n    observe: function()\r\n    {\r\n        if (!this.is()) return;\r\n\r\n        this.setButtonsInactive();\r\n\r\n        var button, observer;\r\n\r\n        // observers\r\n        for (var name in this.buttonsObservers)\r\n        {\r\n            observer = this.buttonsObservers[name];\r\n            button = this.getButton(name);\r\n            this.app.broadcast('button.' + observer + '.observe', button);\r\n        }\r\n\r\n        // inline buttons\r\n        var buttons = this.opts.activeButtons;\r\n        var inlines = this.selection.getInlinesAllSelected();\r\n        var current = this.selection.getInline();\r\n        var currents = this.selection.getInlineAll();\r\n\r\n        if (this.selection.isCollapsed())\r\n        {\r\n            if (current) inlines.push(current);\r\n            if (currents.length !== 0) {\r\n                inlines = inlines.concat(currents);\r\n            }\r\n        }\r\n\r\n        var tags = this._inlinesToTags(inlines);\r\n        for (var key in buttons)\r\n        {\r\n            if (tags.indexOf(key) !== -1)\r\n            {\r\n                button = this.getButton(buttons[key]);\r\n                if (button) {\r\n                    button.setActive();\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    // is\r\n    is: function()\r\n    {\r\n        return !(!this.opts.toolbar || (this.detector.isMobile() && this.opts.air));\r\n    },\r\n    isAir: function()\r\n    {\r\n        return (this.is()) ? this.$toolbar.hasClass('redactor-air') : false;\r\n    },\r\n    isFixed: function()\r\n    {\r\n        return (this.is()) ? this.$toolbar.hasClass('redactor-toolbar-fixed') : false;\r\n    },\r\n    isContextBar: function()\r\n    {\r\n        var $bar = this.$body.find('#redactor-context-toolbar-' + this.uuid);\r\n        return $bar.hasClass('open');\r\n    },\r\n    isTarget: function()\r\n    {\r\n        return (this.opts.toolbarFixedTarget !== document);\r\n    },\r\n\r\n    // get\r\n    getElement: function()\r\n    {\r\n        return this.$toolbar;\r\n    },\r\n    getWrapper: function()\r\n    {\r\n        return this.$wrapper;\r\n    },\r\n    getDropdown: function()\r\n    {\r\n        return this.dropdownOpened;\r\n    },\r\n    getTargetElement: function()\r\n    {\r\n        return $R.dom(this.opts.toolbarFixedTarget);\r\n    },\r\n    getButton: function(name)\r\n    {\r\n        var $btn = this._findButton('.re-' + name);\r\n\r\n        return ($btn.length !== 0) ? $btn.dataget('data-button-instance') : false;\r\n    },\r\n    getButtons: function()\r\n    {\r\n        var buttons = [];\r\n        this._findButtons().each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            buttons.push($node.dataget('data-button-instance'));\r\n        });\r\n\r\n        return buttons;\r\n    },\r\n    getButtonsKeys: function()\r\n    {\r\n        var keys = [];\r\n        this._findButtons().each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            keys.push($node.attr('data-re-name'));\r\n        });\r\n\r\n        return keys;\r\n    },\r\n\r\n    // add\r\n    addButton: function(name, btnObj, position, $el, start)\r\n    {\r\n        position = position || 'end';\r\n\r\n        var $button = $R.create('toolbar.button', this.app, name, btnObj);\r\n        if (btnObj.observe)\r\n        {\r\n            this.opts.activeButtonsObservers[name] = { observe: btnObj.observe, button: $button };\r\n        }\r\n\r\n        if (this.is())\r\n        {\r\n            if (position === 'first') this.$toolbar.prepend($button);\r\n            else if (position === 'after') $el.after($button);\r\n            else if (position === 'before') $el.before($button);\r\n            else {\r\n                var index = this.opts.buttons.indexOf(name);\r\n                if (start !== true && index !== -1) {\r\n                    if (index === 0) {\r\n                        this.$toolbar.prepend($button);\r\n                    }\r\n                    else {\r\n                        var $btns = this._findButtons();\r\n                        var $btn = $btns.eq(index-1);\r\n                        if ($btn.length > 0) {\r\n                            $btn.after($button);\r\n                        }\r\n                        else {\r\n                            this.$toolbar.append($button);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.$toolbar.append($button);\r\n                }\r\n            }\r\n        }\r\n\r\n        return $button;\r\n    },\r\n    addButtonFirst: function(name, btnObj)\r\n    {\r\n        return this.addButton(name, btnObj, 'first');\r\n    },\r\n    addButtonAfter: function(after, name, btnObj)\r\n    {\r\n        var $btn = this.getButton(after);\r\n\r\n        return ($btn) ? this.addButton(name, btnObj, 'after', $btn) : this.addButton(name, btnObj);\r\n    },\r\n    addButtonBefore: function(before, name, btnObj)\r\n    {\r\n        var $btn = this.getButton(before);\r\n\r\n        return ($btn) ? this.addButton(name, btnObj, 'before', $btn) : this.addButton(name, btnObj);\r\n    },\r\n    addButtonObserver: function(name, observer)\r\n    {\r\n        this.buttonsObservers[name] = observer;\r\n    },\r\n\r\n    // set\r\n    setButtons: function(buttons)\r\n    {\r\n        this.buttons = buttons;\r\n    },\r\n    setDropdown: function(dropdown)\r\n    {\r\n        this.dropdownOpened = dropdown;\r\n    },\r\n    setButtonsInactive: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].setInactive();\r\n        }\r\n    },\r\n    setButtonsActive: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].setActive();\r\n        }\r\n    },\r\n\r\n    // disable & enable\r\n    disableButtons: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].disable();\r\n        }\r\n    },\r\n    enableButtons: function()\r\n    {\r\n        var $buttons = this.getButtons();\r\n        for (var i = 0; i < $buttons.length; i++)\r\n        {\r\n            $buttons[i].enable();\r\n        }\r\n\r\n    },\r\n\r\n    // private\r\n    _findButton: function(selector)\r\n    {\r\n        return (this.is()) ? this.$toolbar.find(selector) : $R.dom();\r\n    },\r\n    _findButtons: function()\r\n    {\r\n        return (this.is()) ? this.$toolbar.find('.re-button') : $R.dom();\r\n    },\r\n    _extendActiveButtons: function()\r\n    {\r\n        return $R.extend({}, this.opts.activeButtons, this.opts.activeButtonsAdd);\r\n    },\r\n    _inlinesToTags: function(inlines)\r\n    {\r\n        var tags = [];\r\n        for (var i = 0; i < inlines.length; i++)\r\n        {\r\n            tags.push(inlines[i].tagName.toLowerCase());\r\n        }\r\n\r\n        return tags;\r\n    }\r\n});\r\n$R.add('class', 'toolbar.button', {\r\n    mixins: ['dom'],\r\n    init: function(app, name, btnObj)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.$body = app.$body;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n\r\n        // local\r\n        this.obj = btnObj;\r\n        this.name = name;\r\n        this.dropdown = false;\r\n        this.tooltip = false;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // is\r\n    isActive: function()\r\n    {\r\n        return this.hasClass('redactor-button-active');\r\n    },\r\n    isDisabled: function()\r\n    {\r\n        return this.hasClass('redactor-button-disabled');\r\n    },\r\n\r\n    // has\r\n    hasIcon: function()\r\n    {\r\n        return (this.obj.icon && !this.opts.buttonsTextLabeled);\r\n    },\r\n\r\n    // set\r\n    setDropdown: function(dropdown)\r\n    {\r\n        this.obj.dropdown = dropdown;\r\n        this.obj.message = false;\r\n        this.dropdown = $R.create('toolbar.dropdown', this.app, this.name, this.obj.dropdown);\r\n        this.attr('data-dropdown', true);\r\n    },\r\n    setMessage: function(message, args)\r\n    {\r\n        this.obj.message = message;\r\n        this.obj.args = args;\r\n        this.obj.dropdown = false;\r\n    },\r\n    setApi: function(api, args)\r\n    {\r\n        this.obj.api = api;\r\n        this.obj.args = args;\r\n        this.obj.dropdown = false;\r\n    },\r\n    setTitle: function(title)\r\n    {\r\n        this.obj.title = this.lang.parse(title);\r\n        this.obj.tooltip = this.obj.title;\r\n\r\n        this.attr({ 'alt': this.obj.tooltip, 'aria-label': this.obj.tooltip });\r\n        if (!this.attr('data-re-icon')) this.html(this.obj.title);\r\n    },\r\n    setTooltip: function(tooltip)\r\n    {\r\n        this.obj.tooltip = this.lang.parse(tooltip);\r\n        this.attr({ 'alt': this.obj.tooltip, 'aria-label': this.obj.tooltip });\r\n    },\r\n    setIcon: function(icon)\r\n    {\r\n        if (this.opts.buttonsTextLabeled) return;\r\n\r\n        this.obj.icon = true;\r\n        this.$icon = $R.dom(icon);\r\n\r\n        this.html('');\r\n        this.append(this.$icon);\r\n        this.attr('data-re-icon', true);\r\n        this.addClass('re-button-icon');\r\n        this.setTooltip(this.obj.title);\r\n        this._buildTooltip();\r\n    },\r\n    setActive: function()\r\n    {\r\n        this.addClass('redactor-button-active');\r\n    },\r\n    setInactive: function()\r\n    {\r\n        this.removeClass('redactor-button-active');\r\n    },\r\n\r\n    // hide\r\n    hideTooltip: function()\r\n    {\r\n        this.$body.find('.re-button-tooltip').remove();\r\n    },\r\n\r\n    // get\r\n    getDropdown: function()\r\n    {\r\n        return this.dropdown;\r\n    },\r\n\r\n    // enable & disable\r\n    disable: function()\r\n    {\r\n        this.addClass('redactor-button-disabled');\r\n    },\r\n    enable: function()\r\n    {\r\n        this.removeClass('redactor-button-disabled');\r\n    },\r\n\r\n    // toggle\r\n    toggle: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n        if (this.isDisabled()) return;\r\n\r\n        if (this.obj.dropdown)\r\n        {\r\n            this.dropdown.toggle(e);\r\n        }\r\n        else if (this.obj.api)\r\n        {\r\n            // broadcast\r\n            this.app.api(this.obj.api, this.obj.args, this.name);\r\n        }\r\n        else if (this.obj.message)\r\n        {\r\n            // broadcast\r\n            this.app.broadcast(this.obj.message, this.obj.args, this.name);\r\n        }\r\n\r\n        this.hideTooltip();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        // parse\r\n        this._parseTitle();\r\n        this._parseTooltip();\r\n\r\n        // build\r\n        this._build();\r\n        this._buildCallback();\r\n        this._buildAttributes();\r\n        this._buildObserver();\r\n\r\n        if (this.hasIcon())\r\n        {\r\n            this._buildIcon();\r\n            this._buildTooltip();\r\n        }\r\n        else\r\n        {\r\n            this.html(this.obj.title);\r\n        }\r\n    },\r\n    _parseTooltip: function()\r\n    {\r\n        this.obj.tooltip = (this.obj.tooltip) ? this.lang.parse(this.obj.tooltip) : this.obj.title;\r\n    },\r\n    _parseTitle: function()\r\n    {\r\n        this.obj.title = this.lang.parse(this.obj.title);\r\n    },\r\n    _build: function()\r\n    {\r\n        this.parse('<a>');\r\n        this.addClass('re-button re-' + this.name);\r\n        this.attr('data-re-name', this.name);\r\n        this.dataset('data-button-instance', this);\r\n\r\n        if (this.obj.dropdown) this.setDropdown(this.obj.dropdown);\r\n    },\r\n    _buildCallback: function()\r\n    {\r\n        this.on('click', this.toggle.bind(this));\r\n    },\r\n    _buildAttributes: function()\r\n    {\r\n        var attrs = {\r\n            'href': '#',\r\n            'alt': this.obj.tooltip,\r\n            'rel': this.name,\r\n            'role': 'button',\r\n            'aria-label': this.obj.tooltip,\r\n            'tabindex': '-1'\r\n        };\r\n\r\n        this.attr(attrs);\r\n    },\r\n    _buildObserver: function()\r\n    {\r\n        if (typeof this.obj.observe !== 'undefined')\r\n        {\r\n            this.toolbar.addButtonObserver(this.name, this.obj.observe);\r\n        }\r\n    },\r\n    _buildIcon: function()\r\n    {\r\n        var icon = this.obj.icon;\r\n        var isHtml = (/(<([^>]+)>)/ig.test(icon));\r\n\r\n        this.$icon = (isHtml) ? $R.dom(icon) : $R.dom('<i>');\r\n        if (!isHtml) this.$icon.addClass('re-icon-' + this.name);\r\n\r\n        this.append(this.$icon);\r\n        this.attr('data-re-icon', true);\r\n        this.addClass('re-button-icon');\r\n    },\r\n    _buildTooltip: function()\r\n    {\r\n        if (this.detector.isDesktop())\r\n        {\r\n            this.tooltip = $R.create('toolbar.button.tooltip', this.app, this);\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.button.tooltip', {\r\n    mixins: ['dom'],\r\n    init: function(app, $button)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.$body = app.$body;\r\n        this.toolbar = app.toolbar;\r\n\r\n        // local\r\n        this.$button = $button;\r\n        this.created = false;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    open: function()\r\n    {\r\n        if (this.$button.hasClass('redactor-button-disabled') || this.$button.hasClass('redactor-button-active')) return;\r\n\r\n        this.created = true;\r\n        this.parse('<span>');\r\n        this.addClass('re-button-tooltip re-button-tooltip-' + this.uuid);\r\n        this.$body.append(this);\r\n        this.html(this.$button.attr('alt'));\r\n\r\n        var offset = this.$button.offset();\r\n        var position = 'absolute';\r\n        var height = this.$button.height();\r\n        var width = this.$button.width();\r\n        var arrowOffset = 4;\r\n\r\n        this.css({\r\n            top: (offset.top + height + arrowOffset) + 'px',\r\n            left: (offset.left + width/2 - this.width()/2) + 'px',\r\n            position: position\r\n        });\r\n\r\n        this.show();\r\n    },\r\n    close: function()\r\n    {\r\n        if (!this.created || this.$button.hasClass('redactor-button-disabled')) return;\r\n\r\n        this.remove();\r\n        this.created = false;\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.$button.on('mouseover', this.open.bind(this));\r\n        this.$button.on('mouseout', this.close.bind(this));\r\n    }\r\n});\r\n$R.add('class', 'toolbar.dropdown', {\r\n    mixins: ['dom'],\r\n    init: function(app, name, items)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.$win = app.$win;\r\n        this.$doc = app.$doc;\r\n        this.$body = app.$body;\r\n        this.animate = app.animate;\r\n        this.toolbar = app.toolbar;\r\n\r\n        // local\r\n        this.name = name;\r\n        this.started = false;\r\n        this.items = (name === 'format') ? $R.extend({}, true, items) : items;\r\n        this.$items = [];\r\n    },\r\n    // public\r\n    toggle: function(e)\r\n    {\r\n        if (!this.started)\r\n        {\r\n            this._build();\r\n        }\r\n\r\n        // toggle\r\n        if (this.isOpened() && this.isActive())\r\n        {\r\n            this.close(false);\r\n        }\r\n        else\r\n        {\r\n            this.open(e);\r\n        }\r\n    },\r\n    isOpened: function()\r\n    {\r\n        var $dropdown = this.$body.find('.redactor-dropdown-' + this.uuid + '.open');\r\n\r\n        return ($dropdown.length !== 0 && $dropdown.attr('data-re-name') === this.name);\r\n    },\r\n    isActive: function()\r\n    {\r\n        var $dropdown = this.$body.find('#redactor-dropdown-' + this.uuid + '-' + this.name + '.open');\r\n        return ($dropdown.length !== 0);\r\n    },\r\n    getName: function()\r\n    {\r\n        return this.attr('data-re-name');\r\n    },\r\n    getItem: function(name)\r\n    {\r\n        return this.$items[name];\r\n    },\r\n    getItemsByClass: function(classname)\r\n    {\r\n        var result = [];\r\n        for (var key in this.$items) {\r\n            var item = this.$items[key];\r\n            if (typeof item === 'object' && item.attr('data-re-name') && item.hasClass(classname)) {\r\n                result.push(item);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n    open: function(e)\r\n    {\r\n        this._closeAll();\r\n\r\n        this.$btn = this.toolbar.getButton(this.name);\r\n        this.app.broadcast('dropdown.open', e, this, this.$btn);\r\n        this.toolbar.setDropdown(this);\r\n\r\n        this.show();\r\n        this.removeClass('redactor-animate-hide');\r\n        this.addClass('open');\r\n        this._observe();\r\n\r\n        this.$btn.hideTooltip();\r\n        this.$btn.setActive();\r\n\r\n        this.$doc.on('keyup.redactor.dropdown-' + this.uuid, this._handleKeyboard.bind(this));\r\n        this.$doc.on('click.redactor.dropdown-' + this.uuid, this.close.bind(this));\r\n\r\n        this.updatePosition();\r\n        this.app.broadcast('dropdown.opened', e, this, this.$btn);\r\n\r\n    },\r\n    close: function(e, animate)\r\n    {\r\n        if (e)\r\n        {\r\n            var $el = $R.dom(e.target);\r\n            if (this._isButton(e) || $el.hasClass('redactor-dropdown-not-close') || $el.hasClass('redactor-dropdown-item-disabled'))\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.app.broadcast('dropdown.close', this, this.$btn);\r\n        this.toolbar.setDropdown(false);\r\n\r\n        this.$btn.setInactive();\r\n        if (animate === false)\r\n        {\r\n            this._close();\r\n        }\r\n        else\r\n        {\r\n            this.animate.start(this, 'fadeOut', this._close.bind(this));\r\n        }\r\n    },\r\n    updatePosition: function()\r\n    {\r\n        var isFixed = this.toolbar.isFixed();\r\n        var isTarget = this.toolbar.isTarget();\r\n\r\n        var btnHeight = this.$btn.height();\r\n        var btnWidth = this.$btn.width();\r\n\r\n        var pos = this.$btn.offset();\r\n        var position = 'absolute';\r\n        var topOffset = 2;\r\n\r\n\r\n        if (isFixed) {\r\n            //pos.top = (isTarget) ? this.$btn.offset().top : this.$btn.position().top;\r\n            //position = 'fixed';\r\n            //topOffset = topOffset + this.opts.toolbarFixedTopOffset;\r\n        }\r\n\r\n        var leftOffset = 0;\r\n        var left = (pos.left + leftOffset);\r\n        var width = parseFloat(this.css('width'));\r\n        var winWidth = this.$win.width();\r\n        var leftFix = (winWidth < (left + width)) ? (width - btnWidth) : 0;\r\n        var leftPos = (left - leftFix);\r\n        var top = (pos.top + btnHeight + topOffset);\r\n        leftPos = (leftPos < 0) ? 4 : leftPos;\r\n\r\n        this.css({\r\n            maxHeight: '',\r\n            position: position,\r\n            top: top + 'px',\r\n            left: leftPos + 'px'\r\n        });\r\n\r\n        // height adaptive\r\n        var heightTolerance = 10;\r\n        var winHeight = this.$win.height();\r\n        var scrollTop = this.$doc.scrollTop();\r\n        var cropHeight = winHeight - (top - scrollTop) - heightTolerance;\r\n\r\n        this.css('max-height', cropHeight + 'px');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.parse('<div>');\r\n        this.attr('dir', this.opts.direction);\r\n        this.attr('id', 'redactor-dropdown-' + this.uuid + '-' + this.name);\r\n        this.attr('data-re-name', this.name);\r\n\r\n        this.addClass('redactor-dropdown redactor-dropdown-' + this.uuid + ' redactor-dropdown-' + this.name);\r\n        this.dataset('data-dropdown-instance', this);\r\n        var isDom = (this.items.sdom || typeof this.items === 'string');\r\n\r\n        if (isDom) this._buildDom();\r\n        else this._buildItems();\r\n\r\n        this.$body.append(this);\r\n        this.started = true;\r\n    },\r\n    _buildDom: function()\r\n    {\r\n        this.html('').append($R.dom(this.items));\r\n    },\r\n    _buildItems: function()\r\n    {\r\n        this.items = (this.name === 'format') ? this._buildFormattingItems() : this.items;\r\n\r\n        for (var key in this.items)\r\n        {\r\n            var obj = this.items[key];\r\n\r\n            if (key === 'observe')\r\n            {\r\n                this.attr('data-observe', this.items[key]);\r\n            }\r\n            else\r\n            {\r\n                var $item = $R.create('toolbar.dropdown.item', this.app, key, obj, this);\r\n\r\n                this.$items[key] = $item;\r\n                this.append($item);\r\n            }\r\n        }\r\n    },\r\n    _buildFormattingItems: function()\r\n    {\r\n        // build the format set\r\n        for (var key in this.items)\r\n        {\r\n            if (this.opts.formatting.indexOf(key) === -1) delete this.items[key];\r\n        }\r\n\r\n        // remove from the format set\r\n        if (this.opts.formattingHide)\r\n        {\r\n            for (var key in this.items)\r\n            {\r\n                if (this.opts.formattingHide.indexOf(key) !== -1) delete this.items[key];\r\n            }\r\n        }\r\n\r\n        // add to the format set\r\n        if (this.opts.formattingAdd)\r\n        {\r\n            for (var key in this.opts.formattingAdd)\r\n            {\r\n                this.items[key] = this.opts.formattingAdd[key];\r\n            }\r\n        }\r\n\r\n        return this.items;\r\n    },\r\n    _handleKeyboard: function(e)\r\n    {\r\n        if (e.which === 27) this.close();\r\n    },\r\n    _isButton: function(e)\r\n    {\r\n        var $el = $R.dom(e.target);\r\n        var $btn = $el.closest('.re-button');\r\n\r\n        return ($btn.get() === this.$btn.get());\r\n    },\r\n    _close: function()\r\n    {\r\n        this.$btn.setInactive();\r\n        this.$doc.off('.redactor.dropdown-' + this.uuid);\r\n        this.removeClass('open');\r\n        this.addClass('redactor-animate-hide');\r\n        this.app.broadcast('dropdown.closed', this, this.$btn);\r\n    },\r\n    _closeAll: function()\r\n    {\r\n        this.$body.find('.redactor-dropdown-' + this.uuid + '.open').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var instance =  $node.dataget('data-dropdown-instance');\r\n            instance._close();\r\n        });\r\n    },\r\n    _observe: function()\r\n    {\r\n        var observer = this.attr('data-observe');\r\n        if (observer)\r\n        {\r\n            this.app.broadcast('dropdown.' + observer + '.observe', this);\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.dropdown.item', {\r\n    mixins: ['dom'],\r\n    init: function(app, name, obj, dropdown)\r\n    {\r\n        this.app = app;\r\n        this.lang = app.lang;\r\n\r\n        // local\r\n        this.dropdown = dropdown;\r\n        this.name = name;\r\n        this.obj = obj;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    setTitle: function(html)\r\n    {\r\n        this.$span.html(html);\r\n    },\r\n    getTitle: function()\r\n    {\r\n        return this.$span.html();\r\n    },\r\n    enable: function()\r\n    {\r\n        this.removeClass('redactor-dropdown-item-disabled');\r\n    },\r\n    disable: function()\r\n    {\r\n        this.addClass('redactor-dropdown-item-disabled');\r\n    },\r\n    toggle: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n        if (this.hasClass('redactor-dropdown-item-disabled')) return;\r\n\r\n        if (this.obj.message)\r\n        {\r\n            // broadcast\r\n            this.app.broadcast(this.obj.message, this.obj.args, this.name);\r\n        }\r\n        else if (this.obj.api)\r\n        {\r\n            this.app.api(this.obj.api, this.obj.args, this.name);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.parse('<a>');\r\n        this.attr('href', '#');\r\n        this.addClass('redactor-dropdown-item-' + this.name);\r\n\r\n        if (this.obj.classname)\r\n        {\r\n            this.addClass(this.obj.classname);\r\n        }\r\n\r\n        this.attr('data-re-name', this.name);\r\n        this.on('click', this.toggle.bind(this));\r\n\r\n        this.$span = $R.dom('<span>');\r\n        this.append(this.$span);\r\n        this.setTitle(this.lang.parse(this.obj.title));\r\n    }\r\n});\r\n$R.add('service', 'cleaner', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.storedComponents = [];\r\n        this.storedComments = [];\r\n        this.storedImages = [];\r\n        this.storedLinks = [];\r\n        this.deniedTags = ['font', 'html', 'head', 'link', 'title', 'body', 'meta', 'applet'];\r\n        this.convertRules = {};\r\n        this.unconvertRules = {};\r\n\r\n        // regex\r\n        this.reComments = /<!--[\\s\\S]*?-->\\n?/g;\r\n        this.reSpacedEmpty = /^(||\\s||<br\\s?\\/?>||&nbsp;)$/i;\r\n        this.reScriptTag = /<script(.*?[^>]?)>([\\w\\W]*?)<\\/script>/gi;\r\n    },\r\n    // public\r\n    addConvertRules: function(name, func)\r\n    {\r\n        this.convertRules[name] = func;\r\n    },\r\n    addUnconvertRules: function(name, func)\r\n    {\r\n        this.unconvertRules[name] = func;\r\n    },\r\n    input: function(html, paragraphize, started)\r\n    {\r\n        // fix &curren; entity in the links\r\n        html = html.replace(/¤t/gi, '&current');\r\n\r\n        // store\r\n        var storedComments = [];\r\n        html = this.storeComments(html, storedComments);\r\n\r\n        // pre/code\r\n        html = this.encodeCode(html);\r\n\r\n        // sanitize\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('a, b, i, strong, em, img, svg, details, audio').removeAttr('onload onerror ontoggle onwheel onmouseover oncopy');\r\n        $wrapper.find('a, iframe, embed').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var href = $node.attr('href');\r\n            var src = $node.attr('src');\r\n            if (href && href.trim().search(/^data|javascript:/i) !== -1) $node.attr('href', '');\r\n            if (src && src.trim().search(/^data|javascript:/i) !== -1) $node.attr('src', '');\r\n        });\r\n\r\n        var imageattrs = ['alt', 'title', 'src', 'class', 'width', 'height', 'srcset', 'style', 'usemap'];\r\n        $wrapper.find('img').each(function(node) {\r\n            if (node.attributes.length > 0) {\r\n                var attrs = node.attributes;\r\n                for (var i = attrs.length - 1; i >= 0; i--) {\r\n                    var removeAttrs = (attrs[i].name.search(/^data-/) === -1 && imageattrs.indexOf(attrs[i].name) === -1);\r\n                    var removeDataSrc = (attrs[i].name === 'src' && attrs[i].value.search(/^data|javascript:/i) !== -1);\r\n                    if (this.opts.imageSrcData) removeDataSrc = false;\r\n\r\n                    if (removeAttrs || removeDataSrc) {\r\n                        node.removeAttribute(attrs[i].name);\r\n                    }\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n        // get wrapper html\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        // converting entity\r\n        html = html.replace(/\\$/g, '&#36;');\r\n        html = html.replace(/&amp;/g, '&');\r\n\r\n        // convert to figure\r\n        var converter = $R.create('cleaner.figure', this.app);\r\n        html = converter.convert(html, this.convertRules);\r\n\r\n        // store components\r\n        html = this.storeComponents(html);\r\n\r\n        // clean\r\n        html = this.replaceTags(html, this.opts.replaceTags);\r\n        html = this._setSpanAttr(html);\r\n        html = this._setStyleCache(html);\r\n        html = this.removeTags(html, this.deniedTags);\r\n        html = (this.opts.removeScript) ? this._removeScriptTag(html) : this._replaceScriptTag(html);\r\n        //html = (this.opts.removeScript) ? this._removeScriptTag(html) : html;\r\n        html = (this.opts.removeComments) ? this.removeComments(html) : html;\r\n        html = (this._isSpacedEmpty(html)) ? this.opts.emptyHtml : html;\r\n\r\n\r\n        // restore components\r\n        html = this.restoreComponents(html);\r\n\r\n\r\n        // clear wrapped components\r\n        html = this._cleanWrapped(html);\r\n\r\n        // restore comments\r\n        html = this.restoreComments(html, storedComments);\r\n\r\n        // paragraphize\r\n        html = (paragraphize) ? this.paragraphize(html) : html;\r\n\r\n        return html;\r\n    },\r\n    output: function(html, removeMarkers)\r\n    {\r\n        html = this.removeInvisibleSpaces(html);\r\n\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/<\\/(span|strong|b|i|em)><br\\s?\\/?><\\/div>/gi, \"</$1></div>\");\r\n            html = html.replace(/<br\\s?\\/?><\\/(span|strong|b|i|em)><\\/div>/gi, \"</$1></div>\");\r\n        }\r\n\r\n        html = html.replace(/&#36;/g, '$');\r\n\r\n        // empty\r\n        if (this._isSpacedEmpty(html)) return '';\r\n        if (this._isParagraphEmpty(html)) return '';\r\n\r\n        html = this.removeServiceTagsAndAttrs(html, removeMarkers);\r\n\r\n        // store components\r\n        html = this.storeComponents(html);\r\n\r\n        html = this.removeSpanWithoutAttributes(html);\r\n        html = this.removeFirstBlockBreaklineInHtml(html);\r\n\r\n        html = (this.opts.removeScript) ? html : this._unreplaceScriptTag(html);\r\n        html = (this.opts.preClass) ? this._setPreClass(html) : html;\r\n        html = (this.opts.linkNofollow) ? this._setLinkNofollow(html) : html;\r\n        html = (this.opts.removeNewLines) ? this.cleanNewLines(html) : html;\r\n\r\n        // restore components\r\n        html = this.restoreComponents(html);\r\n\r\n        // convert to figure\r\n        var converter = $R.create('cleaner.figure', this.app);\r\n        html = converter.unconvert(html, this.unconvertRules);\r\n\r\n        // final clean up\r\n        html = this.removeEmptyAttributes(html, ['style', 'class', 'rel', 'alt', 'title']);\r\n        html = this.cleanSpacesInPre(html);\r\n        html = this.tidy(html);\r\n\r\n        // converting entity\r\n        html = html.replace(/&amp;/g, '&');\r\n\r\n        // breakline tidy\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/<br\\s?\\/?>/gi, \"<br>\\n\");\r\n            html = html.replace(/<br\\s?\\/?>\\n+/gi, \"<br>\\n\");\r\n        }\r\n\r\n        // check whitespaces\r\n        html = (html.replace(/\\n/g, '') === '') ? '' : html;\r\n\r\n        return html;\r\n    },\r\n    paste: function(html)\r\n    {\r\n        // store components\r\n        html = this.storeComponents(html);\r\n\r\n        // remove comments\r\n        html = html.replace(/<!--[\\s\\S]*?-->/g, '');\r\n\r\n        // remove tags\r\n        var deniedTags = this.deniedTags.concat(['iframe']);\r\n        html = this.removeTags(html, deniedTags);\r\n\r\n        // remove doctype tag\r\n        html = html.replace(new RegExp(\"<!doctype([\\\\s\\\\S]+?)>\", 'gi'), '');\r\n\r\n        // remove style tag\r\n        html = html.replace(new RegExp(\"<style([\\\\s\\\\S]+?)</style>\", 'gi'), '');\r\n\r\n        // remove br between\r\n        html = html.replace(new RegExp(\"</p><br /><p\", 'gi'), '</p><p');\r\n\r\n        // gdocs & word\r\n        var isMsWord = this._isHtmlMsWord(html);\r\n\r\n        html = (isMsWord) ? html : this._cleanGDocs(html);\r\n        html = (isMsWord) ? this._cleanMsWord(html) : html;\r\n\r\n        // do not clean\r\n        if (!this.opts.pasteClean)\r\n        {\r\n            // restore components\r\n            html = this.restoreComponents(html);\r\n\r\n            return html;\r\n        }\r\n\r\n        // plain text\r\n        if (this.opts.pastePlainText)\r\n        {\r\n            // restore components\r\n            html = this.restoreComponents(html);\r\n\r\n            return this.pastePlainText(html);\r\n        }\r\n\r\n        // unconvert data redactor tag\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('*').removeAttr('style');\r\n        $wrapper.find('[data-redactor-tag]').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            $node.removeAttr('data-redactor-tag');\r\n\r\n            if (this.utils.isEmptyHtml($node.html())) {\r\n                $node.html('<br>').unwrap();\r\n            }\r\n            else if (node.lastChild && node.lastChild.tagName === 'BR') {\r\n                $node.unwrap();\r\n            }\r\n            else {\r\n                $node.append('<br>').unwrap();\r\n            }\r\n        }.bind(this));\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n        html = html.replace(/<br\\s?\\/?>$/, '');\r\n        html = html.replace(/<br\\s?\\/?><\\/(td|th)>/, '</$1>');\r\n\r\n        // remove tags\r\n        var exceptedTags = this.opts.pasteBlockTags.concat(this.opts.pasteInlineTags);\r\n        html = this.removeTagsExcept(html, exceptedTags);\r\n\r\n        // links & images\r\n        html = (this.opts.pasteLinks) ? html : this.removeTags(html, ['a']);\r\n        html = (this.opts.pasteImages) ? html : this.removeTags(html, ['img']);\r\n\r\n        // build wrapper\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // clean attrs\r\n        var $elms = $wrapper.find('*');\r\n\r\n        // remove style\r\n        var filterStyle = (this.opts.pasteKeepStyle.length !== 0) ? ',' + this.opts.pasteKeepStyle.join(',') : '';\r\n        $elms.not('[data-redactor-style-cache]' + filterStyle).removeAttr('style');\r\n\r\n        // remove class\r\n        var filterClass = (this.opts.pasteKeepClass.length !== 0) ? ',' + this.opts.pasteKeepClass.join(',') : '';\r\n        $elms.not('[data-redactor-style-cache], span.redactor-component' + filterClass).removeAttr('class');\r\n\r\n        // remove attrs\r\n        var filterAttrs = (this.opts.pasteKeepAttrs.length !== 0) ? ',' + this.opts.pasteKeepAttrs.join(',') : '';\r\n        $elms.not('img, a, span.redactor-component, [data-redactor-style-cache]' + filterAttrs).each(function(node)\r\n        {\r\n            var attrs = node.attributes;\r\n            for (var i = attrs.length - 1; i >= 0; i--) {\r\n                if (node.attributes[i].name !== 'class' && node.attributes[i].name !== 'dir') {\r\n                    node.removeAttribute(attrs[i].name);\r\n                }\r\n            }\r\n        });\r\n\r\n        // paste link target\r\n        if (this.opts.pasteLinks && this.opts.pasteLinkTarget !== false)\r\n        {\r\n            $wrapper.find('a').attr('target', this.opts.pasteLinkTarget);\r\n        }\r\n\r\n        // keep style\r\n        $wrapper.find('[data-redactor-style-cache]').each(function(node)\r\n        {\r\n            var style = node.getAttribute('data-redactor-style-cache');\r\n            node.setAttribute('style', style);\r\n        });\r\n\r\n        // remove image attributes\r\n        var imageattrs = this.opts.imageAttrs;\r\n        $wrapper.find('img').each(function(node) {\r\n            if (node.attributes.length > 0) {\r\n                var attrs = node.attributes;\r\n                for (var i = attrs.length - 1; i >= 0; i--) {\r\n                    if (imageattrs.indexOf(attrs[i].name) === -1) {\r\n                        node.removeAttribute(attrs[i].name);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // remove empty span\r\n        $wrapper.find('span').each(function(node)\r\n        {\r\n            if (node.attributes.length === 0)\r\n            {\r\n                $R.dom(node).unwrap();\r\n            }\r\n        });\r\n\r\n        // remove empty inline\r\n        $wrapper.find(this.opts.inlineTags.join(',')).each(function(node)\r\n        {\r\n            if (node.attributes.length === 0 && this.utils.isEmptyHtml(node.innerHTML))\r\n            {\r\n                $R.dom(node).unwrap();\r\n            }\r\n\r\n        }.bind(this));\r\n\r\n        // place ul/ol into li\r\n        $wrapper.find('ul, ol').each(function(node)\r\n        {\r\n            var prev = node.previousSibling;\r\n            if (prev && prev.tagName === 'LI')\r\n            {\r\n                var $li = $R.dom(prev);\r\n                $li.find('p').unwrap();\r\n                $li.append(node);\r\n            }\r\n        });\r\n\r\n        // get wrapper\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        // remove paragraphs form lists (google docs bug)\r\n        html = html.replace(/<li><p>/gi, '<li>');\r\n        html = html.replace(/<\\/p><\\/li>/gi, '</li>');\r\n\r\n        // gmail list paste\r\n        html = html.replace(/^<li/gi, '<ul><li');\r\n        html = html.replace(/<\\/li>$/gi, '</li></ul>');\r\n\r\n        // convert lines to br\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/\\n/g, '<br>');\r\n        }\r\n\r\n        // clean empty p\r\n        html = html.replace(/<p>&nbsp;<\\/p>/gi, '<p></p>');\r\n        html = html.replace(/<p><br\\s?\\/?><\\/p>/gi, '<p></p>');\r\n\r\n        if (isMsWord)\r\n        {\r\n            html = html.replace(/<p><\\/p>/gi, '');\r\n            html = html.replace(/<p>\\s<\\/p>/gi, '');\r\n            html = html.replace(/<td\\n/gi, '<td ');\r\n        }\r\n\r\n        // restore components\r\n        html = this.restoreComponents(html);\r\n\r\n        return html;\r\n    },\r\n    pastePlainText: function(html)\r\n    {\r\n        html = (this.opts.pasteLinks) ? this.storeLinks(html) : html;\r\n        html = (this.opts.pasteImages) ? this.storeImages(html) : html;\r\n\r\n        html = this.getPlainText(html);\r\n        html = this._replaceNlToBr(html);\r\n\r\n        html = (this.opts.pasteLinks) ? this.restoreLinks(html) : html;\r\n        html = (this.opts.pasteImages) ? this.restoreImages(html) : html;\r\n\r\n        return html;\r\n    },\r\n    tidy: function(html)\r\n    {\r\n        return html;\r\n    },\r\n    paragraphize: function(html)\r\n    {\r\n        var paragraphize = $R.create('cleaner.paragraphize', this.app);\r\n        html = paragraphize.convert(html);\r\n        return html;\r\n    },\r\n    storeComments: function(html, storedComments) {\r\n        var comments = html.match(new RegExp('<!--([\\\\w\\\\W]*?)-->', 'gi'));\r\n        if (comments !== null) {\r\n            for (var i = 0; i < comments.length; i++) {\r\n                html = html.replace(comments[i], '#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####');\r\n                storedComments.push(comments[i]);\r\n            }\r\n        }\r\n\r\n        return html;\r\n    },\r\n    restoreComments: function(html, storedComments) {\r\n        for (var i = 0; i < storedComments.length; i++) {\r\n            html = html.replace('#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####', storedComments[i]);\r\n        }\r\n\r\n        return html;\r\n    },\r\n\r\n    // get\r\n    getFlatText: function(html)\r\n    {\r\n        var $div = $R.dom('<div>');\r\n\r\n        if (!html.nodeType && !html.dom)\r\n        {\r\n            html = html.toString();\r\n            html = html.trim();\r\n            $div.html(html);\r\n        }\r\n        else\r\n        {\r\n            $div.append(html);\r\n        }\r\n\r\n        html = $div.get().textContent || $div.get().innerText || '';\r\n\r\n        return (html === undefined) ? '' : html;\r\n    },\r\n\tgetPlainText: function(html)\r\n\t{\r\n\t\thtml = html.replace(/<!--[\\s\\S]*?-->/gi, '');\r\n\t\thtml = html.replace(/<style[\\s\\S]*?style>/gi, '');\r\n        html = html.replace(/<p><\\/p>/g, '');\r\n\t\thtml = html.replace(/<\\/div>|<\\/li>|<\\/td>/gi, '\\n');\r\n\t\thtml = html.replace(/<\\/p>/gi, '\\n\\n');\r\n\t\thtml = html.replace(/<\\/H[1-6]>/gi, '\\n\\n');\r\n\r\n\t\tvar tmp = document.createElement('div');\r\n\t\ttmp.innerHTML = html;\r\n\r\n\t\thtml = tmp.textContent || tmp.innerText;\r\n\r\n\t\treturn html.trim();\r\n\t},\r\n\r\n    // replace\r\n    replaceTags: function(html, tags)\r\n    {\r\n        if (tags)\r\n        {\r\n            var self = this;\r\n            var keys = Object.keys(tags);\r\n            var $wrapper = this.utils.buildWrapper(html);\r\n            $wrapper.find(keys.join(',')).each(function(node)\r\n            {\r\n                self.utils.replaceToTag(node, tags[node.tagName.toLowerCase()]);\r\n            });\r\n\r\n            html = this.utils.getWrapperHtml($wrapper);\r\n        }\r\n\r\n        return html;\r\n    },\r\n    replaceNbspToSpaces: function(html)\r\n    {\r\n        return html.replace('&nbsp;', ' ');\r\n    },\r\n    replaceBlocksToBr: function(html)\r\n    {\r\n        html = html.replace(/<div[^>]*><\\/div>/gi, '');\r\n        html = html.replace(/<td[^>]*><\\/td>/gi, '');\r\n        html = html.replace(/<\\/div>|<\\/li>|<\\/td>|<\\/p>|<\\/H[1-6]>/gi, '<br>');\r\n\r\n        return html;\r\n    },\r\n\r\n    // clean\r\n    cleanNewLines: function(html)\r\n    {\r\n        return html.replace(/\\r?\\n/g, \"\");\r\n    },\r\n    cleanSpacesInPre: function(html)\r\n    {\r\n        return html.replace('&nbsp;&nbsp;&nbsp;&nbsp;', '    ');\r\n    },\r\n\r\n    // remove\r\n    removeInvisibleSpaces: function(html)\r\n    {\r\n        html = this.utils.removeInvisibleChars(html);\r\n        html = html.replace(/&#65279;/gi, '');\r\n\r\n        return html;\r\n    },\r\n    removeNl: function(html)\r\n    {\r\n        html = html.replace(/\\n/g, \" \");\r\n        html = html.replace(/\\s+/g, \"\\s\");\r\n\r\n        return html;\r\n    },\r\n    removeBrAtEnd: function(html)\r\n    {\r\n        html = html.replace(/<br\\s?\\/?>$/gi, ' ');\r\n        html = html.replace(/<br\\s?\\/?><li/gi, '<li');\r\n\r\n        return html;\r\n    },\r\n    removeTags: function(input, denied)\r\n    {\r\n        var re = (denied) ? /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi : /(<([^>]+)>)/gi;\r\n        var replacer = (!denied) ? '' : function ($0, $1)\r\n        {\r\n            return denied.indexOf($1.toLowerCase()) === -1 ? $0 : '';\r\n        };\r\n\r\n        return input.replace(re, replacer);\r\n    },\r\n    removeTagsExcept: function(input, except)\r\n    {\r\n        if (except === undefined) return input.replace(/(<([^>]+)>)/gi, '');\r\n\r\n        var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\r\n        return input.replace(tags, function($0, $1)\r\n        {\r\n            return except.indexOf($1.toLowerCase()) === -1 ? '' : $0;\r\n        });\r\n    },\r\n    removeComments: function(html)\r\n    {\r\n        return html.replace(this.reComments, '');\r\n    },\r\n    removeServiceTagsAndAttrs: function(html, removeMarkers)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        var self = this;\r\n        if (removeMarkers !== false)\r\n        {\r\n            $wrapper.find('.redactor-selection-marker').each(function(node)\r\n            {\r\n                var $el = $R.dom(node);\r\n                var text = self.utils.removeInvisibleChars($el.text());\r\n\r\n                return (text === '') ? $el.remove() : $el.unwrap();\r\n            });\r\n        }\r\n\r\n        $wrapper.find('[data-redactor-style-cache]').removeAttr('data-redactor-style-cache');\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    removeSpanWithoutAttributes: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('span').removeAttr('data-redactor-span data-redactor-style-cache').each(function(node)\r\n        {\r\n            if (node.attributes.length === 0) $R.dom(node).unwrap();\r\n        });\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    removeFirstBlockBreaklineInHtml: function(html)\r\n    {\r\n        return html.replace(new RegExp('</li><br\\\\s?/?>', 'gi'), '</li>');\r\n    },\r\n    removeEmptyAttributes: function(html, attrs)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        for (var i = 0; i < attrs.length; i++)\r\n        {\r\n            $wrapper.find('[' + attrs[i] + '=\"\"]').removeAttr(attrs[i]);\r\n        }\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n\r\n    // encode / decode\r\n    encodeHtml: function(html)\r\n    {\r\n        html = html.replace(/<br\\s?\\/?>/g, \"\\n\");\r\n        html = html.replace(/&nbsp;/g, ' ');\r\n        html = html.replace(/”/g, '\"');\r\n        html = html.replace(/“/g, '\"');\r\n        html = html.replace(/‘/g, '\\'');\r\n        html = html.replace(/’/g, '\\'');\r\n        html = this.encodeEntities(html);\r\n        html = html.replace(/\\$/g, '&#36;');\r\n\r\n        if (this.opts.preSpaces)\r\n        {\r\n            html = html.replace(/\\t/g, new Array(this.opts.preSpaces + 1).join(' '));\r\n        }\r\n\r\n        return html;\r\n    },\r\n\r\n    encodeCode: function(html) {\r\n\r\n        html = this.encodeAttrSings(html);\r\n\r\n        // replace all tags\r\n        html = html.replace(/<\\s/gi, '&lt; ');\r\n        html = html.replace(/<([^>]+)</gi, '&lt;$1<');\r\n        html = html.replace(/<(.*?)>/gi, 'xtagstartz$1xtagendz');\r\n\r\n        // revert pre / code\r\n        html = html.replace(/xtagstartzpre(.*?)xtagendz/g, '<pre$1>');\r\n        html = html.replace(/xtagstartzcode(.*?)xtagendz/g, '<code$1>');\r\n        html = html.replace(/xtagstartz\\/codextagendz/g, '</code>');\r\n        html = html.replace(/xtagstartz\\/prextagendz/g, '</pre>');\r\n\r\n        // encode\r\n        html = this._encodeCode(html);\r\n\r\n        // revert all tags\r\n        html = html.replace(/xtagstartz([\\w\\W]*?)xtagendz/g, '<$1>');\r\n        html = html.replace(/xtagstartz\\/(.*?)xtagendz/g, '</$1>');\r\n\r\n        html = this.decodeAttrSings(html);\r\n\r\n        return html;\r\n    },\r\n    _encodeCode: function(html) {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('pre code, pre, code').each(this._encodeNode.bind(this));\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _encodeNode: function(node) {\r\n        var first = node.firstChild;\r\n        var html = node.innerHTML;\r\n        if (node.tagName === 'PRE' && first && first.tagName === 'CODE') {\r\n            return;\r\n        }\r\n\r\n        html = html.replace(/xtagstartz/g, '<');\r\n        html = html.replace(/xtagendz/g, '>');\r\n\r\n        var encoded = this.decodeEntities(html);\r\n        node.textContent = this._encodeNodeHtml(encoded);\r\n    },\r\n    _encodeNodeHtml: function(html) {\r\n        html = html.replace(/&nbsp;/g, ' ').replace(/<br\\s?\\/?>/g, '\\n');\r\n        html = (this.opts.preSpaces) ? html.replace(/\\t/g, new Array(this.opts.preSpaces + 1).join(' ')) : html;\r\n\r\n        return html;\r\n    },\r\n\r\n    encodeAttrSings: function(html) {\r\n        var matches = html.match(/=\"(.*?)\"/g);\r\n        if (matches !== null) {\r\n            for (var i = 0; i < matches.length; i++) {\r\n                if (matches[i].search(/^\"</) !== -1 || matches[i].search(/>\"$/) !== -1) {\r\n                    continue;\r\n                }\r\n\r\n\r\n                var str = matches[i].replace('>', 'xmoresignz');\r\n                str = str.replace('<', 'xlesssignz');\r\n                html = html.replace(matches[i], str);\r\n            }\r\n        }\r\n\r\n        return html;\r\n    },\r\n    encodeEntities: function(str)\r\n    {\r\n        str = this.decodeEntities(str);\r\n        str = str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\r\n\r\n        return str;\r\n    },\r\n    encodePhpCode: function(html)\r\n    {\r\n        html = html.replace('<?php', '&lt;?php');\r\n        html = html.replace('<?', '&lt;?');\r\n        html = html.replace('?>', '?&gt;');\r\n\r\n        return html;\r\n    },\r\n    decodeAttrSings: function(html) {\r\n        html = html.replace(/xmoresignz/gi, '>');\r\n        html = html.replace(/xlesssignz/gi, '<');\r\n\r\n        return html;\r\n    },\r\n    decodeEntities: function(str)\r\n    {\r\n        return String(str).replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&amp;/g, '&');\r\n    },\r\n\r\n    // store / restore\r\n    storeComponents: function(html)\r\n    {\r\n        var matched = this.utils.getElementsFromHtml(html, 'figure', 'table');\r\n\r\n        return this._storeMatched(html, matched, 'Components', 'figure');\r\n    },\r\n    restoreComponents: function(html)\r\n    {\r\n        return this._restoreMatched(html, 'Components', 'figure');\r\n    },\r\n    storeLinks: function(html)\r\n    {\r\n        var matched = this.utils.getElementsFromHtml(html, 'a');\r\n\r\n        return this._storeMatched(html, matched, 'Links', 'a');\r\n    },\r\n    storeImages: function(html)\r\n    {\r\n        var matched = this.utils.getElementsFromHtml(html, 'img');\r\n\r\n        return this._storeMatched(html, matched, 'Images', 'img');\r\n    },\r\n    restoreLinks: function(html)\r\n    {\r\n        return this._restoreMatched(html, 'Links', 'a');\r\n    },\r\n    restoreImages: function(html)\r\n    {\r\n        return this._restoreMatched(html, 'Images', 'img');\r\n    },\r\n\r\n    // PRIVATE\r\n\r\n    // clean\r\n    _cleanWrapped: function(html)\r\n    {\r\n        html = html.replace(new RegExp('<p><figure([\\\\w\\\\W]*?)</figure></p>', 'gi'), '<figure$1</figure>');\r\n\r\n        return html;\r\n    },\r\n    _cleanGDocs: function(html)\r\n    {\r\n        // remove google docs markers\r\n        html = html.replace(/<b\\sid=\"internal-source-marker(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$2\");\r\n        html = html.replace(/<b(.*?)id=\"docs-internal-guid(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$3\");\r\n\r\n        html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?bold|font-weight:\\s?bold;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\r\n        html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?600|font-weight:\\s?600;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\r\n        html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?700|font-weight:\\s?700;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\r\n        html = html.replace(/<span[^>]*font-style:\\s?italic[^>]*>([\\w\\W]*?)<\\/span>/gi, '<i>$1</i>');\r\n        html = html.replace(/<span[^>]*font-weight:\\s?bold[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$1</b>');\r\n        html = html.replace(/<span[^>]*font-weight:\\s?700[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$1</b>');\r\n        html = html.replace(/<span[^>]*font-weight:\\s?600[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$1</b>');\r\n\r\n        return html;\r\n    },\r\n    _cleanMsWord: function(html)\r\n    {\r\n        html = html.replace(/<!--[\\s\\S]+?-->/gi, '');\r\n        html = html.replace(/<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s\\/>]))[^>]*>/gi, '');\r\n        html = html.replace(/<(\\/?)s>/gi, \"<$1strike>\");\r\n        html = html.replace(/&nbsp;/gi, ' ');\r\n        html = html.replace(/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function(str, spaces) {\r\n            return (spaces.length > 0) ? spaces.replace(/./, \" \").slice(Math.floor(spaces.length/2)).split(\"\").join(\"\\u00a0\") : '';\r\n        });\r\n\r\n        // build wrapper\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // footnote fix\r\n        $wrapper.find('.MsoFootnoteText').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var $parent = $node.parent();\r\n            if ($parent.length !== 0 && $parent.attr('style').search(/mso-element:footnote/) !== -1) {\r\n                $node.find('a').attr('id', '_' + $parent.attr('id'));\r\n            }\r\n\r\n        });\r\n\r\n        $wrapper.find('.MsoFootnoteReference').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var $parent = $node.parent();\r\n            if ($parent.length !== 0 && $parent.get().tagName === 'A') {\r\n                $parent.attr('id', $parent.attr('name'));\r\n            }\r\n\r\n        });\r\n\r\n        // build lists\r\n        $wrapper.find('p').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var str = $node.attr('style');\r\n            var matches = /mso-list:\\w+ \\w+([0-9]+)/.exec(str);\r\n            if (matches)\r\n            {\r\n                $node.attr('data-listLevel',  parseInt(matches[1], 10));\r\n            }\r\n        });\r\n\r\n        // parse Lists\r\n        this._parseWordLists($wrapper);\r\n\r\n        $wrapper.find('[align]').removeAttr('align');\r\n        $wrapper.find('[name]').removeAttr('name');\r\n        $wrapper.find('span').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var str = $node.attr('style');\r\n            var matches = /mso-list:Ignore/.exec(str);\r\n\r\n            if (matches) $node.remove();\r\n            else $node.unwrap();\r\n\r\n        });\r\n        $wrapper.find('[style]').removeAttr('style');\r\n        $wrapper.find(\"[class^='Mso']\").removeAttr('class');\r\n        $wrapper.find('a').filter(function(node) { return !node.hasAttribute('href'); }).unwrap();\r\n\r\n        // get wrapper\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n        html = html.replace(/<p[^>]*><\\/p>/gi, '');\r\n        html = html.replace(/<li>·/gi, '<li>');\r\n        html = html.trim();\r\n\r\n        // remove spaces between\r\n        html = html.replace(/\\/(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)>\\s+<(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)/gi, '/$1>\\n<$2');\r\n\r\n        var result = '';\r\n        var lines = html.split(/\\n/);\r\n        for (var i = 0; i < lines.length; i++)\r\n        {\r\n            var space = (lines[i] !== '' && lines[i].search(/>$/) === -1) ? ' ' : '\\n';\r\n\r\n            result += lines[i] + space;\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _parseWordLists: function($wrapper)\r\n    {\r\n        var lastLevel = 0;\r\n        var $item = null;\r\n        var $list = null;\r\n        var $listChild = null;\r\n\r\n        $wrapper.find('p').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            var level = $node.attr('data-listLevel');\r\n            if (level === null && $node.hasClass('MsoListParagraphCxSpMiddle')) {\r\n                level = 1;\r\n            }\r\n\r\n            if (level !== null) {\r\n                var txt = $node.text();\r\n                var listTag = (/^\\s*\\w+\\./.test(txt)) ? '<ol></ol>' : '<ul></ul>';\r\n\r\n                // new parent list\r\n                if ($node.hasClass('MsoListParagraphCxSpFirst') || $node.hasClass('MsoNormal')) {\r\n                    $list = $R.dom(listTag);\r\n                    $node.before($list);\r\n                }\r\n                // new child list\r\n                else if (level > lastLevel && lastLevel !== 0) {\r\n                    $listChild = $R.dom(listTag);\r\n                    $item.append($listChild);\r\n                    $list = $listChild;\r\n                }\r\n                // level up\r\n                if (level < lastLevel) {\r\n                    var len = lastLevel - level + 1;\r\n                    for (var i = 0; i < len; i++) {\r\n                        $list = $list.parent();\r\n                    }\r\n                }\r\n\r\n                // create item\r\n                $node.find('span').first().unwrap();\r\n                $item = $R.dom('<li>' + $node.html().trim() + '</li>');\r\n                if ($list === null) {\r\n                    $node.before(listTag);\r\n                    $list = $node.prev();\r\n                }\r\n\r\n                // append\r\n                $list.append($item);\r\n                $node.remove();\r\n\r\n                lastLevel = level;\r\n            }\r\n            else {\r\n                $list = null;\r\n                lastLevel = 0;\r\n            }\r\n        });\r\n    },\r\n\r\n    // is\r\n    _isSpacedEmpty: function(html)\r\n    {\r\n        return (html.search(this.reSpacedEmpty) !== -1);\r\n    },\r\n    _isParagraphEmpty: function(html)\r\n    {\r\n        return (html.search(/^<p><\\/p>$/i) !== -1);\r\n    },\r\n    _isHtmlMsWord: function(html)\r\n    {\r\n        return html.match(/class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^'']*\\bmso-|w:WordDocument/i);\r\n    },\r\n\r\n    // set\r\n    _setSpanAttr: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('span').attr('data-redactor-span', true);\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _setStyleCache: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('[style]').each(function(node)\r\n        {\r\n            var $el = $R.dom(node);\r\n            $el.attr('data-redactor-style-cache', $el.attr('style'));\r\n        });\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _setPreClass: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('pre').addClass(this.opts.preClass);\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _setLinkNofollow: function(html)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('a').attr('rel', 'nofollow');\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n\r\n    // replace\r\n    _replaceScriptTag: function(html)\r\n    {\r\n        return html.replace(this.reScriptTag, '<script class=\"redactor-script-tag\" $1>$2</script>');\r\n    },\r\n    _unreplaceScriptTag: function(html)\r\n    {\r\n        return html.replace(/<script class=\"redactor-script-tag\"(.*?[^>]?)>([\\w\\W]*?)<\\/script>/gi, '<script$1>$2</script>');\r\n    },\r\n\t_replaceNlToBr: function(html)\r\n\t{\r\n\t\treturn html.replace(/\\n/g, '<br />');\r\n\t},\r\n\r\n    // remove\r\n    _removeScriptTag: function(html)\r\n    {\r\n        return html.replace(this.reScriptTag, '');\r\n    },\r\n\r\n    // private\r\n    _storeMatched: function(html, matched, stored, name)\r\n    {\r\n        this['stored' + stored] = [];\r\n        if (matched)\r\n        {\r\n            for (var i = 0; i < matched.length; i++)\r\n            {\r\n                this['stored' + stored][i] = matched[i];\r\n                html = html.replace(matched[i], '####' + name + i + '####');\r\n            }\r\n        }\r\n\r\n        return html;\r\n    },\r\n    _restoreMatched: function(html, stored, name)\r\n    {\r\n        if (this['stored' + stored])\r\n        {\r\n            for (var i = 0; i < this['stored' + stored].length; i++)\r\n            {\r\n                html = html.replace('####' + name + i + '####', this['stored' + stored][i]);\r\n            }\r\n        }\r\n\r\n        return html;\r\n    }\r\n});\r\n$R.add('class', 'cleaner.figure', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.detector = app.detector;\r\n    },\r\n    // public\r\n    convert: function(html, rules)\r\n    {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // convert\r\n        $wrapper.find('img').each(this._convertImage.bind(this));\r\n        $wrapper.find('hr').each(this._convertLine.bind(this));\r\n        $wrapper.find('iframe').each(this._convertIframe.bind(this));\r\n        $wrapper.find('table').each(this._convertTable.bind(this));\r\n        $wrapper.find('form').each(this._convertForm.bind(this));\r\n        $wrapper.find('figure pre').each(this._convertCode.bind(this));\r\n\r\n        // variables\r\n        $wrapper.find('[data-redactor-type=variable]').addClass('redactor-component');\r\n\r\n        // widgets\r\n        $wrapper.find('figure').not('.redactor-component, .redactor-figure-code').each(this._convertWidget.bind(this));\r\n\r\n        // contenteditable\r\n        $wrapper.find('figure pre').each(this._setContenteditableCode.bind(this));\r\n        $wrapper.find('.redactor-component, .non-editable').attr('contenteditable', false);\r\n\r\n        if (this.detector.isIe())\r\n        {\r\n            $wrapper.find('[data-redactor-type=table]').removeAttr('contenteditable');\r\n        }\r\n\r\n        $wrapper.find('figcaption, td, th').attr('contenteditable', true);\r\n        $wrapper.find('.redactor-component, figcaption').attr('tabindex', '-1');\r\n\r\n        // extra rules\r\n        this._acceptExtraRules($wrapper, rules);\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    unconvert: function(html, rules)\r\n    {\r\n        html = html.replace(/<\\/([^>]+)><div data-redactor-tag/g, '</$1>\\n<div data-redactor-tag');\r\n        html = html.replace(/<\\/([^>]+)><p/g, '</$1>\\n<p');\r\n\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n\r\n        // contenteditable\r\n        $wrapper.find('th, td, figcaption, figure, pre, code, .redactor-component').removeAttr('contenteditable tabindex');\r\n\r\n        // remove class\r\n        $wrapper.find('figure').removeClass('redactor-component redactor-component-active redactor-uploaded-figure');\r\n\r\n        // unconvert\r\n        $wrapper.find('[data-redactor-type=variable]').removeClass('redactor-component redactor-component-active');\r\n        $wrapper.find('figure[data-redactor-type=line]').unwrap();\r\n        $wrapper.find('figure[data-redactor-type=widget]').each(this._unconvertWidget.bind(this));\r\n        $wrapper.find('figure[data-redactor-type=form]').each(this._unconvertForm.bind(this));\r\n        $wrapper.find('figure[data-redactor-type=table]').each(this._unconvertTable.bind(this));\r\n        $wrapper.find('figure[data-redactor-type=image]').removeAttr('rel').each(this._unconvertImages.bind(this));\r\n\r\n        $wrapper.find('img').removeAttr('data-redactor-type').removeClass('redactor-component');\r\n        $wrapper.find('.non-editable').removeAttr('contenteditable');\r\n\r\n        // remove types\r\n        $wrapper.find('figure').each(this._removeTypes.bind(this));\r\n\r\n        // remove caret\r\n        $wrapper.find('span.redactor-component-caret').remove();\r\n\r\n        // break div\r\n        $wrapper = this._unconvertBreakTag($wrapper);\r\n\r\n        // extra rules\r\n        this._acceptExtraRules($wrapper, rules);\r\n\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n        html = html.replace(/<br\\s?\\/?>$/, '');\r\n        html = html.replace(/<br\\s?\\/?><\\/(td|th)>/, '</$1>');\r\n\r\n        return html;\r\n    },\r\n\r\n    // private\r\n    _convertImage: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        if (this._isNonEditable($node)) return;\r\n\r\n        // set id\r\n        if (this.opts.imageObserve && !$node.attr('data-image'))\r\n        {\r\n            $node.attr('data-image', this.utils.getRandomId());\r\n        }\r\n\r\n        var $link = $node.closest('a');\r\n        var $figure = $node.closest('figure');\r\n        var isImage = ($figure.children().not('a, img, br, figcaption').length === 0);\r\n        if (!isImage) return;\r\n\r\n        if ($figure.length === 0)\r\n        {\r\n            var $parent = ($link.length !== 0) ? $link.closest('p') : $node.closest('p');\r\n            if (this.opts.imageFigure === false && $parent.length !== 0)\r\n            {\r\n                var $el = this.utils.replaceToTag($parent, 'figure');\r\n                $figure = $el;\r\n                $figure.addClass('redactor-replace-figure');\r\n            }\r\n            else\r\n            {\r\n                if ($parent.length !== 0) {\r\n                    $parent.unwrap();\r\n                }\r\n\r\n                $figure = ($link.length !== 0) ? $link.wrap('<figure>') : $node.wrap('<figure>');\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if ($figure.hasClass('redactor-uploaded-figure'))\r\n            {\r\n                $figure.removeClass('redactor-uploaded-figure');\r\n            }\r\n            else\r\n            {\r\n                $figure.addClass('redactor-keep-figure');\r\n            }\r\n        }\r\n\r\n        this._setFigure($figure, 'image');\r\n    },\r\n    _convertTable: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this._wrapFigure(node);\r\n        this._setFigure($figure, 'table');\r\n    },\r\n    _convertLine: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this._wrapFigure(node);\r\n        this._setFigure($figure, 'line');\r\n    },\r\n    _convertForm: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this.utils.replaceToTag(node, 'figure');\r\n        this._setFigure($figure, 'form');\r\n    },\r\n    _convertIframe: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $node = $R.dom(node);\r\n        if ($node.closest('.redactor-component').length !== 0) return;\r\n\r\n        var src = node.getAttribute('src');\r\n        var isVideo = (src && (src.match(this.opts.regex.youtube) || src.match(this.opts.regex.vimeo)));\r\n        var $figure = this._wrapFigure(node);\r\n\r\n        if (isVideo)\r\n        {\r\n            this._setFigure($figure, 'video');\r\n        }\r\n    },\r\n    _convertCode: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $figure = this._wrapFigure(node);\r\n        this._setFigure($figure, 'code');\r\n    },\r\n    _convertWidget: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $node = $R.dom(node);\r\n        $node.addClass('redactor-component');\r\n        $node.attr('data-redactor-type', 'widget');\r\n        $node.attr('data-widget-code', encodeURI(node.innerHTML.trim()));\r\n    },\r\n\r\n    // unconvert\r\n    _unconvertBreakTag: function($wrapper) {\r\n        $wrapper.find('[data-redactor-tag]').each(function(node) {\r\n            var $node = $R.dom(node);\r\n            $node.removeAttr('data-redactor-tag');\r\n            if (node.attributes.length !== 0) {\r\n                if (node.lastChild && node.lastChild.tagName === 'BR') $R.dom(node.lastChild).remove();\r\n                return;\r\n            }\r\n\r\n            if (node.lastChild && node.lastChild.tagName === 'BR') {\r\n                $node.unwrap();\r\n            }\r\n            else {\r\n                var $next = $node.nextElement();\r\n                if ($next.length !== 0 && $next.attr('data-redactor-tag')) {\r\n                    node.appendChild(document.createElement('br'));\r\n                }\r\n\r\n                $node.unwrap();\r\n            }\r\n        }.bind(this));\r\n        return $wrapper;\r\n    },\r\n    _unconvertForm: function(node)\r\n    {\r\n        this.utils.replaceToTag(node, 'form');\r\n    },\r\n    _unconvertTable: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        $node.unwrap();\r\n    },\r\n    _unconvertWidget: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        $node.html(decodeURI($node.attr('data-widget-code')));\r\n        $node.removeAttr('data-widget-code');\r\n    },\r\n    _unconvertImages: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        $node.removeClass('redactor-component');\r\n\r\n        var isList = ($node.closest('li').length !== 0);\r\n        var isTable = ($node.closest('table').length !== 0);\r\n        var hasFigcaption = ($node.find('figcaption').length !== 0);\r\n\r\n        var style = $node.attr('style');\r\n        var hasStyle = !(style === null || style === '');\r\n        var hasClass = ($node.attr('class') !== '');\r\n\r\n        if (isList || (isTable && !hasFigcaption && !hasStyle && !hasClass))\r\n        {\r\n            $node.unwrap();\r\n        }\r\n    },\r\n    _removeTypes: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        var type = $node.attr('data-redactor-type');\r\n        var removed = ['image', 'widget', 'line', 'video', 'code', 'form', 'table'];\r\n        if (type && removed.indexOf(type) !== -1)\r\n        {\r\n            $node.removeAttr('data-redactor-type');\r\n        }\r\n\r\n        // keep figure\r\n        if ($node.hasClass('redactor-keep-figure'))\r\n        {\r\n            $node.removeClass('redactor-keep-figure');\r\n        }\r\n\r\n        // unwrap figure\r\n        else if (type === 'image' && this.opts.imageFigure === false)\r\n        {\r\n            var hasFigcaption = ($node.find('figcaption').length !== 0);\r\n            if (!hasFigcaption)\r\n            {\r\n                // replace\r\n                if ($node.hasClass('redactor-replace-figure'))\r\n                {\r\n                    $node.removeClass('redactor-replace-figure');\r\n                    this.utils.replaceToTag($node, 'p');\r\n                }\r\n                else\r\n                {\r\n                    this.utils.replaceToTag($node, 'p');\r\n                }\r\n            }\r\n        }\r\n\r\n        $node.removeClass('redactor-replace-figure');\r\n    },\r\n\r\n    // wrap\r\n    _wrapFigure: function(node)\r\n    {\r\n        var $node = $R.dom(node);\r\n        var $figure = $node.closest('figure');\r\n\r\n        return ($figure.length === 0) ? $node.wrap('<figure>') : $figure;\r\n    },\r\n\r\n    // set\r\n    _setFigure: function($figure, type)\r\n    {\r\n        $figure.addClass('redactor-component');\r\n        $figure.attr('data-redactor-type', type);\r\n    },\r\n    _setContenteditableCode: function(node)\r\n    {\r\n        if (this._isNonEditable(node)) return;\r\n\r\n        var $node = $R.dom(node);\r\n        var $code = $node.children('code').first();\r\n\r\n        var $el = ($code.length !== 0) ? $code : $node;\r\n        $el.attr('contenteditable', true).attr('tabindex', '-1');\r\n    },\r\n\r\n    // utils\r\n    _acceptExtraRules: function($wrapper, rules)\r\n    {\r\n        for (var key in rules)\r\n        {\r\n            if (typeof rules[key] === 'function')\r\n            {\r\n                rules[key]($wrapper);\r\n            }\r\n        }\r\n    },\r\n    _isNonEditable: function(node)\r\n    {\r\n        return ($R.dom(node).closest('.non-editable').length !== 0);\r\n    }\r\n});\r\n$R.add('class', 'cleaner.paragraphize', {\r\n    init: function(app) {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.cleaner = app.cleaner;\r\n        this.element = app.element;\r\n\r\n        // local\r\n        this.stored = [];\r\n        this.remStart = '#####replace';\r\n        this.remEnd = '#####';\r\n        this.paragraphizeTags = ['table', 'div', 'pre', 'form', 'ul', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'blockquote', 'figcaption',\r\n                'address', 'section', 'header', 'footer', 'aside', 'article', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea',\r\n                'button', 'option', 'map', 'area', 'math', 'hr', 'fieldset', 'legend', 'hgroup', 'nav', 'figure', 'details', 'menu', 'summary', 'p'];\r\n    },\r\n    // public\r\n    convert: function(html) {\r\n\r\n        var value = this._isConverted(html);\r\n\r\n        value = (value === true) ? this._convert(html) : value;\r\n        value = this._convertTable(value);\r\n\r\n        return value;\r\n    },\r\n\r\n    // private\r\n    _convert: function(html, tablemarkup) {\r\n        // build markup tag\r\n        var tag = (this.opts.breakline || tablemarkup) ? 'sdivtag' : this.opts.markup;\r\n        var attr = (tablemarkup) ? 'tbr' : 'br';\r\n\r\n        // store\r\n        html = this._storeTags(html);\r\n\r\n        var storedComments = [];\r\n        html = this.cleaner.storeComments(html, storedComments);\r\n\r\n        // trim\r\n        html = html.trim();\r\n        html = this._trimLinks(html);\r\n\r\n        // trim new line in inline\r\n        var inlines = this.opts.inlineTags.join('|');\r\n        html = html.replace(new RegExp('<(' + inlines + ')(.*?[^>]?)>\\n</(' + inlines + ')>', 'gi'), '<$1$2></$3>');\r\n\r\n        // replace new lines\r\n        html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)$/g, '');\r\n        html = html.replace(/xparagraphmarkerz$/g, '');\r\n        html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)/g, '\\n');\r\n        html = html.replace(/xparagraphmarkerz/g, '\\n');\r\n\r\n        if (this.opts.breakline) {\r\n            html = html.replace(/<br\\s?\\/?>(?:\\r\\n|\\r|\\n)/gi, 'xbreakmarkerz\\n');\r\n            html = html.replace(/<br\\s?\\/?>/gi, 'xbreakmarkerz\\n');\r\n            html = html.replace(/xbreakmarkerz\\n<\\//gi, 'xbreakmarkerz</');\r\n\r\n        }\r\n        else {\r\n            html = html.replace(/[\\n]+/g, \"\\n\");\r\n        }\r\n\r\n        // wrap to tag\r\n        var str = '';\r\n        var arr = html.split(\"\\n\");\r\n        for (var i = 0; i < arr.length; i++) {\r\n            str += '<' + tag + '>' + arr[i] + '</' + tag + '>\\n';\r\n        }\r\n\r\n        html = str.replace(/\\n$/, '');\r\n\r\n\r\n        // clean\r\n        html = html.replace(new RegExp('<' + tag + '>\\\\s+#####', 'gi'), '#####');\r\n        html = html.replace(new RegExp('<' + tag + '>#####', 'gi'), '#####');\r\n        html = html.replace(new RegExp('#####</' + tag + '>', 'gi'), '#####');\r\n\r\n        // replace marker\r\n        html = (this.opts.breakline) ? html.replace(/xbreakmarkerz/gi, \"<br>\") : html;\r\n\r\n        // restore\r\n        html = this._restoreTags(html);\r\n        html = this.cleaner.restoreComments(html, storedComments);\r\n\r\n        // remove empty\r\n        if (this.opts.breakline) {\r\n            html = html.replace(new RegExp('<' + tag + '></' + tag + '>', 'gi'), '<' + tag + '><br></' + tag + '>');\r\n        }\r\n        else {\r\n            //html = html.replace(new RegExp('<' + tag + '><br\\\\s?/?></' + tag + '>', 'gi'), '');\r\n            //html = html.replace(new RegExp('<' + tag + '></' + tag + '>', 'gi'), '');\r\n        }\r\n\r\n        // clean restored\r\n        html = html.replace(new RegExp('<sdivtag>', 'gi'), '<div data-redactor-tag=\"' + attr + '\">');\r\n        html = html.replace(new RegExp('sdivtag', 'gi'), 'div');\r\n        html = html.replace(/<\\/([^>]+)><div data-redactor-tag/g, '</$1>\\n<div data-redactor-tag');\r\n\r\n        return html;\r\n    },\r\n    _convertTable: function(html) {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('td, th').each(this._convertCell.bind(this));\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        return html;\r\n    },\r\n    _convertCell: function(node) {\r\n        var $node = $R.dom(node);\r\n        this.stored = [];\r\n        var code = this._convert($node.html(), true);\r\n        $node.html(code);\r\n    },\r\n    _storeTags: function(html) {\r\n        var self = this;\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find(this.paragraphizeTags.join(', ')).each(function(node, i) {\r\n            var replacement = document.createTextNode(self.remStart + i + self.remEnd + 'xparagraphmarkerz'); //  + \"\\n\"\r\n            self.stored.push(node.outerHTML);\r\n            node.parentNode.replaceChild(replacement, node);\r\n        });\r\n\r\n        return this.utils.getWrapperHtml($wrapper);\r\n    },\r\n    _restoreTags: function(html) {\r\n        for (var i = 0; i < this.stored.length; i++) {\r\n            this.stored[i] = this.stored[i].replace(/\\$/g, '&#36;');\r\n            html = html.replace(this.remStart + i + this.remEnd, this.stored[i]);\r\n        }\r\n\r\n        return html;\r\n    },\r\n    _trimLinks: function(html) {\r\n        var $wrapper = this.utils.buildWrapper(html);\r\n        $wrapper.find('a').each(this._trimLink.bind(this));\r\n        html = this.utils.getWrapperHtml($wrapper);\r\n\r\n        return html;\r\n    },\r\n    _trimLink: function(node) {\r\n        var $node = $R.dom(node);\r\n        $node.html($node.html().trim());\r\n    },\r\n    _isConverted: function(html) {\r\n        if (this._isDisabled(html)) return html;\r\n        else if (this._isEmptyHtml(html)) return this.opts.emptyHtml;\r\n        else return true;\r\n    },\r\n    _isDisabled: function() {\r\n        return (this.opts.paragraphize === false || this.element.isType('inline'));\r\n    },\r\n    _isEmptyHtml: function(html) {\r\n        return (html === '' || html === '<p></p>' || html === '<div></div>');\r\n    }\r\n});\r\n$R.add('service', 'detector', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.userAgent = navigator.userAgent.toLowerCase();\r\n    },\r\n\tisWebkit: function()\r\n\t{\r\n\t\treturn /webkit/.test(this.userAgent);\r\n\t},\r\n\tisFirefox: function()\r\n\t{\r\n\t\treturn (this.userAgent.indexOf('firefox') > -1);\r\n\t},\r\n\tisIe: function(v)\r\n\t{\r\n        if (document.documentMode || /Edge/.test(navigator.userAgent)) return 'edge';\r\n\r\n\t\tvar ie;\r\n\t\tie = RegExp('msie' + (!isNaN(v)?('\\\\s'+v):''), 'i').test(navigator.userAgent);\r\n\t\tif (!ie) ie = !!navigator.userAgent.match(/Trident.*rv[ :]*11\\./);\r\n\r\n\t\treturn ie;\r\n\t},\r\n\tisMobile: function()\r\n\t{\r\n\t\treturn /(iPhone|iPod|Android)/.test(navigator.userAgent);\r\n\t},\r\n\tisDesktop: function()\r\n\t{\r\n\t\treturn !/(iPhone|iPod|iPad|Android)/.test(navigator.userAgent);\r\n\t},\r\n\tisIpad: function()\r\n\t{\r\n\t\treturn /iPad/.test(navigator.userAgent);\r\n\t}\r\n});\r\n$R.add('service', 'offset', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    get: function(el, trimmed)\r\n    {\r\n        var offset = { start: 0, end: 0 };\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return false;\r\n\r\n        var isEditor = this.editor.isEditor(node);\r\n        var isIn = (isEditor) ? true : this.selection.isIn(node);\r\n        var range = this.selection.getRange();\r\n\r\n        if (!isEditor && !isIn)\r\n        {\r\n            offset = false;\r\n        }\r\n        else if (this.selection.is() && isIn)\r\n        {\r\n            var $startNode = $R.dom(range.startContainer);\r\n            var fix = ($startNode.hasClass('redactor-component')) ? range.startOffset : 0;\r\n            var clonedRange = range.cloneRange();\r\n\r\n            clonedRange.selectNodeContents(node);\r\n            clonedRange.setEnd(range.startContainer, range.startOffset);\r\n\r\n            var selection = this._getString(range, trimmed);\r\n\r\n            offset.start = this._getString(clonedRange, trimmed).length - fix;\r\n            offset.end = offset.start + selection.length + fix;\r\n        }\r\n\r\n        return offset;\r\n    },\r\n    set: function(offset, el)\r\n    {\r\n        if (this._setComponentOffset(el)) return;\r\n\r\n        this.component.clearActive();\r\n        var node = this.utils.getNode(el);\r\n        if (!node) return;\r\n\r\n        var size = this.size(node);\r\n        var charIndex = 0, range = document.createRange();\r\n\r\n        offset.end = (offset.end > size) ? size : offset.end;\r\n\r\n        range.setStart(node, 0);\r\n        range.collapse(true);\r\n\r\n        var nodeStack = [node], foundStart = false, stop = false;\r\n        while (!stop && (node = nodeStack.pop()))\r\n        {\r\n            if (node.nodeType === 3)\r\n            {\r\n                var nextCharIndex = charIndex + node.length;\r\n\r\n                if (!foundStart && !this._isFigcaptionNext(node) && offset.start >= charIndex && offset.start <= nextCharIndex)\r\n                {\r\n                    range.setStart(node, offset.start - charIndex);\r\n                    foundStart = true;\r\n                }\r\n\r\n                if (foundStart && offset.end >= charIndex && offset.end <= nextCharIndex)\r\n                {\r\n                    range.setEnd(node, offset.end - charIndex);\r\n                    stop = true;\r\n                }\r\n\r\n                charIndex = nextCharIndex;\r\n            }\r\n            else\r\n            {\r\n                var i = node.childNodes.length;\r\n                while (i--)\r\n                {\r\n                    nodeStack.push(node.childNodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.selection.setRange(range);\r\n    },\r\n    size: function(el, trimmed)\r\n    {\r\n        var node = this.utils.getNode(el);\r\n        if (node)\r\n        {\r\n            var range = document.createRange();\r\n\r\n            var clonedRange = range.cloneRange();\r\n            clonedRange.selectNodeContents(node);\r\n\r\n            return this._getString(clonedRange, trimmed).length;\r\n        }\r\n\r\n        return 0;\r\n    },\r\n\r\n    // private\r\n    _getString: function(obj, trimmed)\r\n    {\r\n        var str = obj.toString();\r\n        str = (this.editor.isEmpty()) ? str.replace(/\\uFEFF/g, '') : str;\r\n        str = (trimmed) ? str.trim() : str;\r\n\r\n        return str;\r\n    },\r\n    _setComponentOffset: function(el)\r\n    {\r\n        return (this.component.isNonEditable(el)) ? this.component.setActive(el) : false;\r\n    },\r\n    _isFigcaptionNext: function(node)\r\n    {\r\n        var next = node.nextSibling;\r\n        return (node.nodeValue.trim() === '' && next && next.tagName === 'FIGCAPTION');\r\n    }\r\n});\r\n$R.add('service', 'inspector', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // parse\r\n    parse: function(el)\r\n    {\r\n        return $R.create('inspector.parser', this.app, this, el);\r\n    },\r\n\r\n    // text detection\r\n    isText: function(el)\r\n    {\r\n        if (typeof el === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(el))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        var node = $R.dom(el).get();\r\n        return (node && node.nodeType === 3); //  && !this.selection.getBlock(el)\r\n    },\r\n\r\n    // tag detection\r\n    isInlineTag: function(tag, extend)\r\n    {\r\n        var tags = this._extendTags(this.opts.inlineTags, extend);\r\n\r\n        return (this._isTag(tag) && tags.indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n    isBlockTag: function(tag, extend)\r\n    {\r\n        var tags = this._extendTags(this.opts.blockTags, extend);\r\n\r\n        return (this._isTag(tag) && tags.indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n    isTableCellTag: function(tag)\r\n    {\r\n        return (['td', 'th'].indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n    isHeadingTag: function(tag)\r\n    {\r\n        return (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].indexOf(tag.toLowerCase()) !== -1);\r\n    },\r\n\r\n\r\n    _isTag: function(tag)\r\n    {\r\n        return (tag !== undefined && tag);\r\n    },\r\n    _extendTags: function(tags, extend)\r\n    {\r\n        tags = tags.concat(tags);\r\n\r\n        if (extend)\r\n        {\r\n            for (var i = 0 ; i < extend.length; i++)\r\n            {\r\n                tags.push(extend[i]);\r\n            }\r\n        }\r\n\r\n        return tags;\r\n    }\r\n});\r\n$R.add('class', 'inspector.parser', {\r\n    init: function(app, inspector, el)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.selection = app.selection;\r\n        this.inspector = inspector;\r\n\r\n        // local\r\n        var $editor = this.editor.getElement();\r\n        this.el = el;\r\n        this.$el = $R.dom(this.el, $editor);\r\n        this.node = this.$el.get();\r\n\r\n        // comment node\r\n        if (this.node && this.node.nodeType === 8)\r\n        {\r\n            this.node = false;\r\n        }\r\n\r\n        this.$component = this.$el.closest('.redactor-component', $editor);\r\n    },\r\n    // is\r\n    isEditor: function()\r\n    {\r\n        return (this.node === this.editor.getElement().get());\r\n    },\r\n    isInEditor: function()\r\n    {\r\n        return (this.$el.parents('.redactor-in-' + this.uuid).length !== 0);\r\n    },\r\n    isComponent: function()\r\n    {\r\n        return (this.$component.length !== 0);\r\n    },\r\n    isComponentType: function(type)\r\n    {\r\n        return (this.getComponentType() === type);\r\n    },\r\n    isComponentActive: function()\r\n    {\r\n        return (this.isComponent() && this.$component.hasClass('redactor-component-active'));\r\n    },\r\n    isComponentEditable: function()\r\n    {\r\n        var types = ['code', 'table'];\r\n        var type = this.getComponentType();\r\n\r\n        return (this.isComponent() && types.indexOf(type) !== -1);\r\n    },\r\n    isFigcaption: function()\r\n    {\r\n        return this.getFigcaption();\r\n    },\r\n    isPre: function()\r\n    {\r\n        return this.getPre();\r\n    },\r\n    isCode: function()\r\n    {\r\n        var $code = this.$el.closest('code');\r\n        var $parent = $code.parent('pre');\r\n\r\n        return ($code.length !== 0 && $parent.length === 0);\r\n    },\r\n    isList: function()\r\n    {\r\n        return this.getList();\r\n    },\r\n    isFirstListItem: function()\r\n    {\r\n        return this._getLastOrFirstListItem('first');\r\n    },\r\n    isLastListItem: function()\r\n    {\r\n        return this._getLastOrFirstListItem('last');\r\n    },\r\n    isFirstTableCell: function()\r\n    {\r\n        return this._getLastOrFirstTableCell('first');\r\n    },\r\n    isLastTableCell: function()\r\n    {\r\n        return this._getLastOrFirstTableCell('last');\r\n    },\r\n    isTable: function()\r\n    {\r\n        return (this.isComponentType('table') || this.getTable());\r\n    },\r\n    isHeading: function()\r\n    {\r\n        return this.getHeading();\r\n    },\r\n    isBlockquote: function()\r\n    {\r\n        return this.getBlockquote();\r\n    },\r\n    isDl: function()\r\n    {\r\n        return this.getDl();\r\n    },\r\n    isParagraph: function()\r\n    {\r\n        return this.getParagraph();\r\n    },\r\n    isLink: function()\r\n    {\r\n        return this.getLink();\r\n    },\r\n    isFile: function()\r\n    {\r\n        return this.getFile();\r\n    },\r\n    isText: function()\r\n    {\r\n        return this.inspector.isText(this.el);\r\n    },\r\n    isInline: function()\r\n    {\r\n        var tags = this.opts.inlineTags;\r\n\r\n        return (this.isElement()) ? (tags.indexOf(this.node.tagName.toLowerCase()) !== -1) : false;\r\n    },\r\n    isBlock: function()\r\n    {\r\n        var tags = this.opts.blockTags;\r\n\r\n        return (this.isElement()) ? (tags.indexOf(this.node.tagName.toLowerCase()) !== -1) : false;\r\n    },\r\n    isElement: function()\r\n    {\r\n        return (this.node && this.node.nodeType && this.node.nodeType !== 3);\r\n    },\r\n\r\n    // has\r\n    hasParent: function(tags)\r\n    {\r\n        return (this.$el.closest(tags.join(',')).length !== 0);\r\n    },\r\n\r\n    // get\r\n    getNode: function()\r\n    {\r\n        return this.node;\r\n    },\r\n    getTag: function()\r\n    {\r\n        return (this.isElement()) ? this.node.tagName.toLowerCase() : false;\r\n    },\r\n    getComponent: function()\r\n    {\r\n        return (this.isComponent()) ? this.$component.get() : false;\r\n    },\r\n    getComponentType: function()\r\n    {\r\n        return (this.isComponent()) ? this.$component.attr('data-redactor-type') : false;\r\n    },\r\n    getFirstNode: function()\r\n    {\r\n        return this.utils.getFirstNode(this.node);\r\n    },\r\n    getLastNode: function()\r\n    {\r\n        return this.utils.getLastNode(this.node);\r\n    },\r\n    getFirstElement: function()\r\n    {\r\n        return this.utils.getFirstElement(this.node);\r\n    },\r\n    getLastElement: function()\r\n    {\r\n        return this.utils.getLastElement(this.node);\r\n    },\r\n    getFigcaption: function()\r\n    {\r\n        return this._getClosestNode('figcaption');\r\n    },\r\n    getPre: function()\r\n    {\r\n        return this._getClosestNode('pre');\r\n    },\r\n    getCode: function()\r\n    {\r\n        return this._getClosestNode('code');\r\n    },\r\n    getList: function()\r\n    {\r\n        return this._getClosestNode('ul, ol');\r\n    },\r\n    getParentList: function()\r\n    {\r\n        return this._getClosestUpNode('ul, ol');\r\n    },\r\n    getListItem: function()\r\n    {\r\n        return this._getClosestNode('li');\r\n    },\r\n    getTable: function()\r\n    {\r\n        if (this.getComponentType('table'))\r\n        {\r\n            return this.$component.find('table').get();\r\n        }\r\n        else\r\n        {\r\n            return this._getClosestNode('table');\r\n        }\r\n    },\r\n    getTableCell: function()\r\n    {\r\n        var $td = this.$el.closest('td, th');\r\n\r\n        return ($td.length !== 0) ? $td.get() : false;\r\n    },\r\n    getComponentCodeElement: function()\r\n    {\r\n        return (this.isComponentType('code')) ? this.$component.find('pre code, pre').last().get() : false;\r\n    },\r\n    getImageElement: function()\r\n    {\r\n        return (this.isComponentType('image')) ? this.$component.find('img').get() : false;\r\n    },\r\n    getParagraph: function()\r\n    {\r\n        return this._getClosestNode('p');\r\n    },\r\n    getHeading: function()\r\n    {\r\n        return this._getClosestNode('h1, h2, h3, h4, h5, h6');\r\n    },\r\n    getDl: function()\r\n    {\r\n        return this._getClosestNode('dl');\r\n    },\r\n    getBlockquote: function()\r\n    {\r\n        return this._getClosestNode('blockquote');\r\n    },\r\n    getLink: function()\r\n    {\r\n        var isComponent = (this.isComponent() && !this.isFigcaption());\r\n        var isTable = this.isComponentType('table');\r\n\r\n        if (isTable || !isComponent)\r\n        {\r\n            var $el = this._getClosestElement('a');\r\n\r\n            return ($el && !$el.attr('data-file')) ? $el.get() : false;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getFile: function()\r\n    {\r\n        var isComponent = this.isComponent();\r\n        var isTable = this.isComponentType('table');\r\n\r\n        if (isTable || !isComponent)\r\n        {\r\n            var $el = this._getClosestElement('a');\r\n\r\n            return ($el && $el.attr('data-file')) ? $el.get() : false;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    // find\r\n    findFirstNode: function(selector)\r\n    {\r\n        return this.$el.find(selector).first().get();\r\n    },\r\n    findLastNode: function(selector)\r\n    {\r\n        return this.$el.find(selector).last().get();\r\n    },\r\n\r\n    // private\r\n    _getLastOrFirstListItem: function(type)\r\n    {\r\n        var list = this.getList();\r\n        var tag = this.getTag();\r\n        if (list && tag === 'li')\r\n        {\r\n            var item = $R.dom(list).find('li')[type]().get();\r\n            if (item && this.node === item)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _getLastOrFirstTableCell: function(type)\r\n    {\r\n        var table = this.getTable();\r\n        var tag = this.getTag();\r\n        if (table && (tag === 'td' || tag === 'th'))\r\n        {\r\n            var item = $R.dom(table).find('td, th')[type]().get();\r\n            if (item && this.node === item)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _getClosestUpNode: function(selector)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $el = this.$el.parents(selector, $editor).last();\r\n\r\n        return ($el.length !== 0) ? $el.get() : false;\r\n    },\r\n    _getClosestNode: function(selector)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $el = this.$el.closest(selector, $editor);\r\n\r\n        return ($el.length !== 0) ? $el.get() : false;\r\n    },\r\n    _getClosestElement: function(selector)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $el = this.$el.closest(selector, $editor);\r\n\r\n        return ($el.length !== 0) ? $el : false;\r\n    }\r\n});\r\n$R.add('service', 'marker', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    build: function(pos, html)\r\n    {\r\n        var marker = document.createElement('span');\r\n\r\n        marker.id = 'selection-marker-' + this._getPos(pos);\r\n        marker.className = 'redactor-selection-marker';\r\n        marker.innerHTML = this.opts.markerChar;\r\n\r\n        return (html) ? marker.outerHTML : marker;\r\n    },\r\n    buildHtml: function(pos)\r\n    {\r\n        return this.build(pos, true);\r\n    },\r\n    insert: function(side)\r\n    {\r\n        this.remove();\r\n\r\n        var atStart = (side !== 'both' && (side === 'start' || this.selection.isCollapsed()));\r\n\r\n        if (!this.selection.is()) this.editor.focus();\r\n\r\n        var range = this.selection.getRange();\r\n        if (range)\r\n        {\r\n            var start = this.build('start');\r\n            var end = this.build('end');\r\n\r\n            var cloned = range.cloneRange();\r\n\r\n            if (!atStart)\r\n            {\r\n                cloned.collapse(false);\r\n                cloned.insertNode(end);\r\n            }\r\n\r\n            cloned.setStart(range.startContainer, range.startOffset);\r\n            cloned.collapse(true);\r\n            cloned.insertNode(start);\r\n\r\n            range.setStartAfter(start);\r\n\r\n            if (!atStart)\r\n            {\r\n                range.setEndBefore(end);\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n\r\n            return start;\r\n        }\r\n    },\r\n    find: function(pos, $context)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $marker = ($context || $editor).find('span#selection-marker-' + this._getPos(pos));\r\n\r\n        return ($marker.length !== 0) ? $marker.get() : false;\r\n    },\r\n    restore: function()\r\n    {\r\n        var start = this.find('start');\r\n        var end = this.find('end');\r\n\r\n        var range = this.selection.getRange();\r\n        if (!range || !this.selection.is())\r\n        {\r\n            this.editor.focus();\r\n            range = document.createRange();\r\n        }\r\n\r\n        if (start)\r\n        {\r\n            var prev = (end) ? end.previousSibling : false;\r\n            var next = start.nextSibling;\r\n            next = (next && next.nodeType === 3 && next.textContent.replace(/[\\n\\t]/g, '') === '') ? false : next;\r\n\r\n            if (!end)\r\n            {\r\n                if (next)\r\n                {\r\n                    range.selectNodeContents(next);\r\n                    range.collapse(true);\r\n                }\r\n                else\r\n                {\r\n                    this._restoreInject(range, start);\r\n                }\r\n            }\r\n            else if (next && next.id === 'selection-marker-end')\r\n            {\r\n                this._restoreInject(range, start);\r\n            }\r\n            else\r\n            {\r\n                if (prev && next)\r\n                {\r\n                    range.selectNodeContents(prev);\r\n                    range.collapse(false);\r\n                    range.setStart(next, 0);\r\n                }\r\n                else if (prev && !next)\r\n                {\r\n                    range.selectNodeContents(prev);\r\n                    range.collapse(false);\r\n                    range.setStartAfter(start);\r\n                }\r\n                else\r\n                {\r\n                    range.setStartAfter(start);\r\n                    range.setEndBefore(end);\r\n                }\r\n            }\r\n\r\n            this.selection.setRange(range);\r\n\r\n            if (start) start.parentNode.removeChild(start);\r\n            if (end) end.parentNode.removeChild(end);\r\n        }\r\n    },\r\n    remove: function()\r\n    {\r\n        var start = this.find('start');\r\n        var end = this.find('end');\r\n\r\n        if (start) start.parentNode.removeChild(start);\r\n        if (end) end.parentNode.removeChild(end);\r\n    },\r\n\r\n    // private\r\n    _getPos: function(pos)\r\n    {\r\n        return (pos === undefined) ? 'start' : pos;\r\n    },\r\n    _restoreInject: function(range, start)\r\n    {\r\n        var textNode = this.utils.createInvisibleChar();\r\n        $R.dom(start).after(textNode);\r\n\r\n        range.selectNodeContents(textNode);\r\n        range.collapse(false);\r\n    }\r\n});\r\n$R.add('service', 'component', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.activeClass = 'redactor-component-active';\r\n    },\r\n    create: function(type, el)\r\n    {\r\n        return $R.create(type + '.component', this.app, el);\r\n    },\r\n    build: function(el)\r\n    {\r\n        var $el = $R.dom(el);\r\n        var component;\r\n        var type = $el.attr('data-redactor-type');\r\n        if (type)\r\n        {\r\n            component = this.create(type, el);\r\n        }\r\n\r\n        return (component) ? component : el;\r\n    },\r\n    remove: function(el, caret)\r\n    {\r\n        var $component = $R.dom(el).closest('.redactor-component');\r\n        var type = $component.attr('data-redactor-type');\r\n        var current = $component.parent();\r\n        var data = this.inspector.parse(current);\r\n        var prev = this.utils.findSiblings($component, 'prev');\r\n        var next = this.utils.findSiblings($component, 'next');\r\n        var stop = this.app.broadcast(type + '.delete', $component);\r\n        if (stop !== false)\r\n        {\r\n            $component.remove();\r\n\r\n            // callback\r\n            this.app.broadcast(type + '.deleted', $component);\r\n            this.app.broadcast('contextbar.close');\r\n            this.app.broadcast('imageresizer.stop');\r\n\r\n            if (caret !== false)\r\n            {\r\n                var cell = data.getTableCell();\r\n                if (cell && this.utils.isEmptyHtml(cell.innerHTML))\r\n                {\r\n                    this.caret.setStart(cell);\r\n                }\r\n                else if (next) this.caret.setStart(next);\r\n                else if (prev) this.caret.setEnd(prev);\r\n                else\r\n                {\r\n                    this.editor.startFocus();\r\n                }\r\n            }\r\n\r\n            // is empty\r\n            if (this.editor.isEmpty())\r\n            {\r\n                this.editor.setEmpty();\r\n                this.editor.startFocus();\r\n                this.app.broadcast('empty');\r\n            }\r\n        }\r\n    },\r\n    isNonEditable: function(el)\r\n    {\r\n        var data = this.inspector.parse(el);\r\n        return (data.isComponent() && !data.isComponentEditable());\r\n    },\r\n    isActive: function(el)\r\n    {\r\n        var $component;\r\n        if (el)\r\n        {\r\n            var data = this.inspector.parse(el);\r\n            $component = $R.dom(data.getComponent());\r\n\r\n            return $component.hasClass(this.activeClass);\r\n        }\r\n        else\r\n        {\r\n            $component = this._find();\r\n\r\n            return ($component.length !== 0);\r\n        }\r\n    },\r\n    getActive: function(dom)\r\n    {\r\n        var $component = this._find();\r\n\r\n        return ($component.length !== 0) ? ((dom) ? $component : $component.get()) : false;\r\n    },\r\n    setActive: function(el)\r\n    {\r\n        this.clearActive();\r\n        this.editor.focus();\r\n\r\n        var data = this.inspector.parse(el);\r\n        var component = data.getComponent();\r\n        var $component = $R.dom(component);\r\n\r\n        if (!data.isFigcaption())\r\n        {\r\n            var $caret = $component.find('.redactor-component-caret');\r\n            if ($caret.length === 0)\r\n            {\r\n                $caret = this._buildCaret();\r\n                $component.prepend($caret);\r\n            }\r\n\r\n            this.caret.setAtStart($caret.get());\r\n        }\r\n\r\n        $component.addClass(this.activeClass);\r\n    },\r\n    clearActive: function()\r\n    {\r\n        var $component = this._find();\r\n\r\n        $component.removeClass(this.activeClass);\r\n        $component.find('.redactor-component-caret').remove();\r\n\r\n        this.app.broadcast('imageresizer.stop');\r\n    },\r\n    setOnEvent: function(e, contextmenu)\r\n    {\r\n        this.clearActive();\r\n\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isFigcaption() || data.isComponentEditable())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // component\r\n        if (data.isComponent())\r\n        {\r\n            this.setActive(e.target);\r\n            if (contextmenu !== true) e.preventDefault();\r\n        }\r\n    },\r\n    executeScripts: function(scripts)\r\n    {\r\n        if (scripts === undefined)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var scripts = $editor.find('[data-redactor-type]').find(\"script\").getAll();\r\n            this.executeScripts.call(this, scripts);\r\n        }\r\n        else\r\n        {\r\n            for (var i = 0; i < scripts.length; i++)\r\n            {\r\n                if (scripts[i].src !== '')\r\n                {\r\n                    var src = scripts[i].src;\r\n                    this.$doc.find('head script[src=\"' + src + '\"]').remove();\r\n\r\n                    var $script = $R.dom('<script>');\r\n                    $script.attr('src', src);\r\n                    $script.attr('async defer');\r\n                    $script.get().onload = function()\r\n                    {\r\n                        if (src.search('instagram') !== -1) window.instgrm.Embeds.process();\r\n                        this.executeScripts(scripts.slice(i + 1));\r\n                    }.bind(this);\r\n\r\n                    var head = document.getElementsByTagName('head')[0];\r\n                    if (head) head.appendChild($script.get());\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    // private\r\n    _find: function()\r\n    {\r\n        return this.editor.getElement().find('.' + this.activeClass);\r\n    },\r\n    _buildCaret: function()\r\n    {\r\n        var $caret = $R.dom('<span>');\r\n        $caret.addClass('redactor-component-caret');\r\n        $caret.attr('contenteditable', true);\r\n\r\n        return $caret;\r\n    }\r\n});\r\n$R.add('service', 'insertion', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    set: function(html, clean, focus)\r\n    {\r\n        if (html === null) {\r\n            html = '';\r\n        }\r\n\r\n        html = (clean !== false) ? this.cleaner.input(html) : html;\r\n        html = (clean !== false) ? this.cleaner.paragraphize(html) : html;\r\n\r\n        // set html\r\n        var $editor = this.editor.getElement();\r\n        $editor.html(html);\r\n\r\n        // set focus at the end\r\n        if (focus !== false) this.editor.endFocus();\r\n\r\n        return html;\r\n    },\r\n    insertNode: function(node, caret)\r\n    {\r\n        this.editor.focus();\r\n        var fragment = (this.utils.isFragment(node)) ? node : this.utils.createFragment(node);\r\n\r\n        this._collapseSelection();\r\n        this._insertFragment(fragment);\r\n        this._setCaret(caret, fragment);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    insertBreakLine: function()\r\n    {\r\n        return this.insertNode(document.createElement('br'), 'after');\r\n    },\r\n    insertNewline: function()\r\n    {\r\n        return this.insertNode(document.createTextNode('\\n'), 'after');\r\n    },\r\n    insertText: function(text)\r\n    {\r\n        return this.insertHtml(this.cleaner.getFlatText(text));\r\n    },\r\n    insertChar: function(charhtml)\r\n    {\r\n        return this.insertNode(charhtml, 'after');\r\n    },\r\n    insertRaw: function(html)\r\n    {\r\n        return this.insertHtml(html, false);\r\n    },\r\n    insertToEnd: function(lastNode, type)\r\n    {\r\n        if (!lastNode) return;\r\n        if (lastNode.nodeType === 3 && lastNode.nodeValue.search(/^\\n/) !== -1)\r\n        {\r\n            lastNode = lastNode.previousElementSibling;\r\n        }\r\n\r\n        var $lastNode = $R.dom(lastNode);\r\n        if ($lastNode.attr('data-redactor-type') === type)\r\n        {\r\n            var tag = (this.opts.breakline) ? '<br>' : '<p>';\r\n            var $newNode = $R.dom(tag);\r\n\r\n            $lastNode.after($newNode);\r\n            this.caret.setStart($newNode);\r\n        }\r\n    },\r\n    insertPoint: function(e)\r\n    {\r\n        var range, data;\r\n        var marker = this.marker.build('start');\r\n        var markerInserted = false;\r\n        var x = e.clientX, y = e.clientY;\r\n\r\n        if (document.caretPositionFromPoint)\r\n        {\r\n            var pos = document.caretPositionFromPoint(x, y);\r\n            var sel = document.getSelection();\r\n\r\n            data = this.inspector.parse(pos.offsetNode);\r\n            if (data.isInEditor())\r\n            {\r\n                range = sel.getRangeAt(0);\r\n                range.setStart(pos.offsetNode, pos.offset);\r\n                range.collapse(true);\r\n                range.insertNode(marker);\r\n                markerInserted = true;\r\n            }\r\n        }\r\n        else if (document.caretRangeFromPoint)\r\n        {\r\n            range = document.caretRangeFromPoint(x, y);\r\n\r\n            data = this.inspector.parse(range.startContainer);\r\n            if (data.isInEditor())\r\n            {\r\n                range.insertNode(marker);\r\n                markerInserted = true;\r\n            }\r\n        }\r\n\r\n        return markerInserted;\r\n    },\r\n    insertToPoint: function(e, html, point, clean)\r\n    {\r\n        var pointInserted = (point === true) ? true : this.insertPoint(e);\r\n        if (!pointInserted)\r\n        {\r\n            var lastNode = this.editor.getLastNode();\r\n            $R.dom(lastNode).after(this.marker.build('start'));\r\n        }\r\n\r\n        this.component.clearActive();\r\n        this.selection.restoreMarkers();\r\n\r\n        return this.insertHtml(html, clean);\r\n    },\r\n    insertToOffset: function(start, html)\r\n    {\r\n        this.offset.set({ start: start, end: start });\r\n\r\n        return this.insertHtml(html);\r\n    },\r\n    insertHtml: function(html, clean)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        // parse\r\n        var parsedInput = this.utils.parseHtml(html);\r\n\r\n        // all selection\r\n        if (this.selection.isAll())\r\n        {\r\n            return this._insertToAllSelected(parsedInput);\r\n        }\r\n\r\n        // there is no selection\r\n        if (!this.selection.is())\r\n        {\r\n            var $el = $R.dom('<p>');\r\n            var $editor = this.editor.getElement();\r\n\r\n            $editor.append($el);\r\n            this.caret.setStart($el);\r\n        }\r\n\r\n        // environment\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var isText = this.selection.isText();\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock();\r\n        var dataCurrent = this.inspector.parse(current);\r\n\r\n        // collapse air\r\n        this._collapseSelection();\r\n\r\n        // clean\r\n        parsedInput = this._getCleanedInput(parsedInput, dataCurrent, clean);\r\n\r\n        // input is figure or component span\r\n        var isFigure = this._isFigure(parsedInput.html);\r\n        var isComponentSpan = this._isComponentSpan(parsedInput.html);\r\n        var isInsertedText = this.inspector.isText(parsedInput.html);\r\n        var fragment, except;\r\n\r\n        // multiple selection\r\n        //var blocks = this.selection.getBlocks();\r\n        //if (blocks && blocks.length > 1) {\r\n        //    parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n        //}\r\n\r\n        // empty editor\r\n        if (this.editor.isEmpty())\r\n        {\r\n            return this._insertToEmptyEditor(parsedInput.html);\r\n        }\r\n        // to component\r\n        else if (dataCurrent.isComponent() && !dataCurrent.isComponentEditable())\r\n        {\r\n            return this._insertToWidget(current, dataCurrent, parsedInput.html);\r\n        }\r\n        // component span\r\n        else if (isComponentSpan)\r\n        {\r\n            return this.insertNode(parsedInput.nodes, 'end');\r\n        }\r\n        // inserting figure & split node\r\n        else if (isFigure && !isText && !dataCurrent.isList())\r\n        {\r\n            if (dataCurrent.isInline())\r\n            {\r\n                return this._insertToInline(current, parsedInput);\r\n            }\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n            this.utils.splitNode(current, fragment);\r\n            this.caret.setEnd(fragment.last);\r\n\r\n            return this._sendNodes(fragment.nodes);\r\n        }\r\n        // to code\r\n        else if (dataCurrent.isCode())\r\n        {\r\n            return this._insertToCode(parsedInput, current, clean);\r\n        }\r\n        // to pre\r\n        else if (dataCurrent.isPre())\r\n        {\r\n            return this._insertToPre(parsedInput, clean);\r\n        }\r\n        // to h1-h6 & figcaption\r\n        else if (dataCurrent.isHeading() || dataCurrent.isFigcaption())\r\n        {\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeTagsExcept(parsedInput.html, ['a']) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.replaceNbspToSpaces(parsedInput.html) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment, 'end');\r\n        }\r\n        // breakline div\r\n        else if (this.opts.breakline && block && block.tagName === 'DIV') {\r\n\r\n            if (this._isPlainHtml(parsedInput.html)) {\r\n                return this.insertNode(parsedInput.nodes, 'end');\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            var range = this.selection.getRange();\r\n            if (range && !this.selection.isCollapsed()) {\r\n                range.deleteContents();\r\n            }\r\n\r\n            this.utils.splitNode(current, fragment);\r\n            this.caret.setEnd(fragment.last);\r\n\r\n            return this._sendNodes(fragment.nodes);\r\n        }\r\n        // text inserting\r\n        else if (isInsertedText)\r\n        {\r\n            if (!isText && this.opts.markup !== 'br' && this._hasBlocksAndImages(parsedInput.nodes))\r\n            {\r\n                parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n\r\n                fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n                this.utils.splitNode(current, fragment);\r\n                this.caret.setEnd(fragment.last);\r\n                return this._sendNodes(fragment.nodes);\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? parsedInput.html.replace(/\\n/g, '<br>') : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment.nodes, 'end');\r\n        }\r\n        // uncollapsed\r\n        else if (!isCollapsed && !isFigure)\r\n        {\r\n            if (this._isPlainHtml(parsedInput.html))\r\n            {\r\n                return this.insertNode(parsedInput.nodes, 'end');\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment, 'end');\r\n        }\r\n        // to inline tag\r\n        else if (dataCurrent.isInline() && !this._isPlainHtml(parsedInput.html))\r\n        {\r\n            return this._insertToInline(current, parsedInput);\r\n        }\r\n        // to blockquote or dt, dd\r\n        else if (dataCurrent.isBlockquote() || dataCurrent.isDl())\r\n        {\r\n            except = this.opts.inlineTags;\r\n            except.concat(['br']);\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.replaceBlocksToBr(parsedInput.html) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeTagsExcept(parsedInput.html, except) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            return this.insertNode(fragment, 'end');\r\n        }\r\n        // to p\r\n        else if (dataCurrent.isParagraph())\r\n        {\r\n            if (this._isPlainHtml(parsedInput.html))\r\n            {\r\n                return this.insertNode(parsedInput.nodes, 'end');\r\n            }\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.paragraphize(parsedInput.html) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n            this.utils.splitNode(current, fragment);\r\n            this.caret.setEnd(fragment.last);\r\n\r\n            return this._sendNodes(fragment.nodes);\r\n        }\r\n        // to li\r\n        else if (dataCurrent.isList())\r\n        {\r\n            except = this.opts.inlineTags;\r\n            except = except.concat(['br', 'li', 'ul', 'ol', 'img']);\r\n\r\n            parsedInput.html = (clean !== false) ? this.cleaner.replaceBlocksToBr(parsedInput.html) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeTagsExcept(parsedInput.html, except) : parsedInput.html;\r\n            parsedInput.html = (clean !== false) ? this.cleaner.removeBrAtEnd(parsedInput.html) : parsedInput.html;\r\n\r\n            fragment = this.utils.createFragment(parsedInput.html);\r\n            parsedInput.nodes = fragment.nodes;\r\n\r\n            if (this._containsTags(parsedInput.html, ['ul', 'ol', 'li']))\r\n            {\r\n                var element = this.selection.getElement(current);\r\n                if (element && element.tagName === 'LI' && this.caret.isStart(element))\r\n                {\r\n                    parsedInput.nodes = $R.dom(fragment.nodes).unwrap('ul, ol').getAll();\r\n                    $R.dom(element).before(parsedInput.nodes);\r\n\r\n                    var lastNode = parsedInput.nodes[parsedInput.nodes.length-1];\r\n                    this.caret.setEnd(lastNode);\r\n\r\n                    return this._sendNodes(parsedInput.nodes);\r\n                }\r\n                else if (this._isPlainHtml(parsedInput.html))\r\n                {\r\n                    return this.insertNode(fragment, 'end');\r\n                }\r\n                else\r\n                {\r\n                    fragment = this._buildList(parsedInput, element, fragment);\r\n\r\n                    this.utils.splitNode(current, fragment, true);\r\n                    this.caret.setEnd(fragment.last);\r\n\r\n                    return this._sendNodes(fragment.nodes);\r\n                }\r\n            }\r\n        }\r\n\r\n        // other cases\r\n        return this.insertNode(parsedInput.nodes, 'end');\r\n    },\r\n\r\n    // private\r\n    _insertToAllSelected: function(parsedInput)\r\n    {\r\n        var insertedHtml = this.set(parsedInput.html);\r\n        var dataInserted = this.utils.parseHtml(insertedHtml);\r\n\r\n        return this._sendNodes(dataInserted.nodes);\r\n    },\r\n    _insertToEmptyEditor: function(html)\r\n    {\r\n        html = this.cleaner.paragraphize(html);\r\n\r\n        var fragment = this.utils.createFragment(html);\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.html('');\r\n        $editor.append(fragment.frag);\r\n\r\n        this.caret.setEnd(fragment.last);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    _insertToInline: function(current, parsedInput)\r\n    {\r\n        var fragment = this.utils.createFragment(parsedInput.html);\r\n        this.utils.splitNode(current, fragment, false, true);\r\n        this.caret.setEnd(fragment.last);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    _insertToCode: function(parsedInput, current, clean)\r\n    {\r\n        parsedInput.html = (clean !== false) ? this.cleaner.encodeHtml(parsedInput.html) : parsedInput.html;\r\n        parsedInput.html = (clean !== false) ? this.cleaner.removeNl(parsedInput.html) : parsedInput.html;\r\n\r\n        var fragment = this.utils.createFragment(parsedInput.html);\r\n        var nodes = this.insertNode(fragment, 'end');\r\n\r\n        this.utils.normalizeTextNodes(current);\r\n\r\n        return nodes;\r\n    },\r\n    _insertToPre: function(parsedInput, clean)\r\n    {\r\n        parsedInput.html = (clean !== false) ? this.cleaner.encodeHtml(parsedInput.html) : parsedInput.html;\r\n\r\n        var fragment = this.utils.createFragment(parsedInput.html);\r\n\r\n        return this.insertNode(fragment, 'end');\r\n    },\r\n    _insertToWidget: function(current, dataCurrent, html)\r\n    {\r\n        html = (this._isComponentSpan(html)) ? html : this.cleaner.paragraphize(html);\r\n\r\n        var fragment = this.utils.createFragment(html);\r\n        var component = dataCurrent.getComponent();\r\n        var $component = $R.dom(component);\r\n\r\n        $component.after(fragment.frag);\r\n        $component.remove();\r\n\r\n        this.caret.setEnd(fragment.last);\r\n\r\n        return this._sendNodes(fragment.nodes);\r\n    },\r\n    _insertFragment: function(fragment)\r\n    {\r\n        var range = this.selection.getRange();\r\n        if (range)\r\n        {\r\n            if (this.selection.isCollapsed())\r\n            {\r\n                var startNode = range.startContainer;\r\n                if (startNode.nodeType !== 3 && startNode.tagName === 'BR')\r\n                {\r\n                    this.caret.setAfter(startNode);\r\n                    startNode.parentNode.removeChild(startNode);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                range.deleteContents();\r\n            }\r\n\r\n            range.insertNode(fragment.frag);\r\n        }\r\n    },\r\n    _sendNodes: function(nodes)\r\n    {\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var el = nodes[i];\r\n            var type = (el.nodeType !== 3 && typeof el.getAttribute === 'function') ? el.getAttribute('data-redactor-type') : false;\r\n            if (type)\r\n            {\r\n                this.app.broadcast(type + '.inserted', this.component.build(el));\r\n            }\r\n        }\r\n\r\n        if (this.detector.isIe())\r\n        {\r\n            this.editor.getElement().find('[data-redactor-type=table]').attr('contenteditable', true);\r\n        }\r\n\r\n        // callback\r\n        this.app.broadcast('inserted', nodes);\r\n\r\n        // widget's scripts\r\n        this.component.executeScripts();\r\n\r\n        return nodes;\r\n    },\r\n    _setCaret: function(caret, fragment)\r\n    {\r\n        var isLastInline = this._isLastInline(fragment);\r\n\r\n        if (caret)\r\n        {\r\n            caret = (isLastInline && caret === 'end') ? 'after' : caret;\r\n            this.caret['set' + this.utils.ucfirst(caret)](fragment.last);\r\n        }\r\n        else if (caret !== false)\r\n        {\r\n            if (isLastInline) this.caret.setAfter(fragment.last);\r\n        }\r\n    },\r\n    _isLastInline: function(fragment)\r\n    {\r\n        if (fragment.last)\r\n        {\r\n            var data = this.inspector.parse(fragment.last);\r\n\r\n            return data.isInline();\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _getCleanedInput: function(parsedInput, dataCurrent, clean)\r\n    {\r\n        var isPreformatted = (dataCurrent.isCode() || dataCurrent.isPre());\r\n\r\n        parsedInput.html = parsedInput.html.replace(/&nbsp;/g, ' ');\r\n        parsedInput.html = (!isPreformatted && clean !== false) ? this.cleaner.input(parsedInput.html) : parsedInput.html;\r\n        parsedInput = (!isPreformatted && clean !== false) ? this.utils.parseHtml(parsedInput.html) : parsedInput;\r\n\r\n        return parsedInput;\r\n    },\r\n    _getContainer: function(nodes)\r\n    {\r\n        return $R.dom(this.utils.createTmpContainer(nodes));\r\n    },\r\n    _buildList: function(parsedInput, list, fragment)\r\n    {\r\n        var nodes = parsedInput.nodes;\r\n        var first = nodes[0];\r\n\r\n        if (first && first.nodeType !== 3 && first.tagName === 'li')\r\n        {\r\n            var $parent = $R.dom(list);\r\n            var parentListTag = $parent.get().tagName.toLowerCase();\r\n            var $list = $R.dom('<' + parentListTag + ' />');\r\n            $list.append(fragment.nodes);\r\n\r\n            return this.utils.createFragment($list.get().outerHTML);\r\n        }\r\n\r\n        return fragment;\r\n    },\r\n    _containsTags: function(html, tags)\r\n    {\r\n        return (this._getContainer(html).find(tags.join(',')).length !== 0);\r\n    },\r\n    _collapseSelection: function()\r\n    {\r\n        //if (this.app.isAirToolbar()) this.selection.collapseToEnd();\r\n    },\r\n    _hasFigureOrTable: function(nodes)\r\n    {\r\n        return (this._getContainer(nodes).find('figure, table').length !== 0);\r\n    },\r\n    _hasBlocks: function(nodes)\r\n    {\r\n        return (this._getContainer(nodes).find(this.opts.blockTags.join(',')).length !== 0);\r\n    },\r\n    _hasBlocksAndImages: function(nodes)\r\n    {\r\n        return (this._getContainer(nodes).find(this.opts.blockTags.join(',') + ',img').length !== 0);\r\n    },\r\n    _isPlainHtml: function(html)\r\n    {\r\n        return (this._getContainer(html).find(this.opts.blockTags.join(',') + ', img').length === 0);\r\n    },\r\n    _isFigure: function(html)\r\n    {\r\n        if (this._isHtmlString(html))\r\n        {\r\n            return ($R.dom(html).closest('figure').length !== 0);\r\n        }\r\n    },\r\n    _isComponentSpan: function(html)\r\n    {\r\n        if (this._isHtmlString(html))\r\n        {\r\n            return ($R.dom(html).closest('span.redactor-component').length !== 0);\r\n        }\r\n    },\r\n    _isHtmlString: function(html)\r\n    {\r\n        return !(typeof html === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(html));\r\n    }\r\n});\r\n$R.add('service', 'block', {\r\n    init: function(app) {\r\n        this.app = app;\r\n        this.tags = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\r\n    },\r\n    // format\r\n    format: function(args) {\r\n\r\n        // params\r\n        this.params = {\r\n            args: false\r\n        };\r\n\r\n        // type of applying styles and attributes\r\n        this.params.type = (args.type) ? args.type : 'set'; // add, remove, toggle\r\n\r\n        // tag\r\n        this.params.tag = (typeof args === 'string') ? args : (args.tag || this.opts.markup);\r\n        this.params.tag = this.params.tag.toLowerCase();\r\n\r\n        // args\r\n        this.params.args = {\r\n            'class': args['class'] || false,\r\n            'style': args['style'] || false,\r\n            'attr': args['attr'] || false\r\n        };\r\n\r\n        if (!args['class'] && !args['style'] && !args['attr']) {\r\n            this.params.args = false;\r\n        }\r\n\r\n        // format\r\n        return this._format();\r\n    },\r\n\r\n    // funcs\r\n    add: function(args, tags, el) {\r\n        return this._apply('add', args, tags, true, el);\r\n    },\r\n    set: function(args, tags) {\r\n        return this._apply('set', args, tags);\r\n    },\r\n    toggle: function(args, tags) {\r\n        return this._apply('toggle', args, tags);\r\n    },\r\n    remove: function(args, tags) {\r\n        return this._apply('remove', args, tags);\r\n    },\r\n\r\n    // clear\r\n    clearFormat: function(tags) {\r\n        return this._clear(tags, 'all');\r\n    },\r\n    clearStyle: function(tags) {\r\n        return this._clear(tags, 'style');\r\n    },\r\n    clearClass: function(tags) {\r\n        return this._clear(tags, 'class');\r\n    },\r\n    clearAttr: function(tags) {\r\n        return this._clear(tags, 'attr');\r\n    },\r\n\r\n    // format\r\n    _format: function() {\r\n\r\n        var nodes = [];\r\n\r\n        // collapsed\r\n        this.collapsed = this.selection.isCollapsed();\r\n\r\n        // save selection\r\n        this.selection.save();\r\n\r\n        // blocks\r\n        var block = this.selection.getBlock();\r\n        var blocks = this._getBlocks();\r\n        var type = (this._isToggleFormatType(blocks)) ? 'toggle' : 'set';\r\n        var replacedTag = this._getReplacedTag(type);\r\n\r\n        nodes = this._replaceBlocks(blocks, replacedTag);\r\n\r\n        // apply args & clean\r\n        nodes = this._buildNodes(nodes);\r\n\r\n        // restore selection\r\n        this._restoreSelection(nodes);\r\n\r\n        return nodes;\r\n    },\r\n\r\n\r\n    // clear\r\n    _clear: function(tags, type, selection, nodes) {\r\n        // save selection\r\n        if (selection !== false) {\r\n\t\t    this.selection.save();\r\n\t\t}\r\n\r\n        // get elements\r\n        var $elements = this._getElements(tags, nodes);\r\n\r\n        // remove all format\r\n        if (type === 'all') {\r\n            this._removeAllAttr($elements, false);\r\n        }\r\n        // remove style\r\n        else if (type === 'style') {\r\n            $elements.removeAttr('style');\r\n            $elements.removeAttr('data-redactor-style-cache');\r\n        }\r\n        // remove class\r\n        else if (type === 'class') {\r\n            $elements.removeAttr('class');\r\n        }\r\n        // remove attrs\r\n        else if (type === 'attr') {\r\n            this._removeAllAttr($elements);\r\n        }\r\n\r\n        // get nodes\r\n        nodes = $elements.getAll();\r\n\r\n        // restore selection\r\n        if (selection !== false) {\r\n            this._restoreSelection(nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // get\r\n    _getElements: function(tags, nodes) {\r\n        return (nodes) ? $R.dom(nodes) : $R.dom(this._getBlocks(tags));\r\n    },\r\n    _getBlocks: function(tags) {\r\n        var blocks = this.selection.getBlocks({ tags: tags || this.tags });\r\n        var finalBlocks = [];\r\n        for (var i = 0; i < blocks.length; i++) {\r\n            if (blocks[i].tagName === 'DIV' && !blocks[i].getAttribute('data-redactor-tag')) {\r\n                continue;\r\n            }\r\n            else {\r\n                finalBlocks.push(blocks[i]);\r\n            }\r\n        }\r\n\r\n        return finalBlocks;\r\n    },\r\n\r\n    _getReplacedTag: function(type) {\r\n        if (this.opts.breakline) {\r\n            return (type === 'toggle') ? 'div' : (this.params.tag === 'p') ? 'div' : this.params.tag;\r\n        }\r\n        else {\r\n            return (type === 'toggle') ? this.opts.markup : this.params.tag;\r\n        }\r\n    },\r\n\r\n    // is\r\n    _isStandardParagraph: function() {\r\n        return (!this.opts.breakline && this.opts.markup === 'p');\r\n    },\r\n    _isStandardDiv: function() {\r\n        return (!this.opts.breakline && this.opts.markup === 'div');\r\n    },\r\n    _isBreaklineBlock: function(block) {\r\n        return (block && block.tagName === 'DIV' && block.getAttribute('data-redactor-tag') === 'br');\r\n    },\r\n    _isToggleFormatType: function(blocks) {\r\n        var count = 0;\r\n        var len = blocks.length;\r\n        for (var i = 0; i < len; i++) {\r\n            if (blocks[i] && this.params.tag === blocks[i].tagName.toLowerCase()) count++;\r\n        }\r\n\r\n        return (count === len);\r\n    },\r\n    _isCurrentBlockOneAndEmpty: function(nodes) {\r\n        return (this.collapsed && nodes.length === 1 && this.utils.isEmpty(nodes[0]));\r\n    },\r\n\r\n    // build\r\n    _buildNodes: function(nodes) {\r\n        if (nodes.length > 0) {\r\n            // clean & appliyng styles and attributes\r\n            nodes = this._applyArgs(nodes, false);\r\n            nodes = this._combinePre(nodes);\r\n            nodes = this._cleanBlocks(nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // replace\r\n    _replaceBlocks: function(blocks, replacedTag) {\r\n        var nodes = [];\r\n\r\n        for (var i = 0; i < blocks.length; i++) {\r\n            var $node = this.utils.replaceToTag(blocks[i], replacedTag);\r\n            nodes.push($node.get());\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // combine\r\n    _combinePre: function(nodes) {\r\n        var combinedNodes = [];\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var next = nodes[i].nextElementSibling;\r\n            if (next && nodes[i].tagName === 'PRE' && next.tagName === 'PRE') {\r\n                var $current = $R.dom(nodes[i]);\r\n                var $next = $R.dom(next);\r\n                var newline = document.createTextNode('\\n');\r\n\r\n                $current.append(newline);\r\n                $current.append($next);\r\n                $next.unwrap('pre');\r\n            }\r\n\r\n            combinedNodes.push(nodes[i]);\r\n        }\r\n\r\n        return combinedNodes;\r\n    },\r\n\r\n    // clean\r\n    _cleanBlocks: function(nodes) {\r\n        var headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\r\n        var tags = this.opts.inlineTags;\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var tag = nodes[i].tagName.toLowerCase();\r\n            var $node = $R.dom(nodes[i]);\r\n\r\n            // remove all spans in headings\r\n            if (headings.indexOf(tag) !== - 1) {\r\n                $node.find('span').not('.redactor-component, .non-editable, .redactor-selection-marker').unwrap();\r\n            }\r\n            // remove all inlines in pre\r\n            else if (tag === 'pre') {\r\n                $node.find(tags.join(',')).not('.redactor-selection-marker').unwrap();\r\n            }\r\n\r\n\r\n            if (this.params.args === false && this.params.tag === 'p') {\r\n                $node.removeAttr('class');\r\n            }\r\n\r\n            // breakline attr\r\n            if (this.opts.breakline && tag === 'div') {\r\n                $node.attr('data-redactor-tag', 'br');\r\n            }\r\n            else {\r\n                $node.removeAttr('data-redactor-tag');\r\n            }\r\n\r\n            // normalize\r\n            this.utils.normalizeTextNodes(nodes[i]);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _cleanEmptyClass: function($elements) {\r\n        $elements.each(function(node) {\r\n            if (node.className === '') node.removeAttribute('class');\r\n        });\r\n    },\r\n    _cleanEmptyStyle: function($node) {\r\n         if (this.utils.removeEmptyAttr($node.get(), 'style')) {\r\n            $node.removeAttr('data-redactor-style-cache');\r\n        }\r\n        else {\r\n            $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n        }\r\n    },\r\n\r\n    // apply\r\n    _apply: function(type, args, tags, selection, nodes) {\r\n        // save selection\r\n        if (selection !== false) {\r\n\t\t    this.selection.save();\r\n\t\t}\r\n\r\n        // get elements\r\n        var $elements = this._getElements(tags, nodes);\r\n\r\n        // class\r\n        if (args['class']) {\r\n            if (type === 'set') {\r\n                $elements.removeAttr('class');\r\n                $elements.addClass(args['class']);\r\n            }\r\n            else if (type === 'add') {\r\n                $elements.addClass(args['class']);\r\n            }\r\n            else if (type === 'toggle') {\r\n                $elements.toggleClass(args['class']);\r\n            }\r\n            else if (type === 'remove') {\r\n                $elements.removeClass(args['class']);\r\n            }\r\n\r\n            this._cleanEmptyClass($elements);\r\n        }\r\n\r\n        // attr\r\n        if (args['attr']) {\r\n            if (type === 'set') {\r\n                this._removeAllAttr($elements);\r\n                $elements.attr(args['attr']);\r\n            }\r\n            else if (type === 'add') {\r\n                $elements.attr(args['attr']);\r\n            }\r\n            else if (type === 'toggle') {\r\n                params = args['attr'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    for (var key in params) {\r\n                        if ($node.attr(key)) $node.removeAttr(key);\r\n                        else $node.attr(key, params[key]);\r\n                    }\r\n                });\r\n            }\r\n            else if (type === 'remove') {\r\n                $elements.removeAttr(args['attr']);\r\n            }\r\n        }\r\n\r\n        // style\r\n        if (args['style']) {\r\n            if (type === 'set') {\r\n                $elements.removeAttr('style');\r\n                $elements.css(args['style']);\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                });\r\n            }\r\n            else if (type === 'add') {\r\n                var params = args['style'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    $node.css(params);\r\n                    $node.attr('data-redactor-style-cache', $node.attr('style'));\r\n                    this._convertStyleQuotes($node);\r\n                }.bind(this));\r\n            }\r\n            else if (type === 'toggle') {\r\n                var params = args['style'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    for (var key in params) {\r\n                        var newVal = params[key];\r\n                        var oldVal = $node.css(key);\r\n\r\n                        oldVal = (this.utils.isRgb(oldVal)) ? this.utils.rgb2hex(oldVal) : oldVal.replace(/\"/g, '');\r\n                        newVal = (this.utils.isRgb(newVal)) ? this.utils.rgb2hex(newVal) : newVal.replace(/\"/g, '');\r\n\r\n                        oldVal = this.utils.hex2long(oldVal);\r\n                        newVal = this.utils.hex2long(newVal);\r\n\r\n                        var compareNew = (typeof newVal === 'string') ? newVal.toLowerCase() : newVal;\r\n                        var compareOld = (typeof oldVal === 'string') ? oldVal.toLowerCase() : oldVal;\r\n\r\n                        if (compareNew === compareOld) $node.css(key, '');\r\n                        else $node.css(key, newVal);\r\n                    }\r\n\r\n                    this._convertStyleQuotes($node);\r\n                    this._cleanEmptyStyle($node);\r\n                }.bind(this));\r\n            }\r\n            else if (type === 'remove') {\r\n                var name = args['style'];\r\n                $elements.each(function(node) {\r\n                    var $node = $R.dom(node);\r\n                    $node.css(name, '');\r\n                    this._cleanEmptyStyle($node);\r\n                }.bind(this));\r\n            }\r\n        }\r\n\r\n        // get nodes\r\n        nodes = $elements.getAll();\r\n\r\n        // restore selection\r\n        if (selection !== false) {\r\n            this._restoreSelection(nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _applyArgs: function(nodes) {\r\n        if (this.params.args) {\r\n            nodes = this._apply(this.params.type, this.params.args, false, false, nodes);\r\n        }\r\n        else {\r\n            nodes = this._clear(false, 'all', false, nodes);\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // remove\r\n    _removeAllAttr: function($elements, keepStyleAndClass) {\r\n        $elements.each(function(node) {\r\n            var keepAttrs = ['data-redactor-tag', 'data-redactor-style-cache'];\r\n            if (keepStyleAndClass === false) {\r\n                keepAttrs.push('style');\r\n                keepAttrs.push('class');\r\n            }\r\n\r\n            for (var i = node.attributes.length; i--> 0;) {\r\n                var nodeAttr = node.attributes[i];\r\n                var name = nodeAttr.name;\r\n                if (keepAttrs.indexOf(name) === -1) {\r\n                    node.removeAttributeNode(nodeAttr);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    // selection\r\n    _restoreSelection: function(nodes) {\r\n        if (this._isCurrentBlockOneAndEmpty(nodes)) {\r\n            this.caret.setStart(nodes[0]);\r\n        }\r\n        else {\r\n            setTimeout(function() { this.selection.restore(); }.bind(this), 1);\r\n        }\r\n    },\r\n\r\n    // convert\r\n    _convertStyleQuotes: function($node) {\r\n        var style = $node.attr('style');\r\n        if (style) $node.attr('style', style.replace(/\"/g, '\\''));\r\n    }\r\n});\r\n$R.add('service', 'inline', {\r\n    mixins: ['formatter'],\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        this.count = 0;\r\n    },\r\n    // public\r\n    format: function(args)\r\n    {\r\n        if (!this._isFormat()) return [];\r\n\r\n        // type of applying styles and attributes\r\n        this.type = (args.type) ? args.type : 'set'; // add, remove, toggle\r\n        // tag\r\n        this.tag = (typeof args === 'string') ? args : args.tag;\r\n        this.tag = this.tag.toLowerCase();\r\n        this.tag = this.arrangeTag(this.tag);\r\n\r\n        if (typeof args === 'string') this.args = false;\r\n        else this.buildArgs(args);\r\n\r\n        if (!this.detector.isIe())\r\n        {\r\n            this.editor.disableNonEditables();\r\n        }\r\n\r\n        // format\r\n        var nodes = (this.selection.isCollapsed()) ? this.formatCollapsed() : this.formatUncollapsed();\r\n\r\n        if (!this.detector.isIe())\r\n        {\r\n            this.editor.enableNonEditables();\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n\r\n    // private\r\n    _isFormat: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var isComponent = (data.isComponent() && !data.isComponentType('table') && !data.isFigcaption());\r\n\r\n        if (current === false && this.selection.isAll())\r\n        {\r\n            return true;\r\n        }\r\n        else if (!current || data.isPre() || data.isCode() || isComponent)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    },\r\n    arrangeTag: function(tag)\r\n    {\r\n        var replaced = this.opts.replaceTags;\r\n        for (var key in replaced)\r\n        {\r\n            if (tag === key) tag = replaced[key];\r\n        }\r\n\r\n        return tag;\r\n    },\r\n    formatCollapsed: function()\r\n    {\r\n        var nodes = [];\r\n        var inline = this.selection.getInlineFirst();\r\n        var inlines = this.selection.getInlines({ all: true });\r\n        var $inline = $R.dom(inline);\r\n        var $parent, parent, $secondPart, extractedContent;\r\n\r\n        // 1) not inline\r\n        if (!inline)\r\n        {\r\n            nodes = this.insertInline(nodes);\r\n        }\r\n        else\r\n        {\r\n            var dataInline = this.inspector.parse(inline);\r\n            var isEmpty = this.utils.isEmptyHtml(inline.innerHTML);\r\n\r\n            // 2) inline is empty\r\n            if (isEmpty)\r\n            {\r\n                // 2.1) has same tag\r\n                if (inline.tagName.toLowerCase() === this.tag)\r\n                {\r\n                    // 2.1.1) has same args or hasn't args\r\n                    if (this.hasSameArgs(inline))\r\n                    {\r\n                        this.caret.setAfter(inline);\r\n                        $inline.remove();\r\n\r\n                        var el = this.selection.getElement();\r\n                        this.utils.normalizeTextNodes(el);\r\n                    }\r\n                    // 2.1.2) has different args and it is span tag\r\n                    else if (this.tag === 'span')\r\n                    {\r\n                        nodes = this.applyArgs([inline], false);\r\n                        this.caret.setStart(inline);\r\n                    }\r\n                    // 2.1.3) has different args and it is not span tag\r\n                    else\r\n                    {\r\n                       nodes = this.insertInline(nodes);\r\n                    }\r\n\r\n                }\r\n                // 2.2) has another tag\r\n                else\r\n                {\r\n                    // 2.2.1) has parent\r\n                    if (dataInline.hasParent([this.tag]))\r\n                    {\r\n                        $parent = $inline.closest(this.tag);\r\n                        parent = $parent.get();\r\n                        if (this.hasSameArgs(parent))\r\n                        {\r\n                            $parent.unwrap();\r\n                            this.caret.setStart(inline);\r\n                        }\r\n                        else\r\n                        {\r\n                            nodes = this.insertInline(nodes);\r\n                        }\r\n                    }\r\n                    // 2.2.2) hasn't parent\r\n                    else\r\n                    {\r\n                        nodes = this.insertInline(nodes);\r\n                    }\r\n                }\r\n            }\r\n            // 3) inline isn't empty\r\n            else\r\n            {\r\n                // 3.1) has same tag\r\n                if (inline.tagName.toLowerCase() === this.tag)\r\n                {\r\n                    // 3.1.1) has same args or hasn't args\r\n                    if (this.hasSameArgs(inline))\r\n                    {\r\n                        // insert break\r\n                        extractedContent = this.utils.extractHtmlFromCaret(inline);\r\n                        $secondPart = $R.dom('<' + this.tag + ' />');\r\n                        $secondPart = this.utils.cloneAttributes(inline, $secondPart);\r\n\r\n                        $inline.after($secondPart.append(extractedContent));\r\n\r\n                        if ($secondPart.html().trim() === '') {\r\n                            $secondPart.remove();\r\n                        }\r\n\r\n                        this.caret.setAfter(inline);\r\n                    }\r\n                    else\r\n                    {\r\n                        nodes = this.insertInline(nodes);\r\n                    }\r\n                }\r\n                // 3.2) has another tag\r\n                else\r\n                {\r\n                    // 3.2.1) has parent\r\n                    if (dataInline.hasParent([this.tag]))\r\n                    {\r\n                        $parent = $inline.closest(this.tag);\r\n                        parent = $parent.get();\r\n                        if (this.hasSameArgs(parent))\r\n                        {\r\n                            // insert break\r\n                            extractedContent = this.utils.extractHtmlFromCaret(parent, parent);\r\n                            $secondPart = $R.dom('<' + this.tag + ' />');\r\n                            $secondPart = this.utils.cloneAttributes(parent, $secondPart);\r\n\r\n                            var $breaked, $last;\r\n                            var z = 0;\r\n                            inlines = inlines.reverse();\r\n                            for (var i = 0; i < inlines.length; i++)\r\n                            {\r\n                                if (inlines[i] !== parent)\r\n                                {\r\n                                    $last = $R.dom('<' + inlines[i].tagName.toLowerCase() + '>');\r\n                                    if (z === 0)\r\n                                    {\r\n                                        $breaked = $last;\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        $breaked.append($last);\r\n                                    }\r\n\r\n                                    z++;\r\n                                }\r\n                            }\r\n\r\n                            $parent.after($secondPart.append(extractedContent));\r\n                            $parent.after($breaked);\r\n\r\n                            this.caret.setStart($last);\r\n                        }\r\n                        else\r\n                        {\r\n                            nodes = this.insertInline(nodes);\r\n                        }\r\n                    }\r\n                    // 3.2.2) hasn't parent\r\n                    else\r\n                    {\r\n                        nodes = this.insertInline(nodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    insertInline: function(nodes)\r\n    {\r\n        var node = document.createElement(this.tag);\r\n        nodes = this.insertion.insertNode(node, 'start');\r\n\r\n        return this.applyArgs(nodes, false);\r\n    },\r\n    hasSameArgs: function(inline)\r\n    {\r\n        if (inline.attributes.length === 0 && this.args === false)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            var same = true;\r\n            if (this.args)\r\n            {\r\n                var count = 0;\r\n                for (var key in this.args)\r\n                {\r\n                    var $node = $R.dom(inline);\r\n                    var args = (this.args[key]);\r\n                    var value = this.utils.toParams(args);\r\n                    var nodeAttrValue = $node.attr(key);\r\n\r\n                    if (args)\r\n                    {\r\n                        if (key === 'style')\r\n                        {\r\n                            value = value.trim().replace(/;$/, '');\r\n\r\n                            var origRules = this.utils.styleToObj($node.attr('style'));\r\n                            var rules = value.split(';');\r\n                            var innerCount = 0;\r\n\r\n                            for (var i = 0; i < rules.length; i++)\r\n                            {\r\n                                var arr = rules[i].split(':');\r\n                                var ruleName = arr[0].trim();\r\n                                var ruleValue = arr[1].trim();\r\n\r\n                                if (ruleName.search(/color/) !== -1)\r\n                                {\r\n                                    var val = $node.css(ruleName);\r\n                                    if (val && (val === ruleValue || this.utils.rgb2hex(val) === ruleValue))\r\n                                    {\r\n                                        innerCount++;\r\n                                    }\r\n                                }\r\n                                else if ($node.css(ruleName) === ruleValue)\r\n                                {\r\n                                    innerCount++;\r\n                                }\r\n                            }\r\n\r\n                            if (innerCount === rules.length && Object.keys(origRules).length === rules.length)\r\n                            {\r\n                                count++;\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (nodeAttrValue === value)\r\n                            {\r\n                                count++;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (!nodeAttrValue || nodeAttrValue === '')\r\n                        {\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                same = (count === Object.keys(this.args).length);\r\n            }\r\n\r\n            return same;\r\n        }\r\n    },\r\n    formatUncollapsed: function()\r\n    {\r\n        var inlines = this.selection.getInlines({ all: true, inside: true });\r\n\r\n        if (this.detector.isIe()) this.selection.saveMarkers();\r\n        else this.selection.save();\r\n\r\n        // convert del / u\r\n        this._convertTags('u');\r\n        this._convertTags('del');\r\n\r\n        // convert target tags\r\n        this._convertToStrike(inlines);\r\n\r\n        if (this.detector.isIe()) this.selection.restoreMarkers();\r\n        else this.selection.restore();\r\n\r\n        // apply strike\r\n        document.execCommand('strikethrough');\r\n\r\n        // clear decoration\r\n        this._clearDecoration();\r\n\r\n        this.selection.save();\r\n\r\n        // revert and set style\r\n        var nodes = this._revertToInlines();\r\n        nodes = this.applyArgs(nodes, false);\r\n\r\n        // unwrap if attributes was removed\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var node = nodes[i];\r\n            var tag = node.tagName.toLowerCase();\r\n            var len = node.attributes.length;\r\n\r\n            if (tag === this.tag && len === 0 && this.args)\r\n            {\r\n                $R.dom(node).unwrap();\r\n                nodes.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.selection.restore();\r\n\r\n        // clear and normalize\r\n        this._clearEmptyStyle();\r\n        nodes = this._normalizeBlocks(nodes);\r\n\r\n        return nodes;\r\n    },\r\n    _convertTags: function(tag)\r\n    {\r\n        if (this.tag !== tag)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            $editor.find(tag).each(function(node)\r\n            {\r\n                var $el = this.utils.replaceToTag(node, 'span');\r\n                $el.addClass('redactor-convertable-' + tag);\r\n            }.bind(this));\r\n        }\r\n    },\r\n    _revertTags: function(tag)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.find('span.redactor-convertable-' + tag).each(function(node)\r\n        {\r\n            var $el = this.utils.replaceToTag(node, tag);\r\n            $el.removeClass('redactor-convertable-' + tag);\r\n            if (this.utils.removeEmptyAttr($el, 'class')) $el.removeAttr('class');\r\n\r\n        }.bind(this));\r\n    },\r\n    _convertToStrike: function(inlines)\r\n    {\r\n        var selected = this.selection.getText().replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\r\n\r\n        for (var i = 0; i < inlines.length; i++)\r\n        {\r\n            var tag = this.arrangeTag(inlines[i].tagName.toLowerCase());\r\n            var inline = inlines[i];\r\n            var $inline = $R.dom(inline);\r\n            var hasSameArgs = this.hasSameArgs(inline);\r\n\r\n            if (tag === this.tag)\r\n            {\r\n\r\n                if (this.tag === 'span' && this._isTextSelected(inline, selected))\r\n                {\r\n                    $inline.addClass('redactor-convertable-apply');\r\n                }\r\n                else if (hasSameArgs && this.tag !== 'a')\r\n                {\r\n                    this._replaceToStrike($inline);\r\n                }\r\n                else if (this.tag === 'span')\r\n                {\r\n                    if (this.args && this.args.style) {\r\n                        for (var key in this.args.style) {\r\n                            $inline.css(key, '');\r\n                        }\r\n                    }\r\n\r\n                    if (this.utils.removeEmptyAttr($inline.get(), 'style')) {\r\n                        $inline.addClass('redactor-convertable-apply');\r\n                    }\r\n                    else {\r\n                        $inline.addClass('redactor-unconvertable-apply');\r\n                    }\r\n                }\r\n                else if (!hasSameArgs)\r\n                {\r\n                    $inline.addClass('redactor-convertable-apply');\r\n                }\r\n\r\n            }\r\n        }\r\n    },\r\n    _replaceToStrike: function($el)\r\n    {\r\n        $el.replaceWith(function()\r\n        {\r\n            return $R.dom('<strike>').append($el.contents());\r\n        });\r\n    },\r\n    _revertToInlines: function()\r\n    {\r\n        var nodes = [];\r\n        var $editor = this.editor.getElement();\r\n\r\n        if (this.tag !== 'u') $editor.find('u').unwrap();\r\n\r\n        $editor.find('.redactor-convertable-u').each(function(node)\r\n        {\r\n             nodes.push(node);\r\n\r\n        });\r\n\r\n        // span convertable\r\n        $editor.find('.redactor-convertable-apply').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            $node.find('strike').unwrap();\r\n\r\n            this._forceRemoveClass($node, 'redactor-convertable-apply');\r\n            nodes.push(node);\r\n\r\n        }.bind(this));\r\n\r\n        // span unconvertable\r\n        $editor.find('span.redactor-unconvertable-apply').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            this._forceRemoveClass($node, 'redactor-unconvertable-apply');\r\n\r\n        }.bind(this));\r\n\r\n        // strike\r\n        $editor.find('strike').each(function(node)\r\n        {\r\n            var $node = this.utils.replaceToTag(node, this.tag);\r\n            nodes.push($node.get());\r\n\r\n        }.bind(this));\r\n\r\n\r\n        this._revertTags('u');\r\n        this._revertTags('del');\r\n\r\n        return nodes;\r\n    },\r\n    _normalizeBlocks: function(nodes)\r\n    {\r\n        var tags = this.opts.inlineTags;\r\n        var blocks = this.selection.getBlocks();\r\n        if (blocks)\r\n        {\r\n            for (var i = 0; i < blocks.length; i++)\r\n            {\r\n                if (blocks[i].tagName === 'PRE')\r\n                {\r\n                    var $node = $R.dom(blocks[i]);\r\n                    $node.find(tags.join(',')).not('.redactor-selection-marker').each(function(inline)\r\n                    {\r\n                        if (nodes.indexOf(inline) !== -1)\r\n                        {\r\n                            nodes = this.utils.removeFromArrayByValue(nodes, inline);\r\n                        }\r\n\r\n                        $R.dom(inline).unwrap();\r\n                    }.bind(this));\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _clearDecoration: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.find(this.opts.inlineTags.join(',')).each(function(node)\r\n        {\r\n            if (node.style.textDecoration === 'line-through' || node.style.textDecorationLine === 'line-through')\r\n            {\r\n                var $el = $R.dom(node);\r\n                $el.css('textDecorationLine', '');\r\n                $el.css('textDecoration', '');\r\n                $el.wrap('<strike>');\r\n            }\r\n        });\r\n    },\r\n    _clearEmptyStyle: function()\r\n    {\r\n        var inlines = this.getInlines();\r\n        for (var i = 0; i < inlines.length; i++)\r\n        {\r\n            this._clearEmptyStyleAttr(inlines[i]);\r\n\r\n            var childNodes = inlines[i].childNodes;\r\n            if (childNodes)\r\n            {\r\n                for (var z = 0; z < childNodes.length; z++)\r\n                {\r\n                    this._clearEmptyStyleAttr(childNodes[z]);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _clearEmptyStyleAttr: function(node)\r\n    {\r\n        if (node.nodeType !== 3 && this.utils.removeEmptyAttr(node, 'style'))\r\n        {\r\n            node.removeAttribute('style');\r\n            node.removeAttribute('data-redactor-style-cache');\r\n        }\r\n    },\r\n    _forceRemoveClass: function($node, classname)\r\n    {\r\n        $node.removeClass(classname);\r\n        if (this.utils.removeEmptyAttr($node, 'class')) $node.removeAttr('class');\r\n    },\r\n    _isTextSelected: function(node, selected)\r\n    {\r\n        var text = this.utils.removeInvisibleChars(node.textContent);\r\n\r\n        return (selected === text || selected.search(new RegExp('^' + this.utils.escapeRegExp(text) + '$')) !== -1);\r\n    },\r\n    getInlines: function(tags)\r\n    {\r\n        return (tags) ? this.selection.getInlines({ tags: tags, all: true }) : this.selection.getInlines({ all: true });\r\n    },\r\n    getElements: function(tags)\r\n    {\r\n        return $R.dom(this.getInlines(tags));\r\n    },\r\n    clearFormat: function()\r\n    {\r\n        this.selection.save();\r\n\r\n        var nodes = this.selection.getInlines({ all: true });\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $el = $R.dom(nodes[i]);\r\n            var inline = this.selection.getInline(nodes[i]);\r\n            if (inline)\r\n            {\r\n                $el.unwrap();\r\n            }\r\n        }\r\n\r\n        this.selection.restore();\r\n    }\r\n});\r\n$R.add('service', 'autoparser', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.cleaner = this.app.cleaner;\r\n    },\r\n    observe: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $objects = $editor.find('.redactor-autoparser-object').each(function(node)\r\n        {\r\n           var $node = $R.dom(node);\r\n           $node.removeClass('redactor-autoparser-object');\r\n           if ($node.attr('class') === '') $node.removeAttr('class');\r\n        });\r\n\r\n        if ($objects.length > 0)\r\n        {\r\n            $objects.each(function(node)\r\n            {\r\n                var type;\r\n                var $object = false;\r\n                var tag = node.tagName;\r\n\r\n                if (tag === 'A') type = 'link';\r\n                else if (tag === 'IMG') type = 'image';\r\n                else if (tag === 'IFRAME') type = 'video';\r\n\r\n                if (type)\r\n                {\r\n                    $object = $R.create(type + '.component', this.app, node);\r\n                    this.app.broadcast(type + '.inserted', $object);\r\n                    this.app.broadcast('autoparse', type, $object);\r\n                }\r\n\r\n            }.bind(this));\r\n        }\r\n    },\r\n    format: function(e, key)\r\n    {\r\n        if (this._isKey(key))\r\n        {\r\n            this._format(key === this.keycodes.ENTER);\r\n        }\r\n    },\r\n    parse: function(html)\r\n    {\r\n        var tags = ['figure', 'form', 'pre', 'object', 'video', 'iframe', 'code', 'a', 'img'];\r\n        var stored = [];\r\n        var z = 0;\r\n\r\n        // store\r\n        var storedComments = [];\r\n        html = this.cleaner.storeComments(html, storedComments);\r\n\r\n        // encode\r\n        html = this.cleaner.encodeCode(html);\r\n\r\n        // converting entity\r\n        html = html.replace(/\\$/g, '&#36;');\r\n        html = html.replace(/&amp;/g, '&');\r\n\r\n        // store tags\r\n        for (var i = 0; i < tags.length; i++)\r\n        {\r\n            var reTags = (tags[i] === 'img') ? '<' + tags[i] + '[^>]*>' : '<' + tags[i] + '([\\\\w\\\\W]*?)</' + tags[i] + '>';\r\n            var matched = html.match(new RegExp(reTags, 'gi'));\r\n\r\n            if (matched !== null)\r\n            {\r\n                for (var y = 0; y < matched.length; y++)\r\n                {\r\n                    html = html.replace(matched[y], '#####replaceparse' + z + '#####');\r\n                    stored.push(matched[y]);\r\n                    z++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // images\r\n        if (this.opts.autoparseImages && html.match(this.opts.regex.imageurl))\r\n        {\r\n            var imagesMatches = html.match(this.opts.regex.imageurl);\r\n            for (var i = 0; i < imagesMatches.length; i++)\r\n            {\r\n                html = html.replace(imagesMatches[i], '<img class=\"redactor-autoparser-object\" src=\"' + imagesMatches[i] + '\">');\r\n            }\r\n        }\r\n\r\n        // video\r\n        if (this.opts.autoparseVideo && (html.match(this.opts.regex.youtube) || html.match(this.opts.regex.vimeo)))\r\n        {\r\n            var iframeStart = '<iframe width=\"500\" height=\"281\" src=\"';\r\n            var iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\r\n\r\n            var str, re;\r\n            var https = (this.opts.autoparseHttps) ? 'https:' : '';\r\n            if (html.match(this.opts.regex.youtube))\r\n            {\r\n                str = https + '//www.youtube.com/embed/$1';\r\n                re = this.opts.regex.youtube;\r\n            }\r\n            else if (html.match(this.opts.regex.vimeo))\r\n            {\r\n                str = https + '//player.vimeo.com/video/$2';\r\n                re = this.opts.regex.vimeo;\r\n            }\r\n\r\n            var $video = this.component.create('video', iframeStart + str + iframeEnd);\r\n\r\n            html = html.replace(re, $video.get().outerHTML);\r\n        }\r\n\r\n        // store tags\r\n        for (var i = 0; i < tags.length; i++)\r\n        {\r\n            var reTags = (tags[i] === 'img') ? '<' + tags[i] + '[^>]*>' : '<' + tags[i] + '([\\\\w\\\\W]*?)</' + tags[i] + '>';\r\n            var matched = html.match(new RegExp(reTags, 'gi'));\r\n\r\n            if (matched !== null)\r\n            {\r\n                for (var y = 0; y < matched.length; y++)\r\n                {\r\n                    html = html.replace(matched[y], '#####replaceparse' + z + '#####');\r\n                    stored.push(matched[y]);\r\n                    z++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // links\r\n        if (this.opts.autoparseLinks && html.match(this.opts.regex.url))\r\n        {\r\n            html = this._formatLinks(html);\r\n        }\r\n\r\n        // restore\r\n        html = this._restoreReplaced(stored, html);\r\n\r\n        // repeat for nested tags\r\n        html = this._restoreReplaced(stored, html);\r\n\r\n        // restore comments\r\n        html = this.cleaner.restoreComments(html, storedComments);\r\n\r\n        return html;\r\n    },\r\n\r\n    // private\r\n    _isKey: function(key)\r\n    {\r\n        return (key === this.keycodes.ENTER || key === this.keycodes.SPACE);\r\n    },\r\n    _format: function(enter)\r\n    {\r\n        var parent = this.selection.getParent();\r\n        var $parent = $R.dom(parent);\r\n\r\n        var isNotFormatted = (parent && $parent.closest('figure, pre, code, img, a, iframe').length !== 0);\r\n        if (isNotFormatted || !this.selection.isCollapsed())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // add split marker\r\n        var marker = this.utils.createInvisibleChar();\r\n        var range = this.selection.getRange();\r\n        range.insertNode(marker);\r\n\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $current = $R.dom(current);\r\n\r\n        // remove split marker\r\n        marker.parentNode.removeChild(marker);\r\n\r\n        if (current && current.nodeType === 3)\r\n        {\r\n            var content = current.textContent;\r\n            var type;\r\n\r\n            // images\r\n            if (this.opts.autoparseImages && content.match(this._convertToRegExp(this.opts.regex.imageurl)))\r\n            {\r\n                var isList = data.isList();\r\n                var matches = content.match(this.opts.regex.imageurl);\r\n                var el = (isList) ? undefined : '<figure><img></figure>';\r\n\r\n                var $img = this.component.create('image', el);\r\n                $img.setSrc(matches[0]);\r\n                $img.addClass('redactor-autoparser-object');\r\n\r\n                content = content.replace(matches[0], $img.get().outerHTML);\r\n                type = 'image';\r\n            }\r\n            // video\r\n            else if (this.opts.autoparseVideo && (content.match(this._convertToRegExp(this.opts.regex.youtube)) || content.match(this._convertToRegExp(this.opts.regex.vimeo))))\r\n            {\r\n                var iframeStart = '<iframe width=\"500\" height=\"281\" src=\"';\r\n                var iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\r\n                var str, re;\r\n\r\n                if (content.match(this.opts.regex.youtube))\r\n                {\r\n                    str = '//www.youtube.com/embed/$1';\r\n                    re = this.opts.regex.youtube;\r\n                }\r\n                else if (content.match(this.opts.regex.vimeo))\r\n                {\r\n                    str = '//player.vimeo.com/video/$2';\r\n                    re = this.opts.regex.vimeo;\r\n                }\r\n\r\n                var $video = this.component.create('video', iframeStart + str + iframeEnd);\r\n                $video.addClass('redactor-autoparser-object');\r\n\r\n                content = content.replace(re, $video.get().outerHTML);\r\n                type = 'video';\r\n            }\r\n            // links\r\n            else if (this.opts.autoparseLinks && content.match(this._convertToRegExp(this.opts.regex.url)))\r\n            {\r\n                content = this._formatLinks(content, enter);\r\n                type = 'link';\r\n            }\r\n\r\n            // replace\r\n            if (type)\r\n            {\r\n                if (enter)\r\n                {\r\n                    this.selection.save();\r\n                    $current.replaceWith(content);\r\n                    this.selection.restore();\r\n                }\r\n                else\r\n                {\r\n                    $current.replaceWith(content);\r\n                }\r\n\r\n                // object\r\n                var $editor = this.editor.getElement();\r\n                var $object = $editor.find('.redactor-autoparser-object').removeClass('redactor-autoparser-object');\r\n                $object = (type === 'link') ? $R.create('link.component', this.app, $object) : $object;\r\n\r\n                // caret\r\n                if (type === 'link')\r\n                {\r\n                    if (!enter) this.caret.setAfter($object);\r\n                    this.app.broadcast('link.inserted', $object);\r\n                }\r\n                else\r\n                {\r\n                    this.caret.setAfter($object);\r\n\r\n                    var $cloned = $object.clone();\r\n                    $object.remove();\r\n                    $object = this.insertion.insertHtml($cloned);\r\n                    $object = this.component.build($object);\r\n                }\r\n\r\n                // callback\r\n                this.app.broadcast('autoparse', type, $object);\r\n            }\r\n        }\r\n    },\r\n    _formatLinks: function(content) {\r\n        var target = (this.opts.pasteLinkTarget !== false) ? ' target=\"' + this.opts.pasteLinkTarget + '\"' : '';\r\n        var protocol = 'http';\r\n        var classstr = ' class=\"redactor-autoparser-object\"';\r\n        var self = this;\r\n\r\n        content = content.replace(this.opts.regex.aurl1, function(url) {\r\n            return '<a href=\"' + url + '\"' + target + classstr + '>' + self._subLinkText(url) + '</a>';\r\n        });\r\n\r\n        content = content.replace(this.opts.regex.aurl2, function(match, before, url) {\r\n            return before + '<a href=\"' + protocol + '://' + url + '\"' + target + classstr + '>' + self._subLinkText(url) + '</a>';\r\n        });\r\n\r\n        return content;\r\n    },\r\n    _subLinkText: function(text) {\r\n        text = (text.length > this.opts.linkSize) ? text.substring(0, this.opts.linkSize) + '...' : text;\r\n        text = (text.search('%') === -1) ? decodeURIComponent(text) : text;\r\n\r\n        return text;\r\n    },\r\n    _restoreReplaced: function(stored, html) {\r\n        for (var i = 0; i < stored.length; i++) {\r\n            html = html.replace('#####replaceparse' + i + '#####', stored[i]);\r\n        }\r\n\r\n        return html;\r\n    },\r\n    _convertToRegExp: function(str) {\r\n        return new RegExp(String(str).replace(/^\\//, '').replace(/\\/ig$/, '').replace(/\\/gi$/, '') + '$', 'gi');\r\n    }\r\n});\r\n$R.add('service', 'storage', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.data = [];\r\n    },\r\n    // public\r\n    observeImages: function()\r\n    {\r\n        if (this.opts.imageObserve) {\r\n            var $editor = this.editor.getElement();\r\n            var $images = $editor.find('[data-image]');\r\n            $images.each(this._addImage.bind(this));\r\n        }\r\n    },\r\n    observeFiles: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $files = $editor.find('[data-file]');\r\n\r\n\t\t$files.each(this._addFile.bind(this));\r\n    },\r\n\tsetStatus: function(url, status)\r\n\t{\r\n\t\tthis.data[url].status = status;\r\n\t},\r\n    getChanges: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        // check status\r\n        for (var key in this.data)\r\n\t\t{\r\n\t\t\tvar data = this.data[key];\r\n\t\t\tvar $el = $editor.find('[data-' + data.type + '=\"' + data.id + '\"]');\r\n\r\n\t\t\tthis.setStatus(data.id, ($el.length === 0) ? false : true);\r\n\t\t}\r\n\r\n        return this.data;\r\n    },\r\n\tadd: function(type, node)\r\n\t{\r\n        var $node = $R.dom(node);\r\n        var id = $node.attr('data-' + type);\r\n\r\n        this.data[id] = { type: type, status: true, node: $node.get(), id: $node.attr('data-' + type) };\r\n\t},\r\n\r\n    // private\r\n    _addImage: function(node)\r\n    {\r\n        this.add('image', node);\r\n    },\r\n    _addFile: function(node)\r\n    {\r\n        this.add('file', node);\r\n    }\r\n});\r\n$R.add('service', 'utils', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n    },\r\n    // empty\r\n    isEmpty: function(el)\r\n    {\r\n        var isEmpty = false;\r\n        el = $R.dom(el).get();\r\n        if (el)\r\n        {\r\n            isEmpty = (el.nodeType === 3) ? (el.textContent.trim().replace(/\\n/, '') === '') : (el.innerHTML === '');\r\n        }\r\n\r\n        return isEmpty;\r\n    },\r\n    isEmptyHtml: function(html, keepbr, keeplists)\r\n    {\r\n        html = this.removeInvisibleChars(html);\r\n        html = html.replace(/&nbsp;/gi, '');\r\n        html = html.replace(/<\\/?br\\s?\\/?>/g, ((keepbr) ? 'br' : ''));\r\n        html = html.replace(/\\s/g, '');\r\n        html = html.replace(/^<p>[^\\W\\w\\D\\d]*?<\\/p>$/i, '');\r\n        html = html.replace(/^<div>[^\\W\\w\\D\\d]*?<\\/div>$/i, '');\r\n\r\n        if (keeplists)\r\n        {\r\n            html = html.replace(/<ul(.*?[^>])>$/i, 'ul');\r\n            html = html.replace(/<ol(.*?[^>])>$/i, 'ol');\r\n        }\r\n\r\n        html = html.replace(/<hr(.*?[^>])>$/i, 'hr');\r\n        html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');\r\n        html = html.replace(/<source(.*?[^>])>$/i, 'source');\r\n\r\n        // remove empty tags\r\n        html = html.replace(/<[^\\/>][^>]*><\\/[^>]+>/gi, '');\r\n        html = html.replace(/<[^\\/>][^>]*><\\/[^>]+>/gi, '');\r\n\r\n        // trim\r\n        html = html.trim();\r\n\r\n        return html === '';\r\n    },\r\n    trimSpaces: function(html)\r\n    {\r\n        return html = this.removeInvisibleChars(html.trim());\r\n    },\r\n\r\n    // invisible chars\r\n    createInvisibleChar: function()\r\n    {\r\n        return document.createTextNode(this.opts.markerChar);\r\n    },\r\n    searchInvisibleChars: function(str)\r\n    {\r\n        return str.search(/^\\uFEFF$/g);\r\n    },\r\n    removeInvisibleChars: function(html)\r\n    {\r\n        return html.replace(/\\uFEFF/g, '');\r\n    },\r\n    trimInvisibleChars: function(direction)\r\n    {\r\n        if (!this.selection.isCollapsed()) return;\r\n\r\n        var current = this.selection.getCurrent();\r\n        var side = (direction === 'left') ? this.selection.getTextBeforeCaret() : this.selection.getTextAfterCaret();\r\n        var isSpace = (current && current.nodeType === 3 && this.searchInvisibleChars(side) === 0);\r\n\r\n        if (isSpace)\r\n        {\r\n            if (direction === 'left')\r\n            {\r\n                $R.dom(current).replaceWith(current.textContent.trim());\r\n            }\r\n            else\r\n            {\r\n                var offset = this.offset.get();\r\n                this.offset.set({ start: offset.start + 1, end: offset.end + 1 });\r\n            }\r\n        }\r\n    },\r\n\r\n    // wrapper\r\n    buildWrapper: function(html)\r\n    {\r\n        return $R.dom('<div>').html(html);\r\n    },\r\n    getWrapperHtml: function($wrapper)\r\n    {\r\n        var html = $wrapper.html();\r\n        $wrapper.remove();\r\n\r\n        return html;\r\n    },\r\n\r\n    // fragment\r\n    createTmpContainer: function(html)\r\n    {\r\n        var $div = $R.dom('<div>');\r\n\r\n        if (typeof html === 'string')\r\n        {\r\n            $div.html(html);\r\n        }\r\n        else\r\n        {\r\n            $div.append($R.dom(html).clone(true));\r\n        }\r\n\r\n        return $div.get();\r\n    },\r\n    createFragment: function(html)\r\n    {\r\n        var el = this.createTmpContainer(html);\r\n        var frag = document.createDocumentFragment(), node, firstNode, lastNode;\r\n        var nodes = [];\r\n        var i = 0;\r\n        while ((node = el.firstChild))\r\n        {\r\n            i++;\r\n            var n = frag.appendChild(node);\r\n            if (i === 1) firstNode = n;\r\n\r\n            nodes.push(n);\r\n            lastNode = n;\r\n        }\r\n\r\n        return { frag: frag, first: firstNode, last: lastNode, nodes: nodes };\r\n    },\r\n    isFragment: function(obj)\r\n    {\r\n        return (typeof obj === 'object' && obj.frag);\r\n    },\r\n    parseHtml: function(html)\r\n    {\r\n        var div = this.createTmpContainer(html);\r\n\r\n        return { html: div.innerHTML, nodes: div.childNodes };\r\n    },\r\n\r\n    splitNode: function(current, nodes, isList, inline)\r\n    {\r\n        nodes = (this.isFragment(nodes)) ? nodes.frag : nodes;\r\n\r\n        var element;\r\n        if (inline)\r\n        {\r\n            element = (this.inspector.isInlineTag(current.tagName)) ? current : this.selection.getInline(current);\r\n        }\r\n        else\r\n        {\r\n            element = (this.inspector.isBlockTag(current.tagName)) ? current : this.selection.getBlock(current);\r\n        }\r\n\r\n        var $element = $R.dom(element);\r\n\r\n        // replace is empty\r\n        if (!inline && this.isEmptyHtml(element.innerHTML, true))\r\n        {\r\n            $element.after(nodes);\r\n            $element.remove();\r\n\r\n            return nodes;\r\n        }\r\n\r\n        var tag = $element.get().tagName.toLowerCase();\r\n        var isEnd = this.caret.isEnd(element);\r\n        var isStart = this.caret.isStart(element);\r\n\r\n        if (!isEnd && !isStart)\r\n        {\r\n            var extractedContent = this.extractHtmlFromCaret(inline);\r\n\r\n            var $secondPart = $R.dom('<' + tag + ' />');\r\n            $secondPart = this.cloneAttributes(element, $secondPart);\r\n\r\n            $element.after($secondPart.append(extractedContent));\r\n        }\r\n\r\n        if (isStart)\r\n        {\r\n            return $element.before(nodes);\r\n        }\r\n        else\r\n        {\r\n            if (isList)\r\n            {\r\n                return $element.append(nodes);\r\n            }\r\n            else\r\n            {\r\n                nodes = $element.after(nodes);\r\n\r\n                var html = $element.html();\r\n                html = this.removeInvisibleChars(html);\r\n                html = html.replace(/&nbsp;/gi, '');\r\n\r\n                if (html === '') $element.remove();\r\n\r\n                return nodes;\r\n            }\r\n        }\r\n    },\r\n    extractHtmlFromCaret: function(inline, element)\r\n    {\r\n        var range = this.selection.getRange();\r\n        if (range)\r\n        {\r\n            element = (element) ? element : ((inline) ? this.selection.getInline() : this.selection.getBlock());\r\n            if (element)\r\n            {\r\n                var clonedRange = range.cloneRange();\r\n                clonedRange.selectNodeContents(element);\r\n                clonedRange.setStart(range.endContainer, range.endOffset);\r\n\r\n                return clonedRange.extractContents();\r\n            }\r\n        }\r\n    },\r\n    createMarkup: function(el)\r\n    {\r\n        var markup = document.createElement(this.opts.markup);\r\n        if (this.opts.breakline) markup.setAttribute('data-redactor-tag', 'br');\r\n\r\n        var $el = $R.dom(el);\r\n\r\n        $el.after(markup);\r\n        this.caret.setStart(markup);\r\n    },\r\n    createMarkupBefore: function(el)\r\n    {\r\n        var markup = document.createElement(this.opts.markup);\r\n        if (this.opts.breakline) markup.setAttribute('data-redactor-tag', 'br');\r\n\r\n        var $el = $R.dom(el);\r\n\r\n        $el.before(markup);\r\n        this.caret.setEnd(markup);\r\n    },\r\n    getNode: function(el)\r\n    {\r\n        var node = $R.dom(el).get();\r\n        var editor = this.editor.getElement().get();\r\n\r\n        return (typeof el === 'undefined') ? editor : ((node) ? node : false);\r\n    },\r\n    findSiblings: function(node, type)\r\n    {\r\n        node = $R.dom(node).get();\r\n        type = (type === 'next') ? 'nextSibling' : 'previousSibling';\r\n\r\n        while (node = node[type])\r\n        {\r\n            if ((node.nodeType === 3 && node.textContent.trim() === '') || node.tagName === 'BR')\r\n            {\r\n                continue;\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    getElementsFromHtml: function(html, selector, exclude)\r\n    {\r\n        var div = document.createElement(\"div\");\r\n        div.innerHTML = html;\r\n\r\n        var elems = div.querySelectorAll(selector);\r\n\r\n        // array map polyfill\r\n        var mapping = function(callback, thisArg)\r\n        {\r\n            if (typeof this.length !== 'number') return;\r\n            if (typeof callback !== 'function') return;\r\n\r\n            var newArr = [];\r\n            if (typeof this == 'object')\r\n            {\r\n                for (var i = 0; i < this.length; i++)\r\n                {\r\n                    if (i in this) newArr[i] = callback.call(thisArg || this, this[i], i, this);\r\n                    else return;\r\n                }\r\n            }\r\n\r\n            return newArr;\r\n        };\r\n\r\n        return mapping.call(elems, function(el)\r\n        {\r\n            var type = el.getAttribute('data-redactor-type');\r\n            if (exclude && type && type === exclude) {}\r\n            else return el.outerHTML;\r\n        });\r\n    },\r\n\r\n    // childnodes\r\n    getChildNodes: function(el, recursive, elements)\r\n    {\r\n        el = (el && el.nodeType && el.nodeType === 11) ? el : $R.dom(el).get();\r\n\r\n        var nodes = el.childNodes;\r\n        var result = [];\r\n        if (nodes)\r\n        {\r\n            for (var i = 0; i < nodes.length; i++)\r\n            {\r\n                if (elements === true && nodes[i].nodeType === 3) continue;\r\n                else if (nodes[i].nodeType === 3 && this.isEmpty(nodes[i])) continue;\r\n\r\n                result.push(nodes[i]);\r\n\r\n                if (recursive !== false)\r\n                {\r\n                    var nestedNodes = this.getChildNodes(nodes[i], elements);\r\n                    if (nestedNodes.length > 0)\r\n                    {\r\n                        result = result.concat(nestedNodes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n    getChildElements: function(el)\r\n    {\r\n        return this.getChildNodes(el, true, true);\r\n    },\r\n    getFirstNode: function(el)\r\n    {\r\n        return this._getFirst(this.getChildNodes(el, false));\r\n    },\r\n    getLastNode: function(el)\r\n    {\r\n        return this._getLast(this.getChildNodes(el, false));\r\n    },\r\n    getFirstElement: function(el)\r\n    {\r\n        return this._getFirst(this.getChildNodes(el, false, true));\r\n    },\r\n    getLastElement: function(el)\r\n    {\r\n        return this._getLast(this.getChildNodes(el, false, true));\r\n    },\r\n\r\n    // replace\r\n    replaceToTag: function(node, tag)\r\n    {\r\n        var $node = $R.dom(node);\r\n        return $node.replaceWith(function(node)\r\n        {\r\n            var $replaced = $R.dom('<' + tag + '>').append($R.dom(node).contents());\r\n            if (node.attributes)\r\n            {\r\n                var attrs = node.attributes;\r\n                for (var i = 0; i < attrs.length; i++)\r\n                {\r\n                    $replaced.attr(attrs[i].nodeName, attrs[i].value);\r\n                }\r\n            }\r\n\r\n            return $replaced;\r\n\r\n        });\r\n    },\r\n\r\n    // string\r\n    ucfirst: function(str)\r\n    {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    },\r\n\r\n    // array\r\n    removeFromArrayByValue: function(arr, value)\r\n    {\r\n        var a = arguments, len = a.length, ax;\r\n        while (len > 1 && arr.length)\r\n        {\r\n            value = a[--len];\r\n            while ((ax= arr.indexOf(value)) !== -1)\r\n            {\r\n                arr.splice(ax, 1);\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    },\r\n\r\n    // attributes\r\n    removeEmptyAttr: function(el, attr)\r\n    {\r\n        var $el = $R.dom(el);\r\n\r\n        if (typeof $el.attr(attr) === 'undefined' || $el.attr(attr) === null) return true;\r\n        else if ($el.attr(attr) === '')\r\n        {\r\n            $el.removeAttr(attr);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    cloneAttributes: function(elFrom, elTo)\r\n    {\r\n        elFrom = $R.dom(elFrom).get();\r\n        elTo = $R.dom(elTo);\r\n\r\n        var attrs = elFrom.attributes;\r\n        var len = attrs.length;\r\n        while (len--)\r\n        {\r\n            var attr = attrs[len];\r\n            elTo.attr(attr.name, attr.value);\r\n        }\r\n\r\n        return elTo;\r\n    },\r\n\r\n    // object\r\n    toParams: function(obj)\r\n    {\r\n        if (typeof obj !== 'object') return obj;\r\n\r\n        var keys = Object.keys(obj);\r\n        if (!keys.length) return '';\r\n        var result = '';\r\n\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            var key = keys[i];\r\n            result += key + ':' + obj[key] + ';';\r\n        }\r\n\r\n        return result;\r\n    },\r\n    styleToObj: function(str)\r\n    {\r\n        var obj = {};\r\n\r\n        if (str)\r\n        {\r\n            var style = str.replace(/;$/, '').split(';');\r\n            for (var i = 0; i < style.length; i++)\r\n            {\r\n                var rule = style[i].split(':');\r\n                obj[rule[0].trim()] = rule[1].trim();\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    },\r\n    checkProperty: function(obj)\r\n    {\r\n        var args = (arguments[1] && Array.isArray(arguments[1])) ? arguments[1] : [].slice.call(arguments, 1);\r\n\r\n        for (var i = 0; i < args.length; i++)\r\n        {\r\n            if (!obj || (typeof obj[args[i]] === 'undefined'))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            obj = obj[args[i]];\r\n        }\r\n\r\n        return obj;\r\n    },\r\n\r\n    // data\r\n    extendData: function(data, obj)\r\n    {\r\n        for (var key in obj)\r\n        {\r\n            if (key === 'elements')\r\n            {\r\n                var $elms = $R.dom(obj[key]);\r\n                $elms.each(function(node)\r\n                {\r\n                    var $node = $R.dom(node);\r\n                    if (node.tagName === 'FORM')\r\n                    {\r\n                        var serializedData = $node.serialize(true);\r\n                        for (var z in serializedData)\r\n                        {\r\n                            data = this._setData(data, z, serializedData[z]);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        var name = ($node.attr('name')) ? $node.attr('name') : $node.attr('id');\r\n                        data = this._setData(data, name, $node.val());\r\n                    }\r\n                }.bind(this));\r\n            }\r\n            else\r\n            {\r\n                data = this._setData(data, key, obj[key]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    _setData: function(data, name, value)\r\n    {\r\n        if (data instanceof FormData) data.append(name, value);\r\n        else data[name] = value;\r\n\r\n        return data;\r\n    },\r\n\r\n    // normalize\r\n    normalizeTextNodes: function(el)\r\n    {\r\n        el = $R.dom(el).get();\r\n        if (el) el.normalize();\r\n    },\r\n\r\n    // color\r\n    isRgb: function(str)\r\n    {\r\n        return (str.search(/^rgb/i) === 0);\r\n    },\r\n    rgb2hex: function(rgb)\r\n    {\r\n        rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\r\n\r\n        return (rgb && rgb.length === 4) ? \"#\" +\r\n        (\"0\" + parseInt(rgb[1],10).toString(16)).slice(-2) +\r\n        (\"0\" + parseInt(rgb[2],10).toString(16)).slice(-2) +\r\n        (\"0\" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';\r\n    },\r\n    hex2long: function(val)\r\n    {\r\n        if (val.search(/^#/) !== -1 && val.length === 4)\r\n        {\r\n            val = '#' + val[1] + val[1] + val[2] + val[2] + val[3] + val[3];\r\n        }\r\n\r\n        return val;\r\n    },\r\n\r\n    // escape\r\n    escapeRegExp: function(s)\r\n    {\r\n        return s.replace(/[-\\/\\\\^$*~+?.()|[\\]{}]/g, '\\\\$&');\r\n    },\r\n\r\n    // random\r\n    getRandomId: function()\r\n    {\r\n        var id = '';\r\n        var possible = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n        for (var i = 0; i < 12; i++)\r\n        {\r\n            id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n\r\n        return id;\r\n    },\r\n\r\n    // private\r\n    _getFirst: function(nodes)\r\n    {\r\n        return (nodes.length !== 0) ? nodes[0] : false;\r\n    },\r\n    _getLast: function(nodes)\r\n    {\r\n        return (nodes.length !== 0) ? nodes[nodes.length-1] : false;\r\n    }\r\n});\r\n$R.add('service', 'progress', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.$box = null;\r\n        this.$bar = null;\r\n    },\r\n\r\n    // public\r\n    show: function()\r\n    {\r\n        if (!this._is()) this._build();\r\n        this.$box.show();\r\n    },\r\n    hide: function()\r\n    {\r\n        if (this._is())\r\n        {\r\n            this.animate.start(this.$box, 'fadeOut', this._destroy.bind(this));\r\n        }\r\n    },\r\n    update: function(value)\r\n    {\r\n        this.show();\r\n        this.$bar.css('width', value + '%');\r\n    },\r\n\r\n    // private\r\n    _is: function()\r\n    {\r\n        return (this.$box !== null);\r\n    },\r\n    _build: function()\r\n    {\r\n        this.$bar = $R.dom('<span />');\r\n        this.$box = $R.dom('<div id=\"redactor-progress\" />');\r\n\r\n        this.$box.append(this.$bar);\r\n        this.$body.append(this.$box);\r\n    },\r\n    _destroy: function()\r\n    {\r\n        if (this._is()) this.$box.remove();\r\n\r\n        this.$box = null;\r\n        this.$bar = null;\r\n    }\r\n});\r\n$R.add('module', 'starter', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.plugin = app.plugin;\r\n        this.module = app.module;\r\n    },\r\n    // messages\r\n    onstart: function()\r\n    {\r\n        var services = ['element', 'container', 'source', 'editor', 'statusbar', 'toolbar'];\r\n        var modules = ['element', 'container', 'source', 'editor', 'statusbar', 'contextbar', 'input'];\r\n\r\n        this._startStop('start', this.app, services);\r\n        this._startStop('start', this.module, modules);\r\n    },\r\n    onstop: function()\r\n    {\r\n        var modules = ['observer', 'element', 'container', 'source', 'editor', 'contextbar'];\r\n\r\n        this._startStop('stop', this.module, modules);\r\n    },\r\n    onenable: function()\r\n    {\r\n        var modules = ['observer', 'toolbar'];\r\n        var plugins = this.opts.plugins;\r\n\r\n        this._startStop('start', this.module, modules);\r\n        this._startStop('start', this.plugin, plugins);\r\n    },\r\n    ondisable: function()\r\n    {\r\n        var modules = ['observer', 'toolbar'];\r\n        var plugins = this.opts.plugins;\r\n\r\n        this._startStop('stop', this.module, modules);\r\n        this._startStop('stop', this.plugin, plugins);\r\n    },\r\n\r\n    // private\r\n    _startStop: function(type, obj, arr)\r\n    {\r\n        for (var i = 0; i < arr.length; i++)\r\n        {\r\n            if (typeof obj[arr[i]] !== 'undefined')\r\n            {\r\n                this.app.callInstanceMethod(obj[arr[i]], type);\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'element', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.namespace = app.namespace;\r\n        this.element = app.element;\r\n        this.rootOpts = $R.extend({}, true, $R.options, app.rootOpts);\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildModes();\r\n        this._buildMarkup();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        $element.removeData(this.namespace + '-uuid');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        $element.data(this.namespace + '-uuid', this.uuid);\r\n    },\r\n    _buildModes: function()\r\n    {\r\n        var type = this.element.getType();\r\n\r\n        if (type === 'inline') this._redefineOptions(this.opts.modes['inline']);\r\n        if (type === 'div') this._redefineOptions(this.opts.modes['original']);\r\n\r\n        if (type !== 'inline')\r\n        {\r\n            if (this._isRootOption('styles') && this.rootOpts.styles) this.opts.styles = true;\r\n            if (this._isRootOption('source') && !this.rootOpts.source) this.opts.showSource = false;\r\n        }\r\n    },\r\n    _buildMarkup: function()\r\n    {\r\n        var type = this.element.getType();\r\n\r\n        if (type === 'inline')\r\n        {\r\n            this.opts.emptyHtml = '';\r\n        }\r\n        else if (this.opts.breakline)\r\n        {\r\n            this.opts.markup = 'div';\r\n            this.opts.emptyHtml = '<div data-redactor-tag=\"br\">' + this.opts.markerChar + '</div>';\r\n        }\r\n        else\r\n        {\r\n            this.opts.emptyHtml = '<' + this.opts.markup + '></' + this.opts.markup + '>';\r\n        }\r\n    },\r\n    _redefineOptions: function(opts)\r\n    {\r\n        for (var key in opts)\r\n        {\r\n            this.opts[key] = opts[key];\r\n        }\r\n    },\r\n    _isRootOption: function()\r\n    {\r\n        return (typeof this.rootOpts['styles'] !== 'undefined');\r\n    }\r\n});\r\n$R.add('module', 'editor', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.source = app.source;\r\n        this.element = app.element;\r\n        this.component = app.component;\r\n        this.container = app.container;\r\n        this.inspector = app.inspector;\r\n        this.autoparser = app.autoparser;\r\n\r\n        // local\r\n        this.placeholder = false;\r\n        this.events = false;\r\n    },\r\n    // messages\r\n    onenable: function()\r\n    {\r\n        this.enable();\r\n    },\r\n    ondisable: function()\r\n    {\r\n        this.disable();\r\n    },\r\n    onenablefocus: function()\r\n    {\r\n        this._enableFocus();\r\n    },\r\n    oncontextmenu: function(e)\r\n    {\r\n        this.component.setOnEvent(e, true);\r\n    },\r\n    onclick: function(e)\r\n    {\r\n        this.component.setOnEvent(e);\r\n    },\r\n    onkeyup: function(e)\r\n    {\r\n        var data = this.inspector.parse(e.target);\r\n        if (!data.isComponent())\r\n        {\r\n            this.component.clearActive();\r\n        }\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        this._enableReadOnly();\r\n    },\r\n    ondisablereadonly: function()\r\n    {\r\n        this._disableReadOnly();\r\n    },\r\n    onautoparseobserve: function()\r\n    {\r\n        this.autoparser.observe();\r\n    },\r\n    onplaceholder: {\r\n        build: function()\r\n        {\r\n            this._buildPlaceholder();\r\n        },\r\n        toggle: function()\r\n        {\r\n            this._togglePlacehodler();\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildEvents();\r\n        this._buildOptions();\r\n        this._buildAccesibility();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        var classesEditor = ['redactor-in', 'redactor-in-' + this.uuid, 'redactor-structure', 'redactor-placeholder', 'notranslate'];\r\n        if (this.opts.stylesClass !== '') {\r\n            classesEditor.push(this.opts.stylesClass);\r\n        }\r\n\r\n        var classesContainer = ['redactor-focus', 'redactor-blur', 'redactor-over', 'redactor-styles-on',\r\n                                'redactor-styles-off', 'redactor-toolbar-on', 'redactor-text-labeled-on', 'redactor-source-view'];\r\n\r\n        $editor.removeAttr('spellcheck');\r\n        $editor.removeAttr('dir');\r\n        $editor.removeAttr('contenteditable');\r\n        $editor.removeAttr('placeholder');\r\n        $editor.removeAttr('data-gramm_editor');\r\n        $editor.removeClass(classesEditor.join(' '));\r\n\r\n        $container.removeClass(classesContainer.join(' '));\r\n\r\n        this._destroyEvents();\r\n\r\n        if ($editor.get().classList.length === 0) $editor.removeAttr('class');\r\n    },\r\n    enable: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.addClass('redactor-in redactor-in-' + this.uuid);\r\n        $editor.attr({ 'contenteditable': true });\r\n\r\n        if (this.opts.structure)\r\n        {\r\n            $editor.addClass('redactor-structure');\r\n        }\r\n\r\n        if (this.opts.toolbar && !this.opts.air && !this.opts.toolbarExternal)\r\n        {\r\n            $container.addClass('redactor-toolbar-on');\r\n        }\r\n\r\n        // prevent editing\r\n        this._disableBrowsersEditing();\r\n    },\r\n    disable: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.removeClass('redactor-in redactor-in-' + this.uuid);\r\n        $editor.removeClass('redactor-structure');\r\n        $editor.removeAttr('contenteditable');\r\n\r\n        $container.addClass('redactor-toolbar-on');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $element = this.element.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $container.addClass('redactor-blur');\r\n\r\n        if (!this.opts.grammarly)\r\n        {\r\n            $editor.attr('data-gramm_editor', false);\r\n        }\r\n\r\n        if (this.opts.notranslate)\r\n        {\r\n            $editor.addClass('notranslate');\r\n        }\r\n\r\n        if (this.opts.styles)\r\n        {\r\n            $editor.addClass(this.opts.stylesClass);\r\n            $container.addClass('redactor-styles-on');\r\n        }\r\n        else\r\n        {\r\n            $container.addClass('redactor-styles-off');\r\n        }\r\n\r\n        if (this.opts.buttonsTextLabeled)\r\n        {\r\n            $container.addClass('redactor-text-labeled-on');\r\n        }\r\n\r\n        if (this.element.isType('textarea')) $element.before($editor);\r\n    },\r\n    _buildEvents: function()\r\n    {\r\n        this.events = $R.create('editor.events', this.app);\r\n    },\r\n    _buildOptions: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.attr('dir', this.opts.direction);\r\n\r\n        if (!this.opts.spellcheck) $editor.attr('spellcheck', false);\r\n        if (this.opts.tabindex) $editor.attr('tabindex', this.opts.tabindex);\r\n        if (this.opts.minHeight) $editor.css('min-height', this.opts.minHeight);\r\n        if (this.opts.maxHeight) $editor.css('max-height', this.opts.maxHeight);\r\n        if (this.opts.maxWidth) $editor.css({ 'max-width': this.opts.maxWidth, 'margin': 'auto' });\r\n    },\r\n    _buildAccesibility: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.attr({ 'aria-labelledby': 'redactor-voice-' + this.uuid, 'role': 'presentation' });\r\n    },\r\n    _buildPlaceholder: function()\r\n    {\r\n        this.placeholder = $R.create('editor.placeholder', this.app);\r\n    },\r\n    _enableFocus: function()\r\n    {\r\n        if (this.opts.showSource) this._enableFocusSource();\r\n        else this._enableFocusEditor();\r\n    },\r\n    _enableFocusSource: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n\r\n        if (this.opts.focus)\r\n        {\r\n            $source.focus();\r\n            $source.get().setSelectionRange(0, 0);\r\n        }\r\n        else if (this.opts.focusEnd)\r\n        {\r\n            $source.focus();\r\n        }\r\n    },\r\n    _enableFocusEditor: function()\r\n    {\r\n        if (this.opts.focus)\r\n        {\r\n            setTimeout(this.editor.startFocus.bind(this.editor), 100);\r\n        }\r\n        else if (this.opts.focusEnd)\r\n        {\r\n            setTimeout(this.editor.endFocus.bind(this.editor), 100);\r\n        }\r\n    },\r\n    _togglePlacehodler: function()\r\n    {\r\n        if (this.placeholder) this.placeholder.toggle();\r\n    },\r\n    _disableBrowsersEditing: function()\r\n    {\r\n        try {\r\n            // FF fix\r\n            document.execCommand('enableObjectResizing', false, false);\r\n            document.execCommand('enableInlineTableEditing', false, false);\r\n            // IE prevent converting links\r\n            document.execCommand(\"AutoUrlDetect\", false, false);\r\n\r\n            // IE disable image resizing\r\n            var $editor = this.editor.getElement();\r\n            var el = $editor.get();\r\n            if (el.addEventListener) el.addEventListener('mscontrolselect', function(e) { e.preventDefault(); });\r\n            else el.attachEvent('oncontrolselect', function(e) { e.returnValue = false; });\r\n\r\n        } catch (e) {}\r\n    },\r\n    _destroyEvents: function()\r\n    {\r\n        if (this.events)\r\n        {\r\n            this.events.destroy();\r\n        }\r\n    },\r\n    _enableReadOnly: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        this._getEditables($editor).removeAttr('contenteditable');\r\n        $editor.removeAttr('contenteditable');\r\n        $editor.addClass('redactor-read-only');\r\n\r\n        if (this.events) this.events.destroy();\r\n    },\r\n    _disableReadOnly: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        this._getEditables($editor).attr({ 'contenteditable': true });\r\n        $editor.removeClass('redactor-read-only');\r\n        $editor.attr({ 'contenteditable': true });\r\n\r\n        this._buildEvents();\r\n    },\r\n    _getEditables: function($editor)\r\n    {\r\n        return $editor.find('figcaption, td, th');\r\n    }\r\n});\r\n$R.add('class', 'editor.placeholder', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.element = app.element;\r\n\r\n        // build\r\n        this.build();\r\n    },\r\n    build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $editor = this.editor.getElement();\r\n\r\n        if (this.opts.placeholder !== false || $element.attr('placeholder'))\r\n        {\r\n            var text = (this.opts.placeholder !== false) ? this.opts.placeholder : $element.attr('placeholder');\r\n            $editor.attr('placeholder', text);\r\n            this.toggle();\r\n        }\r\n    },\r\n    toggle: function()\r\n    {\r\n        return (this.editor.isEmpty(true)) ? this.show() : this.hide();\r\n    },\r\n    show: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.addClass('redactor-placeholder');\r\n    },\r\n    hide: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.removeClass('redactor-placeholder');\r\n    }\r\n});\r\n$R.add('class', 'editor.events', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.$doc = app.$doc;\r\n        this.uuid = app.uuid;\r\n        this.source = app.source;\r\n        this.editor = app.editor;\r\n        this.cleaner = app.cleaner;\r\n        this.container = app.container;\r\n        this.insertion = app.insertion;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n        this.component = app.component;\r\n\r\n        // local\r\n        this.blurNamespace = '.redactor-blur.' + this.uuid;\r\n        this.eventsList = ['paste', 'click', 'contextmenu', 'keydown', 'keyup', 'mouseup', 'touchstart',\r\n                           'cut', 'copy', 'dragenter', 'dragstart', 'drop', 'dragover', 'dragleave'];\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    destroy: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.off('.redactor-focus');\r\n        this.$doc.off('keyup' + this.blurNamespace + ' mousedown' + this.blurNamespace);\r\n\r\n        // all events\r\n        this._loop('off');\r\n    },\r\n    focus: function(e)\r\n    {\r\n        var $container = this.container.getElement();\r\n\r\n        if (this.editor.isPasting() || $container.hasClass('redactor-focus')) return;\r\n\r\n        $container.addClass('redactor-focus');\r\n        $container.removeClass('redactor-blur');\r\n\r\n        this.app.broadcast('observe', e);\r\n        this.app.broadcast('focus', e);\r\n\r\n        this.isFocused = true;\r\n        this.isBlured = false;\r\n    },\r\n    blur: function(e)\r\n    {\r\n        var $container = this.container.getElement();\r\n        var $target = $R.dom(e.target);\r\n        var targets = ['.redactor-in-' + this.uuid,  '.redactor-toolbar', '.redactor-dropdown',\r\n        '.redactor-context-toolbar', '.redactor-modal-box', '#redactor-image-resizer'];\r\n\r\n        this.app.broadcast('originalblur', e);\r\n        if (this.app.stopBlur) return;\r\n\r\n        if (!this.app.isStarted() || this.editor.isPasting()) return;\r\n        if ($target.closest(targets.join(',')).length !== 0) return;\r\n\r\n        if (!this.isBlured && !$container.hasClass('redactor-blur'))\r\n        {\r\n            $container.removeClass('redactor-focus');\r\n            $container.addClass('redactor-blur');\r\n            this.app.broadcast('blur', e);\r\n\r\n            this.isFocused = false;\r\n            this.isBlured = true;\r\n        }\r\n    },\r\n    cut: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        this.app.broadcast('state', e);\r\n\r\n        if (this.component.isNonEditable(current))\r\n        {\r\n            this._passSelectionToClipboard(e, data, true);\r\n            e.preventDefault();\r\n        }\r\n    },\r\n    copy: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        this.app.broadcast('state', e);\r\n\r\n        if (this.component.isNonEditable(current))\r\n        {\r\n            this._passSelectionToClipboard(e, data, false);\r\n            e.preventDefault();\r\n        }\r\n    },\r\n    drop: function(e)\r\n    {\r\n        e = e.originalEvent || e;\r\n        e.stopPropagation();\r\n        this._removeOverClass();\r\n\r\n        if (this.opts.dragUpload === false)\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.app.isDragComponentInside())\r\n        {\r\n            var $dragComponent = $R.dom(this.app.getDragComponentInside());\r\n            var $component = $dragComponent.clone(true);\r\n            this.insertion.insertToPoint(e, $component);\r\n\r\n            $dragComponent.remove();\r\n\r\n            this.app.setDragComponentInside(false);\r\n            this.app.broadcast('state', e);\r\n            this.app.broadcast('drop', e);\r\n            this.app.broadcast('image.observe', e);\r\n\r\n            e.preventDefault();\r\n\r\n            return;\r\n        }\r\n        else if (this.app.isDragInside() && this.opts.input)\r\n        {\r\n            this.insertion.insertPoint(e);\r\n\r\n            var dt = e.dataTransfer;\r\n            var html = dt.getData('text/html');\r\n\r\n            // clear selected\r\n            var range = this.selection.getRange();\r\n            if (range)\r\n            {\r\n                var blocks = this.selection.getBlocks();\r\n                range.deleteContents();\r\n\r\n                // remove empty blocks\r\n                for (var i = 0; i < blocks.length; i++)\r\n                {\r\n                    if (blocks[i].innerHTML === '') $R.dom(blocks[i]).remove();\r\n                }\r\n            }\r\n\r\n            // paste\r\n            $R.create('input.paste', this.app, e, true, html, true);\r\n\r\n            this.app.broadcast('state', e);\r\n            this.app.broadcast('drop', e);\r\n\r\n            this.app.setDragInside(false);\r\n            e.preventDefault();\r\n\r\n            return;\r\n        }\r\n\r\n        this.app.broadcast('state', e);\r\n        this.app.broadcast('paste', e, e.dataTransfer);\r\n        this.app.broadcast('drop', e);\r\n\r\n    },\r\n    dragenter: function(e)\r\n    {\r\n        e.preventDefault();\r\n    },\r\n    dragstart: function(e)\r\n    {\r\n        this.app.setDragComponentInside(false);\r\n        this.app.setDragInside(false);\r\n\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isComponent() && !data.isComponentEditable() && !data.isFigcaption())\r\n        {\r\n            this.app.setDragComponentInside(data.getComponent());\r\n        }\r\n        else if (this.selection.is() && !this.selection.isCollapsed())\r\n        {\r\n            // drag starts inside editor\r\n            this.app.setDragInside(true);\r\n            this._setDragData(e);\r\n        }\r\n\r\n        this.app.broadcast('dragstart', e);\r\n    },\r\n    dragover: function(e)\r\n    {\r\n        this.app.broadcast('dragover', e);\r\n    },\r\n    dragleave: function(e)\r\n    {\r\n        this.app.broadcast('dragleave', e);\r\n    },\r\n    paste: function(e)\r\n    {\r\n        this.app.broadcast('paste', e);\r\n    },\r\n    contextmenu: function(e)\r\n    {\r\n        // chrome crashes fix\r\n        //this.editor.disableNonEditables();\r\n\r\n        //setTimeout(function()\r\n        //{\r\n          //  this.editor.enableNonEditables();\r\n           // this.app.broadcast('contextmenu', e);\r\n\r\n        //}.bind(this), 0);\r\n    },\r\n    click: function(e)\r\n    {\r\n        // triple click selection\r\n        if (e.detail === 3)\r\n        {\r\n            e.preventDefault();\r\n\r\n            var block = this.selection.getBlock();\r\n            if (block) {\r\n                var range = document.createRange();\r\n                range.selectNodeContents(block);\r\n                this.selection.setRange(range)\r\n            }\r\n        }\r\n\r\n        // observe bottom click & start click & outside click\r\n        var $target = $R.dom(e.target);\r\n        if ($target.hasClass('redactor-in'))\r\n        {\r\n            var top = $target.offset().top;\r\n            var pad = parseFloat($target.css('padding-bottom'));\r\n            var height = $target.height();\r\n            var posHeight = top + height - pad*2;\r\n\r\n            if (posHeight < e.pageY)\r\n            {\r\n                this.app.broadcast('bottomclick', e);\r\n            }\r\n            else if ($target.hasClass('redactor-placeholder')) {\r\n                this.editor.startFocus(this.editor);\r\n            }\r\n        }\r\n\r\n        this.app.broadcast('state', e);\r\n        this.app.broadcast('click', e);\r\n    },\r\n    keydown: function(e)\r\n    {\r\n        this.app.broadcast('state', e);\r\n        var stop = this.app.broadcast('keydown', e);\r\n        if (stop === false)\r\n        {\r\n            return e.preventDefault();\r\n        }\r\n    },\r\n    keyup: function(e)\r\n    {\r\n        this.app.broadcast('keyup', e);\r\n    },\r\n    mouseup: function(e)\r\n    {\r\n        this.app.broadcast('observe', e);\r\n        this.app.broadcast('state', e);\r\n    },\r\n    touchstart: function(e)\r\n    {\r\n        this.app.broadcast('observe', e);\r\n        this.app.broadcast('state', e);\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        $editor.on('focus.redactor-focus click.redactor-focus', this.focus.bind(this));\r\n        this.$doc.on('keyup' + this.blurNamespace + ' mousedown' + this.blurNamespace, this.blur.bind(this));\r\n\r\n        // all events\r\n        this._loop('on');\r\n    },\r\n    _removeOverClass: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.removeClass('over');\r\n    },\r\n    _loop: function(func)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        for (var i = 0; i < this.eventsList.length; i++)\r\n        {\r\n            var event = this.eventsList[i] + '.redactor-events';\r\n            var method = this.eventsList[i];\r\n\r\n            $editor[func](event, this[method].bind(this));\r\n        }\r\n    },\r\n    _passAllToClipboard: function(e)\r\n    {\r\n        var clipboard = e.clipboardData;\r\n        var content = this.source.getCode();\r\n\r\n        clipboard.setData('text/html', content);\r\n        clipboard.setData('text/plain', content.toString().replace(/\\n$/, \"\"));\r\n    },\r\n    _passSelectionToClipboard: function(e, data, remove)\r\n    {\r\n        var clipboard = e.clipboardData;\r\n        var node = data.getComponent();\r\n        var $node = $R.dom(node);\r\n        var $cloned = $node.clone();\r\n\r\n        // clean\r\n        $cloned.find('.redactor-component-caret').remove();\r\n        $cloned.removeClass('redactor-component-active');\r\n        $cloned.removeAttr('contenteditable');\r\n        $cloned.removeAttr('tabindex');\r\n\r\n        // html\r\n        var content = $cloned.get().outerHTML;\r\n\r\n        if (remove) this.component.remove(node);\r\n\r\n        clipboard.setData('text/html', content);\r\n        clipboard.setData('text/plain', content.toString().replace(/\\n$/, \"\"));\r\n    },\r\n    _setDragData: function(e)\r\n    {\r\n        e = e.originalEvent || e;\r\n\r\n        var dt = e.dataTransfer;\r\n        dt.effectAllowed = 'move';\r\n        dt.setData('text/Html', this.selection.getHtml());\r\n    }\r\n});\r\n$R.add('module', 'container', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.element = app.element;\r\n        this.container = app.container;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildAccesibility();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $container.after($element);\r\n        $container.remove();\r\n        $element.show();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $container.addClass('redactor-box');\r\n        $container.attr('dir', this.opts.direction);\r\n\r\n        if (this.element.isType('inline')) $container.addClass('redactor-inline');\r\n\r\n        $element.after($container);\r\n        $container.append($element);\r\n    },\r\n    _buildAccesibility: function()\r\n    {\r\n        var $container = this.container.getElement();\r\n        var $label = $R.dom('<span />');\r\n\r\n        $label.addClass('redactor-voice-label');\r\n        $label.attr({ 'id': 'redactor-voice-' + this.uuid, 'aria-hidden': false });\r\n        $label.html(this.lang.get('accessibility-help-label'));\r\n\r\n        $container.prepend($label);\r\n    }\r\n});\r\n$R.add('module', 'source', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.element = app.element;\r\n        this.source = app.source;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.cleaner = app.cleaner;\r\n        this.component = app.component;\r\n        this.container = app.container;\r\n        this.autoparser = app.autoparser;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.syncedHtml = '';\r\n    },\r\n    // messages\r\n    onstartcode: function()\r\n    {\r\n        var sourceContent = this.source.getStartedContent();\r\n        var $editor = this.editor.getElement();\r\n        var $source = this.source.getElement();\r\n\r\n        // autoparse\r\n        if (this.opts.autoparse && this.opts.autoparseStart)\r\n        {\r\n            sourceContent = this.autoparser.parse(sourceContent);\r\n        }\r\n\r\n        // started content\r\n        var startContent = this.cleaner.input(sourceContent, true, true);\r\n        var syncContent = this.cleaner.output(startContent);\r\n\r\n        // set content\r\n        $editor.html(startContent);\r\n        $source.val(syncContent);\r\n\r\n        this.syncedHtml = syncContent;\r\n        this.app.broadcast('placeholder.build');\r\n        this.app.broadcast('autoparseobserve');\r\n\r\n        // widget's scripts\r\n        this.component.executeScripts();\r\n    },\r\n    onstartcodeshow: function()\r\n    {\r\n        this.show();\r\n    },\r\n    ontrytosync: function()\r\n    {\r\n        this.sync();\r\n    },\r\n    onhardsync: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var html = $editor.html();\r\n\r\n        html = this.app.broadcast('syncBefore', html);\r\n        html = this.cleaner.output(html);\r\n\r\n        this._syncing(html);\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n        this._buildClasses();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $element = this.element.getElement();\r\n        var $source = this.source.getElement();\r\n\r\n        $element.removeClass('redactor-source redactor-source-open');\r\n        $source.off('input.redactor-source');\r\n        $source.removeAttr('data-gramm_editor');\r\n\r\n        if ($source.get().classList.length === 0) $source.removeAttr('class');\r\n        if (!this.source.isNameGenerated()) $element.removeAttr('name');\r\n        if (!this.element.isType('textarea')) $source.remove();\r\n\r\n    },\r\n    getCode: function()\r\n    {\r\n        return this.source.getCode();\r\n    },\r\n\r\n    // public\r\n    toggle: function()\r\n    {\r\n        if (!this.opts.source) return;\r\n\r\n        var $source = this.source.getElement();\r\n\r\n        return ($source.hasClass('redactor-source-open')) ? this.hide() : this.show();\r\n    },\r\n    show: function()\r\n    {\r\n        if (!this.opts.source) return;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var $source = this.source.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        var html = $source.val();\r\n\r\n        if (this.app.isStarted()) html = this.app.broadcast('source.open', html);\r\n\r\n        // get height\r\n        var editorHeight = $editor.height();\r\n\r\n        $editor.hide();\r\n        $source.height(editorHeight);\r\n        $source.val(html.trim());\r\n        $source.show();\r\n        $source.addClass('redactor-source-open');\r\n        $source.on('input.redactor-source-events', this._onChangedSource.bind(this));\r\n        $source.on('keydown.redactor-source-events', this._onTabKey.bind(this));\r\n        $source.on('focus.redactor-source-events', this._onFocus.bind(this));\r\n\r\n        if (this.opts.source.hasOwnProperty('codemirror')) {\r\n            var opts = (typeof this.opts.source.codemirror === 'object') ? this.opts.source.codemirror : {};\r\n            var codemirrorSrc = (typeof this.opts.source.codemirrorSrc !== 'undefined') ? this.opts.source.codemirrorSrc : CodeMirror;\r\n            this.codemirror = codemirrorSrc.fromTextArea($source.get(), opts);\r\n            this.codemirror.setSize(null, editorHeight);\r\n            this.codemirror.on('change', function(cm, changeObj){ cm.save() });\r\n            this.codemirror.on('change', this._onChangedSource.bind(this));\r\n        }\r\n        else {\r\n            $container.addClass('redactor-source-view');\r\n        }\r\n\r\n        // buttons\r\n        setTimeout(function()\r\n        {\r\n            this._disableButtons();\r\n            this._setActiveSourceButton();\r\n\r\n        }.bind(this), 100);\r\n\r\n        if (this.app.isStarted()) this.app.broadcast('source.opened');\r\n    },\r\n    hide: function()\r\n    {\r\n        if (!this.opts.source) return;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var $source = this.source.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        var html = $source.val();\r\n        if (this.opts.source.hasOwnProperty('codemirror')) {\r\n            html = this.codemirror.getValue();\r\n            this.codemirror.toTextArea();\r\n        }\r\n\r\n\r\n        // clean\r\n        html = this.cleaner.input(html, true);\r\n        html = (this.utils.isEmptyHtml(html)) ? this.opts.emptyHtml : html;\r\n        html = this.app.broadcast('source.close', html);\r\n\r\n        // buttons\r\n        this._enableButtons();\r\n        this._setInactiveSourceButton();\r\n\r\n        $source.hide();\r\n        $source.removeClass('redactor-source-open');\r\n        $source.off('.redactor-source-events');\r\n        $editor.show();\r\n        $editor.html(html);\r\n\r\n        $container.removeClass('redactor-source-view');\r\n\r\n        setTimeout(function()\r\n        {\r\n            this.editor.startFocus();\r\n\r\n            // widget's scripts\r\n            this.component.executeScripts();\r\n\r\n        }.bind(this), 0);\r\n\r\n        this.app.broadcast('source.closed');\r\n    },\r\n    sync: function()\r\n    {\r\n        var self = this;\r\n        var $editor = this.editor.getElement();\r\n        var html = $editor.html();\r\n\r\n        html = this.app.broadcast('syncBefore', html);\r\n        html = this.cleaner.output(html);\r\n\r\n        if (this._isSync(html))\r\n        {\r\n            if (this.timeout) clearTimeout(this.timeout);\r\n            this.timeout = setTimeout(function() { self._syncing(html); }, 200);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n        var $element = this.element.getElement();\r\n\r\n        $source.hide();\r\n\r\n        if (!this.opts.grammarly)\r\n        {\r\n            $source.attr('data-gramm_editor', false);\r\n        }\r\n\r\n        if (!this.element.isType('textarea'))\r\n        {\r\n            $element.after($source);\r\n        }\r\n    },\r\n    _buildClasses: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n\r\n        $source.addClass('redactor-source');\r\n    },\r\n    _syncing: function(html)\r\n    {\r\n        html = this.app.broadcast('syncing', html);\r\n\r\n        var $source = this.source.getElement();\r\n        $source.val(html);\r\n\r\n        this.app.broadcast('synced', html);\r\n        this.app.broadcast('changed', html);\r\n    },\r\n    _isSync: function(html)\r\n    {\r\n        if (this.syncedHtml !== html)\r\n        {\r\n            this.syncedHtml = html;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _onChangedSource: function()\r\n    {\r\n        var $source = this.source.getElement();\r\n        var html = $source.val();\r\n\r\n        this.app.broadcast('changed', html);\r\n        this.app.broadcast('source.changed', html);\r\n    },\r\n    _onTabKey: function(e)\r\n    {\r\n        if (e.keyCode !== 9) return true;\r\n\r\n        e.preventDefault();\r\n\r\n        var $source = this.source.getElement();\r\n        var el = $source.get();\r\n        var start = el.selectionStart;\r\n\r\n        $source.val($source.val().substring(0, start) + \"    \" + $source.val().substring(el.selectionEnd));\r\n        el.selectionStart = el.selectionEnd = start + 4;\r\n    },\r\n    _onFocus: function()\r\n    {\r\n        this.app.broadcast('sourcefocus');\r\n    },\r\n    _disableButtons: function()\r\n    {\r\n        this.toolbar.disableButtons();\r\n    },\r\n    _enableButtons: function()\r\n    {\r\n        this.toolbar.enableButtons();\r\n    },\r\n    _setActiveSourceButton: function()\r\n    {\r\n        var $btn = this.toolbar.getButton('html');\r\n        $btn.enable();\r\n        $btn.setActive();\r\n    },\r\n    _setInactiveSourceButton: function()\r\n    {\r\n        var $btn = this.toolbar.getButton('html');\r\n        $btn.setInactive();\r\n    }\r\n});\r\n$R.add('module', 'observer', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.editor = app.editor;\r\n\r\n        // local\r\n        this.observerUnit = false;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        if (window.MutationObserver)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var el = $editor.get();\r\n            this.observerUnit = this._build(el);\r\n            this.observerUnit.observe(el, {\r\n                 attributes: true,\r\n                 subtree: true,\r\n                 childList: true,\r\n                 characterData: true,\r\n                 characterDataOldValue: true\r\n            });\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.observerUnit) this.observerUnit.disconnect();\r\n    },\r\n\r\n    // private\r\n    _build: function(el)\r\n    {\r\n        var self = this;\r\n        return new MutationObserver(function(mutations)\r\n        {\r\n            self._observe(mutations[mutations.length-1], el);\r\n        });\r\n    },\r\n    _observe: function(mutation, el)\r\n    {\r\n        if (this.app.isReadOnly() || (mutation.type === 'attributes' && mutation.target === el))\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.app.broadcast('observe');\r\n        this.app.broadcast('trytosync');\r\n        this.app.broadcast('placeholder.toggle');\r\n    }\r\n});\r\n$R.add('module', 'clicktoedit', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.source = app.source;\r\n        this.editor = app.editor;\r\n        this.container = app.container;\r\n        this.selection = app.selection;\r\n    },\r\n    // messages\r\n    onstartclicktoedit: function()\r\n    {\r\n        this.start();\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        if (!this.opts.clickToEdit) return;\r\n        if (!this._isEnabled()) this.stop();\r\n    },\r\n    ondisablereadonly: function()\r\n    {\r\n        if (!this.opts.clickToEdit) return;\r\n        if (!this._isEnabled()) this.start();\r\n    },\r\n    onstop: function()\r\n    {\r\n        this.stop();\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        this._build();\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.buttonSave) this.buttonSave.stop();\r\n        if (this.buttonCancel) this.buttonCancel.stop();\r\n\r\n        this._destroy();\r\n        this.app.broadcast('disable');\r\n    },\r\n    enable: function()\r\n    {\r\n        this.app.broadcast('clickStart');\r\n\r\n        var isEmpty = this.editor.isEmpty();\r\n        if (!isEmpty) this.selection.saveMarkers();\r\n\r\n        this._setFocus();\r\n        this._destroy();\r\n        this.app.broadcast('enable');\r\n        this.buttonSave.enable();\r\n        this.buttonCancel.enable();\r\n\r\n        if (!isEmpty) this.selection.restoreMarkers();\r\n        if (isEmpty) this.editor.focus();\r\n\r\n        var $container = this.container.getElement();\r\n        $container.addClass('redactor-clicktoedit-enabled');\r\n\r\n        this.source.rebuildStartedContent();\r\n\r\n        this.app.broadcast('startcode');\r\n        this.app.broadcast('image.observe');\r\n    },\r\n    save: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n\r\n        var html = this.source.getCode();\r\n\r\n        this.app.broadcast('disable');\r\n        this.app.broadcast('clickSave', html);\r\n        this.app.broadcast('clickStop');\r\n        this.app.broadcast('toolbar.removeexternal');\r\n        this._build();\r\n    },\r\n    cancel: function(e)\r\n    {\r\n        if (e) e.preventDefault();\r\n\r\n        var html = this.saved;\r\n        var $editor = this.editor.getElement();\r\n        $editor.html(html);\r\n\r\n        this.saved = '';\r\n\r\n        this.app.broadcast('disable');\r\n        this.app.broadcast('clickCancel', html);\r\n        this.app.broadcast('clickStop');\r\n        this.app.broadcast('toolbar.removeexternal');\r\n        this._build();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        // buttons\r\n        this.buttonSave = $R.create('clicktoedit.button', 'save', this.app, this);\r\n        this.buttonCancel = $R.create('clicktoedit.button', 'cancel', this.app, this);\r\n\r\n        this.buttonSave.stop();\r\n        this.buttonCancel.stop();\r\n\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.on('click.redactor-click-to-edit mouseup.redactor-click-to-edit', this.enable.bind(this));\r\n        $container.addClass('redactor-over');\r\n        $container.removeClass('redactor-clicktoedit-enabled');\r\n    },\r\n    _isEnabled: function()\r\n    {\r\n        return this.container.getElement().hasClass('redactor-clicktoedit-enabled');\r\n    },\r\n    _destroy: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $editor.off('.redactor-click-to-edit');\r\n        $container.removeClass('redactor-over redactor-clicktoedit-enabled');\r\n    },\r\n    _setFocus: function()\r\n    {\r\n        this.saved = this.source.getCode();\r\n\r\n        this.buttonSave.start();\r\n        this.buttonCancel.start();\r\n    }\r\n});\r\n$R.add('class', 'clicktoedit.button', {\r\n    init: function(type, app, context)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.toolbar = app.toolbar;\r\n        this.context = context;\r\n\r\n        // local\r\n        this.type = type;\r\n        this.name = (type === 'save') ? 'clickToSave' : 'clickToCancel';\r\n        this.objected = false;\r\n        this.enabled = false;\r\n        this.namespace = '.redactor-click-to-edit';\r\n\r\n        // build\r\n        this._build();\r\n    },\r\n    enable: function()\r\n    {\r\n        if (!this.objected) return;\r\n\r\n        var data = this.opts[this.name];\r\n        data.api = 'module.clicktoedit.' + this.type;\r\n\r\n        this.toolbar.addButton(this.type, data);\r\n        this.enabled = true;\r\n    },\r\n    start: function()\r\n    {\r\n        if (this.objected) return;\r\n\r\n        this.$button.off(this.namespace);\r\n        this.$button.show();\r\n        this.$button.on('click' + this.namespace, this.context[this.type].bind(this.context));\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.objected || !this.enabled) return;\r\n\r\n        this.$button.hide();\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.objected = (typeof this.opts[this.name] === 'object');\r\n\r\n        if (!this.objected)\r\n        {\r\n            this.$button = $R.dom(this.opts[this.name]);\r\n            this.enabled = true;\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'statusbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.element = app.element;\r\n        this.statusbar = app.statusbar;\r\n        this.container = app.container;\r\n    },\r\n    // public\r\n    start: function()\r\n    {\r\n        if (!this.element.isType('inline'))\r\n        {\r\n            var $statusbar = this.statusbar.getElement();\r\n            var $container = this.container.getElement();\r\n\r\n            $statusbar.addClass('redactor-statusbar');\r\n            $container.append($statusbar);\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'contextbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.uuid = app.uuid;\r\n        this.$win = app.$win;\r\n        this.$doc = app.$doc;\r\n        this.$body = app.$body;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n\r\n        // local\r\n        this.$target = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$body;\r\n    },\r\n    // messages\r\n    onstop: function() {\r\n        this.stop();\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        this.stop();\r\n    },\r\n    ondisablereadonly: function()\r\n    {\r\n        this.start();\r\n    },\r\n    oncontextbar: {\r\n        close: function()\r\n        {\r\n            this.close();\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        if (this.opts.toolbarContext)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n\r\n            this._build();\r\n            $editor.on('click.redactor-context mouseup.redactor-context', this.open.bind(this));\r\n\r\n            if (this.opts.scrollTarget)\r\n            {\r\n                $R.dom(this.opts.scrollTarget).on('scroll.redactor-context', this.close.bind(this));\r\n            }\r\n            else if (this.opts.maxHeight !== false)\r\n            {\r\n                $editor.on('scroll.redactor-context', this.close.bind(this));\r\n            }\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.off('.redactor-context');\r\n\r\n        this.$doc.off('.redactor-context');\r\n        this.$win.off('.redactor-context');\r\n\r\n        if (this.$contextbar) this.$contextbar.remove();\r\n        if (this.opts.scrollTarget)\r\n        {\r\n            $R.dom(this.opts.scrollTarget).off('.redactor-context');\r\n        }\r\n    },\r\n    is: function()\r\n    {\r\n        return (this.$contextbar && this.$contextbar.hasClass('open'));\r\n    },\r\n    set: function(e, node, buttons, position)\r\n    {\r\n        this.$contextbar.html('');\r\n        this.$el = $R.dom(node);\r\n\r\n        // buttons\r\n        for (var key in buttons)\r\n        {\r\n            var $btn = $R.create('contextbar.button', this.app, buttons[key]);\r\n            if ($btn.html() !== '')\r\n            {\r\n                this.$contextbar.append($btn);\r\n            }\r\n        }\r\n\r\n        // show\r\n        var pos = this._buildPosition(e, this.$el, position);\r\n\r\n        this.$contextbar.css(pos);\r\n        this.$contextbar.show();\r\n        this.$contextbar.addClass('open');\r\n        this.$doc.on('click.redactor-context mouseup.redactor-context', this.close.bind(this));\r\n        this.$win.on('resize.redactor-context', this.close.bind(this));\r\n    },\r\n    open: function(e)\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            this.app.broadcast('contextbar', e, this);\r\n        }.bind(this), 0);\r\n    },\r\n    close: function(e)\r\n    {\r\n        if (!this.$contextbar) return;\r\n        if (e)\r\n        {\r\n            var $target = $R.dom(e.target);\r\n            if (this.$el && $target.closest(this.$el).length !== 0)\r\n            {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.$contextbar.hide();\r\n        this.$contextbar.removeClass('open');\r\n        this.$doc.off('.redactor.context');\r\n    },\r\n\r\n    // private\r\n    _build: function()\r\n    {\r\n        this.$contextbar = $R.dom('<div>');\r\n        this.$contextbar.attr('id', 'redactor-context-toolbar-' + this.uuid);\r\n        this.$contextbar.attr('dir', this.opts.direction);\r\n        this.$contextbar.addClass('redactor-context-toolbar');\r\n        this.$contextbar.hide();\r\n\r\n        this.$target.append(this.$contextbar);\r\n    },\r\n    _buildPosition: function(e, $el, position)\r\n    {\r\n        var top, left;\r\n        var isTarget = this.toolbar.isTarget();\r\n        var offset = (isTarget) ? $el.position() : $el.offset();\r\n\r\n        var width = $el.width();\r\n        var height = $el.height();\r\n\r\n        var barWidth = this.$contextbar.width();\r\n        var barHeight = this.$contextbar.height();\r\n        var docScrollTop = (isTarget) ? (this.$target.scrollTop() + this.$doc.scrollTop()) : this.$doc.scrollTop();\r\n\r\n        var targetOffset = this.$target.offset();\r\n        var leftFix = (isTarget) ? targetOffset.left : 0;\r\n        var topFix = (isTarget) ? targetOffset.top : 0;\r\n\r\n        if (!position)\r\n        {\r\n            top = (e.clientY + docScrollTop - barHeight);\r\n            left = (e.clientX - barWidth/2);\r\n        }\r\n        else if (position === 'top')\r\n        {\r\n            top = (offset.top - barHeight);\r\n            left = (offset.left + width/2 - barWidth/2);\r\n        }\r\n        else if (position === 'bottom')\r\n        {\r\n            top = (offset.top + height);\r\n            left = (offset.left + width/2 - barWidth/2);\r\n        }\r\n\r\n        if (left < 0) left = 0;\r\n\r\n        return { top: (top - topFix) + 'px', left: (left - leftFix) + 'px' };\r\n    }\r\n});\r\n$R.add('class', 'contextbar.button', {\r\n    mixins: ['dom'],\r\n    init: function(app, obj)\r\n    {\r\n        this.app = app;\r\n\r\n        // local\r\n        this.obj = obj;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.parse('<a>');\r\n\r\n        if (typeof this.obj.title !== 'string')\r\n        {\r\n            var url = this.obj.title.attr('href');\r\n            this.attr('href', url);\r\n\r\n            if (url.search(/^#/) === -1) {\r\n                this.attr('target', '_blank');\r\n            }\r\n\r\n            this.text(this.obj.html || url);\r\n        }\r\n        else\r\n        {\r\n            this.attr('href', '#');\r\n\r\n            this._buildTitle();\r\n            this._buildMessage();\r\n        }\r\n    },\r\n    _buildTitle: function()\r\n    {\r\n        this.html(this.obj.title);\r\n    },\r\n    _buildMessage: function()\r\n    {\r\n        if (typeof this.obj.message !== 'undefined' || typeof this.obj.api !== 'undefined')\r\n        {\r\n            this.on('click', this._toggle.bind(this));\r\n        }\r\n    },\r\n    _toggle: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (this.obj.message)\r\n        {\r\n            this.app.broadcast(this.obj.message, this.obj.args);\r\n        }\r\n        else if (this.obj.api)\r\n        {\r\n            this.app.api(this.obj.api, this.obj.args);\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'toolbar', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n\r\n        // local\r\n        this.buttons = [];\r\n        this.toolbarModule = false;\r\n    },\r\n    // messages\r\n    onsource: {\r\n        open: function()\r\n        {\r\n            if (!this.toolbar.isAir() && this.toolbar.isFixed())\r\n            {\r\n                this.toolbarModule.resetPosition();\r\n            }\r\n        },\r\n        opened: function()\r\n        {\r\n            if (this.toolbar.isAir() && this.toolbarModule)\r\n            {\r\n                this.toolbarModule.createSourceHelper();\r\n            }\r\n\r\n            // hide tooltips\r\n            setTimeout(function()\r\n            {\r\n                $R.dom('.re-button-tooltip-' + this.uuid).remove();\r\n            }.bind(this), 100)\r\n\r\n        },\r\n        close: function()\r\n        {\r\n            if (this.toolbar.isAir() && this.toolbarModule)\r\n            {\r\n                this.toolbarModule.destroySourceHelper();\r\n            }\r\n        },\r\n        closed: function()\r\n        {\r\n            if (this.toolbar.is() && this.opts.air)\r\n            {\r\n                this.toolbarModule.openSelected();\r\n            }\r\n        }\r\n    },\r\n    ontoolbar: {\r\n        removeexternal: function() {\r\n            if (!this.opts.air && this.opts.toolbarExternal && this.opts.clickToEdit) {\r\n                $R.dom(this.opts.toolbarExternal).html('');\r\n            }\r\n        }\r\n    },\r\n    onobserve: function()\r\n    {\r\n        if (this.toolbar.is())\r\n        {\r\n            this.toolbar.observe();\r\n        }\r\n    },\r\n    onfocus: function()\r\n    {\r\n        this._setExternalOnFocus();\r\n    },\r\n    onsourcefocus: function()\r\n    {\r\n        this._setExternalOnFocus();\r\n    },\r\n    onempty: function()\r\n    {\r\n        if (this.toolbar.isFixed())\r\n        {\r\n            this.toolbarModule.resetPosition();\r\n        }\r\n    },\r\n    onenablereadonly: function()\r\n    {\r\n        if (this.toolbar.isAir())\r\n        {\r\n            this.toolbarModule.close();\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        if (this.toolbar.is())\r\n        {\r\n            this._buildButtons();\r\n            this._initToolbar();\r\n            this._initButtons();\r\n        }\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.toolbarModule)\r\n        {\r\n            this.toolbarModule.stop();\r\n        }\r\n\r\n        // stop dropdowns & tooltips\r\n        $R.dom('.re-button-tooltip-' + this.uuid).remove();\r\n        $R.dom('.redactor-dropdown-' + this.uuid).remove();\r\n    },\r\n\r\n    // private\r\n    _buildButtons: function()\r\n    {\r\n        this.buttons = this.opts.buttons.concat();\r\n\r\n        this._buildImageButton();\r\n        this._buildFileButton();\r\n        this._buildSourceButton();\r\n        this._buildAdditionalButtons();\r\n        this._buildHiddenButtons();\r\n    },\r\n    _buildImageButton: function()\r\n    {\r\n        if (!this.opts.imageUpload && !this.opts.imageManagerJson) this.utils.removeFromArrayByValue(this.buttons, 'image');\r\n    },\r\n    _buildFileButton: function()\r\n    {\r\n        if (!this.opts.fileUpload) this.utils.removeFromArrayByValue(this.buttons, 'file');\r\n    },\r\n    _buildSourceButton: function()\r\n    {\r\n        if (!this.opts.source) this.utils.removeFromArrayByValue(this.buttons, 'html');\r\n    },\r\n    _buildAdditionalButtons: function()\r\n    {\r\n        // end\r\n        if (this.opts.buttonsAdd.length !== 0)\r\n        {\r\n            this.opts.buttonsAdd = this._removeExistButtons(this.opts.buttonsAdd);\r\n            this.buttons = this.buttons.concat(this.opts.buttonsAdd);\r\n        }\r\n\r\n        // beginning\r\n        if (this.opts.buttonsAddFirst.length !== 0)\r\n        {\r\n            this.opts.buttonsAddFirst = this._removeExistButtons(this.opts.buttonsAddFirst);\r\n            this.buttons.unshift(this.opts.buttonsAddFirst);\r\n        }\r\n\r\n        var index, btns;\r\n\r\n        // after\r\n        if (this.opts.buttonsAddAfter !== false)\r\n        {\r\n            index = this.buttons.indexOf(this.opts.buttonsAddAfter.after) + 1;\r\n            btns = this.opts.buttonsAddAfter.buttons;\r\n            for (var i = 0; i < btns.length; i++)\r\n            {\r\n                this.buttons.splice(index+i, 0, btns[i]);\r\n            }\r\n        }\r\n\r\n        // before\r\n        if (this.opts.buttonsAddBefore !== false)\r\n        {\r\n            index = this.buttons.indexOf(this.opts.buttonsAddBefore.before)+1;\r\n            btns = this.opts.buttonsAddBefore.buttons;\r\n            for (var i = 0; i < btns.length; i++)\r\n            {\r\n                this.buttons.splice(index-(1-i), 0, btns[i]);\r\n            }\r\n        }\r\n    },\r\n    _buildHiddenButtons: function()\r\n    {\r\n        if (this.opts.buttonsHide.length !== 0) {\r\n            var buttons = this.opts.buttonsHide;\r\n            for (var i = 0; i < buttons.length; i++) {\r\n                this.utils.removeFromArrayByValue(this.buttons, buttons[i]);\r\n            }\r\n        }\r\n\r\n        if (this.detector.isMobile() && this.opts.buttonsHideOnMobile.length !== 0) {\r\n            var buttons = this.opts.buttonsHideOnMobile;\r\n            for (var i = 0; i < buttons.length; i++) {\r\n                this.utils.removeFromArrayByValue(this.buttons, buttons[i]);\r\n            }\r\n        }\r\n    },\r\n    _removeExistButtons: function(buttons)\r\n    {\r\n        for (var i = 0; i < buttons.length; i++)\r\n        {\r\n            if (this.opts.buttons.indexOf(buttons[i]) !== -1)\r\n            {\r\n                this.utils.removeFromArrayByValue(buttons, buttons[i]);\r\n            }\r\n        }\r\n\r\n        return buttons;\r\n    },\r\n    _setExternalOnFocus: function()\r\n    {\r\n        if (!this.opts.air && this.opts.toolbarExternal)\r\n        {\r\n            this.toolbarModule.setExternal();\r\n        }\r\n    },\r\n    _initToolbar: function()\r\n    {\r\n        this.toolbarModule = (this.opts.air) ? $R.create('toolbar.air', this.app) : $R.create('toolbar.standard', this.app);\r\n    },\r\n    _initButtons: function()\r\n    {\r\n        this.toolbar.setButtons(this.buttons);\r\n\r\n        for (var i = 0; i < this.buttons.length; i++)\r\n        {\r\n            var name = this.buttons[i];\r\n            if ($R.buttons[name])\r\n            {\r\n                this.toolbar.addButton(name, $R.extend(true, {}, $R.buttons[name]), false, false, true);\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.air', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.animate = app.animate;\r\n        this.toolbar = app.toolbar;\r\n        this.container = app.container;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.clicks = 0;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // public\r\n    stop: function()\r\n    {\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        $wrapper.remove();\r\n\r\n        var $editor = this.editor.getElement();\r\n        $editor.off('.redactor-air-trigger-' + this.uuid);\r\n\r\n        this.$doc.off('.redactor-air-' + this.uuid);\r\n        this.$doc.off('.redactor-air-trigger-' + this.uuid);\r\n\r\n        this.toolbar.stopObservers();\r\n    },\r\n    createSourceHelper: function()\r\n    {\r\n        this.$airHelper = $R.dom('<span>');\r\n        this.$airHelper.addClass('redactor-air-helper');\r\n        this.$airHelper.html('<i class=\"re-icon-html\"></i>');\r\n        this.$airHelper.on('click', function(e)\r\n        {\r\n            e.preventDefault();\r\n            this.app.api('module.source.hide');\r\n\r\n        }.bind(this));\r\n\r\n        var $container = this.container.getElement();\r\n        $container.append(this.$airHelper);\r\n    },\r\n    destroySourceHelper: function()\r\n    {\r\n        if (this.$airHelper) this.$airHelper.remove();\r\n    },\r\n    openSelected: function()\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            if (this._isSelection()) this._open(false);\r\n\r\n        }.bind(this), 0);\r\n    },\r\n    close: function()\r\n    {\r\n        this.$doc.off('.redactor-air-' + this.uuid);\r\n\r\n        var $toolbar = this.toolbar.getElement();\r\n        $toolbar.removeClass('open');\r\n        $toolbar.hide();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.toolbar.create();\r\n\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n\r\n        $wrapper.addClass('redactor-toolbar-wrapper-air');\r\n        $toolbar.addClass('redactor-air');\r\n        //$toolbar.addClass('redactor-animate-hide');\r\n        $toolbar.hide();\r\n\r\n        $wrapper.append($toolbar);\r\n        $container.prepend($wrapper);\r\n\r\n        // open selected\r\n        this.openSelected();\r\n\r\n        // events\r\n        this.$doc.on('mouseup.redactor-air-trigger-' + this.uuid, this._open.bind(this));\r\n        $editor.on('keyup.redactor-air-trigger-' + this.uuid, this._openCmd.bind(this));\r\n    },\r\n    _isSelection: function()\r\n    {\r\n        return (this.selection.is() && !this.selection.isCollapsed());\r\n    },\r\n    _isOpened: function()\r\n    {\r\n        var $toolbar = this.toolbar.getElement();\r\n\r\n        return $toolbar.hasClass('open');\r\n    },\r\n    _open: function(e)\r\n    {\r\n        var target = (e) ? e.target : false;\r\n        var $el = (e) ? $R.dom(e.target) : false;\r\n        var dataTarget = this.inspector.parse(target);\r\n        var isComponent = (dataTarget.isComponent() && !dataTarget.isComponentType('table'));\r\n        var isFigcaption = (dataTarget.isFigcaption());\r\n        var isModalTarget = ($el && $el.closest('.redactor-modal').length !== 0);\r\n        var isButtonCall = (e && $el.closest('.re-button').length !== 0);\r\n        var isDropdownCall = (e && $el.closest('.redactor-dropdown').length !== 0);\r\n\r\n        if (isDropdownCall || isButtonCall || isModalTarget || isFigcaption || isComponent || this.toolbar.isContextBar() || !this._isSelection())\r\n        {\r\n            return;\r\n        }\r\n\r\n        var pos = this.selection.getPosition();\r\n\r\n        setTimeout(function()\r\n        {\r\n            if (this.app.isReadOnly()) return;\r\n            if (this._isSelection()) this._doOpen(pos);\r\n\r\n        }.bind(this), 1);\r\n\r\n    },\r\n    _openCmd: function()\r\n    {\r\n        if (this.selection.isAll())\r\n        {\r\n            var $toolbar = this.toolbar.getElement();\r\n            var pos = this.selection.getPosition();\r\n\r\n            pos.top = (pos.top < 20) ? 0 : pos.top - $toolbar.height();\r\n            pos.height = 0;\r\n\r\n            this._doOpen(pos);\r\n        }\r\n    },\r\n    _doOpen: function(pos)\r\n    {\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $container = this.container.getElement();\r\n        var containerOffset = $container.offset();\r\n        var leftFix = 0;\r\n        var winWidth = this.$win.width();\r\n        var toolbarWidth = $toolbar.width();\r\n\r\n        if (winWidth < (pos.left + toolbarWidth))\r\n        {\r\n            var selPos = this.selection.getPosition();\r\n            leftFix = toolbarWidth - selPos.width;\r\n        }\r\n\r\n        $wrapper.css({\r\n            left: (pos.left - containerOffset.left - leftFix) + 'px',\r\n            top: (pos.top - containerOffset.top + pos.height + this.$doc.scrollTop()) + 'px'\r\n        });\r\n\r\n        this.app.broadcast('airOpen');\r\n        $toolbar.addClass('open');\r\n        $toolbar.show();\r\n\r\n        this.$doc.on('click.redactor-air-' + this.uuid, this._close.bind(this));\r\n        this.$doc.on('keydown.redactor-air-' + this.uuid, this._close.bind(this));\r\n        this.app.broadcast('airOpened');\r\n    },\r\n    _close: function(e)\r\n    {\r\n        var $el = (e) ? $R.dom(e.target) : false;\r\n        var isDropdownCall = (e && $el.closest('[data-dropdown], .redactor-dropdown-not-close').length !== 0);\r\n        var isButtonCall = (!isDropdownCall && e && $el.closest('.re-button').length !== 0);\r\n\r\n        if (!isButtonCall && (isDropdownCall || !this._isOpened()))\r\n        {\r\n            return;\r\n        }\r\n\r\n        // close\r\n        this.app.broadcast('airClose');\r\n\r\n        this.close();\r\n        this.app.broadcast('airClosed');\r\n    }\r\n});\r\n$R.add('class', 'toolbar.fixed', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.detector = app.detector;\r\n        this.container = app.container;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // public\r\n    stop: function()\r\n    {\r\n        this.$fixedTarget.off('.redactor-toolbar-' + this.uuid);\r\n        this.$win.off('.redactor-toolbar-' + this.uuid);\r\n    },\r\n    reset: function()\r\n    {\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $wrapper = this.toolbar.getWrapper();\r\n\r\n        $wrapper.css('height', '');\r\n        $toolbar.removeClass('redactor-toolbar-fixed');\r\n        $toolbar.css({ position: '', top: '', left: '', width: '' });\r\n\r\n        var dropdown = this.toolbar.getDropdown();\r\n        if (dropdown) dropdown.updatePosition();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this.$fixedTarget = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$win;\r\n        this._doFixed();\r\n\r\n        if (this.toolbar.isTarget())\r\n        {\r\n            this.$win.on('scroll.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n            this.$win.on('resize.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n        }\r\n\r\n        this.$fixedTarget.on('scroll.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n        this.$fixedTarget.on('resize.redactor-toolbar-' + this.uuid, this._doFixed.bind(this));\r\n    },\r\n    _doFixed: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var $container = this.container.getElement();\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $wrapper = this.toolbar.getWrapper();\r\n\r\n        if (this.editor.isSourceMode())\r\n        {\r\n            return;\r\n        }\r\n\r\n        var $targets = $container.parents().filter(function(node)\r\n        {\r\n            return (getComputedStyle(node, null).display === 'none') ? node : false;\r\n        });\r\n\r\n        // has hidden parent\r\n        if ($targets.length !== 0) return;\r\n\r\n        var isHeight = ($editor.height() < 100);\r\n        var isEmpty = this.editor.isEmpty();\r\n\r\n        if (isHeight || isEmpty) {\r\n            this.reset();\r\n            return;\r\n        }\r\n\r\n        if (this.editor.isSourceMode()) {\r\n            return;\r\n        }\r\n\r\n        var toolbarHeight = $toolbar.height();\r\n        var toleranceEnd = 60;\r\n        var containerOffset = (this.toolbar.isTarget()) ? $container.position() : $container.offset();\r\n        var boxOffset = containerOffset.top;\r\n        var boxEnd = boxOffset + $container.height() - toleranceEnd;\r\n        var scrollOffset = this.$fixedTarget.scrollTop() + this.opts.toolbarFixedTopOffset;\r\n        var top = (!this.toolbar.isTarget()) ? 0 : this.$fixedTarget.offset().top - this.$win.scrollTop();\r\n        if (this.toolbar.isTarget() && this.$fixedTarget.css('position') === 'fixed') {\r\n            var bs = (this.$fixedTarget.hasClass('modal') && this.$fixedTarget.hasClass('fade'));\r\n            var bsFix = (bs) ? $container.closest('.modal-dialog').position().top : 0;\r\n            top = this.$fixedTarget.scrollTop() - bsFix;\r\n        }\r\n\r\n\r\n        if (scrollOffset > boxOffset && scrollOffset < boxEnd)\r\n        {\r\n            var position = (this.detector.isDesktop()) ? 'fixed' : 'absolute';\r\n            top = (this.detector.isDesktop()) ? top : (scrollOffset - boxOffset);\r\n\r\n            if (this.detector.isMobile())\r\n            {\r\n                if (this.fixedScrollTimeout)\r\n                {\r\n                    clearTimeout(this.fixedScrollTimeout);\r\n                }\r\n\r\n                $toolbar.hide();\r\n                this.fixedScrollTimeout = setTimeout(function()\r\n                {\r\n                    $toolbar.show();\r\n                }, 250);\r\n            }\r\n\r\n            $wrapper.height(toolbarHeight);\r\n            $toolbar.addClass('redactor-toolbar-fixed');\r\n\r\n            if ($container.hasClass('redactor-box-fullscreen'))\r\n            {\r\n                $toolbar.css({\r\n                    position: position,\r\n                    top: '0px',\r\n                    width: $container.width() + 'px'\r\n                });\r\n            }\r\n            else\r\n            {\r\n                $toolbar.css({\r\n                    position: position,\r\n                    top: (top + this.opts.toolbarFixedTopOffset) + 'px',\r\n                    width: $container.width() + 'px'\r\n                });\r\n            }\r\n\r\n            var dropdown = this.toolbar.getDropdown();\r\n            if (dropdown) dropdown.updatePosition();\r\n\r\n            this.app.broadcast('toolbar.fixed');\r\n        }\r\n        else\r\n        {\r\n            this.reset();\r\n            this.app.broadcast('toolbar.unfixed');\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'toolbar.standard', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.uuid = app.uuid;\r\n        this.$body = app.$body;\r\n        this.toolbar = app.toolbar;\r\n        this.container = app.container;\r\n\r\n        // local\r\n        this.isExternalMultiple = false;\r\n        this.toolbarFixed = false;\r\n\r\n        // init\r\n        this._init();\r\n    },\r\n    // public\r\n    stop: function()\r\n    {\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        $wrapper.remove();\r\n\r\n        if (this.toolbarFixed) this.toolbarFixed.stop();\r\n        if (this.opts.toolbarExternal) this._findToolbars();\r\n\r\n        this.toolbar.stopObservers();\r\n        this.$body.find('.re-button-tooltip-' + this.uuid).remove();\r\n    },\r\n    setExternal: function()\r\n    {\r\n        this._findToolbars();\r\n        if (this.isExternalMultiple)\r\n        {\r\n            this.$toolbars.hide();\r\n            var $current = this.$external.find('.redactor-toolbar-external-' + this.uuid);\r\n            $current.show();\r\n        }\r\n    },\r\n    resetPosition: function()\r\n    {\r\n        if (this.toolbarFixed) this.toolbarFixed.reset();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        this._build();\r\n\r\n        if (this.opts.toolbarExternal)\r\n        {\r\n            this._buildExternal();\r\n        }\r\n        else\r\n        {\r\n            this._buildFixed();\r\n\r\n            var $toolbar = this.toolbar.getElement();\r\n            $toolbar.show();\r\n        }\r\n    },\r\n    _build: function()\r\n    {\r\n        this.toolbar.create();\r\n\r\n        var $wrapper = this.toolbar.getWrapper();\r\n        var $toolbar = this.toolbar.getElement();\r\n\r\n        $wrapper.addClass('redactor-toolbar-wrapper');\r\n        $toolbar.addClass('redactor-toolbar');\r\n        $toolbar.hide();\r\n        $wrapper.append($toolbar);\r\n\r\n        if (!this.opts.toolbarExternal)\r\n        {\r\n            var $container = this.container.getElement();\r\n            $container.prepend($wrapper);\r\n        }\r\n    },\r\n    _buildExternal: function()\r\n    {\r\n        this._initExternal();\r\n        this._findToolbars();\r\n\r\n        if (this.isExternalMultiple)\r\n        {\r\n            this._hideToolbarsExceptFirst();\r\n        }\r\n        else\r\n        {\r\n            var $toolbar = this.toolbar.getElement();\r\n            $toolbar.show();\r\n        }\r\n    },\r\n    _buildFixed: function()\r\n    {\r\n        if (this.opts.toolbarFixed)\r\n        {\r\n            this.toolbarFixed = $R.create('toolbar.fixed', this.app);\r\n        }\r\n    },\r\n    _initExternal: function()\r\n    {\r\n        var $toolbar = this.toolbar.getElement();\r\n        var $wrapper = this.toolbar.getElement();\r\n\r\n        $toolbar.addClass('redactor-toolbar-external redactor-toolbar-external-' + this.uuid);\r\n\r\n        this.$external = $R.dom(this.opts.toolbarExternal);\r\n        this.$external.append($wrapper);\r\n\r\n    },\r\n    _findToolbars: function()\r\n    {\r\n        this.$toolbars = this.$external.find('.redactor-toolbar-external');\r\n        this.isExternalMultiple = (this.$toolbars.length > 1);\r\n    },\r\n    _hideToolbarsExceptFirst: function()\r\n    {\r\n        this.$toolbars.hide();\r\n        var $first = this.$toolbars.first();\r\n        $first.show();\r\n    }\r\n});\r\n$R.add('module', 'line', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.lang = app.lang;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n    },\r\n    // messages\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isComponentType('line'))\r\n        {\r\n            var node = data.getComponent();\r\n            var buttons = {\r\n                \"remove\": {\r\n                    title: this.lang.get('delete'),\r\n                    api: 'module.line.remove',\r\n                    args: node\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons, 'bottom');\r\n        }\r\n\r\n    },\r\n\r\n    // public\r\n    insert: function()\r\n    {\r\n        var line = this.component.create('line');\r\n        this.insertion.insertRaw(line);\r\n    },\r\n    remove: function(node)\r\n    {\r\n        this.component.remove(node);\r\n    }\r\n});\r\n$R.add('class', 'line.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        var wrapper, element;\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var node = $node.get();\r\n\r\n            if (node.tagName === 'HR') element = node;\r\n            else if (node.tagName === 'FIGURE')\r\n            {\r\n                wrapper = node;\r\n                element = $node.find('hr').get();\r\n            }\r\n        }\r\n\r\n        this._buildWrapper(wrapper);\r\n        this._buildElement(element);\r\n        this._initWrapper();\r\n    },\r\n    _buildElement: function(node)\r\n    {\r\n        if (node)\r\n        {\r\n            this.$element = $R.dom(node);\r\n        }\r\n        else\r\n        {\r\n            this.$element = $R.dom('<hr>');\r\n            this.append(this.$element);\r\n        }\r\n    },\r\n    _buildWrapper: function(node)\r\n    {\r\n        node = node || '<figure>';\r\n\r\n        this.parse(node);\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'line',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n$R.add('module', 'link', {\r\n    modals: {\r\n        'link':\r\n            '<form action=\"\"> \\\r\n                <div class=\"form-item\"> \\\r\n                    <label for=\"modal-link-url\">URL <span class=\"req\">*</span></label> \\\r\n                    <input type=\"text\" id=\"modal-link-url\" name=\"url\"> \\\r\n                </div> \\\r\n                <div class=\"form-item\"> \\\r\n                    <label for=\"modal-link-text\">## text ##</label> \\\r\n                    <input type=\"text\" id=\"modal-link-text\" name=\"text\"> \\\r\n                </div> \\\r\n                <div class=\"form-item form-item-title\"> \\\r\n                    <label for=\"modal-link-title\">## title ##</label> \\\r\n                    <input type=\"text\" id=\"modal-link-title\" name=\"title\"> \\\r\n                </div> \\\r\n                <div class=\"form-item form-item-target\"> \\\r\n                    <label class=\"checkbox-label\"> \\\r\n                        <div class=\"checkbox-label__text\" style=\"padding-left: 20px;\">## link-in-new-tab ##</div> \\\r\n                        <input type=\"checkbox\" class=\"checkbox\" name=\"target\"> \\\r\n                    </label> \\\r\n                </div> \\\r\n            </form>'\r\n    },\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.inline = app.inline;\r\n        this.editor = app.editor;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.isCurrentLink = false;\r\n        this.currentText = false;\r\n    },\r\n    // messages\r\n    onmodal: {\r\n        link: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setFormData($form, $modal);\r\n            },\r\n            opened: function($modal, $form)\r\n            {\r\n                this._setFormFocus($form);\r\n            },\r\n            update: function($modal, $form)\r\n            {\r\n                var data = $form.getData();\r\n                if (this._validateData($form, data))\r\n                {\r\n                    this._update(data);\r\n                }\r\n            },\r\n            insert: function($modal, $form)\r\n            {\r\n                var data = $form.getData();\r\n                if (this._validateData($form, data))\r\n                {\r\n                    this._insert(data);\r\n                }\r\n            },\r\n            unlink: function()\r\n            {\r\n                this._unlink();\r\n            }\r\n        }\r\n    },\r\n    onbutton: {\r\n        link: {\r\n            observe: function(button)\r\n            {\r\n                this._observeButton(button);\r\n            }\r\n        }\r\n    },\r\n    ondropdown: {\r\n        link: {\r\n            observe: function(dropdown)\r\n            {\r\n                this._observeUnlink(dropdown);\r\n                this._observeEdit(dropdown);\r\n            }\r\n        }\r\n    },\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        var current = this._getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        if (data.isLink() || data.isFile())\r\n        {\r\n            var node = (data.isFile()) ? data.getFile() : data.getLink();\r\n            var $el = $R.dom(node);\r\n\r\n            var $point = $R.dom('<a>');\r\n            var url = $el.attr('href');\r\n\r\n            $point.text(this._truncateText(url));\r\n            $point.attr('href', url);\r\n            $point.attr('target', '_blank');\r\n\r\n            var buttons = {\r\n                \"link\": {\r\n                    title: $point,\r\n                    html: this._truncateText(url)\r\n                },\r\n                \"edit\": {\r\n                    title: this.lang.get('edit'),\r\n                    api: 'module.link.open'\r\n                },\r\n                \"unlink\": {\r\n                    title: this.lang.get('unlink'),\r\n                    api: 'module.link.unlink'\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons, 'bottom');\r\n        }\r\n    },\r\n\r\n    // public\r\n    open: function()\r\n    {\r\n        this.$link = this._buildCurrent();\r\n        this.app.api('module.modal.build', this._getModalData());\r\n    },\r\n    insert: function(data)\r\n    {\r\n        this._insert(data);\r\n    },\r\n    update: function(data)\r\n    {\r\n        this._update(data);\r\n    },\r\n    unlink: function()\r\n    {\r\n        this._unlink();\r\n    },\r\n\r\n    // private\r\n    _observeButton: function(button)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        if (data.isPre() || data.isCode())\r\n        {\r\n            button.disable();\r\n        }\r\n        else\r\n        {\r\n            button.enable();\r\n        }\r\n    },\r\n    _observeUnlink: function(dropdown)\r\n    {\r\n        var $item = dropdown.getItem('unlink');\r\n        var links = this._getLinks();\r\n\r\n        if (links.length === 0) $item.disable();\r\n        else                    $item.enable();\r\n    },\r\n    _observeEdit: function(dropdown)\r\n    {\r\n        var current = this._getCurrent();\r\n        var $item = dropdown.getItem('link');\r\n\r\n        var data = this.inspector.parse(current);\r\n        var title = (data.isLink() || data.isFile()) ? this.lang.get('link-edit') : this.lang.get('link-insert');\r\n\r\n        $item.setTitle(title);\r\n    },\r\n    _unlink: function()\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        var elms = [];\r\n        var nodes = this._getLinks();\r\n\r\n        this.selection.save();\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $link = $R.create('link.component', this.app, nodes[i]);\r\n            elms.push(this.selection.getElement(nodes[i]));\r\n\r\n            $link.unwrap();\r\n\r\n            // callback\r\n            this.app.broadcast('link.deleted', $link);\r\n        }\r\n        this.selection.restore();\r\n\r\n        // normalize\r\n        for (var i = 0; i < elms.length; i++)\r\n        {\r\n            var el = (elms[i]) ? elms[i] : this.editor.getElement();\r\n            this.utils.normalizeTextNodes(el);\r\n        }\r\n\r\n        this._resetCurrent();\r\n    },\r\n    _update: function(data)\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        var nodes = this._getLinks();\r\n        this._setLinkData(nodes, data, 'updated');\r\n        this._resetCurrent();\r\n\r\n        // callback\r\n        this.app.broadcast('link.changed', nodes);\r\n    },\r\n    _insert: function(data)\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        var links = this._getLinks();\r\n\r\n        if (!this._insertSingle(links, data))\r\n        {\r\n            this._removeInSelection(links);\r\n            this._insertMultiple(data);\r\n        }\r\n\r\n        this._resetCurrent();\r\n    },\r\n    _removeInSelection: function(links)\r\n    {\r\n        this.selection.save();\r\n        for (var i = 0; i < links.length; i++)\r\n        {\r\n            var $link = $R.create('link.component', this.app, links[i]);\r\n            var $clonedLink = $link.clone();\r\n            $link.unwrap();\r\n\r\n            // callback\r\n            this.app.broadcast('link.deleted', $clonedLink);\r\n        }\r\n        this.selection.restore();\r\n    },\r\n    _insertMultiple: function(data)\r\n    {\r\n        var range = this.selection.getRange();\r\n        if (range && this._isCurrentTextChanged(data))\r\n        {\r\n            this._deleteContents(range);\r\n        }\r\n\r\n        var nodes = this.inline.format({ tag: 'a' });\r\n\r\n        this._setLinkData(nodes, data, 'inserted');\r\n    },\r\n    _insertSingle: function(links, data)\r\n    {\r\n        var inline = this.selection.getInline();\r\n        if (links.length === 1 && ((links[0].textContext === this.selection.getText()) || (inline && inline.tagName === 'A')))\r\n        {\r\n            var $link = $R.create('link.component', this.app, links[0]);\r\n\r\n            $link.setData(data);\r\n            this.caret.setAfter($link);\r\n\r\n            // callback\r\n            this.app.broadcast('link.inserted', $link);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _setLinkData: function(nodes, data, type)\r\n    {\r\n        data.text = (data.text.trim() === '') ? this._truncateText(data.url) : data.text;\r\n\r\n        var isTextChanged = (!this.currentText || this.currentText !== data.text);\r\n\r\n        this.selection.save();\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $link = $R.create('link.component', this.app, nodes[i]);\r\n            var linkData = {};\r\n\r\n            if (data.text && isTextChanged) linkData.text = data.text;\r\n            if (data.url) linkData.url = data.url;\r\n            if (data.title !== undefined) linkData.title = data.title;\r\n            if (data.target !== undefined) linkData.target = data.target;\r\n\r\n            $link.setData(linkData);\r\n\r\n            // callback\r\n            this.app.broadcast('link.' + type, $link);\r\n        }\r\n\r\n        setTimeout(this.selection.restore.bind(this.selection), 0);\r\n    },\r\n    _deleteContents: function(range)\r\n    {\r\n        var html = this.selection.getHtml();\r\n        var parsed = this.utils.parseHtml(html);\r\n        var first = parsed.nodes[0];\r\n\r\n        if (first && first.nodeType !== 3)\r\n        {\r\n            var tag = first.tagName.toLowerCase();\r\n            var container = document.createElement(tag);\r\n\r\n            this.insertion.insertNode(container, 'start');\r\n        }\r\n        else\r\n        {\r\n            range.deleteContents();\r\n        }\r\n    },\r\n    _getModalData: function()\r\n    {\r\n        var commands;\r\n        if (this._isLink())\r\n        {\r\n           commands = {\r\n                update: { title: this.lang.get('save') },\r\n                unlink: { title: this.lang.get('unlink'), type: 'danger' },\r\n                cancel: { title: this.lang.get('cancel') }\r\n            };\r\n        }\r\n        else\r\n        {\r\n            commands = {\r\n                insert: { title: this.lang.get('insert') },\r\n                cancel: { title: this.lang.get('cancel') }\r\n            };\r\n        }\r\n\r\n        var modalData = {\r\n            name: 'link',\r\n            title: (this._isLink()) ? this.lang.get('link-edit') : this.lang.get('link-insert'),\r\n            handle: (this._isLink()) ? 'update' : 'insert',\r\n            commands: commands\r\n        };\r\n\r\n\r\n        return modalData;\r\n    },\r\n    _isLink: function()\r\n    {\r\n        return this.currentLink;\r\n    },\r\n    _isCurrentTextChanged: function(data)\r\n    {\r\n        return (this.currentText && this.currentText !== data.text);\r\n    },\r\n    _buildCurrent: function()\r\n    {\r\n        var current = this._getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $link;\r\n\r\n        if (data.isLink() || data.isFile())\r\n        {\r\n            this.currentLink = true;\r\n\r\n            $link = (data.isFile()) ? data.getFile() : data.getLink();\r\n            $link = $R.create('link.component', this.app, $link);\r\n        }\r\n        else\r\n        {\r\n            this.currentLink = false;\r\n\r\n            $link = $R.create('link.component', this.app);\r\n            var linkData = {\r\n                text: this.selection.getText()\r\n            };\r\n\r\n            $link.setData(linkData);\r\n        }\r\n\r\n        return $link;\r\n    },\r\n    _getCurrent: function()\r\n    {\r\n        return this.selection.getInlinesAllSelected({ tags: ['a'] })[0];\r\n    },\r\n    _getLinks: function()\r\n    {\r\n        var links = this.selection.getInlines({ all: true, tags: ['a'] });\r\n        var arr = [];\r\n        for (var i = 0; i < links.length; i++)\r\n        {\r\n            var data = this.inspector.parse(links[i]);\r\n            if (data.isLink() || data.isFile())\r\n            {\r\n                arr.push(links[i]);\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    },\r\n    _resetCurrent: function()\r\n    {\r\n        this.isCurrentLink = false;\r\n        this.currentText = false;\r\n    },\r\n    _truncateText: function(url)\r\n    {\r\n        return (url && url.length > this.opts.linkSize) ? url.substring(0, this.opts.linkSize) + '...' : url;\r\n    },\r\n    _validateData: function($form, data)\r\n    {\r\n        return (data.url.trim() === '') ? $form.setError('url') : true;\r\n    },\r\n    _setFormFocus: function($form)\r\n    {\r\n        $form.getField('url').focus();\r\n    },\r\n    _setFormData: function($form, $modal)\r\n    {\r\n        var linkData = this.$link.getData();\r\n        var data = {\r\n            url: linkData.url,\r\n            text: linkData.text,\r\n            title: linkData.title,\r\n            target: (this.opts.linkTarget || linkData.target)\r\n        };\r\n\r\n        if (!this.opts.linkNewTab) $modal.find('.form-item-target').hide();\r\n        if (!this.opts.linkTitle) $modal.find('.form-item-title').hide();\r\n\r\n        $form.setData(data);\r\n        this.currentText = $form.getField('text').val();\r\n    }\r\n});\r\n$R.add('class', 'link.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.reUrl = /^(?:(?:(?:https?|ftp):)?\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el :  this._init(el);\r\n    },\r\n\r\n    // public\r\n    setData: function(data)\r\n    {\r\n        for (var name in data)\r\n        {\r\n            this._set(name, data[name]);\r\n        }\r\n    },\r\n    getData: function()\r\n    {\r\n        var names = ['url', 'text', 'target', 'title'];\r\n        var data = {};\r\n\r\n        for (var i = 0; i < names.length; i++)\r\n        {\r\n            data[names[i]] = this._get(names[i]);\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        var $el = $R.dom(el);\r\n        if (el === undefined)\r\n        {\r\n            this.parse('<a>');\r\n        }\r\n        else\r\n        {\r\n            this.parse($el);\r\n        }\r\n    },\r\n    _set: function(name, value)\r\n    {\r\n        this['_set_' + name](value);\r\n    },\r\n    _get: function(name)\r\n    {\r\n        return this['_get_' + name]();\r\n    },\r\n    _get_target: function()\r\n    {\r\n        return (this.attr('target')) ? this.attr('target') : false;\r\n    },\r\n    _get_url: function()\r\n    {\r\n        return this.attr('href');\r\n    },\r\n    _get_title: function()\r\n    {\r\n        return this.attr('title');\r\n    },\r\n    _get_text: function()\r\n    {\r\n        return this._getContext().text();\r\n    },\r\n    _getContext: function()\r\n    {\r\n        return this._findDeepestChild(this).element;\r\n    },\r\n    _set_target: function(target)\r\n    {\r\n        if (target === false) this.removeAttr('target');\r\n        else if (target)\r\n        {\r\n            this.attr('target', (target === true) ? '_blank' : target);\r\n        }\r\n    },\r\n    _set_text: function(text)\r\n    {\r\n        text = this._escapeHtml(text);\r\n        this._getContext().html(text);\r\n    },\r\n    _set_title: function(title)\r\n    {\r\n        if (!title || title === '') this.removeAttr('title');\r\n        else this.attr('title', title);\r\n    },\r\n    _set_url: function(url)\r\n    {\r\n        if (this.opts.linkValidation)\r\n        {\r\n            url = this._cleanUrl(url);\r\n\r\n            if (this._isMailto(url))\r\n            {\r\n                url = 'mailto:' + url.replace('mailto:', '');\r\n            }\r\n            else if (this._isUrl(url) && url.search(/^(ftp|https?)/i) === -1)\r\n            {\r\n                url = 'http://' + url.replace(/(ftp|https?):\\/\\//i, '');\r\n            }\r\n        }\r\n\r\n        this.attr('href', url);\r\n    },\r\n    _isMailto: function(url)\r\n    {\r\n        return (url.search('@') !== -1 && /(ftp|https?):\\/\\//i.test(url) === false);\r\n    },\r\n    _isUrl: function(url)\r\n    {\r\n        return this.reUrl.test(url);\r\n    },\r\n    _cleanUrl: function(url)\r\n    {\r\n        url = this._escapeHtml(url);\r\n\r\n        return url.trim().replace(/[^\\W\\w\\D\\d+&\\'@#/%?=~_|!:,.;\\(\\)]/gi, '');\r\n    },\r\n    _escapeHtml: function(html) {\r\n        return html.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\r\n    },\r\n    _findDeepestChild: function(parent)\r\n    {\r\n        var result = {depth: 0, element: parent };\r\n\r\n        parent.children().each(function(node)\r\n        {\r\n            var child = $R.dom(node);\r\n\r\n            if (node.outerHTML !== parent.html())\r\n            {\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                var childResult = this._findDeepestChild(child);\r\n                if (childResult.depth + 1 > result.depth)\r\n                {\r\n                    result = {\r\n                        depth: 1 + childResult.depth,\r\n                        element: childResult.element\r\n                    };\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n        return result;\r\n    }\r\n});\r\n$R.add('module', 'modal', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.lang = app.lang;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.$body = app.$body;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.animate = app.animate;\r\n        this.detector = app.detector;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.$box = false;\r\n        this.$modal = false;\r\n        this.selectionMarkers = false;\r\n\r\n        // defaults\r\n        this.defaults = {\r\n            name: false,\r\n            url: false,\r\n            title: false,\r\n            width: '600px',\r\n            height: false,\r\n            handle: false,\r\n            commands: false\r\n        };\r\n    },\r\n    // public\r\n    build: function(data)\r\n    {\r\n        this._open(data);\r\n    },\r\n    close: function()\r\n    {\r\n        this._close();\r\n    },\r\n    onstop: function() {\r\n        this.$body.find('#redactor-modal-' + this.uuid).remove();\r\n        this.$body.find('#redactor-overlay-' + this.uuid).remove();\r\n    },\r\n    stop: function()\r\n    {\r\n        if (this.$box)\r\n        {\r\n            this.$box.remove();\r\n            this.$box = false;\r\n            this.$modal = false;\r\n        }\r\n\r\n        if (this.$overlay) {\r\n            this.$overlay.remove();\r\n        }\r\n\r\n        this.$doc.off('.redactor.modal');\r\n        this.$win.off('.redactor.modal');\r\n    },\r\n    resize: function()\r\n    {\r\n        this.$modal.setWidth(this.p.width);\r\n        this.$modal.updatePosition();\r\n    },\r\n\r\n    // private\r\n    _isOpened: function()\r\n    {\r\n        return (this.$modal && this.$modal.hasClass('redactor-modal-open'));\r\n    },\r\n    _open: function(data)\r\n    {\r\n        this._buildDefaults(data);\r\n\r\n        if (this.p.url) this._openUrl();\r\n        else this._openTemplate();\r\n    },\r\n    _openUrl: function()\r\n    {\r\n        $R.ajax.post({\r\n            url: this.p.url,\r\n            success: this._doOpen.bind(this)\r\n        });\r\n    },\r\n    _openTemplate: function()\r\n    {\r\n        if (typeof $R.modals[this.p.name] !== 'undefined')\r\n        {\r\n            var template = this.lang.parse($R.modals[this.p.name]);\r\n            this._doOpen(template);\r\n        }\r\n    },\r\n    _doOpen: function(template)\r\n    {\r\n        this.stop();\r\n\r\n        if (this.selection.isCollapsed())\r\n        {\r\n            this.selection.save();\r\n            this.selectionMarkers = false;\r\n        }\r\n        else\r\n        {\r\n            this.selection.saveMarkers();\r\n            this.selectionMarkers = true;\r\n        }\r\n\r\n        if (!this.detector.isDesktop())\r\n        {\r\n            document.activeElement.blur();\r\n        }\r\n\r\n        this._createModal(template);\r\n\r\n        this._buildModalBox();\r\n        this._buildOverlay();\r\n        this._buildModal();\r\n        this._buildModalForm();\r\n        this._buildModalCommands();\r\n\r\n        this._broadcast('open');\r\n\r\n        this.$modal.updatePosition();\r\n        this._buildModalTabs();\r\n\r\n        this.animate.start(this.$box, 'fadeIn', this._opened.bind(this));\r\n        this.animate.start(this.$overlay, 'fadeIn');\r\n\r\n    },\r\n    _opened: function()\r\n    {\r\n        this.$modal.addClass('open').addClass('redactor-modal-open');\r\n        this.$box.on('mousedown.redactor.modal', this._close.bind(this));\r\n        this.$doc.on('keyup.redactor.modal', this._handleEscape.bind(this));\r\n        this.$win.on('resize.redactor.modal', this.resize.bind(this));\r\n        this.$modal.getBody().find('input[type=text],input[type=url],input[type=email]').on('keydown.redactor.modal', this._handleEnter.bind(this));\r\n\r\n        // fix bootstrap modal focus\r\n        if (window.jQuery) window.jQuery(document).off('focusin.modal');\r\n\r\n        this._broadcast('opened');\r\n    },\r\n    _close: function(e)\r\n    {\r\n        if (!this.$box || !this._isOpened()) return;\r\n\r\n        if (e)\r\n        {\r\n            if (!this._needToClose(e.target))\r\n            {\r\n                return;\r\n            }\r\n\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (this.selectionMarkers) this.selection.restoreMarkers();\r\n        else this.selection.restore();\r\n\r\n\r\n        this.selectionMarkers = false;\r\n\r\n        this._broadcast('close');\r\n\r\n        this.animate.start(this.$box, 'fadeOut', this._closed.bind(this));\r\n        this.animate.start(this.$overlay, 'fadeOut');\r\n    },\r\n    _closed: function()\r\n    {\r\n        this.$modal.removeClass('open').removeClass('redactor-modal-open');\r\n        this.$box.off('.redactor.modal');\r\n        this.$doc.off('.redactor.modal');\r\n        this.$win.off('.redactor.modal');\r\n\r\n        this._broadcast('closed');\r\n    },\r\n    _createModal: function(template)\r\n    {\r\n        this.$modal = $R.create('modal.element', this.app, template);\r\n    },\r\n    _broadcast: function(message)\r\n    {\r\n        this.app.broadcast('modal.' + message, this.$modal, this.$modalForm);\r\n        this.app.broadcast('modal.' + this.p.name + '.' + message, this.$modal, this.$modalForm);\r\n    },\r\n    _buildDefaults: function(data)\r\n    {\r\n         this.p = $R.extend({}, this.defaults, data);\r\n    },\r\n    _buildModalBox: function()\r\n    {\r\n        this.$box = $R.dom('<div>');\r\n        this.$box.attr('id', 'redactor-modal-' + this.uuid);\r\n        this.$box.addClass('redactor-modal-box redactor-animate-hide');\r\n        this.$box.html('');\r\n        this.$body.append(this.$box);\r\n    },\r\n    _buildOverlay: function()\r\n    {\r\n        this.$overlay = $R.dom('#redactor-overlay-' + this.uuid);\r\n        if (this.$overlay.length === 0)\r\n        {\r\n            this.$overlay = $R.dom('<div>');\r\n            this.$overlay.attr('id', 'redactor-overlay-' + this.uuid);\r\n            this.$overlay.addClass('redactor-overlay redactor-animate-hide');\r\n            this.$body.prepend(this.$overlay);\r\n        }\r\n    },\r\n    _buildModal: function()\r\n    {\r\n        this.$box.append(this.$modal);\r\n\r\n        this.$modal.setTitle(this.p.title);\r\n        this.$modal.setHeight(this.p.height);\r\n        this.$modal.setWidth(this.p.width);\r\n    },\r\n    _buildModalCommands: function()\r\n    {\r\n        if (this.p.commands)\r\n        {\r\n            var commands = this.p.commands;\r\n            var $footer = this.$modal.getFooter();\r\n            for (var key in commands)\r\n            {\r\n                var $btn = $R.dom('<button>');\r\n\r\n                $btn.html(commands[key].title);\r\n                $btn.attr('data-command', key);\r\n\r\n                // cancel\r\n                if (key === 'cancel')\r\n                {\r\n                    $btn.attr('data-action', 'close');\r\n                    $btn.addClass('redactor-button-unstyled');\r\n                }\r\n\r\n                // danger\r\n                if (typeof commands[key].type !== 'undefined' && commands[key].type === 'danger')\r\n                {\r\n                    $btn.addClass('redactor-button-danger');\r\n                }\r\n\r\n                $btn.on('click', this._handleCommand.bind(this));\r\n\r\n                $footer.append($btn);\r\n            }\r\n        }\r\n    },\r\n    _buildModalTabs: function()\r\n    {\r\n        var $body = this.$modal.getBody();\r\n        var $tabs = $body.find('.redactor-modal-tab');\r\n        var $box = $body.find('.redactor-modal-tabs');\r\n\r\n\r\n        if ($tabs.length > 1)\r\n        {\r\n            $box = ($box.length === 0) ? $R.dom('<div>') : $box.html('');\r\n            $box.addClass('redactor-modal-tabs');\r\n\r\n            $tabs.each(function(node, i)\r\n            {\r\n                var $node = $R.dom(node);\r\n                var $item = $R.dom('<a>');\r\n                $item.attr('href', '#');\r\n                $item.attr('rel', i);\r\n                $item.text($node.attr('data-title'));\r\n                $item.on('click', this._showTab.bind(this));\r\n\r\n                if (i === 0)\r\n                {\r\n                    $item.addClass('active');\r\n                }\r\n\r\n                $box.append($item);\r\n\r\n            }.bind(this));\r\n\r\n            $body.prepend($box);\r\n        }\r\n\r\n        if ($tabs.length === 1) {\r\n            $tabs.show();\r\n        }\r\n    },\r\n    _buildModalForm: function()\r\n    {\r\n        this.$modalForm = $R.create('modal.form', this.app, this.$modal.getForm());\r\n    },\r\n    _showTab: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var $el = $R.dom(e.target);\r\n        var index = $el.attr('rel');\r\n        var $body = this.$modal.getBody();\r\n        var $tabs = $body.find('.redactor-modal-tab');\r\n\r\n        $tabs.hide();\r\n        $tabs.eq(index).show();\r\n\r\n        $body.find('.redactor-modal-tabs a').removeClass('active');\r\n        $el.addClass('active');\r\n\r\n    },\r\n    _needToClose: function(el)\r\n    {\r\n        var $target = $R.dom(el);\r\n        if ($target.attr('data-action') === 'close' || this.$modal.isCloseNode(el) || $target.closest('.redactor-modal').length === 0)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    _handleCommand: function(e)\r\n    {\r\n        var $btn = $R.dom(e.target).closest('button');\r\n        var command = $btn.attr('data-command');\r\n\r\n        if (command !== 'cancel') e.preventDefault();\r\n\r\n        this._broadcast(command);\r\n    },\r\n    _handleEnter: function(e)\r\n    {\r\n        if (e.which === 13)\r\n        {\r\n            if (this.p.handle)\r\n            {\r\n                e.preventDefault();\r\n                this._broadcast(this.p.handle);\r\n            }\r\n        }\r\n    },\r\n    _handleEscape: function(e)\r\n    {\r\n        if (e.which === 27) this._close();\r\n    }\r\n});\r\n$R.add('class', 'modal.element', {\r\n    mixins: ['dom'],\r\n    init: function(app, template)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.$win = app.$win;\r\n\r\n        // init\r\n        this._init(template);\r\n    },\r\n\r\n    // get\r\n    getForm: function()\r\n    {\r\n        return this.find('form');\r\n    },\r\n    getHeader: function()\r\n    {\r\n        return this.$modalHeader;\r\n    },\r\n    getBody: function()\r\n    {\r\n        return this.$modalBody;\r\n    },\r\n    getFooter: function()\r\n    {\r\n        return this.$modalFooter;\r\n    },\r\n\r\n    // set\r\n    setTitle: function(title)\r\n    {\r\n        if (title) this.$modalHeader.html(title);\r\n    },\r\n    setWidth: function(width)\r\n    {\r\n        width = (parseInt(width) >= this.$win.width()) ? '96%' : width;\r\n\r\n        this.css('max-width', width);\r\n    },\r\n    setHeight: function(height)\r\n    {\r\n        if (height !== false) this.$modalBody.css('height', height);\r\n    },\r\n\r\n    // update\r\n    updatePosition: function()\r\n    {\r\n        var width = this.width();\r\n        this.css({ 'left': '50%', 'margin-left': '-' + (width/2) + 'px' });\r\n\r\n        var windowHeight = this.$win.height();\r\n        var height = this.height();\r\n        var marginTop = (windowHeight/2 - height/2);\r\n\r\n        if (height < windowHeight && marginTop !== 0)\r\n        {\r\n            this.css('margin-top', marginTop + 'px');\r\n        }\r\n    },\r\n\r\n    // is\r\n    isCloseNode: function(el)\r\n    {\r\n        return (el === this.$modalClose.get());\r\n    },\r\n\r\n    // private\r\n    _init: function(template)\r\n    {\r\n        this._build();\r\n        this._buildClose();\r\n        this._buildHeader();\r\n        this._buildBody();\r\n        this._buildFooter();\r\n        this._buildTemplate(template);\r\n    },\r\n    _build: function()\r\n    {\r\n        this.parse('<div>');\r\n        this.addClass('redactor-modal');\r\n        this.attr('dir', this.opts.direction);\r\n    },\r\n    _buildClose: function()\r\n    {\r\n        this.$modalClose = $R.dom('<span>');\r\n        this.$modalClose.addClass('redactor-close');\r\n\r\n        this.append(this.$modalClose);\r\n    },\r\n    _buildHeader: function()\r\n    {\r\n        this.$modalHeader = $R.dom('<div>');\r\n        this.$modalHeader.addClass('redactor-modal-header');\r\n\r\n        this.append(this.$modalHeader);\r\n    },\r\n    _buildBody: function()\r\n    {\r\n        this.$modalBody = $R.dom('<div>');\r\n        this.$modalBody.addClass('redactor-modal-body');\r\n\r\n        this.append(this.$modalBody);\r\n    },\r\n    _buildFooter: function()\r\n    {\r\n        this.$modalFooter = $R.dom('<div>');\r\n        this.$modalFooter.addClass('redactor-modal-footer');\r\n\r\n        this.append(this.$modalFooter);\r\n    },\r\n    _buildTemplate: function(template)\r\n    {\r\n        this.$modalBody.html(template);\r\n    }\r\n});\r\n$R.add('class', 'modal.form', {\r\n    mixins: ['dom'],\r\n    init: function(app, element)\r\n    {\r\n        this.app = app;\r\n\r\n        // build\r\n        this.build(element);\r\n    },\r\n\r\n    // public\r\n    build: function(element)\r\n    {\r\n        this.parse(element);\r\n    },\r\n    getData: function()\r\n    {\r\n        var data = {};\r\n        this.find('[name]').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            data[$node.attr('name')] = $node.val();\r\n        });\r\n\r\n        return data;\r\n    },\r\n    setData: function(data)\r\n    {\r\n        this.find('[name]').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            var name = $node.attr('name');\r\n            if (data.hasOwnProperty(name))\r\n            {\r\n                if (node.type && node.type === 'checkbox') node.checked = data[name];\r\n                else $node.val(data[name]);\r\n            }\r\n        });\r\n    },\r\n    getField: function(name)\r\n    {\r\n        return this.find('[name=' + name + ']');\r\n    },\r\n    setError: function(name)\r\n    {\r\n        var $el = this.getField(name);\r\n\r\n        $el.addClass('error');\r\n        $el.one(this._getFieldEventName($el.get()), this._clearError);\r\n\r\n        return false;\r\n    },\r\n\r\n    // private\r\n    _clearError: function()\r\n    {\r\n        return $R.dom(this).removeClass('error');\r\n    },\r\n    _getFieldEventName: function(el)\r\n    {\r\n        return (el.tagName === 'SELECT' || el.type === 'checkbox' || el.type === 'radio') ? 'change' : 'keyup';\r\n    }\r\n});\r\n$R.add('module', 'block', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.block = app.block;\r\n    },\r\n    // public\r\n    format: function(args)\r\n    {\r\n        var nodes = this.block.format(args);\r\n\r\n        // callback\r\n        this.app.broadcast('format', 'block', nodes);\r\n    },\r\n    clearformat: function()\r\n    {\r\n        this.block.clearFormat();\r\n    },\r\n    clearstyle: function()\r\n    {\r\n        this.block.clearStyle();\r\n    },\r\n    clearclass: function()\r\n    {\r\n        this.block.clearClass();\r\n    },\r\n    clearattr: function()\r\n    {\r\n        this.block.clearAttr();\r\n    },\r\n    add: function(args, tags)\r\n    {\r\n        this.block.add(args, tags);\r\n    },\r\n    toggle: function(args, tags)\r\n    {\r\n        this.block.toggle(args, tags);\r\n    },\r\n    set: function(args, tags)\r\n    {\r\n        this.block.set(args, tags);\r\n    },\r\n    remove: function(args, tags)\r\n    {\r\n        this.block.remove(args, tags);\r\n    }\r\n});\r\n$R.add('module', 'inline', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.inline = app.inline;\r\n    },\r\n    format: function(args)\r\n    {\r\n        var nodes = this.inline.format(args);\r\n\r\n        // callback\r\n        this.app.broadcast('format', 'inline', nodes);\r\n    },\r\n    clearformat: function()\r\n    {\r\n        this.inline.clearFormat();\r\n    },\r\n    clearstyle: function()\r\n    {\r\n        this.inline.clearStyle();\r\n    },\r\n    clearclass: function()\r\n    {\r\n        this.inline.clearClass();\r\n    },\r\n    clearattr: function()\r\n    {\r\n        this.inline.clearAttr();\r\n    },\r\n    add: function(args, tags)\r\n    {\r\n        this.inline.add(args, tags);\r\n    },\r\n    toggle: function(args, tags)\r\n    {\r\n        this.inline.toggle(args, tags);\r\n    },\r\n    set: function(args, tags)\r\n    {\r\n        this.inline.set(args, tags);\r\n    },\r\n    remove: function(args, tags)\r\n    {\r\n        this.inline.remove(args, tags);\r\n    }\r\n});\r\n$R.add('module', 'autosave', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.source = app.source;\r\n    },\r\n    // messages\r\n    onsynced: function()\r\n    {\r\n        if (this.opts.autosave)\r\n        {\r\n            this._send();\r\n        }\r\n    },\r\n\r\n    // private\r\n    _send: function()\r\n    {\r\n        var name = (this.opts.autosaveName) ? this.opts.autosaveName : this.source.getName();\r\n\r\n        var data = {};\r\n        data[name] = this.source.getCode();\r\n        data = this.utils.extendData(data, this.opts.autosaveData);\r\n        $R.ajax.request(this.opts.autosaveMethod, {\r\n            url: this.opts.autosave,\r\n            data: data,\r\n            success: function(response)\r\n            {\r\n                this._complete(response, name, data);\r\n            }.bind(this)\r\n        });\r\n    },\r\n    _complete: function(response, name, data)\r\n    {\r\n        var callback = (response && response.error) ? 'autosaveError' : 'autosave';\r\n        this.app.broadcast(callback, name, data, response);\r\n    }\r\n});\r\n$R.add('module', 'input', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.keycodes = app.keycodes;\r\n        this.element = app.element;\r\n        this.selection = app.selection;\r\n        this.insertion = app.insertion;\r\n        this.inspector = app.inspector;\r\n        this.autoparser = app.autoparser;\r\n\r\n        // local\r\n        this.lastShiftKey = false;\r\n    },\r\n    // messages\r\n    onpaste: function(e, dataTransfer)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        return $R.create('input.paste', this.app, e, dataTransfer);\r\n    },\r\n    onkeydown: function(e)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        // key\r\n        var key = e.which;\r\n\r\n        // shortcuts\r\n        var shortcut = $R.create('input.shortcut', this.app, e);\r\n        if (shortcut.is()) return;\r\n\r\n        // select all\r\n        if ((e.ctrlKey || e.metaKey) && !e.altKey && key === 65)\r\n        {\r\n            e.preventDefault();\r\n            return this._selectAll();\r\n        }\r\n\r\n        // set empty if all selected\r\n        var keys = [this.keycodes.ENTER, this.keycodes.SPACE, this.keycodes.BACKSPACE, this.keycodes.DELETE];\r\n        var arrowKeys = [this.keycodes.UP, this.keycodes.DOWN, this.keycodes.LEFT, this.keycodes.RIGHT];\r\n        var isKeys = (keys.indexOf(key) !== -1);\r\n        var isArrowKeys = (arrowKeys.indexOf(key) !== -1);\r\n        var isXKey = ((e.ctrlKey || e.metaKey) && key === 88); // x\r\n        var isAlphaKeys = ((!e.ctrlKey && !e.metaKey) && ((key >= 48 && key <= 57) || (key >= 65 && key <= 90)));\r\n\r\n        if (this.selection.isAll() && isArrowKeys && (isXKey || (!e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey)))\r\n        {\r\n            if (isXKey)\r\n            {\r\n                this.editor.disableNonEditables();\r\n                this.app.broadcast('empty');\r\n                return;\r\n            }\r\n\r\n            if (this._isArrowKey(key)) return true;\r\n            if (isKeys) e.preventDefault();\r\n\r\n            if (this.element.isType('inline'))\r\n            {\r\n                var $editor = this.editor.getElement();\r\n                $editor.html('');\r\n\r\n                this.editor.startFocus();\r\n            }\r\n            else\r\n            {\r\n                this.insertion.set(this.opts.emptyHtml);\r\n            }\r\n\r\n            if (isKeys) return;\r\n            else this.app.broadcast('empty');\r\n        }\r\n\r\n        // autoparse\r\n        if (this.opts.autoparse)\r\n        {\r\n            this.autoparser.format(e, key);\r\n        }\r\n\r\n        // a-z, 0-9 - non editable\r\n        if (isAlphaKeys)\r\n        {\r\n            // has non-editable\r\n            if (this.selection.hasNonEditable())\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        // enter, shift/ctrl + enter\r\n        if (key === this.keycodes.ENTER)\r\n        {\r\n            return $R.create('input.enter', this.app, e, key);\r\n        }\r\n        // cmd + [\r\n        else if (e.metaKey && key === 219)\r\n        {\r\n            e.preventDefault();\r\n            this.app.api('module.list.outdent');\r\n            return;\r\n        }\r\n        // tab or cmd + ]\r\n        else if (key === this.keycodes.TAB || (e.metaKey && key === 221))\r\n        {\r\n            return $R.create('input.tab', this.app, e, key);\r\n        }\r\n        // space\r\n        else if (key === this.keycodes.SPACE)\r\n        {\r\n            return $R.create('input.space', this.app, e, key, this.lastShiftKey);\r\n        }\r\n        // backspace or delete\r\n        else if (this._isDeleteKey(key))\r\n        {\r\n            return $R.create('input.delete', this.app, e, key);\r\n        }\r\n        else if (this._isArrowKey(key))\r\n        {\r\n            return $R.create('input.arrow', this.app, e, key);\r\n        }\r\n    },\r\n    onkeyup: function(e)\r\n    {\r\n        if (!this.opts.input) return;\r\n\r\n        // key\r\n        var key = e.which;\r\n\r\n        // shift key\r\n        this.lastShiftKey = e.shiftKey;\r\n\r\n        // hide context toolbar\r\n        this.app.broadcast('contextbar.close');\r\n\r\n        // shortcode\r\n        var shortcode = $R.create('input.shortcode', this.app, e, key);\r\n        if (shortcode.is()) return;\r\n\r\n        // is empty\r\n        if (key === this.keycodes.BACKSPACE)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var html = this.utils.trimSpaces($editor.html());\r\n            html = html.replace(/<br\\s?\\/?>/g, '');\r\n            html = html.replace(/<div><\\/div>/, '');\r\n\r\n            if (html === '')\r\n            {\r\n                e.preventDefault();\r\n                this.editor.setEmpty();\r\n                this.editor.startFocus();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.editor.isEmpty())\r\n        {\r\n            this.app.broadcast('empty');\r\n        }\r\n    },\r\n\r\n    // public\r\n    start: function()\r\n    {\r\n        // extend shortcuts\r\n        if (this.opts.shortcutsAdd)\r\n        {\r\n            this.opts.shortcuts = $R.extend({}, true, this.opts.shortcuts, this.opts.shortcutsAdd);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _selectAll: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var el;\r\n\r\n        if (data.isComponentType('table'))\r\n        {\r\n            el = data.getTable();\r\n            this.selection.setAll(el);\r\n            return;\r\n        }\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            el = data.getComponentCodeElement();\r\n            this.selection.setAll(el);\r\n            return;\r\n        }\r\n\r\n        this.selection.setAll();\r\n    },\r\n    _isArrowKey: function(key)\r\n    {\r\n        return ([this.keycodes.UP, this.keycodes.DOWN, this.keycodes.RIGHT, this.keycodes.LEFT].indexOf(key) !== -1);\r\n    },\r\n    _isDeleteKey: function(key)\r\n    {\r\n        return (key === this.keycodes.BACKSPACE || key === this.keycodes.DELETE);\r\n    }\r\n});\r\n$R.add('class', 'input.arrow', {\r\n    init: function(app, e, key)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.caret = app.caret;\r\n        this.offset = app.offset;\r\n        this.marker = app.marker;\r\n        this.editor = app.editor;\r\n        this.keycodes = app.keycodes;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.key = key;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        if (this._isRightLeftKey() && this._isExitVariable(e)) return;\r\n\r\n        if (this._isRightDownKey())\r\n        {\r\n            if (this._isExitOnDownRight(e)) return;\r\n            if (this._selectComponent(e, 'End', 'next')) return;\r\n        }\r\n\r\n        if (this._isLeftUpKey())\r\n        {\r\n            if (this._isExitOnUpLeft(e)) return;\r\n            if (this._selectComponent(e, 'Start', 'prev')) return;\r\n        }\r\n\r\n        if (this.key === this.keycodes.LEFT) this.utils.trimInvisibleChars('left');\r\n        else if (this.key === this.keycodes.RIGHT) this.utils.trimInvisibleChars('right');\r\n\r\n    },\r\n    _isRightDownKey: function()\r\n    {\r\n        return ([this.keycodes.DOWN, this.keycodes.RIGHT].indexOf(this.key) !== -1);\r\n    },\r\n    _isLeftUpKey: function()\r\n    {\r\n        return ([this.keycodes.UP, this.keycodes.LEFT].indexOf(this.key) !== -1);\r\n    },\r\n    _isRightLeftKey: function()\r\n    {\r\n        return ([this.keycodes.RIGHT, this.keycodes.LEFT].indexOf(this.key) !== -1);\r\n    },\r\n    _isExitVariable: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var component = data.getComponent();\r\n        if (data.isComponentType('variable') && data.isComponentActive())\r\n        {\r\n            e.preventDefault();\r\n            var func = (this.key === this.keycodes.LEFT) ? 'setBefore' : 'setAfter';\r\n            this.caret[func](component);\r\n            return;\r\n        }\r\n    },\r\n    _isExitOnUpLeft: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock(current);\r\n        var data = this.inspector.parse(current);\r\n        var prev = block.previousElementSibling;\r\n        var isStart = this.caret.isStart(block);\r\n\r\n        // prev table\r\n        if (isStart && prev && prev.tagName === 'TABLE')\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setEnd(prev);\r\n            return true;\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isStart = this.caret.isStart(block);\r\n\r\n            var $component = $R.dom(block).closest('.redactor-component');\r\n            if (isStart && $component.length !== 0)\r\n            {\r\n                e.preventDefault();\r\n                this.caret.setEnd($component);\r\n                return true;\r\n            }\r\n        }\r\n        // exit table\r\n        else if (data.isTable() && isStart)\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setEnd(block.previousElementSibling);\r\n            return true;\r\n        }\r\n        // component\r\n        else if (!data.isComponentEditable() && data.isComponent() && !data.isComponentType('variable'))\r\n        {\r\n            var component = data.getComponent();\r\n            if (!component.previousElementSibling)\r\n            {\r\n                e.preventDefault();\r\n                this.component.clearActive();\r\n\r\n                return this._exitPrevElement(e, data.getComponent());\r\n            }\r\n            else if (component.previousElementSibling)\r\n            {\r\n                e.preventDefault();\r\n                this.component.clearActive();\r\n                this.caret.setEnd(component.previousElementSibling);\r\n                return true;\r\n            }\r\n        }\r\n    },\r\n    _isExitOnDownRight: function(e)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var isEndEditor = this.caret.isEnd();\r\n        var block, isEnd;\r\n\r\n        // table\r\n        if (data.isTable())\r\n        {\r\n            block = data.getTable();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, data.getComponent());\r\n            }\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, data.getComponent());\r\n            }\r\n        }\r\n        // figure/code\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            var component = data.getComponent();\r\n            var pre = $R.dom(data.getComponentCodeElement()).closest('pre');\r\n\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            var isNext = (pre && pre.get().nextElementSibling);\r\n            if (isEnd && !isNext)\r\n            {\r\n                return this._exitNextElement(e, component);\r\n            }\r\n        }\r\n        // pre & blockquote & dl\r\n        else if (data.isPre() || data.isBlockquote() || data.isDl())\r\n        {\r\n            if (isEndEditor)\r\n            {\r\n                if (data.isPre()) return this._exitNextElement(e, data.getPre());\r\n                else if (data.isBlockquote()) return this._exitNextElement(e, data.getBlockquote());\r\n                else if (data.isDl()) return this._exitNextElement(e, data.getDl());\r\n            }\r\n        }\r\n        // li\r\n        else if (data.isList())\r\n        {\r\n            var $list = $R.dom(current).parents('ul, ol', $editor).last();\r\n            isEnd = this.caret.isEnd($list);\r\n\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, $list.get());\r\n            }\r\n        }\r\n        // component\r\n        else if (data.isComponent() && !data.isComponentType('variable') && data.getTag() !== 'span')\r\n        {\r\n            this.component.clearActive();\r\n            return this._exitNextElement(e, data.getComponent());\r\n        }\r\n    },\r\n    _exitPrevElement: function(e, node)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (node.previousElementSibling) this.caret.setEnd(node.previousElementSibling);\r\n        else this.utils.createMarkupBefore(node);\r\n\r\n        return true;\r\n    },\r\n    _exitNextElement: function(e, node)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (node.nextElementSibling) this.caret.setStart(node.nextElementSibling);\r\n        else this.utils.createMarkup(node);\r\n\r\n        return true;\r\n    },\r\n    _selectComponent: function(e, caret, type)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock(current);\r\n        var sibling = this.utils.findSiblings(current, type);\r\n        var siblingBlock = this.utils.findSiblings(block, type);\r\n\r\n        if (sibling && this.caret['is' + caret](current))\r\n        {\r\n            this._selectComponentItem(e, sibling, caret);\r\n        }\r\n        else if (siblingBlock && this.caret['is' + caret](block))\r\n        {\r\n            this._selectComponentItem(e, siblingBlock, caret);\r\n        }\r\n    },\r\n    _selectComponentItem: function(e, item, caret)\r\n    {\r\n        if (this.component.isNonEditable(item))\r\n        {\r\n            e.preventDefault();\r\n            this.caret['set' + caret](item);\r\n            return true;\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'input.delete', {\r\n    init: function(app, e, key)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.marker = app.marker;\r\n        this.keycodes = app.keycodes;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n        this.insertion = app.insertion;\r\n\r\n        // local\r\n        this.key = key;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        if (this._removeActiveComponent(e)) return;\r\n        if (this._removeAllSelectedTable(e)) return;\r\n\r\n        // is empty\r\n        if (this.key === this.keycodes.BACKSPACE)\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            var html = this.utils.trimSpaces($editor.html());\r\n\r\n            if (html === this.opts.emptyHtml)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        // variable or non editable prev/next or selection\r\n        if (this._detectVariableOrNonEditable() || this.selection.hasNonEditable())\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // all selected\r\n        if (this.selection.isAll())\r\n        {\r\n            e.preventDefault();\r\n            this.insertion.set(this.opts.emptyHtml);\r\n            return;\r\n        }\r\n\r\n        // collapsed\r\n        if (this.selection.isCollapsed())\r\n        {\r\n            // next / prev\r\n            if (this.key === this.keycodes.BACKSPACE) this._traverseBackspace(e);\r\n            else if (this.key === this.keycodes.DELETE) this._traverseDelete(e);\r\n        }\r\n\r\n        if (this.key === this.keycodes.BACKSPACE) this.utils.trimInvisibleChars('left');\r\n\r\n        this._removeUnwantedStyles();\r\n        this._removeEmptySpans();\r\n        this._removeSpanTagsInHeadings();\r\n        this._removeInlineTagsInPre();\r\n    },\r\n    _detectVariableOrNonEditable: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var isBlockStart = this.caret.isStart(block);\r\n        var isBlockEnd = this.caret.isEnd(block);\r\n        var el;\r\n\r\n        // backspace\r\n        if (this.key === this.keycodes.BACKSPACE && isBlockStart)\r\n        {\r\n            el = block.previousSibling;\r\n            if (this._isNonEditable(el)) return true;\r\n        }\r\n        // delete\r\n        else if (this.key === this.keycodes.DELETE && isBlockEnd)\r\n        {\r\n            el = block.nextSibling;\r\n            if (this._isNonEditable(el)) return true;\r\n        }\r\n\r\n        var current = this.selection.getCurrent();\r\n        var isCurrentStart = this.caret.isStart(current);\r\n        var isCurrentEnd = this.caret.isEnd(current);\r\n        var isCurrentStartSpace = (this.selection.getTextBeforeCaret().trim() === '');\r\n        var isCurrentEndSpace = (this.selection.getTextAfterCaret().trim() === '');\r\n\r\n        // backspace\r\n        if (this.key === this.keycodes.BACKSPACE && isCurrentStart && !isCurrentStartSpace)\r\n        {\r\n            el = current.previousSibling;\r\n            if (this._isVariable(el))\r\n            {\r\n                this.caret.setEnd(el);\r\n                return true;\r\n            }\r\n            else if (this._isNonEditable(el)) return true;\r\n        }\r\n        // delete\r\n        else if (this.key === this.keycodes.DELETE && isCurrentEnd && !isCurrentEndSpace)\r\n        {\r\n            el = current.nextSibling;\r\n            if (this._isVariable(el))\r\n            {\r\n                this.caret.setStart(el);\r\n                return true;\r\n            }\r\n            else if (this._isNonEditable(el)) return true;\r\n        }\r\n    },\r\n    _isVariable: function(node)\r\n    {\r\n        return ($R.dom(node).closest('[data-redactor-type=\"variable\"]').length !== 0);\r\n    },\r\n    _isNonEditable: function(node)\r\n    {\r\n        return ($R.dom(node).closest('.non-editable').length !== 0);\r\n    },\r\n    _getBlock: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(block);\r\n\r\n        block = (data.isList()) ? $R.dom(block).parents('ul, ol', $editor).last().get() : block;\r\n        block = (data.isDl()) ? data.getDl() : block;\r\n        block = (data.isTable()) ? data.getTable() : block;\r\n\r\n        return block;\r\n    },\r\n    _traverseDelete: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var block, isEnd, $next;\r\n\r\n        // figcaption\r\n        if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n        // figure/code\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            block = data.getComponent();\r\n            isEnd = this.caret.isEnd(block);\r\n\r\n            if (isEnd)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        // next\r\n        block = this._getBlock();\r\n        var next = this.utils.findSiblings(block, 'next');\r\n        if (!next) return;\r\n\r\n        isEnd = this.caret.isEnd(block);\r\n        var dataNext = this.inspector.parse(next);\r\n        var isNextBlock = (next.tagName === 'P' || next.tagName === 'DIV');\r\n\r\n        // table\r\n        if (isEnd && dataNext.isComponentType('table'))\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setStart(next);\r\n            return;\r\n        }\r\n        // figure/code\r\n        else if (isEnd && dataNext.isComponentEditable())\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(next, false);\r\n            return;\r\n        }\r\n        // component\r\n        else if (isEnd && dataNext.isComponent())\r\n        {\r\n            e.preventDefault();\r\n\r\n            // select component\r\n            this.caret.setStart(next);\r\n\r\n            // remove current if empty\r\n            if (this.utils.isEmptyHtml(block.innerHTML))\r\n            {\r\n                $R.dom(block).remove();\r\n            }\r\n\r\n            return;\r\n        }\r\n        // combine list\r\n        else if (isEnd && dataNext.isList())\r\n        {\r\n            var $currentList = $R.dom(block);\r\n            $next = $R.dom(next);\r\n\r\n            // current list\r\n            if (data.isList())\r\n            {\r\n                e.preventDefault();\r\n\r\n                $currentList.append($next);\r\n                $next.unwrap();\r\n\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                var $first = $next.children('li').first();\r\n                var $lists = $first.find('ul, ol');\r\n\r\n                if ($lists.length !== 0)\r\n                {\r\n                    e.preventDefault();\r\n\r\n                    $next.prepend($lists);\r\n                    $lists.unwrap();\r\n\r\n                    $currentList.append($first);\r\n                    $first.unwrap();\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        // block\r\n        else if (isEnd && !data.isList() && !data.isTable() && isNextBlock && !this.utils.isEmptyHtml(block.innerHTML))\r\n        {\r\n            e.preventDefault();\r\n\r\n            var $current = $R.dom(block);\r\n            $next = $R.dom(next);\r\n\r\n            $current.append($next);\r\n            $next.unwrap();\r\n\r\n            return;\r\n        }\r\n    },\r\n    _traverseBackspace: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var block, isStart, $prev, $currentList;\r\n\r\n        // figcaption\r\n        if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            isStart = this.caret.isStart(block);\r\n\r\n            if (isStart)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n        // figure/code\r\n        else if (data.isComponentType('code'))\r\n        {\r\n            block = data.getComponent();\r\n            isStart = this.caret.isStart(block);\r\n\r\n            if (isStart && block.previousElementSibling)\r\n            {\r\n                e.preventDefault();\r\n                this.caret.setEnd(block.previousElementSibling);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // prev\r\n        block = this._getBlock();\r\n        var prev = this.utils.findSiblings(block, 'prev');\r\n\r\n        if (!prev)\r\n        {\r\n            setTimeout(this._replaceBlock.bind(this), 1);\r\n            return;\r\n        }\r\n\r\n        isStart = this.caret.isStart(block);\r\n        var dataPrev = this.inspector.parse(prev);\r\n        var isPrevBlock = (prev.tagName === 'P' || prev.tagName === 'DIV');\r\n\r\n        // figure/code\r\n        if (isStart && dataPrev.isComponentType('code'))\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(prev, false);\r\n            return;\r\n        }\r\n        // table\r\n        else if (isStart && dataPrev.isComponentType('table'))\r\n        {\r\n            e.preventDefault();\r\n            this.caret.setEnd(prev);\r\n            return;\r\n        }\r\n        // component\r\n        else if (isStart && dataPrev.isComponent())\r\n        {\r\n            e.preventDefault();\r\n\r\n            // select component\r\n            this.caret.setStart(prev);\r\n\r\n\r\n            // remove current if empty\r\n            if (this.utils.isEmptyHtml(block.innerHTML))\r\n            {\r\n                $R.dom(block).remove();\r\n            }\r\n\r\n            return;\r\n        }\r\n        // lists\r\n        else if (isStart && data.isList())\r\n        {\r\n            e.preventDefault();\r\n\r\n            $currentList = $R.dom(block);\r\n            $prev = $R.dom(prev);\r\n\r\n            if (dataPrev.isList())\r\n            {\r\n                $currentList.children('li').first().prepend(this.marker.build('start'));\r\n                $prev.append($currentList);\r\n                $currentList.unwrap();\r\n\r\n                this.selection.restoreMarkers();\r\n            }\r\n            else\r\n            {\r\n                var $first = $currentList.children('li').first();\r\n                var first = $first.get();\r\n                var $lists = $first.find('ul, ol');\r\n\r\n                var $newnode = this.utils.replaceToTag(first, this.opts.markup);\r\n                if (this.opts.breakline) $newnode.attr('data-redactor-tag', 'br');\r\n                $currentList.before($newnode);\r\n                this.caret.setStart($newnode);\r\n\r\n                if ($lists.length !== 0)\r\n                {\r\n                    $currentList.prepend($lists);\r\n                    $lists.unwrap();\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n        // block\r\n        else if (isStart && isPrevBlock)\r\n        {\r\n            e.preventDefault();\r\n\r\n            if (this.utils.isEmpty(prev)) {\r\n                $prev = $R.dom(prev);\r\n                $prev.remove();\r\n                return;\r\n            }\r\n\r\n            var textNode = this.utils.createInvisibleChar();\r\n            var $current = $R.dom(block);\r\n            $prev = $R.dom(prev);\r\n\r\n            this.caret.setEnd($prev);\r\n\r\n            $current.prepend(textNode);\r\n            $prev.append($current.contents());\r\n            $current.remove();\r\n\r\n            return;\r\n        }\r\n\r\n    },\r\n    _replaceBlock: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var $block = $R.dom(block);\r\n\r\n        if (this.opts.markup === 'p' && block && this._isNeedToReplaceBlock(block))\r\n        {\r\n            var markup = document.createElement(this.opts.markup);\r\n\r\n            $block.replaceWith(markup);\r\n            this.caret.setStart(markup);\r\n        }\r\n\r\n        if (this.opts.breakline && block && block.tagName === 'DIV')\r\n        {\r\n            $block.attr('data-redactor-tag', 'br');\r\n        }\r\n    },\r\n    _isNeedToReplaceBlock: function(block)\r\n    {\r\n        return (block.tagName === 'DIV' && this.utils.isEmptyHtml(block.innerHTML));\r\n    },\r\n    _removeActiveComponent: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var component = data.getComponent();\r\n        if (data.isComponent() && this.component.isActive(component))\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(component);\r\n            return true;\r\n        }\r\n    },\r\n    _removeAllSelectedTable: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var table = data.getTable();\r\n        if (table && this.selection.isAll(table))\r\n        {\r\n            e.preventDefault();\r\n            this.component.remove(table);\r\n            return true;\r\n        }\r\n    },\r\n    _removeUnwantedStyles: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        setTimeout(function()\r\n        {\r\n            var $tags = $editor.find('*[style]');\r\n            $tags.not('img, figure, figcaption, iframe, [data-redactor-style-cache], [data-redactor-span]').removeAttr('style');\r\n\r\n        }, 0);\r\n    },\r\n    _removeEmptySpans: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        setTimeout(function()\r\n        {\r\n            $editor.find('span').each(function(node)\r\n            {\r\n                if (node.attributes.length === 0)\r\n                {\r\n                    $R.dom(node).replaceWith(node.childNodes);\r\n                }\r\n            });\r\n\r\n        }, 0);\r\n    },\r\n    _removeSpanTagsInHeadings: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n\r\n        setTimeout(function()\r\n        {\r\n            $editor.find('h1, h2, h3, h4, h5, h6').each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                if ($node.closest('figure').length === 0)\r\n                {\r\n                    $node.find('span').not('.redactor-component, .non-editable, .redactor-selection-marker, [data-redactor-style-cache], [data-redactor-span]').unwrap();\r\n                }\r\n            });\r\n\r\n        }, 1);\r\n    },\r\n    _removeInlineTagsInPre: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var tags = this.opts.inlineTags;\r\n\r\n        setTimeout(function()\r\n        {\r\n            $editor.find('pre').each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                if ($node.closest('figure').length === 0)\r\n                {\r\n                    $node.find(tags.join(',')).not('code, .redactor-selection-marker').unwrap();\r\n                }\r\n            });\r\n\r\n        }, 1);\r\n    }\r\n});\r\n$R.add('class', 'input.enter', {\r\n    init: function(app, e)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.caret = app.caret;\r\n        this.editor = app.editor;\r\n        this.keycodes = app.keycodes;\r\n        this.detector = app.detector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n        this.inspector = app.inspector;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // turn off\r\n        if (!this.opts.enterKey) return this._disable(e);\r\n\r\n        // callback\r\n        var stop = this.app.broadcast('enter', e);\r\n        if (stop === false) return e.preventDefault();\r\n\r\n        // has non-editable\r\n        if (this.selection.hasNonEditable())\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // shift enter\r\n        if (e.ctrlKey || e.shiftKey) {\r\n            return this._insertBreak(e);\r\n        }\r\n\r\n        // enter & exit\r\n        if (this._isExit(e)) return;\r\n\r\n        // traverse\r\n        this._traverse(e);\r\n    },\r\n    _disable: function(e)\r\n    {\r\n        e.preventDefault();\r\n        var range = this.selection.getRange();\r\n        if (range && !range.collapsed) range.deleteContents();\r\n    },\r\n    _insertBreak: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var current = this.selection.getCurrent();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(current);\r\n\r\n        if (data.isHeading() && this.caret.isStart(block)) {\r\n            var $block = $R.dom(block);\r\n            var $newBlock = $block.clone().html('');\r\n            $block.before($newBlock);\r\n            this.caret.setStart($block);\r\n        }\r\n        else if ((data.isComponent() && !data.isComponentEditable()) || data.isCode()) return;\r\n        else if (data.isPre()) this.insertion.insertNewline();\r\n        else this.insertion.insertBreakLine();\r\n    },\r\n    _isExit: function(e)\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(block);\r\n        var isEnd = this.caret.isEnd(block);\r\n        var current = this.selection.getCurrent();\r\n        var prev = current.previousSibling;\r\n\r\n        // blockquote\r\n        if (data.isBlockquote())\r\n        {\r\n            var isParagraphExit = (isEnd && this._isExitableBlock(block, 'P'));\r\n            var isBreaklineExit = (isEnd && this._isExitableDblBreak(prev));\r\n\r\n            if (isParagraphExit || isBreaklineExit)\r\n            {\r\n                return this._exitFromElement(e, ((isBreaklineExit) ? prev : block), data.getBlockquote());\r\n            }\r\n        }\r\n        // pre\r\n        else if (!data.isComponentType('code') && data.isPre())\r\n        {\r\n            if (isEnd)\r\n            {\r\n                var html = block.innerHTML;\r\n                html = this.utils.removeInvisibleChars(html);\r\n                if (html.match(/(\\n\\n\\n)$/) !== null)\r\n                {\r\n                    $R.dom(prev.previousSibling.previousSibling).remove();\r\n                    return this._exitFromElement(e, prev, block);\r\n                }\r\n            }\r\n        }\r\n        // dl\r\n        else if (data.isDl())\r\n        {\r\n            if (isEnd && this._isExitableBlock(block, 'DT'))\r\n            {\r\n                return this._exitFromElement(e, block, data.getDl());\r\n            }\r\n        }\r\n        // li\r\n        else if (data.isList())\r\n        {\r\n            var list = $R.dom(current).parents('ul, ol', $editor).last();\r\n\r\n            isEnd = this.caret.isEnd(list);\r\n            if (isEnd && this._isExitableBlock(block, 'LI'))\r\n            {\r\n                return this._exitFromElement(e, block, list);\r\n            }\r\n        }\r\n        else if (data.isComponent() && data.isComponentActive() && !data.isFigcaption() && !data.isComponentEditable())\r\n        {\r\n            return this._exitFromElement(e, false, data.getComponent());\r\n        }\r\n    },\r\n    _isExitableDblBreak: function(prev)\r\n    {\r\n        var next = (prev) ? prev.nextSibling : false;\r\n        if (next)\r\n        {\r\n            var text = this.utils.removeInvisibleChars(next.textContent);\r\n\r\n            return (next.nodeType === 3 && text.trim() === '');\r\n        }\r\n    },\r\n    _isExitableBlock: function(block, tag)\r\n    {\r\n        return (block && block.tagName === tag && this.utils.isEmptyHtml(block.innerHTML));\r\n    },\r\n    _exitFromElement: function(e, prev, el)\r\n    {\r\n        e.preventDefault();\r\n        if (prev) $R.dom(prev).remove();\r\n        this.utils.createMarkup(el);\r\n\r\n        return true;\r\n    },\r\n    _exitNextElement: function(e, node)\r\n    {\r\n        e.preventDefault();\r\n\r\n        if (node.nextSibling) this.caret.setStart(node.nextSibling);\r\n        else this.utils.createMarkup(node);\r\n\r\n        return true;\r\n    },\r\n    _traverse: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var isText = this.selection.isText();\r\n        var block = this.selection.getBlock();\r\n        var data = this.inspector.parse(current);\r\n        var blockTag = (block) ? block.tagName.toLowerCase() : false;\r\n        var $variable = $R.dom(current).closest('[data-redactor-type=variable]');\r\n        // variable parent\r\n        if ($variable.length !== 0) {\r\n            this.caret.setAfter($variable);\r\n        }\r\n\r\n        // pre\r\n        if (data.isPre())\r\n        {\r\n            e.preventDefault();\r\n            return this.insertion.insertNewline();\r\n        }\r\n        // blockquote\r\n        else if (data.isBlockquote())\r\n        {\r\n            block = this.selection.getBlock(current);\r\n            if (block && block.tagName === 'BLOCKQUOTE')\r\n            {\r\n                e.preventDefault();\r\n                return this.insertion.insertBreakLine();\r\n            }\r\n        }\r\n        // figcaption\r\n        else if (data.isFigcaption())\r\n        {\r\n            block = data.getFigcaption();\r\n            var isEnd = this.caret.isEnd(block);\r\n            var isEndEditor = this.caret.isEnd();\r\n            if (isEnd || isEndEditor)\r\n            {\r\n                return this._exitNextElement(e, data.getComponent());\r\n            }\r\n            else\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n        // dl\r\n        else if (data.isDl())\r\n        {\r\n            e.preventDefault();\r\n            return this._traverseDl(current);\r\n        }\r\n        // breakline\r\n        else if (this.opts.breakline && blockTag === 'div') {\r\n            setTimeout(this._replaceBlock.bind(this), 1);\r\n            return;\r\n        }\r\n        // text\r\n        else if (isText)\r\n        {\r\n            e.preventDefault();\r\n            return this.insertion.insertBreakLine();\r\n        }\r\n        // list\r\n        else if (data.isList()) {\r\n            return;\r\n        }\r\n        // div / p\r\n        else\r\n        {\r\n            var delay = (!this.detector.isDesktop()) ? 1 : 50;\r\n            setTimeout(this._replaceBlock.bind(this), delay);\r\n            return;\r\n        }\r\n\r\n    },\r\n    _traverseDl: function(current)\r\n    {\r\n        var block = this.selection.getBlock(current);\r\n        var data = this.inspector.parse(block);\r\n        var tag = data.getTag();\r\n        var $el = $R.dom(block);\r\n        var next = $el.get().nextSibling || false;\r\n        var $next = $R.dom(next);\r\n        var nextDd = (next && $next.is('dd'));\r\n        var nextDt = (next && $next.is('dt'));\r\n        var isEnd = this.caret.isEnd(block);\r\n\r\n        if (tag === 'dt' && !nextDd && isEnd)\r\n        {\r\n            var dd = document.createElement('dd');\r\n            $el.after(dd);\r\n\r\n            this.caret.setStart(dd);\r\n            return;\r\n        }\r\n        else if (tag === 'dd' && !nextDt && isEnd)\r\n        {\r\n            var dt = document.createElement('dt');\r\n            $el.after(dt);\r\n\r\n            this.caret.setStart(dt);\r\n            return;\r\n        }\r\n\r\n        return this.insertion.insertBreakLine();\r\n    },\r\n    _replaceBlock: function()\r\n    {\r\n        var block = this.selection.getBlock();\r\n        var $block = $R.dom(block);\r\n\r\n        if (this.opts.markup === 'p' && block && this._isNeedToReplaceBlock(block))\r\n        {\r\n            var markup = document.createElement(this.opts.markup);\r\n            $block.replaceWith(markup);\r\n            this.caret.setStart(markup);\r\n        }\r\n        else\r\n        {\r\n            if (block)\r\n            {\r\n                if (this.utils.isEmptyHtml(block.innerHTML))\r\n                {\r\n                    this._clearBlock($block, block);\r\n                }\r\n                else\r\n                {\r\n                    var first = this.utils.getFirstNode(block);\r\n                    if (first && first.tagName === 'BR')\r\n                    {\r\n                        $R.dom(first).remove();\r\n                        this.caret.setStart(block);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove id\r\n        $block.removeAttr('id');\r\n\r\n        if (block && this._isNeedToCleanBlockStyle(block) && this.opts.cleanOnEnter)\r\n        {\r\n            $block.removeAttr('class style');\r\n        }\r\n\r\n        if (this.opts.breakline && block && block.tagName === 'DIV')\r\n        {\r\n            //$block.append(document.createElement('br'));\r\n            //$block.attr('data-redactor-tag', 'br');\r\n        }\r\n    },\r\n    _clearBlock: function($block, block)\r\n    {\r\n        if (block.tagName === 'DIV') {\r\n            $block.find('br').remove();\r\n        }\r\n\r\n        if (this.opts.cleanInlineOnEnter || block.innerHTML === '<br>')\r\n        {\r\n            $block.html('');\r\n        }\r\n\r\n        this.caret.setStart(block);\r\n    },\r\n    _isNeedToReplaceBlock: function(block)\r\n    {\r\n        return (block.tagName === 'DIV' && this.utils.isEmptyHtml(block.innerHTML));\r\n    },\r\n    _isNeedToCleanBlockStyle: function(block)\r\n    {\r\n        return (block.tagName === 'P' && this.utils.isEmptyHtml(block.innerHTML));\r\n    }\r\n});\r\n$R.add('class', 'input.paste', {\r\n    init: function(app, e, dataTransfer, html, point)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.cleaner = app.cleaner;\r\n        this.container = app.container;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n        this.autoparser = app.autoparser;\r\n\r\n        // local\r\n        this.pasteHtml = html;\r\n        this.pointInserted = point;\r\n        this.dataTransfer = dataTransfer;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        var clipboard = this.dataTransfer || e.clipboardData;\r\n        var current = this.selection.getCurrent();\r\n        var dataCurrent = this.inspector.parse(current);\r\n\r\n        this.dropPasted = this.dataTransfer;\r\n        //this.isRawCode = (this.dropPasted) ? (dataCurrent.isPre() || dataCurrent.isCode()) : this._isPlainText(clipboard);\r\n        this.isRawCode = (dataCurrent.isPre() || dataCurrent.isCode());\r\n\r\n        this.editor.enablePasting();\r\n        this.editor.saveScroll();\r\n\r\n        if (!this.dropPasted)\r\n        {\r\n            this.selection.saveMarkers();\r\n        }\r\n\r\n        if (this.isRawCode || !clipboard)\r\n        {\r\n\r\n            var text;\r\n            if (!this.isRawCode && !clipboard && window.clipboardData)\r\n            {\r\n                text = window.clipboardData.getData(\"text\");\r\n            }\r\n            else\r\n            {\r\n                text = clipboard.getData(\"text/plain\");\r\n            }\r\n\r\n            e.preventDefault();\r\n            this._insert(e, text);\r\n            return;\r\n        }\r\n        else if (this.pasteHtml)\r\n        {\r\n            e.preventDefault();\r\n            this._insert(e, this.pasteHtml);\r\n        }\r\n        else\r\n        {\r\n            // html / text\r\n            var url = clipboard.getData('URL');\r\n            var html = (this._isPlainText(clipboard)) ? this.cleaner.encodeEntities(clipboard.getData(\"text/plain\")) : clipboard.getData(\"text/html\");\r\n\r\n            // safari anchor links\r\n            html = (!url || url === '') ? html : url;\r\n\r\n            // file\r\n            if (clipboard.files !== null && clipboard.files.length > 0 && html === '')\r\n            {\r\n                var files = [];\r\n                for (var i = 0; i < clipboard.files.length; i++)\r\n                {\r\n                    var file = clipboard.files[i] || clipboard.items[i].getAsFile();\r\n                    if (file) files.push(file);\r\n                }\r\n\r\n                if (files.length > 0)\r\n                {\r\n                    e.preventDefault();\r\n                    this._insertFiles(e, files);\r\n                    return;\r\n                }\r\n            }\r\n\r\n\r\n            e.preventDefault();\r\n            this._insert(e, html);\r\n        }\r\n    },\r\n    _isPlainText: function(clipboard)\r\n    {\r\n        var text = clipboard.getData(\"text/plain\");\r\n        var html = clipboard.getData(\"text/html\");\r\n\r\n        if (text && html)\r\n        {\r\n            var element = document.createElement(\"div\");\r\n            element.innerHTML = html;\r\n\r\n            if (element.textContent === text)\r\n            {\r\n                return !element.querySelector(\":not(meta)\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return (text !== null);\r\n        }\r\n    },\r\n    _restoreSelection: function()\r\n    {\r\n        this.editor.restoreScroll();\r\n        this.editor.disablePasting();\r\n        if (!this.dropPasted)\r\n        {\r\n            this.selection.restoreMarkers();\r\n        }\r\n    },\r\n    _insert: function(e, html)\r\n    {\r\n        // pasteBefore callback\r\n        var returned = this.app.broadcast('pasteBefore', html);\r\n        html = (returned === undefined) ? html : returned;\r\n\r\n        // clean\r\n        html = html.trim();\r\n        html = (this.isRawCode) ? html : this.cleaner.paste(html);\r\n        html = html.trim();\r\n        html = (this.isRawCode) ? this.cleaner.encodePhpCode(html) : html;\r\n\r\n        // paste callback\r\n        returned = this.app.broadcast('pasting', html);\r\n        html = (returned === undefined) ? html : returned;\r\n\r\n        this._restoreSelection();\r\n\r\n        // stop input\r\n        if (!this.opts.input) return;\r\n\r\n        this.app.broadcast('state', false);\r\n\r\n        // insert\r\n        var nodes = [];\r\n        if (this.isRawCode) {\r\n            html = html.replace('&lt;?php', '<?php');\r\n\r\n            var textNode = document.createTextNode(html);\r\n            nodes = this.insertion.insertNode(textNode, 'after');\r\n\r\n            this.app.broadcast('pasted', nodes);\r\n        }\r\n        else {\r\n\r\n            // autoparse\r\n            if (this.opts.autoparse && this.opts.autoparsePaste)\r\n            {\r\n                html = this.autoparser.parse(html);\r\n            }\r\n\r\n            nodes = (this.dropPasted) ? this.insertion.insertToPoint(e, html, this.pointInserted) : this.insertion.insertHtml(html);\r\n\r\n            // pasted callback\r\n            this.app.broadcast('pasted', nodes);\r\n            this.app.broadcast('autoparseobserve');\r\n        }\r\n\r\n    },\r\n    _insertFiles: function(e, files)\r\n    {\r\n        this._restoreSelection();\r\n\r\n        // drop or clipboard\r\n        var isImage = (this.opts.imageTypes.indexOf(files[0].type) !== -1);\r\n        var isClipboard = (typeof this.dropPasted === 'undefined');\r\n\r\n        if (isImage) this.app.broadcast('dropimage', e, files, isClipboard);\r\n        else this.app.broadcast('dropfile', e, files, isClipboard);\r\n    }\r\n});\r\n$R.add('class', 'input.shortcode', {\r\n    init: function(app, e, key)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.marker = app.marker;\r\n        this.keycodes = app.keycodes;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.worked = false;\r\n\r\n        // init\r\n        if (key === this.keycodes.SPACE) this._init();\r\n    },\r\n    // public\r\n    is: function()\r\n    {\r\n        return this.worked;\r\n    },\r\n    // private\r\n    _init: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        if (current && current.nodeType === 3)\r\n        {\r\n            var text = this.utils.removeInvisibleChars(current.textContent);\r\n            var shortcodes = this.opts.shortcodes;\r\n            for (var name in shortcodes)\r\n            {\r\n                var re = new RegExp('^' + this.utils.escapeRegExp(name));\r\n                var match = text.match(re);\r\n                if (match !== null)\r\n                {\r\n                    if (typeof shortcodes[name].format !== 'undefined')\r\n                    {\r\n                        return this._format(shortcodes[name].format, current, re);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _format: function(tag, current, re)\r\n    {\r\n        var marker = this.marker.insert('start');\r\n        current = marker.previousSibling;\r\n\r\n        var text = current.textContent;\r\n        text = this.utils.trimSpaces(text);\r\n        text = text.replace(re, '');\r\n        current.textContent = text;\r\n\r\n        var api = (tag === 'ul' || tag === 'ol') ? 'module.list.toggle' : 'module.block.format';\r\n\r\n        this.app.api(api, tag);\r\n        this.selection.restoreMarkers();\r\n\r\n        this.worked = true;\r\n    }\r\n});\r\n$R.add('class', 'input.shortcut', {\r\n    init: function(app, e)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // local\r\n        this.worked = false;\r\n\r\n        // based on https://github.com/jeresig/jquery.hotkeys\r\n        this.hotkeys = {\r\n            8: \"backspace\", 9: \"tab\", 10: \"return\", 13: \"return\", 16: \"shift\", 17: \"ctrl\", 18: \"alt\", 19: \"pause\",\r\n            20: \"capslock\", 27: \"esc\", 32: \"space\", 33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",\r\n            37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\", 45: \"insert\", 46: \"del\", 59: \";\", 61: \"=\",\r\n            96: \"0\", 97: \"1\", 98: \"2\", 99: \"3\", 100: \"4\", 101: \"5\", 102: \"6\", 103: \"7\",\r\n            104: \"8\", 105: \"9\", 106: \"*\", 107: \"+\", 109: \"-\", 110: \".\", 111 : \"/\",\r\n            112: \"f1\", 113: \"f2\", 114: \"f3\", 115: \"f4\", 116: \"f5\", 117: \"f6\", 118: \"f7\", 119: \"f8\",\r\n            120: \"f9\", 121: \"f10\", 122: \"f11\", 123: \"f12\", 144: \"numlock\", 145: \"scroll\", 173: \"-\", 186: \";\", 187: \"=\",\r\n            188: \",\", 189: \"-\", 190: \".\", 191: \"/\", 192: \"`\", 219: \"[\", 220: \"\\\\\", 221: \"]\", 222: \"'\"\r\n        };\r\n\r\n        this.hotkeysShiftNums = {\r\n            \"`\": \"~\", \"1\": \"!\", \"2\": \"@\", \"3\": \"#\", \"4\": \"$\", \"5\": \"%\", \"6\": \"^\", \"7\": \"&\",\r\n            \"8\": \"*\", \"9\": \"(\", \"0\": \")\", \"-\": \"_\", \"=\": \"+\", \";\": \": \", \"'\": \"\\\"\", \",\": \"<\",\r\n            \".\": \">\",  \"/\": \"?\",  \"\\\\\": \"|\"\r\n        };\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // public\r\n    is: function()\r\n    {\r\n        return this.worked;\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // disable browser's hot keys for bold and italic if shortcuts off\r\n        if (this.opts.shortcuts === false)\r\n        {\r\n            if ((e.ctrlKey || e.metaKey) && (e.which === 66 || e.which === 73)) e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // build\r\n        for (var key in this.opts.shortcuts)\r\n        {\r\n            this._build(e, key, this.opts.shortcuts[key]);\r\n        }\r\n    },\r\n    _build: function(e, str, command)\r\n    {\r\n        var keys = str.split(',');\r\n        var len = keys.length;\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            if (typeof keys[i] === 'string')\r\n            {\r\n                this._handler(e, keys[i].trim(), command);\r\n            }\r\n        }\r\n    },\r\n    _handler: function(e, keys, command)\r\n    {\r\n        keys = keys.toLowerCase().split(\" \");\r\n\r\n        var special = this.hotkeys[e.keyCode];\r\n        var character = String.fromCharCode(e.which).toLowerCase();\r\n        var modif = \"\", possible = {};\r\n        var cmdKeys = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\r\n\r\n        for (var i = 0; i < cmdKeys.length; i++)\r\n        {\r\n            var specialKey = cmdKeys[i];\r\n            if (e[specialKey + 'Key'] && special !== specialKey)\r\n            {\r\n                modif += specialKey + '+';\r\n            }\r\n        }\r\n\r\n        if (special) possible[modif + special] = true;\r\n        if (character)\r\n        {\r\n            possible[modif + character] = true;\r\n            possible[modif + this.hotkeysShiftNums[character]] = true;\r\n\r\n            // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\r\n            if (modif === \"shift+\")\r\n            {\r\n                possible[this.hotkeysShiftNums[character]] = true;\r\n            }\r\n        }\r\n\r\n        var len = keys.length;\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            if (possible[keys[i]])\r\n            {\r\n\r\n                e.preventDefault();\r\n                this.worked = true;\r\n\r\n                if (command.message)\r\n                {\r\n                    this.app.broadcast(command.message, command.args);\r\n                    this.app.broadcast('buffer.trigger');\r\n                }\r\n                else if (command.api)\r\n                {\r\n                    this.app.api(command.api, command.args);\r\n                    this.app.broadcast('buffer.trigger');\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'input.space', {\r\n    init: function(app, e, key, lastShiftKey)\r\n    {\r\n        this.app = app;\r\n        this.keycodes = app.keycodes;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.key = key;\r\n        this.lastShiftKey = lastShiftKey;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // has non-editable\r\n        if (this.selection.hasNonEditable())\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // shift/ctrl + space\r\n        if (!this.lastShiftKey && this.key === this.keycodes.SPACE && (e.ctrlKey || e.shiftKey) && !e.metaKey)\r\n        {\r\n            e.preventDefault();\r\n            this.insertion.insertChar('&nbsp;');\r\n            return;\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'input.tab', {\r\n    init: function(app, e)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // init\r\n        this._init(e);\r\n    },\r\n    // private\r\n    _init: function(e)\r\n    {\r\n        // turn off tab\r\n        if (!this.opts.tabKey) return;\r\n\r\n        // callback\r\n        var stop = this.app.broadcast('tab', e);\r\n        if (stop === false) return e.preventDefault();\r\n\r\n        // traverse\r\n        this._traverse(e);\r\n    },\r\n    _traverse: function(e)\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n\r\n        // hard tab\r\n        if (!data.isComponent() && e.shiftKey)\r\n        {\r\n            return this._insertHardTab(e, 4);\r\n        }\r\n\r\n        // list\r\n        if (data.isList())\r\n        {\r\n            e.preventDefault();\r\n            return this.app.api('module.list.indent');\r\n        }\r\n        // pre\r\n        if (data.isPre() || (data.isComponentType('code') && !data.isFigcaption()))\r\n        {\r\n            return this._tabCode(e);\r\n        }\r\n\r\n        // tab as spaces\r\n        if (this.opts.tabAsSpaces !== false)\r\n        {\r\n            return this._insertHardTab(e, this.opts.tabAsSpaces);\r\n        }\r\n    },\r\n    _insertHardTab: function(e, num)\r\n    {\r\n        e.preventDefault();\r\n        var node = document.createTextNode(Array(num + 1).join('\\u00a0'));\r\n        return this.insertion.insertNode(node, 'end');\r\n    },\r\n    _tabCode: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var node = (this.opts.preSpaces) ? document.createTextNode(Array(this.opts.preSpaces + 1).join('\\u00a0')) : document.createTextNode('\\t');\r\n\r\n        return this.insertion.insertNode(node, 'end');\r\n    }\r\n});\r\n$R.add('module', 'upload', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.progress = app.progress;\r\n\r\n        // local\r\n        this.defaults = {\r\n            event: false,\r\n            element: false,\r\n            name: false,\r\n            files: false,\r\n            url: false,\r\n            data: false,\r\n            paramName: false\r\n        };\r\n    },\r\n    // public\r\n    build: function(options)\r\n    {\r\n        this.p = $R.extend(this.defaults, options);\r\n        this.$el = $R.dom(this.p.element);\r\n\r\n        if (this.$el.get().tagName === 'INPUT') this._buildInput();\r\n        else                                    this._buildBox();\r\n    },\r\n    send: function(options)\r\n    {\r\n        this.p = $R.extend(this.defaults, options);\r\n        this.$uploadbox = this.editor.getElement();\r\n        this._send(this.p.event, this.p.files);\r\n    },\r\n    complete: function(response, e)\r\n    {\r\n        this._complete(response, e);\r\n    },\r\n\r\n    // private\r\n    _buildInput: function()\r\n    {\r\n        this.box = false;\r\n        this.prefix = '';\r\n\r\n        this.$uploadbox = $R.dom('<div class=\"upload-redactor-box\" />');\r\n\r\n        this.$el.hide();\r\n        this.$el.after(this.$uploadbox);\r\n\r\n        if (this.opts.multipleUpload) this.$el.attr('multiple', 'multiple');\r\n        else this.$el.removeAttr('multiple');\r\n\r\n        if (this.p.name !== 'file')\r\n        {\r\n            this.$el.attr('accept', 'image/*');\r\n        }\r\n\r\n        this._buildPlaceholder();\r\n        this._buildEvents();\r\n    },\r\n    _buildBox: function()\r\n    {\r\n        this.box = true;\r\n        this.prefix = 'box-';\r\n\r\n        this.$uploadbox = this.$el;\r\n        this.$uploadbox.attr('ondragstart', 'return false;');\r\n\r\n        // events\r\n        this.$uploadbox.on('drop.redactor.upload', this._onDropBox.bind(this));\r\n        this.$uploadbox.on('dragover.redactor.upload', this._onDragOver.bind(this));\r\n        this.$uploadbox.on('dragleave.redactor.upload', this._onDragLeave.bind(this));\r\n    },\r\n    _buildPlaceholder: function()\r\n    {\r\n        this.$placeholder = $R.dom('<div class=\"upload-redactor-placeholder\" />');\r\n        this.$placeholder.html(this.lang.get('upload-label'));\r\n        this.$uploadbox.append(this.$placeholder);\r\n    },\r\n    _buildEvents: function()\r\n    {\r\n        this.$el.on('change.redactor.upload', this._onChange.bind(this));\r\n        this.$uploadbox.on('click.redactor.upload', this._onClick.bind(this));\r\n        this.$uploadbox.on('drop.redactor.upload', this._onDrop.bind(this));\r\n        this.$uploadbox.on('dragover.redactor.upload', this._onDragOver.bind(this));\r\n        this.$uploadbox.on('dragleave.redactor.upload', this._onDragLeave.bind(this));\r\n    },\r\n    _onClick: function(e)\r\n    {\r\n        e.preventDefault();\r\n        this.$el.click();\r\n    },\r\n    _onChange: function(e)\r\n    {\r\n        this._send(e, this.$el.get().files);\r\n    },\r\n    _onDrop: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        this._clear();\r\n        this._setStatusDrop();\r\n        this._send(e);\r\n    },\r\n    _onDragOver: function(e)\r\n    {\r\n        e.preventDefault();\r\n        this._setStatusHover();\r\n\r\n        return false;\r\n    },\r\n    _onDragLeave: function(e)\r\n    {\r\n        e.preventDefault();\r\n        this._removeStatusHover();\r\n\r\n        return false;\r\n    },\r\n    _onDropBox: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        this._clear();\r\n        this._setStatusDrop();\r\n        this._send(e);\r\n    },\r\n    _removeStatusHover: function()\r\n    {\r\n        this.$uploadbox.removeClass('upload-redactor-' + this.prefix + 'hover');\r\n    },\r\n    _setStatusDrop: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'drop');\r\n    },\r\n    _setStatusHover: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'hover');\r\n    },\r\n    _setStatusError: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'error');\r\n    },\r\n    _setStatusSuccess: function()\r\n    {\r\n        this.$uploadbox.addClass('upload-redactor-' + this.prefix + 'success');\r\n    },\r\n    _clear: function()\r\n    {\r\n        var classes = ['drop', 'hover', 'error', 'success'];\r\n        for (var i = 0; i < classes.length; i++)\r\n        {\r\n            this.$uploadbox.removeClass('upload-redactor-' + this.prefix + classes[i]);\r\n        }\r\n\r\n        this.$uploadbox.removeAttr('ondragstart');\r\n    },\r\n    _send: function(e, files)\r\n    {\r\n        e = e.originalEvent || e;\r\n\r\n        files = (files) ? files : e.dataTransfer.files;\r\n\r\n        var data = new FormData();\r\n        var name = this._getUploadParam();\r\n\r\n        data = this._buildData(name, files, data);\r\n        data = this.utils.extendData(data, this.p.data);\r\n\r\n        var stop = this.app.broadcast('upload.start', e, data, files);\r\n        if (stop !== false)\r\n        {\r\n            this._sendData(data, files, e);\r\n        }\r\n    },\r\n    _sendData: function(data, files, e)\r\n    {\r\n        this.progress.show();\r\n        if (typeof this.p.url === 'function')\r\n        {\r\n            var res = this.p.url(data, files, e, this);\r\n            if (!(res instanceof Promise))\r\n            {\r\n                this._complete(res, e);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            $R.ajax.post({\r\n                url: this.p.url,\r\n                data: data,\r\n                before: function(xhr)\r\n                {\r\n                    return this.app.broadcast('upload.beforeSend', xhr);\r\n\r\n                }.bind(this),\r\n                success: function(response)\r\n                {\r\n                    this._complete(response, e);\r\n                }.bind(this),\r\n                error: function(response, xhr, status)\r\n                {\r\n                    this._complete(response, e, status);\r\n                }.bind(this)\r\n            });\r\n        }\r\n    },\r\n    _getUploadParam: function()\r\n    {\r\n        return (this.p.paramName) ? this.p.paramName : 'file';\r\n    },\r\n    _buildData: function(name, files, data)\r\n    {\r\n        if (files.length === 1)\r\n        {\r\n            data.append(name, files[0]);\r\n        }\r\n        else if (files.length > 1 && this.opts.multipleUpload !== false)\r\n        {\r\n            for (var i = 0; i < files.length; i++)\r\n            {\r\n                data.append(name + '[]', files[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    _complete: function(response, e, status)\r\n    {\r\n        this._clear();\r\n        this.progress.hide();\r\n\r\n        if (response && response.error)\r\n        {\r\n            this._setStatusError();\r\n\r\n            this.app.broadcast('upload.' + this.p.name + '.error', response, e, status);\r\n            this.app.broadcast('upload.error', response, status);\r\n        }\r\n        else\r\n        {\r\n            this._setStatusSuccess();\r\n\r\n            this.app.broadcast('upload.' + this.p.name + '.complete', response, e);\r\n            this.app.broadcast('upload.complete', response);\r\n\r\n            setTimeout(this._clear.bind(this), 500);\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'code.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n\r\n    // private\r\n   _init: function(el)\r\n    {\r\n        var $pre;\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $wrapper = $node.closest('figure');\r\n            if ($wrapper.length !== 0)\r\n            {\r\n                this.parse($wrapper);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.append(el);\r\n            }\r\n\r\n            $pre = this.find('pre code, pre').last();\r\n        }\r\n        else\r\n        {\r\n            $pre = $R.dom('<pre>');\r\n\r\n            this.parse('<figure>');\r\n            this.append($pre);\r\n        }\r\n\r\n        this._initElement($pre);\r\n        this._initWrapper();\r\n    },\r\n    _initElement: function($pre)\r\n    {\r\n        $pre.attr({\r\n            'tabindex': '-1',\r\n            'contenteditable': true\r\n        });\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'code',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n$R.add('module', 'form', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.lang = app.lang;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n    },\r\n    // messages\r\n    onform: {\r\n        remove: function(node)\r\n        {\r\n            this._remove(node);\r\n        }\r\n    },\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        var data = this.inspector.parse(e.target);\r\n        if (data.isComponentType('form'))\r\n        {\r\n            var node = data.getComponent();\r\n            var buttons = {\r\n                \"remove\": {\r\n                    title: this.lang.get('delete'),\r\n                    api: 'module.form.remove',\r\n                    args: node\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons, 'top');\r\n        }\r\n\r\n    },\r\n\r\n    // private\r\n    _remove: function(node)\r\n    {\r\n        this.component.remove(node);\r\n    }\r\n});\r\n$R.add('class', 'form.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.utils = app.utils;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $wrapper = $node.closest('form');\r\n            if ($wrapper.length !== 0)\r\n            {\r\n                var $figure = this.utils.replaceToTag(el, 'figure');\r\n                this.parse($figure);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.append(el);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.parse('<figure>');\r\n        }\r\n\r\n        this._initWrapper();\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'form',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n$R.add('module', 'image', {\r\n    modals: {\r\n        'image':\r\n            '<div class=\"redactor-modal-tab redactor-modal-tab-upload\" data-title=\"## upload ##\"><form action=\"\"> \\\r\n                <input type=\"file\" name=\"file\"> \\\r\n            </form></div>',\r\n        'imageedit':\r\n            '<div class=\"redactor-modal-group\"> \\\r\n                <div id=\"redactor-modal-image-preview\" class=\"redactor-modal-side\"></div> \\\r\n                <form action=\"\" class=\"redactor-modal-area\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label for=\"modal-image-title\"> ## title ##</label> \\\r\n                        <input type=\"text\" id=\"modal-image-title\" name=\"title\" /> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-caption\"> \\\r\n                        <label for=\"modal-image-caption\">## caption ##</label> \\\r\n                        <input type=\"text\" id=\"modal-image-caption\" name=\"caption\" aria-label=\"## caption ##\" /> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-align\"> \\\r\n                        <label>## image-position ##</label> \\\r\n                        <select name=\"align\" aria-label=\"## image-position ##\"> \\\r\n                            <option value=\"none\">## none ##</option> \\\r\n                            <option value=\"left\">## left ##</option> \\\r\n                            <option value=\"center\">## center ##</option> \\\r\n                            <option value=\"right\">## right ##</option> \\\r\n                        </select> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-link\"> \\\r\n                        <label for=\"modal-image-url\">## link ##</label> \\\r\n                        <input type=\"text\" id=\"modal-image-url\" name=\"url\" aria-label=\"## link ##\" /> \\\r\n                    </div> \\\r\n                    <div class=\"form-item form-item-link\"> \\\r\n                        <label class=\"checkbox-label\"> \\\r\n                            <div class=\"checkbox-label__text\" style=\"padding-left: 20px;\">## link-in-new-tab ##</div> \\\r\n                            <input type=\"checkbox\" class=\"checkbox\" name=\"target\"> \\\r\n                        </label> \\\r\n                    </div> \\\r\n                </form> \\\r\n            </div>'\r\n    },\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.editor = app.editor;\r\n        this.storage = app.storage;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.justResized = false;\r\n    },\r\n    // messages\r\n    oninsert: function()\r\n    {\r\n        this._observeImages();\r\n    },\r\n    onstarted: function()\r\n    {\r\n        // storage observe\r\n        this.storage.observeImages();\r\n\r\n        // resize\r\n        if (this.opts.imageResizable)\r\n        {\r\n            this.resizer = $R.create('image.resize', this.app);\r\n        }\r\n\r\n        // observe\r\n        this._observeImages();\r\n    },\r\n    ondropimage: function(e, files, clipboard)\r\n    {\r\n        if (!this.opts.imageUpload) return;\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            event: (clipboard) ? false : e,\r\n            files: files,\r\n            name: 'imagedrop',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.send', options);\r\n    },\r\n    onstop: function()\r\n    {\r\n        if (this.resizer) this.resizer.stop();\r\n    },\r\n    onbottomclick: function()\r\n    {\r\n        this.insertion.insertToEnd(this.editor.getLastNode(), 'image');\r\n    },\r\n    onimageresizer: {\r\n        stop: function()\r\n        {\r\n            if (this.resizer) this.resizer.hide();\r\n        }\r\n    },\r\n    onsource: {\r\n        open: function()\r\n        {\r\n            if (this.resizer) this.resizer.hide();\r\n        },\r\n        closed: function()\r\n        {\r\n            this._observeImages();\r\n            if (this.resizer) this.resizer.rebuild();\r\n        }\r\n    },\r\n    onupload: {\r\n        complete: function()\r\n        {\r\n            this._observeImages();\r\n        },\r\n        image: {\r\n            complete: function(response)\r\n            {\r\n                this._insert(response);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        imageedit: {\r\n            complete: function(response)\r\n            {\r\n                this._change(response);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        imagedrop: {\r\n            complete: function(response, e)\r\n            {\r\n                this._insert(response, e);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        imagereplace: {\r\n            complete: function(response)\r\n            {\r\n                this._change(response, false);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        }\r\n    },\r\n    onmodal: {\r\n        image: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setUpload($modal, $form);\r\n            }\r\n        },\r\n        imageedit: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setFormData($modal, $form);\r\n            },\r\n            opened: function($modal, $form)\r\n            {\r\n                this._setFormFocus($form);\r\n            },\r\n            remove: function()\r\n            {\r\n                this._remove(this.$image);\r\n            },\r\n            save: function($modal, $form)\r\n            {\r\n                this._save($modal, $form);\r\n            }\r\n        }\r\n    },\r\n    onimage: {\r\n        observe: function()\r\n        {\r\n            this._observeImages();\r\n        },\r\n        resized: function()\r\n        {\r\n            this.justResized = true;\r\n        }\r\n    },\r\n    oncontextbar: function(e, contextbar)\r\n    {\r\n        if (this.justResized)\r\n        {\r\n            this.justResized = false;\r\n            return;\r\n        }\r\n\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $img = $R.dom(current).closest('img');\r\n\r\n        if ((!data.isFigcaption() && data.isComponentType('image')) || $img.length !== 0)\r\n        {\r\n            var node = ($img.length !== 0) ? $img.get() : data.getComponent();\r\n            var buttons = {\r\n                \"edit\": {\r\n                    title: this.lang.get('edit'),\r\n                    api: 'module.image.open'\r\n                },\r\n                \"remove\": {\r\n                    title: this.lang.get('delete'),\r\n                    api: 'module.image.remove',\r\n                    args: node\r\n                }\r\n            };\r\n\r\n            contextbar.set(e, node, buttons);\r\n        }\r\n    },\r\n\r\n    // public\r\n    open: function()\r\n    {\r\n        this.$image = this._getCurrent();\r\n        this.app.api('module.modal.build', this._getModalData());\r\n    },\r\n    insert: function(data)\r\n    {\r\n        this._insert(data);\r\n    },\r\n    remove: function(node)\r\n    {\r\n        this._remove(node);\r\n    },\r\n\r\n    // private\r\n    _getModalData: function()\r\n    {\r\n        var modalData;\r\n        if (this._isImage() && this.opts.imageEditable)\r\n        {\r\n            modalData = {\r\n                name: 'imageedit',\r\n                width: '800px',\r\n                title: this.lang.get('edit'),\r\n                handle: 'save',\r\n                commands: {\r\n                    save: { title: this.lang.get('save') },\r\n                    remove: { title: this.lang.get('delete'), type: 'danger' },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n        }\r\n        else\r\n        {\r\n            modalData = {\r\n                name: 'image',\r\n                title: this.lang.get('image')\r\n            };\r\n        }\r\n\r\n        return modalData;\r\n    },\r\n    _isImage: function()\r\n    {\r\n        return this.$image;\r\n    },\r\n    _getCurrent: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var $img = $R.dom(current).closest('img');\r\n\r\n        if ($img.length !== 0) {\r\n            return this.component.create('image', $img);\r\n        }\r\n        else {\r\n            return (data.isComponentType('image') && data.isComponentActive()) ? this.component.create('image', data.getComponent()) : false;\r\n        }\r\n    },\r\n    _insert: function(response, e)\r\n    {\r\n        this.app.api('module.modal.close');\r\n\r\n        if (Array.isArray(response))\r\n        {\r\n            var obj = {};\r\n            for (var i = 0; i < response.length; i++)\r\n            {\r\n                obj = $R.extend(obj, response[i]);\r\n            }\r\n\r\n            response = obj;\r\n        }\r\n        else if (typeof response === 'string')\r\n        {\r\n            response = { \"file\": { url: response }};\r\n        }\r\n\r\n        if (typeof response === 'object')\r\n        {\r\n\r\n            var multiple = 0;\r\n            for (var key in response)\r\n            {\r\n                if (typeof response[key] === 'object') multiple++;\r\n            }\r\n\r\n            if (multiple > 1)\r\n            {\r\n                this._insertMultiple(response, e);\r\n            }\r\n            else\r\n            {\r\n                this._insertSingle(response, e);\r\n            }\r\n        }\r\n    },\r\n    _insertSingle: function(response, e)\r\n    {\r\n        for (var key in response)\r\n        {\r\n            if (typeof response[key] === 'object')\r\n            {\r\n                var $img = this._createImageAndStore(response[key]);\r\n                var inserted = (e) ? this.insertion.insertToPoint(e, $img, false, false) : this.insertion.insertHtml($img, false);\r\n\r\n                this._removeSpaceBeforeFigure(inserted[0]);\r\n\r\n                // set is active\r\n                this.component.setActive(inserted[0]);\r\n                this.app.broadcast('image.uploaded', inserted[0], response);\r\n            }\r\n        }\r\n    },\r\n    _insertMultiple: function(response, e)\r\n    {\r\n        var z = 0;\r\n        var inserted = [];\r\n        var last;\r\n        for (var key in response)\r\n        {\r\n            if (typeof response[key] === 'object')\r\n            {\r\n                z++;\r\n\r\n                var $img = this._createImageAndStore(response[key]);\r\n\r\n                if (z === 1)\r\n                {\r\n                    inserted = (e) ? this.insertion.insertToPoint(e, $img, false, false) : this.insertion.insertHtml($img, false);\r\n                }\r\n                else\r\n                {\r\n                    var $inserted = $R.dom(inserted[0]);\r\n                    $inserted.after($img);\r\n                    inserted = [$img.get()];\r\n\r\n                    this.app.broadcast('image.inserted', $img);\r\n                }\r\n\r\n                last = inserted[0];\r\n\r\n                this._removeSpaceBeforeFigure(inserted[0]);\r\n                this.app.broadcast('image.uploaded', inserted[0], response);\r\n            }\r\n        }\r\n\r\n        // set last is active\r\n        this.component.setActive(last);\r\n    },\r\n    _createImageAndStore: function(item)\r\n    {\r\n        var $img = this.component.create('image');\r\n\r\n        $img.addClass('redactor-uploaded-figure');\r\n        $img.setData({\r\n            src: item.url,\r\n            id: (item.id) ? item.id : this.utils.getRandomId()\r\n        });\r\n\r\n        // add to storage\r\n        this.storage.add('image', $img.getElement());\r\n\r\n        return $img;\r\n    },\r\n    _removeSpaceBeforeFigure: function(img)\r\n    {\r\n        if (!img) return;\r\n\r\n        var prev = img.previousSibling;\r\n        var next = img.nextSibling;\r\n        var $prev = $R.dom(prev);\r\n        var $next = $R.dom(next);\r\n\r\n        if (this.opts.breakline) {\r\n            if (next && $next.attr('data-redactor-tag') === 'br') {\r\n                $next.find('br').first().remove();\r\n            }\r\n            if (prev && $prev.attr('data-redactor-tag') === 'br') {\r\n                $prev.find('br').last().remove();\r\n            }\r\n        }\r\n\r\n        if (prev)\r\n        {\r\n            this._removeInvisibleSpace(prev);\r\n            this._removeInvisibleSpace(prev.previousSibling);\r\n        }\r\n    },\r\n    _removeInvisibleSpace: function(el)\r\n    {\r\n        if (el && el.nodeType === 3 && this.utils.searchInvisibleChars(el.textContent) !== -1)\r\n        {\r\n            el.parentNode.removeChild(el);\r\n        }\r\n    },\r\n    _save: function($modal, $form)\r\n    {\r\n        var data = $form.getData();\r\n        var imageData = {\r\n            title: data.title\r\n        };\r\n\r\n        if (this.opts.imageLink) imageData.link = { url: data.url, target: data.target };\r\n        if (this.opts.imageCaption) imageData.caption = data.caption;\r\n        if (this.opts.imagePosition) imageData.align = data.align;\r\n\r\n        this.$image.setData(imageData);\r\n        if (this.resizer) this.resizer.rebuild();\r\n\r\n        this.app.broadcast('image.changed', this.$image);\r\n        this.app.api('module.modal.close');\r\n    },\r\n    _change: function(response, modal)\r\n    {\r\n        if (typeof response === 'string')\r\n        {\r\n            response = { \"file\": { url: response }};\r\n        }\r\n\r\n        if (typeof response === 'object')\r\n        {\r\n            var $img;\r\n            for (var key in response)\r\n            {\r\n                if (typeof response[key] === 'object')\r\n                {\r\n                    $img = $R.dom('<img>');\r\n                    $img.attr('src', response[key].url);\r\n\r\n                    this.$image.changeImage(response[key]);\r\n\r\n                    this.app.broadcast('image.changed', this.$image, response);\r\n                    this.app.broadcast('image.uploaded', this.$image, response);\r\n\r\n                    this.app.broadcast('hardsync');\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (modal !== false)\r\n            {\r\n                $img.on('load', function() { this.$previewBox.html($img); }.bind(this));\r\n            }\r\n        }\r\n    },\r\n    _uploadError: function(response)\r\n    {\r\n        this.app.broadcast('image.uploadError', response);\r\n    },\r\n    _remove: function(node)\r\n    {\r\n        this.app.api('module.modal.close');\r\n        this.component.remove(node);\r\n    },\r\n    _observeImages: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var self = this;\r\n        $editor.find('img').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n\r\n            $node.off('.drop-to-replace');\r\n            $node.on('dragover.drop-to-replace dragenter.drop-to-replace', function(e)\r\n            {\r\n                e.preventDefault();\r\n                return;\r\n            });\r\n\r\n            $node.on('drop.drop-to-replace', function(e)\r\n            {\r\n                if (!self.app.isDragComponentInside())\r\n                {\r\n                    return self._setReplaceUpload(e, $node);\r\n                }\r\n            });\r\n        });\r\n    },\r\n    _setFormData: function($modal, $form)\r\n    {\r\n        this._buildPreview($modal);\r\n        this._buildPreviewUpload();\r\n\r\n        var imageData = this.$image.getData();\r\n        var data = {\r\n            title: imageData.title\r\n        };\r\n\r\n        // caption\r\n        if (this.opts.imageCaption) data.caption = imageData.caption;\r\n        else $modal.find('.form-item-caption').hide();\r\n\r\n        // position\r\n        if (this.opts.imagePosition) data.align = imageData.align;\r\n        else $modal.find('.form-item-align').hide();\r\n\r\n        // link\r\n        if (this.opts.imageLink)\r\n        {\r\n            if (imageData.link)\r\n            {\r\n                data.url = imageData.link.url;\r\n                if (imageData.link.target) data.target = true;\r\n            }\r\n        }\r\n        else $modal.find('.form-item-link').hide();\r\n\r\n        $form.setData(data);\r\n    },\r\n    _setFormFocus: function($form)\r\n    {\r\n        $form.getField('title').focus();\r\n    },\r\n    _setReplaceUpload: function(e, $node)\r\n    {\r\n        e = e.originalEvent || e;\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (!this.opts.imageUpload) return;\r\n\r\n        this.$image = this.component.create('image', $node);\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            files: e.dataTransfer.files,\r\n            name: 'imagereplace',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.send', options);\r\n\r\n        return;\r\n    },\r\n    _setUpload: function($modal, $form)\r\n    {\r\n        if (!this.opts.imageUpload) {\r\n            var $body = $modal.getBody();\r\n            var $tab = $body.find('.redactor-modal-tab-upload');\r\n            $tab.remove();\r\n        }\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            element: $form.getField('file'),\r\n            name: 'image',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.build', options);\r\n    },\r\n    _buildPreview: function($modal)\r\n    {\r\n        this.$preview = $modal.find('#redactor-modal-image-preview');\r\n\r\n        var imageData = this.$image.getData();\r\n        var $previewImg = $R.dom('<img>');\r\n        $previewImg.attr('src', imageData.src);\r\n\r\n        this.$previewBox = $R.dom('<div>');\r\n        this.$previewBox.append($previewImg);\r\n\r\n        this.$preview.html('');\r\n        this.$preview.append(this.$previewBox);\r\n    },\r\n    _buildPreviewUpload: function()\r\n    {\r\n        if (!this.opts.imageUpload) return;\r\n\r\n        var $desc = $R.dom('<div class=\"desc\">');\r\n        $desc.html(this.lang.get('upload-change-label'));\r\n\r\n        this.$preview.append($desc);\r\n\r\n        var options = {\r\n            url: this.opts.imageUpload,\r\n            element: this.$previewBox,\r\n            name: 'imageedit',\r\n            data: this.opts.imageData,\r\n            paramName: this.opts.imageUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.build', options);\r\n    }\r\n});\r\n$R.add('class', 'image.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.selection = app.selection;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    setData: function(data)\r\n    {\r\n        for (var name in data)\r\n        {\r\n            this._set(name, data[name]);\r\n        }\r\n    },\r\n    getData: function()\r\n    {\r\n        var names = ['src', 'title', 'caption', 'align', 'link', 'id'];\r\n        var data = {};\r\n\r\n        for (var i = 0; i < names.length; i++)\r\n        {\r\n            data[names[i]] = this._get(names[i]);\r\n        }\r\n\r\n        return data;\r\n    },\r\n    getElement: function()\r\n    {\r\n        return this.$element;\r\n    },\r\n    changeImage: function(data)\r\n    {\r\n        this.$element.attr('src', data.url);\r\n    },\r\n\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        var $el = $R.dom(el);\r\n        var $figure = $el.closest('figure');\r\n\r\n        if (el === undefined)\r\n        {\r\n            this.$element = $R.dom('<img>');\r\n            this.parse('<figure>');\r\n            this.append(this.$element);\r\n        }\r\n        else if ($figure.length === 0)\r\n        {\r\n            this.parse('<figure>');\r\n            this.$element = $el;\r\n            this.$element.wrap(this);\r\n        }\r\n        else\r\n        {\r\n            this.parse($figure);\r\n            this.$element = this.find('img');\r\n        }\r\n\r\n        this._initWrapper();\r\n    },\r\n    _set: function(name, value)\r\n    {\r\n        this['_set_' + name](value);\r\n    },\r\n    _get: function(name)\r\n    {\r\n        return this['_get_' + name]();\r\n    },\r\n    _set_src: function(src)\r\n    {\r\n       this.$element.attr('src', src);\r\n    },\r\n    _set_id: function(id)\r\n    {\r\n        if (this.opts.imageObserve) {\r\n            this.$element.attr('data-image', id);\r\n        }\r\n    },\r\n    _set_title: function(title)\r\n    {\r\n        title = title.trim().replace(/(<([^>]+)>)/ig,\"\");\r\n\r\n        if (title === '')\r\n        {\r\n            this.$element.removeAttr('alt');\r\n        }\r\n        else\r\n        {\r\n            this.$element.attr('alt', title);\r\n        }\r\n\r\n    },\r\n    _set_caption: function(caption)\r\n    {\r\n        var $figcaption = this.find('figcaption');\r\n        if ($figcaption.length === 0)\r\n        {\r\n            $figcaption = $R.dom('<figcaption>');\r\n            $figcaption.attr('contenteditable', 'true');\r\n\r\n            this.append($figcaption);\r\n        }\r\n\r\n        if (caption === '') $figcaption.remove();\r\n        else $figcaption.html(caption);\r\n\r\n        return $figcaption;\r\n    },\r\n    _set_align: function(align)\r\n    {\r\n        var imageFloat = '';\r\n        var imageMargin = '';\r\n        var textAlign = '';\r\n        var $el = this;\r\n        var $img = this.find('img');\r\n        var $figcaption = this.find('figcaption');\r\n\r\n        if (typeof this.opts.imagePosition === 'object')\r\n        {\r\n            var positions = this.opts.imagePosition;\r\n            for (var key in positions)\r\n            {\r\n                $el.removeClass(positions[key]);\r\n            }\r\n\r\n            var alignClass = (typeof positions[align] !== 'undefined') ? positions[align] : false;\r\n            if (alignClass)\r\n            {\r\n                $el.addClass(alignClass);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var width = $img.width();\r\n\r\n            switch (align)\r\n            {\r\n\r\n                case 'left':\r\n                    imageFloat = 'left';\r\n                    imageMargin = this.opts.imageFloatMargin;\r\n                break;\r\n                case 'right':\r\n                    imageFloat = 'right';\r\n                    imageMargin = this.opts.imageFloatMargin;\r\n                break;\r\n                case 'center':\r\n                    textAlign = 'center';\r\n                    imageMargin = 'auto';\r\n                break;\r\n            }\r\n\r\n            $el.css({ 'float': imageFloat, width: width + 'px', maxWidth: width + 'px', 'margin-left': imageMargin, 'margin-right': imageMargin, 'text-align': textAlign });\r\n            $el.attr('rel', $el.attr('style'));\r\n\r\n            if (align === 'none') {\r\n                $el.css('max-width', '');\r\n                $el.css('width', '');\r\n            }\r\n\r\n            if (align === 'center')\r\n            {\r\n                $el.css('max-width', '');\r\n                $el.css('width', '');\r\n                $figcaption.css('text-align', 'center');\r\n            }\r\n            else\r\n            {\r\n                $figcaption.css('text-align', '');\r\n            }\r\n        }\r\n    },\r\n    _set_link: function(data)\r\n    {\r\n        var $link = this._findLink();\r\n        if (data.url === '')\r\n        {\r\n            if ($link) $link.unwrap();\r\n\r\n            return;\r\n        }\r\n\r\n        if (!$link)\r\n        {\r\n            $link = $R.dom('<a>');\r\n            this.$element.wrap($link);\r\n        }\r\n\r\n        $link.attr('href', data.url);\r\n\r\n        if (data.target) $link.attr('target', (data.target === true) ? '_blank' : data.target);\r\n        else $link.removeAttr('target');\r\n\r\n        return $link;\r\n    },\r\n    _get_src: function()\r\n    {\r\n        return this.$element.attr('src');\r\n    },\r\n    _get_id: function()\r\n    {\r\n        return this.$element.attr('data-image');\r\n    },\r\n    _get_title: function()\r\n    {\r\n        var alt = this.$element.attr('alt');\r\n\r\n        return (alt) ? alt : '';\r\n    },\r\n    _get_caption: function()\r\n    {\r\n        var $figcaption = this.find('figcaption');\r\n\r\n        if ($figcaption.length === 0)\r\n        {\r\n            return '';\r\n        }\r\n        else\r\n        {\r\n            return $figcaption.html();\r\n        }\r\n    },\r\n    _get_align: function()\r\n    {\r\n        var align = '';\r\n        if (typeof this.opts.imagePosition === 'object')\r\n        {\r\n            align = 'none';\r\n            var positions = this.opts.imagePosition;\r\n            for (var key in positions)\r\n            {\r\n                if (this.hasClass(positions[key]))\r\n                {\r\n                    align = key;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            align = (this.css('text-align') === 'center') ? 'center' : this.css('float');\r\n        }\r\n\r\n        return align;\r\n    },\r\n    _get_link: function()\r\n    {\r\n        var $link = this._findLink();\r\n        if ($link)\r\n        {\r\n            var target = ($link.attr('target')) ? true : false;\r\n\r\n            return {\r\n                url: $link.attr('href'),\r\n                target: target\r\n            };\r\n        }\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'image',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    },\r\n    _findLink: function()\r\n    {\r\n        var $link = this.find('a').filter(function(node)\r\n        {\r\n            return ($R.dom(node).closest('figcaption').length === 0);\r\n        });\r\n\r\n        if ($link.length !== 0)\r\n        {\r\n            return $link;\r\n        }\r\n\r\n        return false;\r\n    }\r\n});\r\n$R.add('class', 'image.resize', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.$doc = app.$doc;\r\n        this.$win = app.$win;\r\n        this.$body = app.$body;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.inspector = app.inspector;\r\n\r\n        // init\r\n        this.$target = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$body;\r\n        this._init();\r\n    },\r\n    // public\r\n    rebuild: function()\r\n    {\r\n        this._setResizerPosition();\r\n    },\r\n    hide: function()\r\n    {\r\n        this.$target.find('#redactor-image-resizer').remove();\r\n    },\r\n    stop: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.off('.redactor.image-resize');\r\n\r\n        this.$doc.off('.redactor.image-resize');\r\n        this.$win.off('resize.redactor.image-resize');\r\n        this.hide();\r\n    },\r\n\r\n    // private\r\n    _init: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        $editor.on('click.redactor.image-resize', this._build.bind(this));\r\n\r\n        this.$win.on('resize.redactor.image-resize', this._setResizerPosition.bind(this));\r\n    },\r\n    _build: function(e)\r\n    {\r\n        this.$target.find('#redactor-image-resizer').remove();\r\n\r\n        if (this.app.isReadOnly()) return;\r\n\r\n        var data = this.inspector.parse(e.target);\r\n        var $editor = this.editor.getElement();\r\n\r\n        if (data.isComponentType('image'))\r\n        {\r\n            this.$resizableBox = $editor;\r\n            this.$resizableImage = $R.dom(data.getImageElement());\r\n\r\n            this.$resizer = $R.dom('<span>');\r\n            this.$resizer.attr('id', 'redactor-image-resizer');\r\n\r\n            this.$target.append(this.$resizer);\r\n\r\n            this._setResizerPosition();\r\n            this.$resizer.on('mousedown touchstart', this._set.bind(this));\r\n        }\r\n    },\r\n    _setResizerPosition: function()\r\n    {\r\n        if (this.$resizer)\r\n        {\r\n            var isTarget = this.toolbar.isTarget();\r\n            var targetOffset = this.$target.offset();\r\n            var offsetFix = 7;\r\n            var topOffset = (isTarget) ? (offsetFix - targetOffset.top + this.$target.scrollTop()) : offsetFix;\r\n            var leftOffset = (isTarget) ? (offsetFix - targetOffset.left) : offsetFix;\r\n            var pos = this.$resizableImage.offset();\r\n            var width = this.$resizableImage.width();\r\n            var height = this.$resizableImage.height();\r\n            var resizerWidth =  this.$resizer.width();\r\n            var resizerHeight =  this.$resizer.height();\r\n\r\n            this.$resizer.css({ top: Math.round(pos.top + height - resizerHeight + topOffset) + 'px', left: Math.round(pos.left + width - resizerWidth + leftOffset) + 'px' });\r\n        }\r\n    },\r\n    _set: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        this.resizeHandle = {\r\n            x : e.pageX,\r\n            y : e.pageY,\r\n            el : this.$resizableImage,\r\n            $figure: this.$resizableImage.closest('figure'),\r\n            ratio: this.$resizableImage.width() / this.$resizableImage.height(),\r\n            h: this.$resizableImage.height()\r\n        };\r\n\r\n        e = e.originalEvent || e;\r\n\r\n        if (e.targetTouches)\r\n        {\r\n             this.resizeHandle.x = e.targetTouches[0].pageX;\r\n             this.resizeHandle.y = e.targetTouches[0].pageY;\r\n        }\r\n\r\n        this.app.broadcast('contextbar.close');\r\n        this.app.broadcast('image.resize', this.$resizableImage);\r\n        this._start();\r\n    },\r\n    _start: function()\r\n    {\r\n        this.$doc.on('mousemove.redactor.image-resize touchmove.redactor.image-resize', this._move.bind(this));\r\n        this.$doc.on('mouseup.redactor.image-resize touchend.redactor.image-resize', this._stop.bind(this));\r\n    },\r\n    _stop: function()\r\n    {\r\n        this.$doc.off('.redactor.image-resize');\r\n        this.app.broadcast('image.resized', this.$resizableImage);\r\n    },\r\n    _move: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        e = e.originalEvent || e;\r\n\r\n        var height = this.resizeHandle.h;\r\n\r\n        if (e.targetTouches) height += (e.targetTouches[0].pageY -  this.resizeHandle.y);\r\n        else height += (e.pageY -  this.resizeHandle.y);\r\n\r\n        var width = height * this.resizeHandle.ratio;\r\n\r\n        width = Math.round(width);\r\n        height = Math.round(height);\r\n\r\n        if (height < 20 || width < 100) return;\r\n        if (this._getResizableBoxWidth() <= width) return;\r\n\r\n        if (this.resizeHandle.$figure.length !== 0 && this.resizeHandle.$figure.css('max-width') !== '') {\r\n            this.resizeHandle.$figure.css({ width: width + 'px' , 'max-width': width + 'px' });\r\n        }\r\n\r\n        this.resizeHandle.el.attr({ width: width, height: height });\r\n        this.resizeHandle.el.width(width);\r\n        this.resizeHandle.el.css('max-width', width + 'px');\r\n        this.resizeHandle.el.height(height);\r\n        this._setResizerPosition();\r\n    },\r\n    _getResizableBoxWidth: function()\r\n    {\r\n        var width = this.$resizableBox.width();\r\n        return width - parseInt(this.$resizableBox.css('padding-left')) - parseInt(this.$resizableBox.css('padding-right'));\r\n    }\r\n});\r\n$R.add('module', 'file', {\r\n    modals: {\r\n        'file':\r\n            '<div class=\"redactor-modal-tab\" data-title=\"## upload ##\"><form action=\"\"> \\\r\n                <div class=\"form-item form-item-title\"> \\\r\n                    <label for=\"modal-file-title\"> ## filename ## <span class=\"desc\">(## optional ##)</span></label> \\\r\n                    <input type=\"text\" id=\"modal-file-title\" name=\"title\" /> \\\r\n                </div> \\\r\n                <input type=\"file\" name=\"file\"> \\\r\n            </form></div>'\r\n    },\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.lang = app.lang;\r\n        this.caret = app.caret;\r\n        this.utils = app.utils;\r\n        this.storage = app.storage;\r\n        this.component = app.component;\r\n        this.inspector = app.inspector;\r\n        this.insertion = app.insertion;\r\n        this.selection = app.selection;\r\n    },\r\n    // messages\r\n    onstarted: function()\r\n    {\r\n        // storage observe\r\n        this.storage.observeFiles();\r\n    },\r\n    ondropfile: function(e, files, clipboard)\r\n    {\r\n        if (!this.opts.fileUpload) return;\r\n\r\n        var options = {\r\n            url: this.opts.fileUpload,\r\n            event: (clipboard) ? false : e,\r\n            files: files,\r\n            name: 'filedrop',\r\n            data: this.opts.fileData\r\n        };\r\n\r\n        this.app.api('module.upload.send', options);\r\n    },\r\n    onmodal: {\r\n        file: {\r\n            open: function($modal, $form)\r\n            {\r\n                this._setFormData($modal, $form);\r\n                this._setUpload($form);\r\n            },\r\n            opened: function($modal, $form)\r\n            {\r\n                this._setFormFocus($form);\r\n\r\n                this.$form = $form;\r\n            }\r\n        }\r\n    },\r\n    onupload: {\r\n        file: {\r\n            complete: function(response)\r\n            {\r\n                this._insert(response);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        },\r\n        filedrop: {\r\n            complete: function(response, e)\r\n            {\r\n                this._insert(response, e);\r\n            },\r\n            error: function(response)\r\n            {\r\n                this._uploadError(response);\r\n            }\r\n        }\r\n    },\r\n\r\n    // public\r\n    open: function()\r\n    {\r\n        this._open();\r\n    },\r\n    insert: function(data)\r\n    {\r\n        this._insert(data);\r\n    },\r\n    remove: function(node)\r\n    {\r\n        this._remove(node);\r\n    },\r\n\r\n    // private\r\n    _open: function()\r\n    {\r\n        this.app.api('module.modal.build', this._getModalData());\r\n    },\r\n    _getModalData: function()\r\n    {\r\n        var modalData = {\r\n            name: 'file',\r\n            title: this.lang.get('file')\r\n        };\r\n\r\n        return modalData;\r\n    },\r\n    _insert: function(response, e)\r\n    {\r\n        this.app.api('module.modal.close');\r\n        if (typeof response !== 'object') return;\r\n\r\n        if (Array.isArray(response))\r\n        {\r\n            var obj = {};\r\n            for (var i = 0; i < response.length; i++)\r\n            {\r\n                obj = $R.extend(obj, response[i]);\r\n            }\r\n\r\n            response = obj;\r\n        }\r\n\r\n        var multiple = (Object.keys(response).length  > 1);\r\n\r\n        if (multiple)\r\n        {\r\n            this._insertMultiple(response, e);\r\n        }\r\n        else\r\n        {\r\n            this._insertSingle(response, e);\r\n        }\r\n\r\n        this.$form = false;\r\n    },\r\n    _insertSingle: function(response, e)\r\n    {\r\n        var inserted = [];\r\n        for (var key in response)\r\n        {\r\n            var $file = this._createFileAndStore(response[key]);\r\n\r\n            if (this.opts.fileAttachment)\r\n            {\r\n                inserted = this._insertAsAttachment($file);\r\n            }\r\n            else\r\n            {\r\n                inserted = (e) ? this.insertion.insertToPoint(e, $file) : this.insertion.insertRaw($file);\r\n            }\r\n\r\n            this.app.broadcast('file.uploaded', inserted[0], response);\r\n        }\r\n    },\r\n    _insertMultiple: function(response, e)\r\n    {\r\n        var z = 0;\r\n        var inserted = [];\r\n        var $last;\r\n        for (var key in response)\r\n        {\r\n            z++;\r\n\r\n            var $file = this._createFileAndStore(response[key]);\r\n\r\n            if (this.opts.fileAttachment)\r\n            {\r\n                inserted = this._insertAsAttachment($file, response);\r\n            }\r\n            else\r\n            {\r\n                if (z === 1)\r\n                {\r\n                    inserted = (e) ? this.insertion.insertToPoint(e, $file) : this.insertion.insertRaw($file);\r\n                }\r\n                else\r\n                {\r\n                    var $inserted = $R.dom(inserted[0]);\r\n                    $inserted.after($file).after(' ');\r\n                    inserted = [$file.get()];\r\n\r\n                    this.app.broadcast('file.inserted', $file);\r\n                }\r\n            }\r\n\r\n            $last = $file;\r\n            this.app.broadcast('file.uploaded', inserted[0], response);\r\n        }\r\n\r\n        // set caret after last\r\n        if (!this.opts.fileAttachment)\r\n        {\r\n            this.caret.setAfter($last);\r\n        }\r\n    },\r\n    _insertAsAttachment: function($file, response)\r\n    {\r\n        var $box = $R.dom(this.opts.fileAttachment);\r\n        var $wrapper = $file.wrapAttachment();\r\n        $box.append($wrapper);\r\n\r\n        var inserted = [$wrapper.get()];\r\n        this.app.broadcast('file.appended', inserted[0], response);\r\n\r\n        return inserted;\r\n    },\r\n    _createFileAndStore: function(item)\r\n    {\r\n        var modalFormData = (this.$form) ? this.$form.getData() : false;\r\n        var name = (item.name) ? item.name : item.url;\r\n        var title = (!this.opts.fileAttachment && modalFormData && modalFormData.title !== '') ? modalFormData.title : this._truncateUrl(name);\r\n\r\n        var $file = this.component.create('file');\r\n        $file.attr('href', item.url);\r\n        $file.attr('data-file', (item.id) ? item.id : this.utils.getRandomId());\r\n        $file.attr('data-name', item.name);\r\n        $file.html(title);\r\n\r\n        // add to storage\r\n        this.storage.add('file', $file);\r\n\r\n        return $file;\r\n    },\r\n    _remove: function(node)\r\n    {\r\n        this.selection.save();\r\n\r\n        var $file = this.component.create('file', node);\r\n        var stop = this.app.broadcast('file.delete', $file);\r\n        if (stop !== false)\r\n        {\r\n            $file.unwrap();\r\n\r\n            this.selection.restore();\r\n\r\n            // callback\r\n            this.app.broadcast('file.deleted', $file);\r\n        }\r\n        else\r\n        {\r\n            this.selection.restore();\r\n        }\r\n    },\r\n    _truncateUrl: function(url)\r\n    {\r\n        return (url.search(/^http/) !== -1 && url.length > 20) ? url.substring(0, 20) + '...' : url;\r\n    },\r\n    _setUpload: function($form)\r\n    {\r\n        var options = {\r\n            url: this.opts.fileUpload,\r\n            element: $form.getField('file'),\r\n            name: 'file',\r\n            data: this.opts.fileData,\r\n            paramName: this.opts.fileUploadParam\r\n        };\r\n\r\n        this.app.api('module.upload.build', options);\r\n    },\r\n    _setFormData: function($modal, $form)\r\n    {\r\n        if (this.opts.fileAttachment)\r\n        {\r\n            $modal.find('.form-item-title').hide();\r\n        }\r\n        else\r\n        {\r\n            $form.setData({ title: this.selection.getText() });\r\n        }\r\n    },\r\n    _setFormFocus: function($form)\r\n    {\r\n        $form.getField('title').focus();\r\n    },\r\n    _uploadError: function(response)\r\n    {\r\n        this.app.broadcast('file.uploadError', response);\r\n    }\r\n});\r\n$R.add('class', 'file.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    wrapAttachment: function()\r\n    {\r\n        this.$wrapper = $R.dom('<span class=\"redactor-file-item\">');\r\n        this.$remover = $R.dom('<span class=\"redactor-file-remover\">');\r\n        this.$remover.html('&times;');\r\n        this.$remover.on('click', this.removeAttachment.bind(this));\r\n\r\n        this.$wrapper.append(this);\r\n        this.$wrapper.append(this.$remover);\r\n\r\n        return this.$wrapper;\r\n    },\r\n    removeAttachment: function(e)\r\n    {\r\n        e.preventDefault();\r\n\r\n        var stop = this.app.broadcast('file.delete', this, this.$wrapper);\r\n        if (stop !== false)\r\n        {\r\n            this.$wrapper.remove();\r\n            this.app.broadcast('file.deleted', this);\r\n            this.app.broadcast('file.removeAttachment', this);\r\n        }\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (el === undefined)\r\n        {\r\n            this.parse('<a>');\r\n        }\r\n        else\r\n        {\r\n            var $a = $R.dom(el).closest('a');\r\n            this.parse($a);\r\n        }\r\n    }\r\n});\r\n$R.add('module', 'buffer', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.opts = app.opts;\r\n        this.editor = app.editor;\r\n        this.offset = app.offset;\r\n        this.keycodes = app.keycodes;\r\n        this.selection = app.selection;\r\n\r\n        // local\r\n        this.state = false;\r\n        this.passed = false;\r\n        this.keyPressed = false;\r\n        this.undoStorage = [];\r\n        this.redoStorage = [];\r\n    },\r\n    // messages\r\n    onkeydown: function(e)\r\n    {\r\n        this._listen(e);\r\n    },\r\n    onsyncing: function()\r\n    {\r\n        if (!this.keyPressed)\r\n        {\r\n            this.trigger();\r\n        }\r\n\r\n        this.keyPressed = false;\r\n    },\r\n    onbuffer: {\r\n        trigger: function()\r\n        {\r\n            this.trigger();\r\n        }\r\n    },\r\n    onstate: function(e, html, offset)\r\n    {\r\n        if ((e && (e.ctrlKey || e.metaKey)) || (e && (this._isUndo(e) || this._isRedo(e))))\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.passed = false;\r\n        this._saveState(html, offset);\r\n\r\n        if (e === false) {\r\n            this._setUndo();\r\n        }\r\n    },\r\n    onenable: function()\r\n    {\r\n        this.clear();\r\n    },\r\n\r\n    // public\r\n    clear: function()\r\n    {\r\n        this.state = false;\r\n        this.undoStorage = [];\r\n        this.redoStorage = [];\r\n    },\r\n    undo: function()\r\n    {\r\n        this._getUndo();\r\n    },\r\n    redo: function()\r\n    {\r\n        this._getRedo();\r\n    },\r\n    trigger: function()\r\n    {\r\n        if (this.state && this.passed === false) this._setUndo();\r\n    },\r\n\r\n    // private\r\n    _saveState: function(html, offset)\r\n    {\r\n\r\n        var $editor = this.editor.getElement();\r\n\r\n        this.state = {\r\n            html: html || $editor.html(),\r\n            offset: offset || this.offset.get()\r\n        };\r\n    },\r\n    _listen: function(e)\r\n    {\r\n        var key = e.which;\r\n        var ctrl = e.ctrlKey || e.metaKey;\r\n        var cmd = ctrl || e.shiftKey || e.altKey;\r\n        var keys = [this.keycodes.SPACE, this.keycodes.ENTER, this.keycodes.BACKSPACE, this.keycodes.DELETE, this.keycodes.TAB,\r\n                    this.keycodes.LEFT, this.keycodes.RIGHT, this.keycodes.UP, this.keycodes.DOWN];\r\n        // undo\r\n        if (this._isUndo(e)) // z key\r\n        {\r\n            e.preventDefault();\r\n            this.undo();\r\n            return;\r\n        }\r\n        // redo\r\n        else if (this._isRedo(e))\r\n        {\r\n            e.preventDefault();\r\n            this.redo();\r\n            return;\r\n        }\r\n        // spec keys\r\n        else if (!ctrl && keys.indexOf(key) !== -1)\r\n        {\r\n            cmd = true;\r\n            this.trigger();\r\n        }\r\n        // cut & copy\r\n        else if (ctrl && (key === 88 || key === 67))\r\n        {\r\n            cmd = true;\r\n            this.trigger();\r\n        }\r\n\r\n\r\n        // empty buffer\r\n        if (!cmd && !this._hasUndo())\r\n        {\r\n            this.trigger();\r\n        }\r\n\r\n        this.keyPressed = true;\r\n    },\r\n    _isUndo: function(e)\r\n    {\r\n        var key = e.which;\r\n        var ctrl = e.ctrlKey || e.metaKey;\r\n\r\n        return (ctrl && key === 90 && !e.shiftKey && !e.altKey);\r\n    },\r\n    _isRedo: function(e)\r\n    {\r\n        var key = e.which;\r\n        var ctrl = e.ctrlKey || e.metaKey;\r\n\r\n        return (ctrl && ((key === 90 && e.shiftKey) || (key === 89 && !e.shiftKey)) && !e.altKey);\r\n    },\r\n    _setUndo: function()\r\n    {\r\n        var last = this.undoStorage[this.undoStorage.length-1];\r\n        if (typeof last === 'undefined' || last[0] !== this.state.html)\r\n        {\r\n            this.undoStorage.push([this.state.html, this.state.offset]);\r\n            this._removeOverStorage();\r\n        }\r\n    },\r\n    _setRedo: function()\r\n    {\r\n        var $editor = this.editor.getElement();\r\n        var offset = this.offset.get();\r\n        var html = $editor.html();\r\n\r\n        this.redoStorage.push([html, offset]);\r\n        this.redoStorage = this.redoStorage.slice(0, this.opts.bufferLimit);\r\n    },\r\n    _getUndo: function()\r\n    {\r\n        if (!this._hasUndo()) return;\r\n\r\n        this.passed = true;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var buffer = this.undoStorage.pop();\r\n\r\n        this._setRedo();\r\n\r\n        $editor.html(buffer[0]);\r\n        this.offset.set(buffer[1]);\r\n        this._saveState(buffer[0], buffer[1]);\r\n        this.selection.restore();\r\n\r\n        this.app.broadcast('undo', buffer[0], buffer[1]);\r\n\r\n    },\r\n    _getRedo: function()\r\n    {\r\n        if (!this._hasRedo()) return;\r\n\r\n        this.passed = true;\r\n\r\n        var $editor = this.editor.getElement();\r\n        var buffer = this.redoStorage.pop();\r\n\r\n        this._setUndo();\r\n        $editor.html(buffer[0]);\r\n        this.offset.set(buffer[1]);\r\n        this._saveState(buffer[0], buffer[1]);\r\n\r\n        this.app.broadcast('redo', buffer[0], buffer[1]);\r\n    },\r\n    _removeOverStorage: function()\r\n    {\r\n        if (this.undoStorage.length > this.opts.bufferLimit)\r\n        {\r\n            this.undoStorage = this.undoStorage.slice(0, (this.undoStorage.length - this.opts.bufferLimit));\r\n        }\r\n    },\r\n    _hasUndo: function()\r\n    {\r\n        return (this.undoStorage.length !== 0);\r\n    },\r\n    _hasRedo: function()\r\n    {\r\n        return (this.redoStorage.length !== 0);\r\n    }\r\n});\r\n$R.add('module', 'list', {\r\n    init: function(app)\r\n    {\r\n        this.app = app;\r\n        this.uuid = app.uuid;\r\n        this.opts = app.opts;\r\n        this.utils = app.utils;\r\n        this.block = app.block;\r\n        this.editor = app.editor;\r\n        this.toolbar = app.toolbar;\r\n        this.inspector = app.inspector;\r\n        this.selection = app.selection;\r\n    },\r\n    // messages\r\n    onbutton: {\r\n        list: {\r\n            observe: function(button)\r\n            {\r\n                this._observeButton(button);\r\n            }\r\n        }\r\n    },\r\n    ondropdown: {\r\n        list: {\r\n            observe: function(dropdown)\r\n            {\r\n                this._observeDropdown(dropdown);\r\n            }\r\n        }\r\n    },\r\n\r\n    // public\r\n    toggle: function(type)\r\n    {\r\n        var nodes = this._getBlocks();\r\n        var block = this.selection.getBlock();\r\n        var $list = $R.dom(block).parents('ul, ol',  this.editor.getElement()).last();\r\n        if (nodes.length === 0 && $list.length !== 0)\r\n        {\r\n            nodes = [$list.get()];\r\n        }\r\n\r\n        if (block && (block.tagName === 'TD' || block.tagName === 'TH'))\r\n        {\r\n            nodes = this.block.format('div');\r\n        }\r\n\r\n        this.selection.saveMarkers();\r\n\r\n        nodes = (nodes.length !== 0 && this._isUnformat(type, nodes)) ? this._unformat(type, nodes) : this._format(type, nodes);\r\n\r\n        this.selection.restoreMarkers();\r\n\r\n        return nodes;\r\n    },\r\n    indent: function()\r\n    {\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var item = (data.isList()) ? data.getListItem() : false;\r\n        var $item = $R.dom(item);\r\n        var $prev = $item.prevElement();\r\n        var prev = $prev.get();\r\n        var isIndent = (isCollapsed && item && prev && prev.tagName === 'LI');\r\n\r\n        if (isIndent)\r\n        {\r\n            this.selection.saveMarkers();\r\n\r\n            $prev = $R.dom(prev);\r\n            var $prevChild = $prev.children('ul, ol');\r\n            var $list = $item.closest('ul, ol');\r\n\r\n            if ($prevChild.length !== 0)\r\n            {\r\n                $prevChild.append($item);\r\n            }\r\n            else\r\n            {\r\n                var listTag = $list.get().tagName.toLowerCase();\r\n                var $newList = $R.dom('<' + listTag + '>');\r\n\r\n                $newList.append($item);\r\n                $prev.append($newList);\r\n            }\r\n\r\n            this.selection.restoreMarkers();\r\n\r\n            // empty list item\r\n            if (this.utils.isEmptyHtml($item.html())) {\r\n                this.app.caret.setStart($item);\r\n            }\r\n        }\r\n    },\r\n    outdent: function()\r\n    {\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var item = (data.isList()) ? data.getListItem() : false;\r\n        var $item = $R.dom(item);\r\n\r\n        if (isCollapsed && item)\r\n        {\r\n\r\n            var $listItem = $item.parent();\r\n            var $liItem = $listItem.closest('li', '.redactor-in-' + this.uuid);\r\n            var $prev = $item.prevElement();\r\n            var $next = $item.nextElement();\r\n            var prev = $prev.get();\r\n            var next = $next.get();\r\n            var nextItems, nextList, $newList, $nextList;\r\n            var isTop = (prev === false);\r\n            var isMiddle = (prev !== false && next !== false);\r\n            var isBottom = (!isTop && next === false);\r\n\r\n            this.selection.saveMarkers();\r\n\r\n            // out\r\n            if ($liItem.length !== 0)\r\n            {\r\n                if (isMiddle)\r\n                {\r\n                    nextItems = this._getAllNext($item.get());\r\n                    $newList = $R.dom('<' + $listItem.get().tagName.toLowerCase() + '>');\r\n\r\n                    for (var i = 0; i < nextItems.length; i++)\r\n                    {\r\n                        $newList.append(nextItems[i]);\r\n                    }\r\n\r\n                    $liItem.after($item);\r\n                    $item.append($newList);\r\n                }\r\n                else\r\n                {\r\n                    $liItem.after($item);\r\n\r\n                    if ($listItem.children().length === 0)\r\n                    {\r\n                        $listItem.remove();\r\n                    }\r\n                    else\r\n                    {\r\n                        if (isTop) $item.append($listItem);\r\n                    }\r\n                }\r\n            }\r\n            // unformat\r\n            else\r\n            {\r\n                var $container =  this._createUnformatContainer($item);\r\n                var $childList = $container.find('ul, ol').first();\r\n\r\n                if (isTop) $listItem.before($container);\r\n                else if (isBottom) $listItem.after($container);\r\n                else if (isMiddle)\r\n                {\r\n                    $newList = $R.dom('<' + $listItem.get().tagName.toLowerCase() + '>');\r\n                    nextItems = this._getAllNext($item.get());\r\n\r\n                    for (var i = 0; i < nextItems.length; i++)\r\n                    {\r\n                        $newList.append(nextItems[i]);\r\n                    }\r\n\r\n                    $listItem.after($container);\r\n                    $container.after($newList);\r\n                }\r\n\r\n                if ($childList.length !== 0)\r\n                {\r\n                    $nextList = $container.nextElement();\r\n                    nextList = $nextList.get();\r\n                    if (nextList && nextList.tagName === $listItem.get().tagName)\r\n                    {\r\n                        $R.dom(nextList).prepend($childList);\r\n                        $childList.unwrap();\r\n                    }\r\n                    else\r\n                    {\r\n                        $container.after($childList);\r\n                    }\r\n                }\r\n\r\n                $item.remove();\r\n            }\r\n\r\n            this.selection.restoreMarkers();\r\n        }\r\n    },\r\n\r\n    // private\r\n    _getAllNext: function(next)\r\n    {\r\n        var nodes = [];\r\n\r\n        while (next)\r\n        {\r\n            var $next = $R.dom(next).nextElement();\r\n            next = $next.get();\r\n\r\n            if (next) nodes.push(next);\r\n            else return nodes;\r\n        }\r\n\r\n        return nodes;\r\n    },\r\n    _isUnformat: function(type, nodes)\r\n    {\r\n        var countLists = 0;\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            if (nodes[i].nodeType !== 3)\r\n            {\r\n                var tag = nodes[i].tagName.toLowerCase();\r\n                if (tag === type || tag === 'figure')\r\n                {\r\n                    countLists++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (countLists === nodes.length);\r\n    },\r\n    _format: function(type, nodes)\r\n    {\r\n        var tags = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol'];\r\n        var blocks = this._uniteBlocks(nodes, tags);\r\n        var lists = [];\r\n\r\n        for (var key in blocks)\r\n        {\r\n            var items = blocks[key];\r\n            var $list = this._createList(type, blocks[key]);\r\n\r\n            for (var i = 0; i < items.length; i++)\r\n            {\r\n                var $item;\r\n\r\n                // lists\r\n                if (items[i].nodeType !== 3 && (items[i].tagName === 'UL' || items[i].tagName === 'OL'))\r\n                {\r\n                    var $oldList = $R.dom(items[i]);\r\n\r\n                    $item = $oldList.contents();\r\n                    $list.append($item);\r\n\r\n                    // old is empty\r\n                    if (this.utils.isEmpty($oldList)) $oldList.remove();\r\n                }\r\n                // other blocks or texts\r\n                else\r\n                {\r\n                    $item = this._createListItem(items[i]);\r\n                    var last = $item.get().lastChild;\r\n                    if (last && last.tagName === 'BR') {\r\n                        $R.dom(last).remove();\r\n                    }\r\n\r\n                    this.utils.normalizeTextNodes($item);\r\n                    $list.append($item);\r\n                }\r\n            }\r\n\r\n            lists.push($list.get());\r\n        }\r\n\r\n        return lists;\r\n    },\r\n    _uniteBlocks: function(nodes, tags)\r\n    {\r\n        var z = 0;\r\n        var blocks = { 0: [] };\r\n        var lastcell = false;\r\n        for (var i = 0; i < nodes.length; i++)\r\n        {\r\n            var $node = $R.dom(nodes[i]);\r\n            var $cell = $node.closest('th, td');\r\n\r\n            if ($cell.length !== 0)\r\n            {\r\n                if ($cell.get() !== lastcell)\r\n                {\r\n                    // create block\r\n                    z++;\r\n                    blocks[z] = [];\r\n                }\r\n\r\n                if (this._isUniteBlock(nodes[i], tags))\r\n                {\r\n                    blocks[z].push(nodes[i]);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (this._isUniteBlock(nodes[i], tags))\r\n                {\r\n                    blocks[z].push(nodes[i]);\r\n                }\r\n                else\r\n                {\r\n                    // create block\r\n                    z++;\r\n                    blocks[z] = [];\r\n                }\r\n            }\r\n\r\n            lastcell = $cell.get();\r\n        }\r\n\r\n        return blocks;\r\n    },\r\n    _isUniteBlock: function(node, tags)\r\n    {\r\n        return (node.nodeType === 3 || tags.indexOf(node.tagName.toLowerCase()) !== -1);\r\n    },\r\n    _createList: function(type, blocks)\r\n    {\r\n        var last = blocks[blocks.length-1];\r\n        var $last = $R.dom(last);\r\n        var $list = $R.dom('<' + type + '>');\r\n        $last.after($list);\r\n\r\n        return $list;\r\n    },\r\n    _createListItem: function(item)\r\n    {\r\n        var $item = $R.dom('<li>');\r\n        if (item.nodeType === 3)\r\n        {\r\n            $item.append(item);\r\n        }\r\n        else\r\n        {\r\n            var $el = $R.dom(item);\r\n            $item.append($el.contents());\r\n            $el.remove();\r\n        }\r\n\r\n        return $item;\r\n    },\r\n    _unformat: function(type, nodes)\r\n    {\r\n        if (nodes.length === 1)\r\n        {\r\n            // one list\r\n            var $list = $R.dom(nodes[0]);\r\n            var $items = $list.find('li');\r\n\r\n            var selectedItems = this.selection.getNodes({ tags: ['li'] });\r\n            var block = this.selection.getBlock();\r\n            var $li = $R.dom(block).closest('li');\r\n            if (selectedItems.length === 0 && $li.length !== 0)\r\n            {\r\n                selectedItems = [$li.get()];\r\n            }\r\n\r\n\r\n            // 1) entire\r\n            if (selectedItems.length === $items.length)\r\n            {\r\n                return this._unformatEntire(nodes[0]);\r\n            }\r\n\r\n            var pos = this._getItemsPosition($items, selectedItems);\r\n\r\n            // 2) top\r\n            if (pos === 'Top')\r\n            {\r\n                return this._unformatAtSide('before', selectedItems, $list);\r\n            }\r\n\r\n            // 3) bottom\r\n            else if (pos === 'Bottom')\r\n            {\r\n                selectedItems.reverse();\r\n                return this._unformatAtSide('after', selectedItems, $list);\r\n            }\r\n\r\n            // 4) middle\r\n            else if (pos === 'Middle')\r\n            {\r\n                var $last = $R.dom(selectedItems[selectedItems.length-1]);\r\n\r\n                var ci = false;\r\n\r\n                var $parent = false;\r\n                var $secondList = $R.dom('<' + $list.get().tagName.toLowerCase() + '>');\r\n                $items.each(function(node)\r\n                {\r\n                    if (ci)\r\n                    {\r\n                        var $node = $R.dom(node);\r\n                        if ($node.closest('.redactor-split-item').length === 0 && ($parent === false || $node.closest($parent).length === 0))\r\n                        {\r\n                            $node.addClass('redactor-split-item');\r\n                        }\r\n\r\n                        $parent = $node;\r\n                    }\r\n\r\n                    if (node === $last.get())\r\n                    {\r\n                        ci = true;\r\n                    }\r\n                });\r\n\r\n                $items.filter('.redactor-split-item').each(function(node)\r\n                {\r\n                    var $node = $R.dom(node);\r\n                    $node.removeClass('redactor-split-item');\r\n                    $secondList.append(node);\r\n                });\r\n\r\n                $list.after($secondList);\r\n\r\n                selectedItems.reverse();\r\n                for (var i = 0; i < selectedItems.length; i++)\r\n                {\r\n                    var $item = $R.dom(selectedItems[i]);\r\n                    var $container = this._createUnformatContainer($item);\r\n\r\n                    $list.after($container);\r\n                    $container.find('ul, ol').remove();\r\n                    $item.remove();\r\n                }\r\n\r\n\r\n                return;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            // unformat all\r\n            for (var i = 0; i < nodes.length; i++)\r\n            {\r\n                if (nodes[i].nodeType !== 3 && nodes[i].tagName.toLowerCase() === type)\r\n                {\r\n                    this._unformatEntire(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _unformatEntire: function(list)\r\n    {\r\n        var $list = $R.dom(list);\r\n        var $items = $list.find('li');\r\n        $items.each(function(node)\r\n        {\r\n            var $item = $R.dom(node);\r\n            var $container = this._createUnformatContainer($item);\r\n\r\n            $item.remove();\r\n            $list.before($container);\r\n\r\n        }.bind(this));\r\n\r\n        $list.remove();\r\n    },\r\n    _unformatAtSide: function(type, selectedItems, $list)\r\n    {\r\n        for (var i = 0; i < selectedItems.length; i++)\r\n        {\r\n            var $item = $R.dom(selectedItems[i]);\r\n            var $container = this._createUnformatContainer($item);\r\n\r\n            $list[type]($container);\r\n\r\n            var $innerLists = $container.find('ul, ol').first();\r\n            $item.append($innerLists);\r\n\r\n            $innerLists.each(function(node)\r\n            {\r\n                var $node = $R.dom(node);\r\n                var $parent = $node.closest('li');\r\n\r\n                if ($parent.get() === selectedItems[i])\r\n                {\r\n                    $node.unwrap();\r\n                    $parent.addClass('r-unwrapped');\r\n                }\r\n\r\n            });\r\n\r\n            if (this.utils.isEmptyHtml($item.html())) $item.remove();\r\n        }\r\n\r\n        // clear empty\r\n        $list.find('.r-unwrapped').each(function(node)\r\n        {\r\n            var $node = $R.dom(node);\r\n            if ($node.html().trim() === '') $node.remove();\r\n            else $node.removeClass('r-unwrapped');\r\n        });\r\n    },\r\n    _getItemsPosition: function($items, selectedItems)\r\n    {\r\n        var pos = 'Middle';\r\n\r\n        var sFirst = selectedItems[0];\r\n        var sLast = selectedItems[selectedItems.length-1];\r\n\r\n        var first = $items.first().get();\r\n        var last = $items.last().get();\r\n\r\n        if (first === sFirst && last !== sLast)\r\n        {\r\n            pos = 'Top';\r\n        }\r\n        else if (first !== sFirst && last === sLast)\r\n        {\r\n            pos = 'Bottom';\r\n        }\r\n\r\n        return pos;\r\n    },\r\n    _createUnformatContainer: function($item)\r\n    {\r\n        var $container = $R.dom('<' + this.opts.markup + '>');\r\n        if (this.opts.breakline) $container.attr('data-redactor-tag', 'br');\r\n\r\n        $container.append($item.contents());\r\n\r\n        return $container;\r\n    },\r\n    _getBlocks: function()\r\n    {\r\n        return this.selection.getBlocks({ first: true });\r\n    },\r\n    _observeButton: function()\r\n    {\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var isDisabled = (data.isPre() || data.isCode() || data.isFigcaption());\r\n\r\n        this._observeButtonsList(isDisabled, ['lists', 'ul', 'ol', 'outdent', 'indent']);\r\n\r\n        var itemOutdent = this.toolbar.getButton('outdent');\r\n        var itemIndent = this.toolbar.getButton('indent');\r\n\r\n        this._observeIndent(itemIndent, itemOutdent);\r\n    },\r\n    _observeDropdown: function(dropdown)\r\n    {\r\n        var itemOutdent = dropdown.getItem('outdent');\r\n        var itemIndent = dropdown.getItem('indent');\r\n\r\n        this._observeIndent(itemIndent, itemOutdent);\r\n    },\r\n    _observeIndent: function(itemIndent, itemOutdent)\r\n    {\r\n        var isCollapsed = this.selection.isCollapsed();\r\n        var current = this.selection.getCurrent();\r\n        var data = this.inspector.parse(current);\r\n        var item = (data.isList()) ? data.getListItem() : false;\r\n        var $item = $R.dom(item);\r\n        var $prev = $item.prevElement();\r\n        var prev = $prev.get();\r\n        var isIndent = (isCollapsed && item && prev && prev.tagName === 'LI');\r\n\r\n        if (itemOutdent)\r\n        {\r\n            if (item && isCollapsed) itemOutdent.enable();\r\n            else itemOutdent.disable();\r\n        }\r\n\r\n        if (itemIndent)\r\n        {\r\n            if (item && isIndent) itemIndent.enable();\r\n            else itemIndent.disable();\r\n        }\r\n    },\r\n    _observeButtonsList: function(param, buttons)\r\n    {\r\n        for (var i = 0; i < buttons.length; i++)\r\n        {\r\n            var button = this.toolbar.getButton(buttons[i]);\r\n            if (button)\r\n            {\r\n                if (param) button.disable();\r\n                else button.enable();\r\n            }\r\n        }\r\n    }\r\n});\r\n$R.add('class', 'video.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $wrapper = $node.closest('figure');\r\n            if ($wrapper.length !== 0)\r\n            {\r\n                this.parse($wrapper);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.append(el);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.parse('<figure>');\r\n        }\r\n\r\n\r\n        this._initWrapper();\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'video',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n\r\n$R.add('class', 'widget.component', {\r\n    mixins: ['dom', 'component'],\r\n    init: function(app, el)\r\n    {\r\n        this.app = app;\r\n\r\n        // init\r\n        return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n    },\r\n    getData: function()\r\n    {\r\n        return {\r\n            html: this._getHtml()\r\n        };\r\n    },\r\n\r\n    // private\r\n    _init: function(el)\r\n    {\r\n        if (typeof el !== 'undefined')\r\n        {\r\n            var $node = $R.dom(el);\r\n            var $figure = $node.closest('figure');\r\n            if ($figure.length !== 0)\r\n            {\r\n                this.parse($figure);\r\n            }\r\n            else\r\n            {\r\n                this.parse('<figure>');\r\n                this.html(el);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.parse('<figure>');\r\n        }\r\n\r\n\r\n        this._initWrapper();\r\n    },\r\n    _getHtml: function()\r\n    {\r\n        var $wrapper = $R.dom('<div>');\r\n        $wrapper.html(this.html());\r\n        $wrapper.find('.redactor-component-caret').remove();\r\n\r\n        return $wrapper.html();\r\n    },\r\n    _initWrapper: function()\r\n    {\r\n        this.addClass('redactor-component');\r\n        this.attr({\r\n            'data-redactor-type': 'widget',\r\n            'tabindex': '-1',\r\n            'contenteditable': false\r\n        });\r\n    }\r\n});\r\n\r\n    var Redactor = $R;\r\n    window.Redactor = window.$R = $R;\r\n\r\n    // Data attribute load\r\n    window.addEventListener('load', function()\r\n    {\r\n        $R('[data-redactor]');\r\n    });\r\n\r\n    // Export for webpack\r\n    if (typeof module === 'object' && module.exports) {\r\n        module.exports = Redactor;\r\n        module.exports.Redactor = Redactor;\r\n    }\r\n}());\r\n\n(function($R)\r\n{\r\n    $R.add('plugin', 'alignment', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"align\": \"Align\",\r\n    \t\t\t\"align-left\": \"Align Left\",\r\n    \t\t\t\"align-center\": \"Align Center\",\r\n    \t\t\t\"align-right\": \"Align Right\",\r\n    \t\t\t\"align-justify\": \"Align Justify\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.block = app.block;\r\n            this.toolbar = app.toolbar;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var dropdown = {};\r\n\r\n    \t\tdropdown.left = { title: this.lang.get('align-left'), api: 'plugin.alignment.set', args: 'left' };\r\n    \t\tdropdown.center = { title: this.lang.get('align-center'), api: 'plugin.alignment.set', args: 'center' };\r\n    \t\tdropdown.right = { title: this.lang.get('align-right'), api: 'plugin.alignment.set', args: 'right' };\r\n    \t\tdropdown.justify = { title: this.lang.get('align-justify'), api: 'plugin.alignment.set', args: 'justify' };\r\n\r\n            var $button = this.toolbar.addButton('alignment', { title: this.lang.get('align') });\r\n            $button.setIcon('<i class=\"re-icon-alignment\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        },\r\n        set: function(type)\r\n\t\t{\r\n    \t\tif (type === 'left' && this.opts.direction === 'ltr')\r\n    \t\t{\r\n        \t\treturn this._remove();\r\n    \t\t}\r\n\r\n    \t\tvar args = {\r\n        \t    style: { 'text-align': type }\r\n    \t\t};\r\n\r\n\t\t\tthis.block.toggle(args);\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_remove: function()\r\n\t\t{\r\n\t\t    this.block.remove({ style: 'text-align' });\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'counter', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"words\": \"words\",\r\n    \t\t\t\"chars\": \"chars\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.utils = app.utils;\r\n            this.editor = app.editor;\r\n            this.statusbar = app.statusbar;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            $editor.on('keyup.redactor-plugin-counter paste.redactor-plugin-counter', this.count.bind(this));\r\n            this.count();\r\n        },\r\n        stop: function()\r\n        {\r\n            var $editor = this.editor.getElement();\r\n            $editor.off('.redactor-plugin-counter');\r\n\r\n            this.statusbar.remove('words');\r\n            this.statusbar.remove('chars');\r\n        },\r\n\t\tcount: function()\r\n\t\t{\r\n\t\t\tvar words = 0, characters = 0, spaces = 0;\r\n\t\t\tvar $editor = this.editor.getElement();\r\n\t\t\tvar html = $editor.html();\r\n\r\n\t\t\thtml = this._clean(html)\r\n\t\t\tif (html !== '')\r\n\t\t\t{\r\n\t\t\t\tvar arrWords = html.split(/\\s+/);\r\n\t\t\t\tvar arrSpaces = html.match(/\\s/g);\r\n\r\n\t\t\t\twords = (arrWords) ? arrWords.length : 0;\r\n\t\t\t\tspaces = (arrSpaces) ? arrSpaces.length : 0;\r\n\r\n\t\t\t\tcharacters = html.length;\r\n\t\t\t}\r\n\r\n            var data = { words: words, characters: characters, spaces: spaces };\r\n\r\n            // callback\r\n\t\t\tthis.app.broadcast('counter', data);\r\n\r\n            // statusbar\r\n            this.statusbar.add('words', this.lang.get('words') + ': ' + data.words);\r\n            this.statusbar.add('chars', this.lang.get('chars') + ': ' + data.characters);\r\n\t\t},\r\n\r\n        // private\r\n        _clean: function(html)\r\n        {\r\n\t\t\thtml = html.replace(/<\\/(.*?)>/gi, ' ');\r\n\t\t\thtml = html.replace(/<(.*?)>/gi, '');\r\n\t\t\thtml = html.replace(/\\t/gi, '');\r\n\t\t\thtml = html.replace(/\\n/gi, ' ');\r\n\t\t\thtml = html.replace(/\\r/gi, ' ');\r\n\t\t\thtml = html.replace(/&nbsp;/g, '1');\r\n\t\t\thtml = html.trim();\r\n\t\t\thtml = this.utils.removeInvisibleChars(html);\r\n\r\n\t\t\treturn html;\r\n        }\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'filebrowser', {\r\n        init: function(app)\r\n        {\r\n            // define app\r\n            this.app = app;\r\n\r\n            // define services\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n            this.insertion = app.insertion;\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            // create the button data\r\n            var buttonData = {\r\n                title: this.lang.get('file'),\r\n                api: 'plugin.filebrowser.open'\r\n            };\r\n\r\n            // create the button\r\n            this.$button = this.toolbar.addButton('filebrowser', buttonData);\r\n            this.$button.setIcon('<i class=\"re-icon-filebrowser\"></i>');\r\n        },\r\n        open: function()\r\n        {\r\n            function pickFile(that) {\r\n                that.app.selection.save();\r\n                return function insertFile(evt) {\r\n                    that.app.selection.restore();\r\n                    window.document.removeEventListener( 'filepicker:pick', insertFile );\r\n                    const file = evt.detail;\r\n                    if (Object.prototype.toString.call(file) === '[object String]') {\r\n                        that.app.api('module.image.insert', file);\r\n                    } else if (file.file_id) {\r\n                        const file_url = EE.Rte.filedirUrls[file.upload_location_id] + file.file_name;\r\n                        if (!file.isImage && !file.isSVG) {\r\n                            that.app.api('module.link.insert', {text: file.path, url: file.path});\r\n                        } else {\r\n                            that.app.api('module.image.insert', file.path);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            window.document.addEventListener( 'filepicker:pick', pickFile(this) );\r\n            window.Rte_browseImages(this.insertion, {});\r\n        },\r\n    });\r\n})(Redactor);\r\n\n(function($R)\r\n{\r\n    $R.add('plugin', 'fontcolor', {\r\n        translations: {\r\n            en: {\r\n                \"fontcolor\": \"Text Color\",\r\n                \"text\": \"Text\",\r\n                \"highlight\": \"Highlight\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.inline = app.inline;\r\n            this.toolbar = app.toolbar;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n    \t\tthis.colors = (this.opts.fontcolors) ? this.opts.fontcolors : [\r\n    \t\t\t'#ffffff', '#000000', '#eeece1', '#1f497d', '#4f81bd', '#c0504d', '#9bbb59', '#8064a2', '#4bacc6', '#f79646', '#ffff00',\r\n    \t\t\t'#f2f2f2', '#7f7f7f', '#ddd9c3', '#c6d9f0', '#dbe5f1', '#f2dcdb', '#ebf1dd', '#e5e0ec', '#dbeef3', '#fdeada', '#fff2ca',\r\n    \t\t\t'#d8d8d8', '#595959', '#c4bd97', '#8db3e2', '#b8cce4', '#e5b9b7', '#d7e3bc', '#ccc1d9', '#b7dde8', '#fbd5b5', '#ffe694',\r\n    \t\t\t'#bfbfbf', '#3f3f3f', '#938953', '#548dd4', '#95b3d7', '#d99694', '#c3d69b', '#b2a2c7', '#b7dde8', '#fac08f', '#f2c314',\r\n    \t\t\t'#a5a5a5', '#262626', '#494429', '#17365d', '#366092', '#953734', '#76923c', '#5f497a', '#92cddc', '#e36c09', '#c09100',\r\n    \t\t\t'#7f7f7f', '#0c0c0c', '#1d1b10', '#0f243e', '#244061', '#632423', '#4f6128', '#3f3151', '#31859b',  '#974806', '#7f6000'\r\n    \t\t];\r\n        },\r\n        // messages\r\n        onfontcolor: {\r\n            set: function(rule, value)\r\n            {\r\n                this._set(rule, value);\r\n            },\r\n            remove: function(rule)\r\n            {\r\n                this._remove(rule);\r\n            }\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var btnObj = {\r\n                title: this.lang.get('fontcolor')\r\n            };\r\n\r\n            var $dropdown = this._buildDropdown();\r\n\r\n            this.$button = this.toolbar.addButton('fontcolor', btnObj);\r\n\t\t\tthis.$button.setIcon('<i class=\"re-icon-fontcolor\"></i>');\r\n\t\t\tthis.$button.setDropdown($dropdown);\r\n        },\r\n\r\n        // private\r\n        _buildDropdown: function()\r\n        {\r\n            var $dropdown = $R.dom('<div class=\"redactor-dropdown-cells\">');\r\n\r\n            this.$selector = this._buildSelector();\r\n\r\n            this.$selectorText = this._buildSelectorItem('text', this.lang.get('text'));\r\n            this.$selectorText.addClass('active');\r\n\r\n            this.$selectorBack = this._buildSelectorItem('back', this.lang.get('highlight'));\r\n\r\n            this.$selector.append(this.$selectorText);\r\n            this.$selector.append(this.$selectorBack);\r\n\r\n            this.$pickerText = this._buildPicker('textcolor');\r\n            this.$pickerBack = this._buildPicker('backcolor');\r\n\r\n            $dropdown.append(this.$selector);\r\n            $dropdown.append(this.$pickerText);\r\n            $dropdown.append(this.$pickerBack);\r\n\r\n            this._buildSelectorEvents();\r\n\r\n            $dropdown.width(242);\r\n\r\n            return $dropdown;\r\n        },\r\n        _buildSelector: function()\r\n        {\r\n            var $selector = $R.dom('<div>');\r\n            $selector.addClass('redactor-dropdown-selector');\r\n\r\n\t\t\treturn $selector;\r\n        },\r\n        _buildSelectorItem: function(name, title)\r\n        {\r\n            var $item = $R.dom('<span>');\r\n            $item.attr('rel', name).html(title);\r\n            $item.addClass('redactor-dropdown-not-close');\r\n\r\n            return $item;\r\n        },\r\n        _buildSelectorEvents: function()\r\n        {\r\n\t\t\tthis.$selectorText.on('mousedown', function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n                this.$selector.find('span').removeClass('active');\r\n\t\t\t\tthis.$pickerBack.hide();\r\n\t\t\t\tthis.$pickerText.show();\r\n\t\t\t\tthis.$selectorText.addClass('active');\r\n\r\n\t\t\t}.bind(this));\r\n\r\n\t\t\tthis.$selectorBack.on('mousedown', function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n                this.$selector.find('span').removeClass('active');\r\n\t\t\t\tthis.$pickerText.hide();\r\n\t\t\t\tthis.$pickerBack.show();\r\n\t\t\t\tthis.$selectorBack.addClass('active');\r\n\r\n\t\t\t}.bind(this));\r\n        },\r\n        _buildPicker: function(name)\r\n\t\t{\r\n\t\t\tvar $box = $R.dom('<div class=\"re-dropdown-box-' + name + '\">');\r\n\t\t\tvar rule = (name == 'backcolor') ? 'background-color' : 'color';\r\n\t\t\tvar len = this.colors.length;\r\n\t\t\tvar self = this;\r\n\t\t\tvar func = function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar $el = $R.dom(e.target);\r\n\t\t\t\tself._set($el.data('rule'), $el.attr('rel'));\r\n\t\t\t};\r\n\r\n\t\t\tfor (var z = 0; z < len; z++)\r\n\t\t\t{\r\n\t\t\t\tvar color = this.colors[z];\r\n\r\n\t\t\t\tvar $swatch = $R.dom('<span>');\r\n\t\t\t\t$swatch.attr({ 'rel': color, 'data-rule': rule });\r\n\t\t\t\t$swatch.css({ 'background-color': color, 'font-size': 0, 'border': '2px solid #fff', 'width': '22px', 'height': '22px' });\r\n\t\t\t\t$swatch.on('mousedown', func);\r\n\r\n\t\t\t\t$box.append($swatch);\r\n\t\t\t}\r\n\r\n\t\t\tvar $el = $R.dom('<a>');\r\n\t\t\t$el.attr({ 'href': '#' });\r\n\t\t\t$el.css({ 'display': 'block', 'clear': 'both', 'padding': '8px 5px', 'font-size': '12px', 'line-height': 1 });\r\n\t\t\t$el.html(this.lang.get('none'));\r\n\r\n\t\t\t$el.on('click', function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tself._remove(rule);\r\n\t\t\t});\r\n\r\n\t\t\t$box.append($el);\r\n\r\n\t\t\tif (name == 'backcolor') $box.hide();\r\n\r\n            return $box;\r\n\t\t},\r\n\t\t_set: function(rule, value)\r\n\t\t{\r\n    \t\tvar style = {};\r\n    \t\tstyle[rule] = value;\r\n\r\n    \t\tvar args = {\r\n        \t    tag: 'span',\r\n        \t    style: style,\r\n        \t    type: 'toggle'\r\n    \t\t};\r\n\r\n\t\t\tthis.inline.format(args);\r\n\t\t},\r\n\t\t_remove: function(rule)\r\n\t\t{\r\n\t\t\tthis.inline.remove({ style: rule });\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'fullscreen', {\r\n        translations: {\r\n            en: {\r\n    \t\t\t\"fullscreen\": \"Fullscreen\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.$win = app.$win;\r\n            this.$doc = app.$doc;\r\n            this.$body = app.$body;\r\n            this.editor = app.editor;\r\n            this.toolbar = app.toolbar;\r\n            this.container = app.container;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n            this.isOpen = false;\r\n            this.docScroll = 0;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var data = {\r\n                title: this.lang.get('fullscreen'),\r\n                api: 'plugin.fullscreen.toggle'\r\n            };\r\n\r\n            var button = this.toolbar.addButton('fullscreen', data);\r\n            button.setIcon('<i class=\"re-icon-expand\"></i>');\r\n\r\n            this.$target = (this.toolbar.isTarget()) ? this.toolbar.getTargetElement() : this.$body;\r\n\r\n\t\t\tif (this.opts.fullscreen) this.toggle();\r\n\r\n        },\r\n        toggle: function()\r\n\t\t{\r\n\t\t\treturn (this.isOpen) ? this.close() : this.open();\r\n\t\t},\r\n\t\topen: function()\r\n\t\t{\r\n    \t\tthis.docScroll = this.$doc.scrollTop();\r\n\r\n            this._createPlacemarker();\r\n            this.selection.save();\r\n\r\n            var $container = this.container.getElement();\r\n            var $editor = this.editor.getElement();\r\n            var $html = (this.toolbar.isTarget()) ? $R.dom('body, html') : this.$target;\r\n\r\n            if (this.opts.toolbarExternal) this._buildInternalToolbar();\r\n\r\n            this.$target.prepend($container);\r\n\t\t\tthis.$target.addClass('redactor-body-fullscreen');\r\n\r\n            $container.addClass('redactor-box-fullscreen');\r\n            if (this.isTarget) $container.addClass('redactor-box-fullscreen-target');\r\n\r\n            $html.css('overflow', 'hidden');\r\n\r\n            if (this.opts.maxHeight) $editor.css('max-height', '');\r\n            if (this.opts.minHeight) $editor.css('min-height', '');\r\n\r\n            this._resize();\r\n            this.$win.on('resize.redactor-plugin-fullscreen', this._resize.bind(this));\r\n\t\t\tthis.$doc.scrollTop(0);\r\n\r\n            var button = this.toolbar.getButton('fullscreen');\r\n            button.setIcon('<i class=\"re-icon-retract\"></i>');\r\n\r\n            this.selection.restore();\r\n\t\t\tthis.isOpen = true;\r\n\t\t\tthis.opts.zindex = 1051;\r\n\t\t\t// fix bootstrap modal focus\r\n            if (window.jQuery) window.jQuery(document).off('focusin.modal');\r\n\t\t},\r\n\t\tclose: function()\r\n\t\t{\r\n    \t\tthis.isOpen = false;\r\n\t\t\tthis.opts.zindex = false;\r\n            this.selection.save();\r\n\r\n            var $container = this.container.getElement();\r\n            var $editor = this.editor.getElement();\r\n            var $html = $R.dom('body, html');\r\n\r\n            if (this.opts.toolbarExternal) this._buildExternalToolbar();\r\n\r\n            this.$target.removeClass('redactor-body-fullscreen');\r\n    \t\tthis.$win.off('resize.redactor-plugin-fullscreen');\r\n            $html.css('overflow', '');\r\n\r\n\t\t\t$container.removeClass('redactor-box-fullscreen redactor-box-fullscreen-target');\r\n\t\t\t$editor.css('height', 'auto');\r\n\r\n\t\t\tif (this.opts.minHeight) $editor.css('minHeight', this.opts.minHeight);\r\n\t\t\tif (this.opts.maxHeight) $editor.css('maxHeight', this.opts.maxHeight);\r\n\r\n            var button = this.toolbar.getButton('fullscreen');\r\n            button.setIcon('<i class=\"re-icon-expand\"></i>');\r\n\r\n    \t\tthis._removePlacemarker($container);\r\n            this.selection.restore();\r\n            this.$doc.scrollTop(this.docScroll);\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_resize: function()\r\n\t\t{\r\n    \t\tvar $toolbar = this.toolbar.getElement();\r\n            var $editor = this.editor.getElement();\r\n    \t\tvar height = this.$win.height() - $toolbar.height();\r\n\r\n    \t\t$editor.height(height);\r\n\t\t},\r\n\t\t_buildInternalToolbar: function()\r\n\t\t{\r\n\t\t\tvar $wrapper = this.toolbar.getWrapper();\r\n\t\t\tvar $toolbar = this.toolbar.getElement();\r\n\r\n\t\t\t$wrapper.addClass('redactor-toolbar-wrapper');\r\n\t\t\t$wrapper.append($toolbar);\r\n\r\n\t\t\t$toolbar.removeClass('redactor-toolbar-external');\r\n\t\t\t$container.prepend($wrapper);\r\n\t\t},\r\n\t\t_buildExternalToolbar: function()\r\n\t\t{\r\n\t\t\tvar $wrapper = this.toolbar.getWrapper();\r\n\t\t\tvar $toolbar = this.toolbar.getElement();\r\n\r\n            this.$external = $R.dom(this.opts.toolbarExternal);\r\n\r\n            $toolbar.addClass('redactor-toolbar-external');\r\n            this.$external.append($toolbar);\r\n\r\n            $wrapper.remove();\r\n\t\t},\r\n\t\t_createPlacemarker: function()\r\n\t\t{\r\n    \t\tvar $container = this.container.getElement();\r\n\r\n    \t\tthis.$placemarker = $R.dom('<span />');\r\n    \t\t$container.after(this.$placemarker);\r\n\t\t},\r\n\t\t_removePlacemarker: function($container)\r\n\t\t{\r\n    \t\tthis.$placemarker.before($container);\r\n            this.$placemarker.remove();\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'inlinestyle', {\r\n        translations: {\r\n            en: {\r\n                \"style\": \"Style\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n\r\n            // local\r\n    \t\tthis.styles = {\r\n    \t\t\t\"marked\": {\r\n    \t\t\t\ttitle: \"Marked\",\r\n    \t\t\t\targs: 'mark'\r\n    \t\t\t},\r\n    \t\t\t\"code\": {\r\n    \t\t\t\ttitle: \"Code\",\r\n    \t\t\t\targs: 'code'\r\n    \t\t\t},\r\n    \t\t\t\"variable\": {\r\n    \t\t\t\ttitle: \"Variable\",\r\n    \t\t\t\targs: 'var'\r\n    \t\t\t},\r\n    \t\t\t\"shortcut\": {\r\n    \t\t\t\ttitle: \"Shortcut\",\r\n    \t\t\t\targs: 'kbd'\r\n    \t\t\t},\r\n    \t\t\t\"sup\": {\r\n    \t\t\t\ttitle: \"Superscript\",\r\n    \t\t\t\targs: 'sup'\r\n    \t\t\t},\r\n    \t\t\t\"sub\": {\r\n    \t\t\t\ttitle: \"Subscript\",\r\n    \t\t\t\targs: 'sub'\r\n    \t\t\t}\r\n    \t\t};\r\n        },\r\n        start: function()\r\n        {\r\n            var dropdown = {};\r\n\t\t\tfor (var key in this.styles)\r\n\t\t\t{\r\n    \t\t\tvar style = this.styles[key];\r\n\t\t\t\tdropdown[key] = {\r\n    \t\t\t\ttitle: style.title,\r\n    \t\t\t\tapi: 'module.inline.format',\r\n    \t\t\t\targs: style.args\r\n                };\r\n\t\t\t}\r\n\r\n            var $button = this.toolbar.addButtonAfter('format', 'inline', { title: this.lang.get('style') });\r\n\r\n            $button.setIcon('<i class=\"re-icon-inline\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        }\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'limiter', {\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.utils = app.utils;\r\n            this.opts = app.opts;\r\n            this.editor = app.editor;\r\n            this.keycodes = app.keycodes;\r\n        },\r\n        // events\r\n        onpasting: function(html)\r\n        {\r\n            if (!this.opts.limiter) return;\r\n\r\n            html = this.utils.removeInvisibleChars(html);\r\n\r\n            var text = this._getText();\r\n            var len = html.length + text.length;\r\n\r\n\t\t\tthis.opts.input = !(len >= this.opts.limiter);\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n\t\t\tif (!this.opts.limiter) return;\r\n            this._count();\r\n\r\n            var $editor = this.editor.getElement();\r\n            $editor.on('keydown.redactor-plugin-limiter', this._limit.bind(this));\r\n\t\t},\r\n\t\tstop: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n            $editor.off('.redactor-plugin-limiter');\r\n\r\n            this.opts.input = true;\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_limit: function(e)\r\n\t\t{\r\n    \t\tvar key = e.which;\r\n\t\t\tvar ctrl = e.ctrlKey || e.metaKey;\r\n\t\t\tvar arrows = [37, 38, 39, 40];\r\n\r\n\t\t\tif (key === this.keycodes.BACKSPACE\r\n\t\t\t   \t|| key === this.keycodes.DELETE\r\n\t\t\t    || key === this.keycodes.ESC\r\n\t\t\t    || key === this.keycodes.SHIFT\r\n\t\t\t    || (ctrl && key === 65)\r\n\t\t\t    || (ctrl && key === 88)\r\n\t\t\t    || (ctrl && key === 82)\r\n\t\t\t    || (ctrl && key === 116)\r\n\t\t\t    || (arrows.indexOf(key) !== -1)\r\n\t\t\t)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            this._count(e);\r\n\t\t},\r\n\t\t_count: function(e)\r\n\t\t{\r\n            var text = this._getText();\r\n\t\t\tvar count = text.length;\r\n\t\t\tif (count >= this.opts.limiter)\r\n\t\t\t{\r\n                if (e) e.preventDefault();\r\n                this.opts.input = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n    \t\t\tthis.opts.input = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t_getText: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n\t\t\tvar text = $editor.text();\r\n\r\n\t\t\treturn this.utils.removeInvisibleChars(text);\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'pages', {\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.$doc = app.$doc;\r\n            this.$body = app.$body;\r\n            this.editor = app.editor;\r\n            this.marker = app.marker;\r\n            this.keycodes = app.keycodes;\r\n            this.container = app.container;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n            this.handleTrigger = (typeof this.opts.handleTrigger !== 'undefined') ? this.opts.handleTrigger : '@';\r\n            this.handleStart = (typeof this.opts.handleStart !== 'undefined') ? this.opts.handleStart : 3;\r\n            this.handleStr = '';\r\n            this.handleLen = this.handleStart;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            if (!this.opts.handle) return;\r\n\r\n            var $editor = this.editor.getElement();\r\n\t\t\t$editor.on('keyup.redactor-plugin-handle', this._handle.bind(this));\r\n            $editor.on('keydown.redactor-plugin-handle', this._listen.bind(this));\r\n\t\t},\r\n\t\tstop: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n\r\n\t\t\t$editor.off('.redactor-plugin-handle');\r\n            this.$doc.off('.redactor-plugin-handle');\r\n\r\n            var $list = $R.dom('#redactor-handle-list');\r\n            $list.remove();\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_handle: function(e)\r\n\t\t{\r\n    \t\tvar key = e.which;\r\n\t\t\tvar ctrl = e.ctrlKey || e.metaKey;\r\n\t\t\tvar arrows = [37, 38, 39, 40];\r\n\r\n            if (key === this.keycodes.BACKSPACE)\r\n            {\r\n                if (this._isShown() && (this.handleLen > this.handleStart))\r\n                {\r\n                    this.handleLen = this.handleLen - 2;\r\n                    if (this.handleLen <= this.handleStart)\r\n                    {\r\n                        this._hide();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n\r\n\t\t\tif (key === this.keycodes.DELETE\r\n\t\t\t    || key === this.keycodes.ESC\r\n\t\t\t    || key === this.keycodes.SHIFT\r\n\t\t\t    || ctrl\r\n\t\t\t    || (arrows.indexOf(key) !== -1)\r\n\t\t\t)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            var re = new RegExp('^' + this.handleTrigger);\r\n            this.handleStr = this.selection.getTextBeforeCaret(this.handleLen + 1);\r\n\r\n            // detect\r\n            if (re.test(this.handleStr))\r\n            {\r\n                this.handleStr = this.handleStr.replace(this.handleTrigger, '');\r\n                this.handleLen++;\r\n\r\n                this._load();\r\n            }\r\n\t\t},\r\n        _listen: function(e) {\r\n            var key = e.which;\r\n            var ks = this.keycodes;\r\n\r\n            // listen enter\r\n            if (this._isShown() && key === ks.ENTER) {\r\n                var $item = this._getActiveItem();\r\n                if ($item.length === 0) {\r\n                    this._hideForce();\r\n                    return;\r\n                }\r\n                else {\r\n                    e.preventDefault();\r\n                    this._replace(e, $item);\r\n                    this._hideForce();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // listen down / up\r\n            if (this._isShown() && (key === 40 || key === 38)) {\r\n                e.preventDefault();\r\n\r\n                var $item = this._getActiveItem();\r\n                if ($item.length === 0) {\r\n                    var $first = this._getFirstItem();\r\n                    this._setActive($first);\r\n                }\r\n                // down\r\n                else if (key === 40) {\r\n                    this._setNextActive($item);\r\n                }\r\n                // up\r\n                else if (key === 38) {\r\n                    this._setPrevActive($item);\r\n                }\r\n\r\n                return;\r\n            }\r\n        },\r\n        _getItems: function() {\r\n            return this.$list.find('a');\r\n        },\r\n        _getActiveItem: function() {\r\n            return this._getItems().filter(function(node) {\r\n                return $R.dom(node).hasClass('active');\r\n            });\r\n        },\r\n        _getFirstItem: function() {\r\n            return this._getItems().first();\r\n        },\r\n        _getLastItem: function() {\r\n            return this._getItems().last();\r\n        },\r\n        _setActive: function($el) {\r\n            this._getItems().removeClass('active');\r\n            $el.addClass('active');\r\n\r\n            var itemHeight = $el.outerHeight();\r\n            var itemTop = $el.position().top;\r\n            var itemsScrollTop = this.$list.scrollTop();\r\n            var scrollTop = itemTop + itemHeight * 2;\r\n            var itemsHeight = this.$list.outerHeight();\r\n\r\n            this.$list.scrollTop(\r\n                scrollTop > itemsScrollTop + itemsHeight ? scrollTop - itemsHeight :\r\n                    itemTop - itemHeight < itemsScrollTop ? itemTop - itemHeight :\r\n                    itemsScrollTop\r\n            );\r\n        },\r\n        _setNextActive: function($el) {\r\n            var $next = $el.next();\r\n            if ($next.length !== 0) {\r\n                this._setActive($next);\r\n            }\r\n            else {\r\n                var $first = this._getFirstItem();\r\n                this._setActive($first);\r\n            }\r\n        },\r\n        _setPrevActive: function($el) {\r\n            var $prev = $el.prev();\r\n            if ($prev.length !== 0) {\r\n                this._setActive($prev);\r\n            }\r\n            else {\r\n                var $last = this._getLastItem();\r\n                this._setActive($last);\r\n            }\r\n        },\r\n\t\t_load: function()\r\n\t\t{\r\n    \t\t$R.ajax.get({\r\n        \t\turl: this.opts.handle + '&search=' + this.handleStr,\r\n        \t\tsuccess: this._parse.bind(this)\r\n    \t\t});\r\n\t\t},\r\n\t\t_parse: function(json)\r\n\t\t{\r\n    \t\tif (json === '') return;\r\n\r\n            var data = (typeof json === 'object') ? json : JSON.parse(json);\r\n\r\n            this._build();\r\n            this._buildData(data);\r\n\t\t},\r\n\t\t_build: function()\r\n\t\t{\r\n            this.$list = $R.dom('#redactor-handle-list');\r\n            if (this.$list.length === 0)\r\n            {\r\n                this.$list = $R.dom('<div id=\"redactor-handle-list\">');\r\n                this.$body.append(this.$list);\r\n            }\r\n        },\r\n        _buildData: function(data)\r\n        {\r\n            this.data = data;\r\n\r\n            this._update();\r\n            this._show();\r\n        },\r\n        _update: function()\r\n        {\r\n            this.$list.html('');\r\n\r\n            for (var key in this.data)\r\n            {\r\n                var $item = $R.dom('<a href=\"#\">');\r\n                $item.html(this.data[key].text);\r\n                $item.attr('data-href', this.data[key].href);\r\n                $item.attr('data-text', this.data[key].text);\r\n                $item.on('click', this._replace.bind(this));\r\n\r\n                this.$list.append($item);\r\n                \r\n            }\r\n\r\n            // position\r\n    \t\tvar $container = this.container.getElement();\r\n            var containerOffset = $container.offset();\r\n            var pos = this.selection.getPosition();\r\n\r\n            this.$list.addClass('open');\r\n            this.$list.css({\r\n                top: (pos.top + pos.height + this.$doc.scrollTop()) + 'px',\r\n                left: pos.left + 'px'\r\n            });\r\n        },\r\n        _isShown: function()\r\n        {\r\n            return (this.$list && this.$list.hasClass('open'));\r\n        },\r\n        _show: function()\r\n        {\r\n            this.$list.addClass('open');\r\n            this.$list.show();\r\n\r\n            this.$doc.off('.redactor-plugin-handle');\r\n            this.$doc.on('click.redactor-plugin-handle keydown.redactor-plugin-handle', this._hide.bind(this));\r\n        },\r\n        _hide: function(e)\r\n        {\r\n            var hidable = false;\r\n            var key = (e && e.which);\r\n\r\n            if (!e) hidable = true;\r\n            else if (e.type === 'click' || key === this.keycodes.ESC) hidable = true;\r\n\r\n            if (hidable) {\r\n               this._hideForce();\r\n            }\r\n        },\r\n        _hideForce: function() {\r\n            this.$list.removeClass('open');\r\n            this.$list.hide();\r\n            this._reset();\r\n        },\r\n        _reset: function()\r\n        {\r\n            this.handleStr = '';\r\n            this.handleLen = this.handleStart;\r\n        },\r\n\t\t_replace: function(e, $el)\r\n\t\t{\r\n    \t\te.preventDefault();\r\n\r\n    \t\tvar $item = ($el) ? $el : $R.dom(e.target);\r\n            var replacement = document.createElement('a');\r\n            replacement.setAttribute('href', $item.attr('data-href'));\r\n            replacement.innerHTML = $item.attr('data-text');\r\n\r\n    \t\tvar marker = this.marker.insert('start');\r\n    \t\tvar $marker = $R.dom(marker);\r\n            var current = marker.previousSibling;\r\n            var currentText = current.textContent;\r\n            var re = new RegExp('@' + this.handleStr + '$');\r\n\r\n        \tcurrentText = currentText.replace(re, '');\r\n        \tcurrent.textContent = currentText;\r\n\r\n            $marker.before(replacement);\r\n\r\n \t\t\tthis.selection.restoreMarkers();\r\n\r\n            return;\r\n\t\t}\r\n    });\r\n})(Redactor);\r\n\n(function($R)\r\n{\r\n    $R.add('plugin', 'properties', {\r\n        modals: {\r\n            'properties':\r\n                '<form action=\"\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label>Id</label> \\\r\n                        <input type=\"text\" name=\"id\"> \\\r\n                    </div> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label>Class</label> \\\r\n                        <input type=\"text\" name=\"classname\"> \\\r\n                    </div> \\\r\n                </form>'\r\n        },\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"properties\": \"Properties\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.lang = app.lang;\r\n            this.$body = app.$body;\r\n            this.toolbar = app.toolbar;\r\n            this.inspector = app.inspector;\r\n            this.selection = app.selection;\r\n\r\n            // local\r\n    \t\tthis.labelStyle = {\r\n        \t\t'font-family': 'monospace',\r\n    \t\t\t'position': 'absolute',\r\n    \t\t\t'padding': '2px 5px',\r\n    \t\t\t'line-height': 1,\r\n    \t\t\t'border-radius': '3px',\r\n    \t\t\t'font-size': '11px',\r\n    \t\t\t'color': 'rgba(255, 255, 255, .9)'\r\n    \t\t};\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            properties: {\r\n                open: function($modal, $form)\r\n                {\r\n                    if (this.$block)\r\n                    {\r\n                        var blockData = this._getData(this.$block);\r\n                        $form.setData(blockData);\r\n                    }\r\n                },\r\n                opened: function($modal, $form)\r\n                {\r\n                    $form.getField('id').focus();\r\n                },\r\n                save: function($modal, $form)\r\n                {\r\n                    var data = $form.getData();\r\n                    this._save(data);\r\n                }\r\n            }\r\n        },\r\n        onbutton: {\r\n            properties: {\r\n                observe: function(button)\r\n                {\r\n                    this._observeButton(button);\r\n                }\r\n            }\r\n        },\r\n        onclick: function() {\r\n            //this._observeButton();\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var data = {\r\n                title: this.lang.get('properties'),\r\n                api: 'plugin.properties.open',\r\n                observe: 'properties'\r\n            };\r\n\r\n            var $button = this.toolbar.addButton('properties', data);\r\n            $button.setIcon('<i class=\"re-icon-properties\"></i>');\r\n\r\n            this._createLabel();\r\n        },\r\n        stop: function()\r\n        {\r\n            this._removeLabel();\r\n        },\r\n        open: function()\r\n\t\t{\r\n           var block = this.selection.getBlock();\r\n           if (!block) return;\r\n\r\n           this.$block = $R.dom(block);\r\n\r\n           var options = {\r\n                title: this.lang.get('properties'),\r\n                width: '500px',\r\n                name: 'properties',\r\n                handle: 'save',\r\n                commands: {\r\n                    save: { title: this.lang.get('save') },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n\r\n            this.app.api('module.modal.build', options);\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_save: function(data)\r\n\t\t{\r\n    \t\tthis.app.api('module.modal.close');\r\n\r\n    \t\tif (data.id === '') this.$block.removeAttr('id');\r\n    \t\telse this.$block.attr('id', data.id);\r\n\r\n    \t\tif (data.classname === '') this.$block.removeAttr('class');\r\n    \t\telse this.$block.attr('class', data.classname);\r\n\t\t},\r\n\t\t_getData: function(block)\r\n\t\t{\r\n    \t    var $block = $R.dom(block);\r\n    \t    var data = {\r\n        \t    id: $block.attr('id'),\r\n        \t    classname: $block.attr('class')\r\n    \t    };\r\n\r\n    \t    return data;\r\n\t\t},\r\n\t\t_showData: function(block, data)\r\n\t\t{\r\n    \t\tvar str = '';\r\n    \t\tif (data.id) str += '#' + data.id + ' ';\r\n    \t\tif (data.classname) str += '.' + data.classname;\r\n\r\n\r\n            if (str !== '')\r\n            {\r\n                var $block = $R.dom(block);\r\n                var pos = $block.offset();\r\n\r\n                this.$label.css({\r\n                    top: (pos.top - 12) + 'px',\r\n                    left: pos.left + 'px',\r\n                    'z-index': (this.opts.zindex) ? (this.opts.zindex + 3) : 'auto'\r\n                });\r\n                this.$label.html(str);\r\n                this.$label.show();\r\n            }\r\n            else\r\n            {\r\n                this.$label.hide();\r\n            }\r\n\t\t},\r\n\t\t_createLabel: function()\r\n\t\t{\r\n            this.$label = $R.dom('<span />');\r\n            this.$label.hide();\r\n\t\t\tthis.$label.css(this.labelStyle).css('background', 'rgba(229, 57, 143, .7)');\r\n\r\n\t\t\tthis.$body.append(this.$label);\r\n\t\t},\r\n\t\t_removeLabel: function()\r\n\t\t{\r\n            if (this.$label) this.$label.remove();\r\n\t\t},\r\n\t\t_observeButton: function(button)\r\n\t\t{\r\n    \t\tvar block = this.selection.getBlock();\r\n    \t\tvar data = this.inspector.parse(block);\r\n\r\n    \t\tif (block && !data.isComponent())\r\n    \t\t{\r\n        \t\tvar blockData = this._getData(block);\r\n\r\n                this._showData(block, blockData);\r\n        \t    button.enable();\r\n    \t\t}\r\n    \t\telse\r\n    \t\t{\r\n        \t    button.disable();\r\n        \t    if (this.$label) this.$label.hide();\r\n    \t\t}\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'readmore', {\r\n        translations: {\r\n            en: {\r\n                \"readmore\": \"Read more\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.insertion = app.insertion;\r\n            this.inspector = app.inspector;\r\n        },\r\n        // messages\r\n\r\n        oncontextbar: function(e, contextbar)\r\n        {\r\n            var data = this.inspector.parse(e.target)\r\n            if (typeof(data.$el) !== 'undefined' && data.$el.find('div.readmore').length == 1)\r\n            {\r\n                var node = data.getComponent();\r\n                if (typeof(node) !== 'undefined' && node !== false) {\r\n                    var buttons = {\r\n                        \"remove\": {\r\n                            title: this.lang.get('delete'),\r\n                            api: 'plugin.widget.remove',\r\n                            args: node\r\n                        }\r\n                    };\r\n\r\n                    contextbar.set(e, node, buttons, 'bottom');\r\n                }\r\n            }\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var obj = {\r\n                title: this.lang.get('readmore'),\r\n                api: 'plugin.readmore.open'\r\n            };\r\n\r\n            var $button = this.toolbar.addButton('readmore', obj);\r\n            $button.setIcon('<i class=\"re-icon-readmore\"></i>');\r\n        },\r\n        open: function()\r\n\t\t{\r\n            this._insert();\r\n\t\t},\r\n        remove: function(node)\r\n        {\r\n            this.component.remove(node);\r\n        },\r\n\r\n        // private\r\n\t\t_insert: function(data)\r\n\t\t{\r\n\r\n    \t\tvar html = '<div class=\"readmore\"><span class=\"readmore__label\">' + this.lang.get('readmore') + '</span></div>';\r\n            var $component = this.component.create('widget', html);\r\n            $component.attr('data-widget-code', encodeURI(html));\r\n    \t\tthis.insertion.insertHtml($component);\r\n\t\t}\r\n    });\r\n})(Redactor);\r\n\n(function($R)\r\n{\r\n    $R.add('plugin', 'rte_definedlinks', {\r\n        translations: {\r\n            en: {\r\n                \"pages\": \"Pages\"\r\n            }\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n\r\n            this.component = app.component;\r\n\r\n            // local\r\n            this.links = [];\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            link: {\r\n                open: function($modal, $form)\r\n                {\r\n                    if (!this.opts.definedlinks) return;\r\n\r\n                    this.$modal = $modal;\r\n                    this.$form = $form;\r\n\r\n                    this._load();\r\n                }\r\n            }\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_load: function()\r\n\t\t{\r\n    \t\tif (typeof this.opts.definedlinks === 'object')\r\n    \t\t{\r\n                this._build(this.opts.definedlinks);\r\n    \t\t}\r\n            else\r\n            {\r\n        \t\t$R.ajax.get({\r\n            \t\turl: this.opts.definedlinks,\r\n            \t\tsuccess: this._build.bind(this)\r\n        \t\t});\r\n    \t\t}\r\n\t\t},\r\n\t\t_build: function(data)\r\n\t\t{\r\n            var $selector = this.$modal.find('#redactor-defined-links');\r\n            if ($selector.length === 0)\r\n            {\r\n                var $body = this.$modal.getBody();\r\n                var $item = $R.dom('<div class=\"form-item\" />');\r\n                var $label = $R.dom('<label for=\"redactor-defined-links\">' + $R.lang[$R.opts.lang]['pages'] + '</label>');\r\n                var $selector = $R.dom('<select id=\"redactor-defined-links\" />');\r\n\r\n                $item.append($label);\r\n                $item.append($selector);\r\n                $body.prepend($item);\r\n            }\r\n\r\n            this.links = [];\r\n\r\n            $selector.html('');\r\n            $selector.off('change');\r\n\r\n            $selector.append($R.dom('<option>'));\r\n\r\n            for (var key in data)\r\n            {\r\n                if (!data.hasOwnProperty(key) || typeof data[key] !== 'object')\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                this.links[key] = data[key];\r\n\r\n                var $option = $R.dom('<option>');\r\n                $option.val(key);\r\n                $option.html(data[key].text);\r\n\r\n                $selector.append($option);\r\n            }\r\n\r\n            $selector.on('change', this._select.bind(this));\r\n\t\t},\r\n\t\t_select: function(e)\r\n\t\t{\r\n\t\t\tvar formData = this.$form.getData();\r\n\t\t\tvar key = $R.dom(e.target).val();\r\n\t\t\tvar data = { text: '', url: '' };\r\n\r\n\t\t\tif (key !== '')\r\n\t\t\t{\r\n\t\t\t\tdata.text = this.links[key].text;\r\n\t\t\t\tdata.url = this.links[key].href;\r\n\t\t\t}\r\n\r\n\t\t\tif (formData.text !== '')\r\n\t\t\t{\r\n    \t\t\tdata = { url: data.url };\r\n\t\t\t}\r\n\r\n\t\t\tthis.$form.setData(data);\r\n\t\t}\r\n    });\r\n})(Redactor);\r\n\n(function($R)\r\n{\r\n    $R.add('plugin', 'specialchars', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"specialchars\": \"Special Characters\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.toolbar = app.toolbar;\r\n            this.insertion = app.insertion;\r\n\r\n            // local\r\n            this.chars = [\r\n\r\n                '&lsquo;', '&rsquo;', '&ldquo;', '&rdquo;', '&ndash;', '&mdash;', '&divide;', '&hellip;', '&trade;', '&bull;',\r\n            \t'&rarr;', '&asymp;', '$', '&euro;', '&cent;', '&pound;', '&yen;', '&iexcl;',\r\n            \t'&curren;', '&brvbar;', '&sect;', '&uml;', '&copy;', '&ordf;', '&laquo;', '&raquo;', '&not;', '&reg;', '&macr;',\r\n            \t'&deg;', '&sup1;', '&sup2;', '&sup3;', '&acute;', '&micro;', '&para;', '&middot;', '&cedil;',  '&ordm;',\r\n            \t'&frac14;', '&frac12;', '&frac34;', '&iquest;', '&Agrave;', '&Aacute;', '&Acirc;', '&Atilde;', '&Auml;', '&Aring;',\r\n            \t'&AElig;', '&Ccedil;', '&Egrave;', '&Eacute;', '&Ecirc;', '&Euml;', '&Igrave;', '&Iacute;', '&Icirc;', '&Iuml;',\r\n            \t'&ETH;', '&Ntilde;', '&Ograve;', '&Oacute;', '&Ocirc;', '&Otilde;', '&Ouml;', '&times;', '&Oslash;', '&Ugrave;',\r\n            \t'&Uacute;', '&Ucirc;', '&Uuml;', '&Yacute;', '&THORN;', '&szlig;', '&agrave;', '&aacute;', '&acirc;', '&atilde;',\r\n            \t'&auml;', '&aring;', '&aelig;', '&ccedil;', '&egrave;', '&eacute;', '&ecirc;', '&euml;', '&igrave;', '&iacute;',\r\n            \t'&icirc;', '&iuml;', '&eth;', '&ntilde;', '&ograve;', '&oacute;', '&ocirc;', '&otilde;', '&ouml;',\r\n            \t'&oslash;', '&ugrave;', '&uacute;', '&ucirc;', '&uuml;', '&yacute;', '&thorn;', '&yuml;', '&OElig;', '&oelig;',\r\n            \t'&#372;', '&#374', '&#373', '&#375;'\r\n            ];\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var btnObj = {\r\n                title: this.lang.get('specialchars')\r\n            };\r\n\r\n            var $dropdown = this._buildDropdown();\r\n\r\n            this.$button = this.toolbar.addButton('specialchars', btnObj);\r\n\t\t\tthis.$button.setIcon('<i class=\"re-icon-specialcharacters\"></i>');\r\n\t\t\tthis.$button.setDropdown($dropdown);\r\n        },\r\n\r\n        // private\r\n        _set: function(character)\r\n        {\r\n            this.insertion.insertChar(character);\r\n        },\r\n        _buildDropdown: function()\r\n\t\t{\r\n    \t\tvar self = this;\r\n            var $dropdown = $R.dom('<div class=\"redactor-dropdown-cells\">');\r\n            var func = function(e)\r\n\t\t\t{\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar $el = $R.dom(e.target);\r\n\t\t\t\tself._set($el.data('char'));\r\n\t\t\t};\r\n\r\n            for (var i = 0; i < this.chars.length; i++)\r\n            {\r\n                var $el = $R.dom('<a>');\r\n                $el.attr({ 'href': '#', 'data-char': this.chars[i] });\r\n                $el.css({ 'line-height': '32px', 'width': '32px', 'height': '32px' });\r\n                $el.html(this.chars[i]);\r\n                $el.on('click', func);\r\n\r\n                $dropdown.append($el);\r\n            }\r\n\r\n            return $dropdown;\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'table', {\r\n        translations: {\r\n            en: {\r\n        \t\t\"table\": \"Table\",\r\n        \t\t\"insert-table\": \"Insert table\",\r\n        \t\t\"insert-row-above\": \"Insert row above\",\r\n        \t\t\"insert-row-below\": \"Insert row below\",\r\n        \t\t\"insert-column-left\": \"Insert column left\",\r\n        \t\t\"insert-column-right\": \"Insert column right\",\r\n        \t\t\"add-head\": \"Add head\",\r\n        \t\t\"delete-head\": \"Delete head\",\r\n        \t\t\"delete-column\": \"Delete column\",\r\n        \t\t\"delete-row\": \"Delete row\",\r\n        \t\t\"delete-table\": \"Delete table\"\r\n        \t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.opts = app.opts;\r\n            this.caret = app.caret;\r\n            this.editor = app.editor;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.inspector = app.inspector;\r\n            this.insertion = app.insertion;\r\n            this.selection = app.selection;\r\n        },\r\n        // messages\r\n        ondropdown: {\r\n            table: {\r\n                observe: function(dropdown)\r\n                {\r\n                    this._observeDropdown(dropdown);\r\n                }\r\n            }\r\n        },\r\n        onbottomclick: function()\r\n        {\r\n            this.insertion.insertToEnd(this.editor.getLastNode(), 'table');\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n\t\t\tvar dropdown = {\r\n    \t\t\tobserve: 'table',\r\n    \t\t\t'insert-table': {\r\n    \t\t\t\ttitle: this.lang.get('insert-table'),\r\n    \t\t\t\tapi: 'plugin.table.insert'\r\n    \t\t\t},\r\n    \t\t\t'insert-row-above': {\r\n                    title: this.lang.get('insert-row-above'),\r\n    \t\t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addRowAbove'\r\n    \t\t\t},\r\n    \t\t\t'insert-row-below': {\r\n        \t\t\ttitle: this.lang.get('insert-row-below'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addRowBelow'\r\n    \t\t\t},\r\n    \t\t\t'insert-column-left': {\r\n        \t\t\ttitle: this.lang.get('insert-column-left'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addColumnLeft'\r\n    \t\t\t},\r\n    \t\t\t'insert-column-right': {\r\n        \t\t\ttitle: this.lang.get('insert-column-right'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addColumnRight'\r\n    \t\t\t},\r\n    \t\t\t'add-head': {\r\n        \t\t\ttitle: this.lang.get('add-head'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.addHead'\r\n    \t\t\t},\r\n    \t\t\t'delete-head': {\r\n        \t\t\ttitle: this.lang.get('delete-head'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteHead'\r\n    \t\t\t},\r\n    \t\t\t'delete-column': {\r\n        \t\t\ttitle: this.lang.get('delete-column'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteColumn'\r\n    \t\t\t},\r\n    \t\t\t'delete-row': {\r\n        \t\t\ttitle: this.lang.get('delete-row'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteRow'\r\n    \t\t\t},\r\n    \t\t\t'delete-table': {\r\n        \t\t\ttitle: this.lang.get('delete-table'),\r\n        \t\t\tclassname: 'redactor-table-item-observable',\r\n                    api: 'plugin.table.deleteTable'\r\n    \t\t\t}\r\n\t\t\t};\r\n            var obj = {\r\n                title: this.lang.get('table')\r\n            };\r\n\r\n\t\t\tvar $button = this.toolbar.addButtonBefore('link', 'table', obj);\r\n\t\t\t$button.setIcon('<i class=\"re-icon-table\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        },\r\n\t\tinsert: function()\r\n\t\t{\r\n            var rows = 2;\r\n\t\t\tvar columns = 3;\r\n\t\t\tvar $component = this.component.create('table');\r\n\r\n\t\t\tfor (var i = 0; i < rows; i++)\r\n\t\t\t{\r\n\t\t\t    $component.addRow(columns);\r\n\t\t\t}\r\n\r\n\t\t\t$component =  this.insertion.insertHtml($component);\r\n\t\t\tthis.caret.setStart($component);\r\n\t\t},\r\n        addRowAbove: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n                var $row = $component.addRowTo(current, 'before');\r\n\r\n                this.caret.setStart($row);\r\n            }\r\n        },\r\n        addRowBelow: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n                var $row = $component.addRowTo(current, 'after');\r\n\r\n                this.caret.setStart($row);\r\n            }\r\n        },\r\n        addColumnLeft: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                this.selection.save();\r\n                $component.addColumnTo(current, 'left');\r\n                this.selection.restore();\r\n            }\r\n        },\r\n        addColumnRight: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                this.selection.save();\r\n                $component.addColumnTo(current, 'right');\r\n                this.selection.restore();\r\n            }\r\n        },\r\n        addHead: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                this.selection.save();\r\n                $component.addHead();\r\n                this.selection.restore();\r\n            }\r\n        },\r\n        deleteHead: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n                var $head = $R.dom(current).closest('thead');\r\n                if ($head.length !== 0)\r\n                {\r\n                    $component.removeHead();\r\n                    this.caret.setStart($component);\r\n                }\r\n                else\r\n                {\r\n                    this.selection.save();\r\n                    $component.removeHead();\r\n                    this.selection.restore();\r\n                }\r\n            }\r\n        },\r\n        deleteColumn: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                var $currentCell = $R.dom(current).closest('td, th');\r\n                var nextCell = $currentCell.nextElement().get();\r\n                var prevCell = $currentCell.prevElement().get();\r\n\r\n                $component.removeColumn(current);\r\n\r\n                if (nextCell) this.caret.setStart(nextCell);\r\n                else if (prevCell) this.caret.setEnd(prevCell);\r\n                else this.deleteTable();\r\n            }\r\n        },\r\n        deleteRow: function()\r\n        {\r\n            var $component = this._getComponent();\r\n            if ($component)\r\n            {\r\n                var current = this.selection.getCurrent();\r\n\r\n                var $currentRow = $R.dom(current).closest('tr');\r\n                var nextRow = $currentRow.nextElement().get();\r\n                var prevRow = $currentRow.prevElement().get();\r\n                var $head = $R.dom(current).closest('thead');\r\n\r\n                $component.removeRow(current);\r\n\r\n                if (nextRow) this.caret.setStart(nextRow);\r\n                else if (prevRow) this.caret.setEnd(prevRow);\r\n                else if ($head.length !== 0) {\r\n                    $component.removeHead();\r\n                    this.caret.setStart($component);\r\n                }\r\n                else this.deleteTable();\r\n            }\r\n        },\r\n        deleteTable: function()\r\n        {\r\n            var table = this._getTable();\r\n            if (table)\r\n            {\r\n                this.component.remove(table);\r\n            }\r\n        },\r\n\r\n        // private\r\n        _getTable: function()\r\n        {\r\n            var current = this.selection.getCurrent();\r\n            var data = this.inspector.parse(current);\r\n            if (data.isTable())\r\n            {\r\n                return data.getTable();\r\n            }\r\n        },\r\n        _getComponent: function()\r\n        {\r\n            var current = this.selection.getCurrent();\r\n            var data = this.inspector.parse(current);\r\n            if (data.isTable())\r\n            {\r\n                var table = data.getTable();\r\n\r\n                return this.component.create('table', table);\r\n            }\r\n        },\r\n        _observeDropdown: function(dropdown)\r\n        {\r\n            var table = this._getTable();\r\n            var items = dropdown.getItemsByClass('redactor-table-item-observable');\r\n            var tableItem = dropdown.getItem('insert-table');\r\n            if (table)\r\n            {\r\n                this._observeItems(items, 'enable');\r\n                tableItem.disable();\r\n            }\r\n            else\r\n            {\r\n                this._observeItems(items, 'disable');\r\n                tableItem.enable();\r\n            }\r\n        },\r\n        _observeItems: function(items, type)\r\n        {\r\n            for (var i = 0; i < items.length; i++)\r\n            {\r\n                items[i][type]();\r\n            }\r\n        }\r\n    });\r\n})(Redactor);\r\n(function($R)\r\n{\r\n    $R.add('class', 'table.component', {\r\n        mixins: ['dom', 'component'],\r\n        init: function(app, el)\r\n        {\r\n            this.app = app;\r\n\r\n            // init\r\n            return (el && el.cmnt !== undefined) ? el : this._init(el);\r\n        },\r\n\r\n        // public\r\n        addHead: function()\r\n        {\r\n\t\t\tthis.removeHead();\r\n\r\n\t\t\tvar columns = this.$element.find('tr').first().children('td, th').length;\r\n\t\t\tvar $head = $R.dom('<thead>');\r\n            var $row = this._buildRow(columns, '<th>');\r\n\r\n            $head.append($row);\r\n            this.$element.prepend($head);\r\n        },\r\n        addRow: function(columns)\r\n        {\r\n            var $row = this._buildRow(columns);\r\n            this.$element.append($row);\r\n\r\n            return $row;\r\n        },\r\n        addRowTo: function(current, type)\r\n        {\r\n            return this._addRowTo(current, type);\r\n        },\r\n        addColumnTo: function(current, type)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n            var $currentCell = $current.closest('td, th');\r\n\r\n            var index = 0;\r\n            $currentRow.find('td, th').each(function(node, i)\r\n\t\t\t{\r\n\t\t\t\tif (node === $currentCell.get()) index = i;\r\n\t\t\t});\r\n\r\n\t\t\tthis.$element.find('tr').each(function(node)\r\n\t\t\t{\r\n    \t\t\tvar $node = $R.dom(node);\r\n\t\t\t\tvar origCell = $node.find('td, th').get(index);\r\n\t\t\t\tvar $origCell = $R.dom(origCell);\r\n\r\n\t\t\t\tvar $td = $origCell.clone();\r\n\t\t\t\t$td.html('<div data-redactor-tag=\"tbr\"></div>');\r\n\r\n\t\t\t\tif (type === 'right') $origCell.after($td);\r\n\t\t\t\telse                  $origCell.before($td);\r\n\t\t\t});\r\n        },\r\n        removeHead: function()\r\n        {\r\n\t\t\tvar $head = this.$element.find('thead');\r\n\t\t\tif ($head.length !== 0) $head.remove();\r\n        },\r\n        removeRow: function(current)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n\r\n            $currentRow.remove();\r\n        },\r\n        removeColumn: function(current)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n            var $currentCell = $current.closest('td, th');\r\n\r\n            var index = 0;\r\n            $currentRow.find('td, th').each(function(node, i)\r\n\t\t\t{\r\n\t\t\t\tif (node === $currentCell.get()) index = i;\r\n\t\t\t});\r\n\r\n\t\t\tthis.$element.find('tr').each(function(node)\r\n\t\t\t{\r\n    \t\t\tvar $node = $R.dom(node);\r\n\t\t\t\tvar origCell = $node.find('td, th').get(index);\r\n\t\t\t\tvar $origCell = $R.dom(origCell);\r\n\r\n\t\t\t\t$origCell.remove();\r\n\t\t\t});\r\n        },\r\n\r\n        // private\r\n        _init: function(el)\r\n        {\r\n            var wrapper, element;\r\n            if (typeof el !== 'undefined')\r\n            {\r\n                var $node = $R.dom(el);\r\n                var node = $node.get();\r\n                var $figure = $node.closest('figure');\r\n                if ($figure.length !== 0)\r\n                {\r\n                    wrapper = $figure;\r\n                    element = $figure.find('table').get();\r\n                }\r\n                else if (node.tagName === 'TABLE')\r\n                {\r\n                    element = node;\r\n                }\r\n            }\r\n\r\n            this._buildWrapper(wrapper);\r\n            this._buildElement(element);\r\n            this._initWrapper();\r\n        },\r\n        _addRowTo: function(current, position)\r\n        {\r\n            var $current = $R.dom(current);\r\n            var $currentRow = $current.closest('tr');\r\n            if ($currentRow.length !== 0)\r\n            {\r\n                var columns = $currentRow.children('td, th').length;\r\n                var $newRow = this._buildRow(columns);\r\n\r\n                $currentRow[position]($newRow);\r\n\r\n                return $newRow;\r\n            }\r\n        },\r\n        _buildRow: function(columns, tag)\r\n        {\r\n            tag = tag || '<td>';\r\n\r\n            var $row = $R.dom('<tr>');\r\n            for (var i = 0; i < columns; i++)\r\n            {\r\n                var $cell = $R.dom(tag);\r\n                $cell.attr('contenteditable', true);\r\n                $cell.html('<div data-redactor-tag=\"tbr\"></div>');\r\n\r\n                $row.append($cell);\r\n            }\r\n\r\n            return $row;\r\n        },\r\n        _buildElement: function(node)\r\n        {\r\n            if (node)\r\n            {\r\n                this.$element = $R.dom(node);\r\n            }\r\n            else\r\n            {\r\n                this.$element = $R.dom('<table>');\r\n                this.append(this.$element);\r\n            }\r\n        },\r\n        _buildWrapper: function(node)\r\n        {\r\n            node = node || '<figure>';\r\n\r\n            this.parse(node);\r\n        },\r\n        _initWrapper: function()\r\n        {\r\n            this.addClass('redactor-component');\r\n            this.attr({\r\n                'data-redactor-type': 'table',\r\n                'tabindex': '-1',\r\n                'contenteditable': false\r\n            });\r\n\r\n            if (this.app.detector.isIe())\r\n            {\r\n                this.removeAttr('contenteditable');\r\n            }\r\n        }\r\n    });\r\n\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'textdirection', {\r\n        translations: {\r\n    \t\ten: {\r\n    \t\t\t\"change-text-direction\": \"RTL-LTR\",\r\n    \t\t\t\"left-to-right\": \"Left to Right\",\r\n    \t\t\t\"right-to-left\": \"Right to Left\"\r\n    \t\t}\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.block = app.block;\r\n            this.editor = app.editor;\r\n            this.toolbar = app.toolbar;\r\n            this.selection = app.selection;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            var dropdown = {};\r\n\r\n    \t\tdropdown.ltr = { title: this.lang.get('left-to-right'), api: 'plugin.textdirection.set', args: 'ltr' };\r\n    \t\tdropdown.rtl = { title: this.lang.get('right-to-left'), api: 'plugin.textdirection.set', args: 'rtl' };\r\n\r\n            var $button = this.toolbar.addButton('textdirection', { title: this.lang.get('change-text-direction') });\r\n            $button.setIcon('<i class=\"re-icon-textdirection\"></i>');\r\n\t\t\t$button.setDropdown(dropdown);\r\n        },\r\n        set: function(type)\r\n\t\t{\r\n    \t\tvar block = this.selection.getBlock();\r\n    \t\tif (block && block.tagName === 'LI') {\r\n        \t\tvar list = $R.dom(block).parents('ul, ol', this.editor.getElement()).last();\r\n        \t\tthis.block.add({ attr: { dir: type }}, false, list);\r\n    \t\t}\r\n            else {\r\n                this.block.add({ attr: { dir: type }});\r\n            }\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'textexpander', {\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.opts = app.opts;\r\n            this.utils = app.utils;\r\n            this.editor = app.editor;\r\n            this.marker = app.marker;\r\n            this.keycodes = app.keycodes;\r\n            this.selection = app.selection;\r\n        },\r\n        // public\r\n        start: function()\r\n        {\r\n            if (!this.opts.textexpander) return;\r\n\r\n            var $editor = this.editor.getElement();\r\n\t\t\t$editor.on('keyup.redactor-plugin-textexpander', this._expand.bind(this));\r\n\t\t},\r\n\t\tstop: function()\r\n\t\t{\r\n            var $editor = this.editor.getElement();\r\n\t\t\t$editor.off('.redactor-plugin-textexpander');\r\n\t\t},\r\n\r\n\t\t// private\r\n\t\t_expand: function(e)\r\n\t\t{\r\n            var key = e.which;\r\n\t\t\tif (key === this.keycodes.SPACE)\r\n\t\t\t{\r\n    \t\t\tvar len = this.opts.textexpander.length;\r\n                for (var i = 0; i < len; i++)\r\n                {\r\n                    var str = this.opts.textexpander[i];\r\n    \t\t\t    var re = new RegExp(this.utils.escapeRegExp(str[0]) + '\\\\s$');\r\n                    var rangeText = this.selection.getTextBeforeCaret(str[0].length + 1).replace(/\\s$/, '');\r\n\r\n    \t\t\t    if (str[0] === rangeText)\r\n    \t\t\t    {\r\n        \t\t\t    return this._replaceSelection(re, str[1]);\r\n    \t\t\t    }\r\n\r\n                }\r\n\t\t\t}\r\n\t\t},\r\n\t\t_replaceSelection: function(re, replacement)\r\n\t\t{\r\n    \t\tvar marker = this.marker.insert('start');\r\n            var current = marker.previousSibling;\r\n            var currentText = current.textContent;\r\n\r\n            currentText = currentText.replace(/&nbsp;/, ' ');\r\n        \tcurrentText = currentText.replace(re, replacement);\r\n        \tcurrent.textContent = currentText;\r\n\r\n \t\t\tthis.selection.restoreMarkers();\r\n\r\n            return;\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'video', {\r\n        translations: {\r\n            en: {\r\n                \"video\": \"Video\",\r\n                \"video-html-code\": \"Video Embed Code or Youtube/Vimeo Link\"\r\n            }\r\n        },\r\n        modals: {\r\n            'video':\r\n                '<form action=\"\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label for=\"modal-video-input\">## video-html-code ##</label> \\\r\n                        <textarea id=\"modal-video-input\" name=\"video\" style=\"height: 160px;\"></textarea> \\\r\n                    </div> \\\r\n                </form>'\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.opts = app.opts;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.insertion = app.insertion;\r\n            this.inspector = app.inspector;\r\n            this.selection = app.selection;\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            video: {\r\n                opened: function($modal, $form)\r\n                {\r\n                    $video = $form.getField('video');\r\n                    $video.focus();\r\n                },\r\n                insert: function($modal, $form)\r\n                {\r\n                    var data = $form.getData();\r\n                    this._insert(data);\r\n                }\r\n            }\r\n        },\r\n        oncontextbar: function(e, contextbar)\r\n        {\r\n            var data = this.inspector.parse(e.target)\r\n            if (data.isComponentType('video'))\r\n            {\r\n                var node = data.getComponent();\r\n                var buttons = {\r\n                    \"remove\": {\r\n                        title: this.lang.get('delete'),\r\n                        api: 'plugin.video.remove',\r\n                        args: node\r\n                    }\r\n                };\r\n\r\n                contextbar.set(e, node, buttons, 'bottom');\r\n            }\r\n\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var obj = {\r\n                title: this.lang.get('video'),\r\n                api: 'plugin.video.open'\r\n            };\r\n\r\n            var $button = this.toolbar.addButtonAfter('image', 'video', obj);\r\n            $button.setIcon('<i class=\"re-icon-video\"></i>');\r\n        },\r\n        open: function()\r\n\t\t{\r\n            var options = {\r\n                title: this.lang.get('video'),\r\n                width: '600px',\r\n                name: 'video',\r\n                handle: 'insert',\r\n                commands: {\r\n                    insert: { title: this.lang.get('insert') },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n\r\n            this.app.api('module.modal.build', options);\r\n\t\t},\r\n        remove: function(node)\r\n        {\r\n            this.component.remove(node);\r\n        },\r\n\r\n        // private\r\n\t\t_insert: function(data)\r\n\t\t{\r\n    \t\tthis.app.api('module.modal.close');\r\n\r\n    \t\tif (data.video.trim() === '')\r\n    \t\t{\r\n        \t    return;\r\n    \t\t}\r\n\r\n            // parsing\r\n            data.video = this._matchData(data.video);\r\n\r\n            // inserting\r\n            if (this._isVideoIframe(data.video))\r\n            {\r\n                var $video = this.component.create('video', data.video);\r\n                this.insertion.insertHtml($video);\r\n            }\r\n\t\t},\r\n\r\n\t\t_isVideoIframe: function(data)\r\n\t\t{\r\n            return (data.match(/<iframe|<video/gi) !== null);\r\n\t\t},\r\n\t\t_matchData: function(data)\r\n\t\t{\r\n\t\t\tvar iframeStart = '<iframe style=\"width: 500px; height: 281px;\" src=\"';\r\n\t\t\tvar iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\r\n\r\n            if (this._isVideoIframe(data))\r\n\t\t\t{\r\n\t\t\t\tvar allowed = ['iframe', 'video', 'source'];\r\n\t\t\t\tvar tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\r\n\r\n                data = data.replace(/<p(.*?[^>]?)>([\\w\\W]*?)<\\/p>/gi, '');\r\n\t\t\t    data = data.replace(tags, function ($0, $1)\r\n\t\t\t    {\r\n\t\t\t        return (allowed.indexOf($1.toLowerCase()) === -1) ? '' : $0;\r\n\t\t\t    });\r\n\t\t\t}\r\n            else\r\n            {\r\n    \t\t\tif (data.match(this.opts.regex.youtube))\r\n    \t\t\t{\r\n                    var yturl = '//www.youtube.com';\r\n                    if (data.search('youtube-nocookie.com') !== -1) {\r\n                        yturl = '//www.youtube-nocookie.com';\r\n                    }\r\n    \t\t\t\tdata = data.replace(this.opts.regex.youtube, iframeStart + yturl + '/embed/$1' + iframeEnd);\r\n    \t\t\t}\r\n    \t\t\telse if (data.match(this.opts.regex.vimeo))\r\n    \t\t\t{\r\n\r\n    \t\t\t\tdata = data.replace(this.opts.regex.vimeo, iframeStart + '//player.vimeo.com/video/$2' + iframeEnd);\r\n    \t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n    });\r\n})(Redactor);\n(function($R)\r\n{\r\n    $R.add('plugin', 'widget', {\r\n        translations: {\r\n            en: {\r\n                \"widget\": \"Widget\",\r\n                \"widget-html-code\": \"Widget HTML Code\"\r\n            }\r\n        },\r\n        modals: {\r\n            'widget':\r\n                '<form action=\"\"> \\\r\n                    <div class=\"form-item\"> \\\r\n                        <label for=\"modal-widget-input\">## widget-html-code ##</label> \\\r\n                        <textarea id=\"modal-widget-input\" name=\"widget\" style=\"height: 200px;\"></textarea> \\\r\n                    </div> \\\r\n                </form>'\r\n        },\r\n        init: function(app)\r\n        {\r\n            this.app = app;\r\n            this.lang = app.lang;\r\n            this.opts = app.opts;\r\n            this.toolbar = app.toolbar;\r\n            this.component = app.component;\r\n            this.insertion = app.insertion;\r\n            this.inspector = app.inspector;\r\n            this.selection = app.selection;\r\n        },\r\n        // messages\r\n        onmodal: {\r\n            widget: {\r\n                opened: function($modal, $form)\r\n                {\r\n                    $form.getField('widget').focus();\r\n\r\n                    if (this.$currentItem)\r\n                    {\r\n                        var code = decodeURI(this.$currentItem.attr('data-widget-code'));\r\n                        $form.getField('widget').val(code);\r\n                    }\r\n                },\r\n                insert: function($modal, $form)\r\n                {\r\n                    var data = $form.getData();\r\n                    this._insert(data);\r\n                }\r\n            }\r\n        },\r\n        oncontextbar: function(e, contextbar)\r\n        {\r\n            var data = this.inspector.parse(e.target)\r\n            if (!data.isFigcaption() && data.isComponentType('widget'))\r\n            {\r\n                var node = data.getComponent();\r\n                var buttons = {\r\n                    \"edit\": {\r\n                        title: this.lang.get('edit'),\r\n                        api: 'plugin.widget.open',\r\n                        args: node\r\n                    },\r\n                    \"remove\": {\r\n                        title: this.lang.get('delete'),\r\n                        api: 'plugin.widget.remove',\r\n                        args: node\r\n                    }\r\n                };\r\n\r\n                contextbar.set(e, node, buttons, 'bottom');\r\n            }\r\n        },\r\n        onbutton: {\r\n            widget: {\r\n                observe: function(button)\r\n                {\r\n                    this._observeButton(button);\r\n                }\r\n            }\r\n        },\r\n\r\n        // public\r\n        start: function()\r\n        {\r\n            var obj = {\r\n                title: this.lang.get('widget'),\r\n                api: 'plugin.widget.open',\r\n                observe: 'widget'\r\n            };\r\n\r\n            var $button = this.toolbar.addButton('widget', obj);\r\n            $button.setIcon('<i class=\"re-icon-widget\"></i>');\r\n        },\r\n        open: function()\r\n\t\t{\r\n            this.$currentItem = this._getCurrent();\r\n\r\n            var options = {\r\n                title: this.lang.get('widget'),\r\n                width: '600px',\r\n                name: 'widget',\r\n                handle: 'insert',\r\n                commands: {\r\n                    insert: { title: (this.$currentItem) ? this.lang.get('save') : this.lang.get('insert') },\r\n                    cancel: { title: this.lang.get('cancel') }\r\n                }\r\n            };\r\n\r\n            this.app.api('module.modal.build', options);\r\n\t\t},\r\n        remove: function(node)\r\n        {\r\n            this.component.remove(node);\r\n        },\r\n\r\n        // private\r\n\t\t_getCurrent: function()\r\n\t\t{\r\n    \t\tvar current = this.selection.getCurrent();\r\n    \t\tvar data = this.inspector.parse(current);\r\n    \t\tif (data.isComponentType('widget'))\r\n    \t\t{\r\n        \t\treturn this.component.build(data.getComponent());\r\n    \t\t}\r\n\t\t},\r\n\t\t_insert: function(data)\r\n\t\t{\r\n    \t\tthis.app.api('module.modal.close');\r\n\r\n    \t\tif (data.widget.trim() === '')\r\n    \t\t{\r\n        \t    return;\r\n    \t\t}\r\n\r\n    \t\tvar html = (this._isHtmlString(data.widget)) ? data.widget : document.createTextNode(data.widget);\r\n            var $component = this.component.create('widget', html);\r\n            $component.attr('data-widget-code', encodeURI(data.widget.trim()));\r\n    \t\tthis.insertion.insertHtml($component);\r\n\r\n\t\t},\r\n        _isHtmlString: function(html)\r\n        {\r\n            return !(typeof html === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(html));\r\n        },\r\n\t\t_observeButton: function(button)\r\n\t\t{\r\n    \t\tvar current = this.selection.getCurrent();\r\n    \t\tvar data = this.inspector.parse(current);\r\n\r\n    \t\tif (data.isComponentType('table')) button.disable();\r\n    \t\telse button.enable();\r\n\t\t}\r\n    });\r\n})(Redactor);"]}